https://github.com/Tenacle/FifthElement.git<FAZZINI>SongListServiceTest<FAZZINI>prevSongTest<FAZZINI>{    classUnderTest.getSongAtIndex(1);    fifthelement.theelement.objects.Song prevSong = classUnderTest.goToPrevSong();    org.junit.Assert.assertTrue("Prev function did not retrieve the 'prev' song in list", prevSong.getName().equals("Pristine"));}<FAZZINI>getName<FAZZINI>{    return songName;}<FAZZINI>none-fazzini<FAZZINI>getName()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("Prev function did not retrieve the 'prev' song in list", prevSong.getName().equals("Pristine"))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>CancelParticipantSelectionHandlerTest<FAZZINI>ShouldInactivateWhenMemberIsNotSelected<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);    org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean selectedStatus = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    return !selectedStatus;}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SettingActivityHandlerTest<FAZZINI>ShouldHandleResultForProperRequestCode<FAZZINI>{    org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode()))<FAZZINI>
https://github.com/GroopyMusic/GroopyApp.git<FAZZINI>PayPresenterTest<FAZZINI>testEmailValidation3<FAZZINI>{    org.junit.Assert.assertFalse(presenter.validateEmail("mon_email.gmail.co.uk"));}<FAZZINI>validateEmail<FAZZINI>{    if (email == null) {        return false;    }    java.lang.String regExpn = (((("^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@" + "((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?") + "[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.") + "([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?") + "[0-9]{1,2}|25[0-5]|2[0-4][0-9])){1}|") + "([a-zA-Z]+[\\w-]+\\.)+[a-zA-Z]{2,4})$";    java.lang.CharSequence inputStr = email;    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regExpn, java.util.regex.Pattern.CASE_INSENSITIVE);    java.util.regex.Matcher matcher = pattern.matcher(inputStr);    return matcher.matches();}<FAZZINI>["mon_email.gmail.co.uk"]<FAZZINI>validateEmail(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertFalse(presenter.validateEmail("mon_email.gmail.co.uk"))<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AlbumServiceTest<FAZZINI>getAllAlbumsTest<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Album> albums = classUnderTest.getAlbums();    org.junit.Assert.assertTrue("getAllAlbumsTest: album size != 3", albums.size() == 3);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("getAllAlbumsTest: album size != 3", albums.size() == 3)<FAZZINI>
https://github.com/charlesmadere/that-lil-hummingbird.git<FAZZINI>FeedTest<FAZZINI>testHasUsers<FAZZINI>{    org.junit.Assert.assertTrue(mFeed.hasUsers());}<FAZZINI>hasUsers<FAZZINI>{    return (mUsers != null) && (!mUsers.isEmpty());}<FAZZINI>none-fazzini<FAZZINI>hasUsers()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(mFeed.hasUsers())<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>EnterSourcePhraseActivityTest<FAZZINI>shouldNotStartNextActivityWhenThereIsNoSourceText<FAZZINI>{    android.app.Activity activity = helper.createActivityToTest();    org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(activity, R.id.activity_enter_source_phrase_next_label);    org.junit.Assert.assertNull(org.robolectric.Shadows.shadowOf(activity).getNextStartedActivity());}<FAZZINI>click<FAZZINI>{    activity.findViewById(resId).performClick();}<FAZZINI>[activity, R.id.activity_enter_source_phrase_next_label]<FAZZINI>click(android.app.Activity,int)<FAZZINI>[android.app.Activity, int]<FAZZINI>org.junit.Assert.assertNull(org.robolectric.Shadows.shadowOf(activity).getNextStartedActivity())<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>PowTester<FAZZINI>sqrtTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.sqrt(25), calculate("sqrt(25)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["sqrt(25)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.sqrt(25), calculate("sqrt(25)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>EditHouseholdActivityHandlerTest<FAZZINI>ShouldBeAbleToOpenWhenMenuIdMatches<FAZZINI>{    org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == MENU_ID;}<FAZZINI>[MENU_ID]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID))<FAZZINI>
https://github.com/dsolonenko/financisto.git<FAZZINI>TransactionsTotalCalculatorTest<FAZZINI>should_calculate_account_total_in_home_currency_with_big_amounts<FAZZINI>{    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2012, 1, 10)).amount(45000000000L).create();    org.junit.Assert.assertEquals(45000000000L + ((long) ((((((-100.0F) + 100.0F) - 50.0F) - 450.0F) - 50.0F) - 150.0F)), c.getAccountBalance(c1, a1.id).balance);}<FAZZINI>getAccountBalance<FAZZINI>{    ru.orangesoftware.financisto.filter.WhereFilter filter = selectedAccountOnly(this.filter, accountId);    return getBalanceInHomeCurrency(ru.orangesoftware.financisto.db.DatabaseHelper.V_BLOTTER_FOR_ACCOUNT_WITH_SPLITS, toCurrency, filter);}<FAZZINI>[c1, a1.id]<FAZZINI>getAccountBalance(ru.orangesoftware.financisto.model.Currency,long)<FAZZINI>[ru.orangesoftware.financisto.model.Currency, long]<FAZZINI>org.junit.Assert.assertEquals(45000000000L + ((long) ((((((-100.0F) + 100.0F) - 50.0F) - 450.0F) - 50.0F) - 150.0F)), c.getAccountBalance(c1, a1.id).balance)<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationTabsFragmentTest<FAZZINI>shouldNotHighlightLanguageTabBorderWhenTabIsNoLongerSelected<FAZZINI>{    getLanguageTabAtPosition(1).performClick();    android.view.View tabBorder = getLanguageTabAtPosition(0).findViewById(R.id.tab_border);    org.junit.Assert.assertEquals(R.color.colorPrimary, org.robolectric.Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId());}<FAZZINI>getLanguageTabAtPosition<FAZZINI>{    return ((android.widget.LinearLayout) (getFragmentView().findViewById(R.id.languages_scroll_list))).getChildAt(position);}<FAZZINI>[1]<FAZZINI>getLanguageTabAtPosition(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(R.color.colorPrimary, org.robolectric.Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId())<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>NumberTester<FAZZINI>numberTest6<FAZZINI>{    org.junit.Assert.assertEquals(1.0E10, calculate("1e10"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["1e10"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(1.0E10, calculate("1e10"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>DeleteMemberHandlerTest<FAZZINI>ShouldNotInactivateWhenMemberIsNotSelectedMember<FAZZINI>{    org.mockito.Mockito.when(memberMock.getId()).thenReturn(2);    org.mockito.Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));    org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean isSelectedMember = java.lang.String.valueOf(member.getId()).equals(member.getHousehold().getSelectedMemberId());    boolean refusedHousehold = member.getHousehold().getStatus().equals(com.onaio.steps.model.InterviewStatus.REFUSED);    boolean surveyDone = member.getHousehold().getStatus().equals(com.onaio.steps.model.InterviewStatus.DONE);    return (isSelectedMember || refusedHousehold) || surveyDone;}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>CancelParticipantSelectionHandlerTest<FAZZINI>ShouldNotInactivateWhenSurveyNotDone<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);    org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean selectedStatus = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    return !selectedStatus;}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate())<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testReconnectBulkSyncAddServerShopItem<FAZZINI>{    final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);    addServerShopItem(product1, null, null, null);    authenticateAndWaitSynchronizer();    disconnect();    final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);    final com.google.firebase.database.DataSnapshot shopItem2 = addServerShopItem(product2, null, null, null);    authenticateAndWaitSynchronizer();    final java.util.List<net.buggy.shoplist.model.ShopItem> shopItems = dao.getShopItems();    org.junit.Assert.assertEquals(2, shopItems.size());    assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(shopItem2))), shopItem2);}<FAZZINI>findClientEntity<FAZZINI>{    final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Entity> syncRecord = findSyncRecord(serverEntity);    if (syncRecord == null) {        return null;    }    if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Category.class)) {        return ((T) (dao.findCategory(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Product.class)) {        return ((T) (dao.findProduct(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.ShopItem.class)) {        return ((T) (dao.findShopItem(syncRecord.getInternalId())));    }    throw new java.lang.IllegalStateException("Unsupported class " + syncRecord.getEntityClass());}<FAZZINI>[shopItem2]<FAZZINI>findClientEntity(com.google.firebase.database.DataSnapshot)<FAZZINI>[com.google.firebase.database.DataSnapshot]<FAZZINI>org.junit.Assert.assertEquals(2, shopItems.size())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>MailToTest<FAZZINI>testCaseInsensitiveParamWrapper<FAZZINI>{    android.net.Uri uri = android.net.Uri.parse("scheme://authority?a=one&b=two&c=three");    com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);    java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("b");    org.junit.Assert.assertThat(java.util.Collections.singletonList("two"), org.hamcrest.CoreMatchers.is(result));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[result]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(java.util.Collections.singletonList("two"), org.hamcrest.CoreMatchers.is(result))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>MathTester<FAZZINI>minTest2<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.min(2, 5), calculate("min(2,5)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["min(2,5)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.min(2, 5), calculate("min(2,5)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/malmstein/yahnac.git<FAZZINI>CommentsParserTest<FAZZINI>returnsCommentLevel<FAZZINI>{    int level = storyCommentsParser.parseLevel(secondRowElement);    org.junit.Assert.assertEquals(0, level);}<FAZZINI>parseLevel<FAZZINI>{    java.lang.String levelSpacerWidth = rowLevelElement.select("img").first().attr("width");    int level = 0;    if (levelSpacerWidth != null) {        level = java.lang.Integer.parseInt(levelSpacerWidth);    }    return level;}<FAZZINI>[secondRowElement]<FAZZINI>parseLevel(org.jsoup.nodes.Element)<FAZZINI>[org.jsoup.nodes.Element]<FAZZINI>org.junit.Assert.assertEquals(0, level)<FAZZINI>
https://github.com/hei-connect/android.git<FAZZINI>CameraUtilTest<FAZZINI>toByteArray<FAZZINI>{    byte[] expected = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH);    byte[] actual = com.truethat.android.common.util.CameraUtil.toByteArray(com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(expected));    org.junit.Assert.assertArrayEquals(expected, actual);}<FAZZINI>bitmapBytesToMockedImage<FAZZINI>{    android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeByteArray(bitmapBytes, 0, bitmapBytes.length);    android.media.Image.Plane mockedPlane = org.mockito.Mockito.mock(Image.Plane.class);    org.mockito.Mockito.when(mockedPlane.getBuffer()).thenReturn(java.nio.ByteBuffer.wrap(bitmapBytes));    org.mockito.Mockito.when(mockedPlane.getPixelStride()).thenReturn(1);    org.mockito.Mockito.when(mockedPlane.getRowStride()).thenReturn(bitmap.getWidth());    android.media.Image mockedImage = org.mockito.Mockito.mock(android.media.Image.class);    org.mockito.Mockito.when(mockedImage.getHeight()).thenReturn(bitmap.getHeight());    org.mockito.Mockito.when(mockedImage.getWidth()).thenReturn(bitmap.getWidth());    org.mockito.Mockito.when(mockedImage.getFormat()).thenReturn(android.graphics.ImageFormat.FLEX_RGB_888);    org.mockito.Mockito.when(mockedImage.getTimestamp()).thenReturn(0L);    org.mockito.Mockito.when(mockedImage.getCropRect()).thenReturn(new android.graphics.Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()));    org.mockito.Mockito.when(mockedImage.getPlanes()).thenReturn(new android.media.Image.Plane[]{ mockedPlane });    return mockedImage;}<FAZZINI>[expected]<FAZZINI>bitmapBytesToMockedImage(byte[])<FAZZINI>[byte[]]<FAZZINI>org.junit.Assert.assertArrayEquals(expected, actual)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>BasicTester<FAZZINI>additionTest3<FAZZINI>{    org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["1e+9 + 1e-9"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>PickImageHandlerTest<FAZZINI>canHandleResult<FAZZINI>{    org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode()))<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testNoAnotherUserSyncDeleteClientProduct<FAZZINI>{    final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);    setUnitTestFirebaseUser("AnotherUser");    authenticateAndWaitSynchronizer();    disconnect();    setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);    authenticateAndWaitSynchronizer();    setUnitTestFirebaseUser("AnotherUser");    dao.removeProduct(product);    waitBackgroundTasks();    final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");    org.junit.Assert.assertEquals(1, productsList.getChildrenCount());}<FAZZINI>getEntityListSnapshot<FAZZINI>{    com.google.firebase.database.DataSnapshot lists = getAllListsSnapshot();    final com.google.firebase.database.DataSnapshot listNode = lists.child(listKey);    org.junit.Assert.assertNotNull(listKey + " should not be null", listNode);    return listNode;}<FAZZINI>["products"]<FAZZINI>getEntityListSnapshot(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(1, productsList.getChildrenCount())<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testBulkSyncAddMultipleServerProductsWithCategories<FAZZINI>{    final com.google.firebase.database.DataSnapshot serverCategory1 = addServerCategory("category1", 100);    final com.google.firebase.database.DataSnapshot serverCategory2 = addServerCategory("category2", null);    final com.google.firebase.database.DataSnapshot serverProduct1 = addServerProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS, serverCategory1.getKey(), serverCategory2.getKey());    final com.google.firebase.database.DataSnapshot serverProduct2 = addServerProduct("product2", null, null, null, serverCategory1.getKey());    final com.google.firebase.database.DataSnapshot serverProduct3 = addServerProduct("product3", net.buggy.shoplist.model.UnitOfMeasure.LITER, 1, net.buggy.shoplist.model.PeriodType.WEEKS, serverCategory2.getKey());    authenticateAndWaitSynchronizer();    final java.util.List<net.buggy.shoplist.model.Product> products = dao.getProducts();    org.junit.Assert.assertEquals(3, products.size());    assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct1))), serverProduct1);    assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct2))), serverProduct2);    assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct3))), serverProduct3);}<FAZZINI>findClientEntity<FAZZINI>{    final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Entity> syncRecord = findSyncRecord(serverEntity);    if (syncRecord == null) {        return null;    }    if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Category.class)) {        return ((T) (dao.findCategory(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Product.class)) {        return ((T) (dao.findProduct(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.ShopItem.class)) {        return ((T) (dao.findShopItem(syncRecord.getInternalId())));    }    throw new java.lang.IllegalStateException("Unsupported class " + syncRecord.getEntityClass());}<FAZZINI>[serverProduct1]<FAZZINI>findClientEntity(com.google.firebase.database.DataSnapshot)<FAZZINI>[com.google.firebase.database.DataSnapshot]<FAZZINI>org.junit.Assert.assertEquals(3, products.size())<FAZZINI>
https://github.com/artem122ya/TomatoTimer-Android.git<FAZZINI>TimerServiceTest<FAZZINI>stopTimer_shouldChangeStateToStopped_whenCalled<FAZZINI>{    timerService.startTimer();    timerService.stopTimer();    org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.TimerState.STOPPED, timerService.getCurrentTimerState());}<FAZZINI>getCurrentTimerState<FAZZINI>{    return timerState;}<FAZZINI>none-fazzini<FAZZINI>getCurrentTimerState()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.TimerState.STOPPED, timerService.getCurrentTimerState())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>EditParticipantActivityTest<FAZZINI>ShouldFinishTheActivityOnCancel<FAZZINI>{    editParticipantActivity.cancel(null);    org.junit.Assert.assertTrue(editParticipantActivity.isFinishing());}<FAZZINI>cancel<FAZZINI>{    finish();}<FAZZINI>[null]<FAZZINI>cancel(android.view.View)<FAZZINI>[android.view.View]<FAZZINI>org.junit.Assert.assertTrue(editParticipantActivity.isFinishing())<FAZZINI>
https://github.com/etp404/frenchverbinator.git<FAZZINI>ConjugatorTest<FAZZINI>testThat_Aimer_Present_ThirdPersonPluralIsConjugatedAsExpected<FAZZINI>{    uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative());    org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Ils aiment"), conjugatedVerbWithPronoun);}<FAZZINI>getConjugationOf<FAZZINI>{    uk.co.mould.matt.conjugators.VerbConjugator conjugator = tenseToConjugator.get(verbMoodAndTense.getClass());    uk.co.mould.matt.data.Conjugation conjugation = conjugator.conjugate(infinitiveVerb, person, verbMoodAndTense);    return pronounHandler.addPronoun(conjugation, person);}<FAZZINI>[new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative()]<FAZZINI>getConjugationOf(uk.co.mould.matt.data.InfinitiveVerb,uk.co.mould.matt.data.Persons$Person,uk.co.mould.matt.data.tenses.MoodAndTense)<FAZZINI>[uk.co.mould.matt.data.InfinitiveVerb, uk.co.mould.matt.data.Persons.Person, uk.co.mould.matt.data.tenses.MoodAndTense]<FAZZINI>org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Ils aiment"), conjugatedVerbWithPronoun)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>ShareHandlerTest<FAZZINI>shouldNotOpen<FAZZINI>{    org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == com.onaio.steps.handler.actions.ShareHandler.MENU_ID;}<FAZZINI>[R.id.importCodeImageBtn]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>DataProviderActivityTest<FAZZINI>testReturnedIntentShouldReturnNonNullIntent<FAZZINI>{    org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent());}<FAZZINI>returnedIntent<FAZZINI>{    return new android.content.Intent();}<FAZZINI>none-fazzini<FAZZINI>returnedIntent()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>HouseholdListActivityTest<FAZZINI>ShouldGetProperResultHandlers<FAZZINI>{    java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();    org.junit.Assert.assertEquals(2, resultHandlers.size());}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(2, resultHandlers.size())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>PreviewTextExtractorTest<FAZZINI>extractPreview_shouldStripQuoteHeaderAndQuotedText<FAZZINI>{    java.lang.String text = ((("" + "some text\r\n") + "On 01/02/03 someone wrote\r\n") + "> some quoted text\r\n") + "# some other quoted text\r\n";    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);    java.lang.String preview = previewTextExtractor.extractPreview(part);    org.junit.Assert.assertEquals("some text", preview);}<FAZZINI>extractPreview<FAZZINI>{    java.lang.String text = com.fsck.k9.mail.internet.MessageExtractor.getTextFromPart(textPart, com.fsck.k9.message.extractors.PreviewTextExtractor.MAX_CHARACTERS_CHECKED_FOR_PREVIEW);    if (text == null) {        throw new com.fsck.k9.message.extractors.PreviewExtractionException("Couldn't get text from part");    }    java.lang.String plainText = convertFromHtmlIfNecessary(textPart, text);    return stripTextForPreview(plainText);}<FAZZINI>[part]<FAZZINI>extractPreview(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertEquals("some text", preview)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenLocationUpdatesAreRequestedThenAGPSListenerIsAddedToTheLocationManager<FAZZINI>{    groceryStoreManager.listenForLocationUpdates(false);    java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();    org.junit.Assert.assertFalse(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER));}<FAZZINI>get<FAZZINI>null<FAZZINI>[0]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertFalse(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>SummaryActivityTest<FAZZINI>shouldNotBeNull<FAZZINI>{    android.app.Activity activity = helper.createActivityToTest();    org.junit.Assert.assertNotNull(activity);}<FAZZINI>createActivityToTest<FAZZINI>{    android.content.Intent intent = new android.content.Intent();    org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = new org.mercycorps.translationcards.activity.addTranslation.NewTranslation(dictionary);    org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext context = new org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext(java.util.Collections.singletonList(newTranslation));    intent.putExtra(org.mercycorps.translationcards.util.AddTranslationActivityHelper.CONTEXT_INTENT_KEY, context);    return getActivityWithIntent(intent);}<FAZZINI>none-fazzini<FAZZINI>createActivityToTest()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(activity)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>ReminderSwipeListenerTest<FAZZINI>givenAReminderWhenTheReminderIsSwipedLeftThenItIsDismissed<FAZZINI>{    com.groceryreminder.views.reminders.ReminderSwipeListener swipeListener = new com.groceryreminder.views.reminders.ReminderSwipeListener(defaultReminders, adapter);    swipeListener.onDismissedBySwipeLeft(recyclerView, new int[]{ 0 });    org.junit.Assert.assertTrue(defaultReminders.isEmpty());}<FAZZINI>isEmpty<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>isEmpty()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(defaultReminders.isEmpty())<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>ReminderContentProviderTest<FAZZINI>whenRemindersAreQueriedThenTheRequestedProjectsShouldBeReturned<FAZZINI>{    android.content.ContentValues values = createDefaultReminderValues();    provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);    android.database.Cursor cursor = provider.query(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, new java.lang.String[]{ com.groceryreminder.data.ReminderContract.Reminders._ID }, "", null, null);    org.junit.Assert.assertEquals(0, cursor.getColumnIndex(com.groceryreminder.data.ReminderContract.Reminders._ID));    cursor.close();    cursor = null;}<FAZZINI>query<FAZZINI>{    android.database.sqlite.SQLiteQueryBuilder queryBuilder = new android.database.sqlite.SQLiteQueryBuilder();    queryBuilder.setTables(com.groceryreminder.data.DBSchema.REMINDERS);    android.database.Cursor cursor = queryBuilder.query(reminderDBHelper.getReadableDatabase(), projection, selection, selectionArgs, null, null, sortOrder);    cursor.setNotificationUri(getContext().getContentResolver(), com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI);    return cursor;}<FAZZINI>[com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, new java.lang.String[]{ com.groceryreminder.data.ReminderContract.Reminders._ID }, "", null, null]<FAZZINI>query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)<FAZZINI>[android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(0, cursor.getColumnIndex(com.groceryreminder.data.ReminderContract.Reminders._ID))<FAZZINI>
https://github.com/dsolonenko/financisto.git<FAZZINI>CurrencyTest<FAZZINI>should_return_empty_currency_if_there_are_no_currencies<FAZZINI>{    org.junit.Assert.assertEquals("", db.getHomeCurrency().name);}<FAZZINI>getHomeCurrency<FAZZINI>{    ru.orangesoftware.orb.Query<ru.orangesoftware.financisto.model.Currency> q = createQuery(ru.orangesoftware.financisto.model.Currency.class);    q.where(ru.orangesoftware.orb.Expressions.eq("isDefault", "1"));    ru.orangesoftware.financisto.model.Currency homeCurrency = q.uniqueResult();    if (homeCurrency == null) {        homeCurrency = ru.orangesoftware.financisto.model.Currency.EMPTY;    }    return homeCurrency;}<FAZZINI>none-fazzini<FAZZINI>getHomeCurrency()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("", db.getHomeCurrency().name)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>ExportHandlerTest<FAZZINI>ShouldCheckActivityOpensWhenProperIdMatches<FAZZINI>{    org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == MENU_ID;}<FAZZINI>[R.id.action_export]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export))<FAZZINI>
https://github.com/WrenSecurity/forgerock-authenticator-android.git<FAZZINI>IdentityDatabaseTest<FAZZINI>cannotAddMechanismWithoutFirstAddingIdentity<FAZZINI>{    org.junit.Assert.assertEquals(database.addMechanism(BASIC_MECHANISM), -1);}<FAZZINI>addMechanism<FAZZINI>{    java.lang.String issuer = mechanism.getOwner().getIssuer();    java.lang.String accountName = mechanism.getOwner().getAccountName();    java.lang.String type = mechanism.getInfo().getMechanismString();    int version = mechanism.getVersion();    java.lang.String options = gson.toJson(mechanism.asMap());    android.content.ContentValues values = new android.content.ContentValues();    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ISSUER, issuer);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ACCOUNT_NAME, accountName);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.TYPE, type);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.VERSION, version);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.OPTIONS, options);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_UID, mechanism.getMechanismUID());    long rowId = database.insert(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_TABLE_NAME, null, values);    return rowId;}<FAZZINI>[BASIC_MECHANISM]<FAZZINI>addMechanism(com.forgerock.authenticator.mechanisms.base.Mechanism)<FAZZINI>[com.forgerock.authenticator.mechanisms.base.Mechanism]<FAZZINI>org.junit.Assert.assertEquals(database.addMechanism(BASIC_MECHANISM), -1)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AlbumPersistenceTest<FAZZINI>testInvalidGetAlbumById<FAZZINI>{    java.util.UUID genUuid = java.util.UUID.randomUUID();    fifthelement.theelement.objects.Album album = classUnderTest.getAlbumByUUID(genUuid);    org.junit.Assert.assertTrue("testInvalidGetAlbumById: album != null", album == null);}<FAZZINI>getAlbumByUUID<FAZZINI>{    if (uuid == null) {        throw new java.lang.IllegalArgumentException("Cannot get album with a null UUID");    }    for (fifthelement.theelement.objects.Album a : this.albumList) {        if (a.getUUID().compareTo(uuid) == 0) {            return a;        }    }    return null;}<FAZZINI>[genUuid]<FAZZINI>getAlbumByUUID(java.util.UUID)<FAZZINI>[java.util.UUID]<FAZZINI>org.junit.Assert.assertTrue("testInvalidGetAlbumById: album != null", album == null)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>PowTester<FAZZINI>expTest3<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.exp(0), calculate("exp(0)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["exp(0)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.exp(0), calculate("exp(0)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreLocationContentProviderTest<FAZZINI>givenASelectionIsProvidedWhenALocationIsDeletedThenADeletionWillOccur<FAZZINI>{    java.lang.String testName = "test";    android.content.ContentValues values = locationValuesBuilder.createDefaultLocationValues().withName(testName).build();    provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);    java.lang.String selection = com.groceryreminder.data.ReminderContract.Locations.NAME + " = ? ";    java.lang.String[] selectionArgs = new java.lang.String[]{ testName };    int count = provider.delete(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, selection, selectionArgs);    org.junit.Assert.assertEquals(1, count);}<FAZZINI>delete<FAZZINI>{    android.database.sqlite.SQLiteDatabase writableDatabase = reminderDBHelper.getWritableDatabase();    int deletedCount = 0;    switch (com.groceryreminder.data.GroceryStoreLocationContentProvider.URI_MATCHER.match(uri)) {        case com.groceryreminder.data.GroceryStoreLocationContentProvider.LOCATION_LIST :            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.LOCATIONS, selection, selectionArgs);            break;        case com.groceryreminder.data.GroceryStoreLocationContentProvider.LOCATION_ITEM_ID :            java.lang.String id = uri.getLastPathSegment();            java.lang.String whereClause = (com.groceryreminder.data.ReminderContract.Locations._ID + " = ") + id;            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.LOCATIONS, whereClause, selectionArgs);            break;    }    if (deletedCount > 0) {        getContext().getContentResolver().notifyChange(uri, null);    }    return deletedCount;}<FAZZINI>[com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, selection, selectionArgs]<FAZZINI>delete(android.net.Uri,java.lang.String,java.lang.String[])<FAZZINI>[android.net.Uri, java.lang.String, java.lang.String[]]<FAZZINI>org.junit.Assert.assertEquals(1, count)<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>MyDeckAdapterTest<FAZZINI>shouldHaveClickListenerWhenDeleteDeckMenuItemIsClicked<FAZZINI>{    android.widget.PopupMenu popupMenu = openDeckPopupMenu();    org.junit.Assert.assertNotNull(org.robolectric.Shadows.shadowOf(popupMenu).getOnMenuItemClickListener());}<FAZZINI>openDeckPopupMenu<FAZZINI>{    android.view.View deckMenu = view.findViewById(R.id.deck_menu);    deckMenu.performClick();    return org.robolectric.shadows.ShadowPopupMenu.getLatestPopupMenu();}<FAZZINI>none-fazzini<FAZZINI>openDeckPopupMenu()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(org.robolectric.Shadows.shadowOf(popupMenu).getOnMenuItemClickListener())<FAZZINI>
https://github.com/wilmol/Sleep-Easy.git<FAZZINI>TestTime12HourFormatAddMethod<FAZZINI>add90PmToAm<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(11, 00, false);    java.lang.String result = time.addNinteyMinutesXTimes(1).toString();    org.junit.Assert.assertEquals("12:30AM", result);}<FAZZINI>addNinteyMinutesXTimes<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(_hour, _minute, _isAM);    while ((x--) > 0) {        time = time.addNinteyMinutes();    }     return time;}<FAZZINI>[1]<FAZZINI>addNinteyMinutesXTimes(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals("12:30AM", result)<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>CalibrationProtocolTest<FAZZINI>testReadDoubleByteGz<FAZZINI>{    double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_ACCELERATION_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_HIGH_BYTE);    org.junit.Assert.assertEquals(24785, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA);}<FAZZINI>readDoubleByte<FAZZINI>{    int low = packet[lowByteIndex] & 0xff;    int high = packet[highByteIndex] & 0xff;    int combined = (high * 256) + low;    if (combined > 32768) {        combined -= 65536;    }    return combined;}<FAZZINI>[TEST_ACCELERATION_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_HIGH_BYTE]<FAZZINI>readDoubleByte(byte[],int,int)<FAZZINI>[byte[], int, int]<FAZZINI>org.junit.Assert.assertEquals(24785, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA)<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>DateTimeIterableFieldAdapterTest<FAZZINI>testSetInDoubleAllDay<FAZZINI>{    android.content.ContentValues values = new android.content.ContentValues();    org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");    adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109"), org.dmfs.rfc5545.DateTime.parse("20180110")));    org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109,20180110"));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>["20180109,20180110"]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109,20180110"))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>NumberTester<FAZZINI>exponentCalculatedCorrectly<FAZZINI>{    org.junit.Assert.assertEquals(2.0E-10, calculate("2e-10"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["2e-10"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(2.0E-10, calculate("2e-10"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/Teester/Whats-Nearby.git<FAZZINI>PoiListTest<FAZZINI>checkPoiListIsCleared<FAZZINI>{    com.teester.whatsnearby.data.PoiList.getInstance().clearPoiList();    java.util.List<com.teester.whatsnearby.data.OsmObject> actualResult = com.teester.whatsnearby.data.PoiList.getInstance().getPoiList();    org.junit.Assert.assertEquals(0, actualResult.size());}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, actualResult.size())<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>closestApproachTime_northSouthHeadOn<FAZZINI>{    final double lat1 = 45;    final double lat2 = 46;    final double lon1 = -95;    final double lon2 = -95;    final int velocity1 = 60;    final int velocity2 = 60;    final float heading1 = 180;    final float heading2 = 0;    final double caTime = com.ds.avare.adsb.AudibleTrafficAlerts.closestApproachTime(lat1, lon1, lat2, lon2, heading1, heading2, velocity1, velocity2);    org.junit.Assert.assertEquals("Closest approach seconds", 0.5, java.lang.Math.abs(caTime), 0.1);}<FAZZINI>abs<FAZZINI>{    return java.lang.Double.longBitsToDouble(java.lang.Double.doubleToRawLongBits(a) & jdk.internal.math.DoubleConsts.MAG_BIT_MASK);}<FAZZINI>[caTime]<FAZZINI>abs(double)<FAZZINI>[double]<FAZZINI>org.junit.Assert.assertEquals("Closest approach seconds", 0.5, java.lang.Math.abs(caTime), 0.1)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>DataValidatorTest<FAZZINI>validateStringShouldFail<FAZZINI>{    java.lang.String nullString = null;    dataValidator.validate("", "String error");    dataValidator.validate(nullString, "String error");    java.util.List<java.lang.String> errors = dataValidator.finish();    org.junit.Assert.assertEquals(2, errors.size());}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(2, errors.size())<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>TerceraFormaNormalTest<FAZZINI>justificaMiFN<FAZZINI>{    org.junit.Assert.assertEquals((("Esta en 3ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.TerceraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.JustificaMiFN());}<FAZZINI>JustificaMiFN<FAZZINI>{    return ("Esta en 3ra Forma Normal :\nPor la dependencia Funcional " + dependenciaFuncional.toString()) + ". ";}<FAZZINI>none-fazzini<FAZZINI>JustificaMiFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals((("Esta en 3ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.TerceraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.JustificaMiFN())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SettingActivityHandlerTest<FAZZINI>ShouldNotHandleResultForOtherRequestCode<FAZZINI>{    org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()))<FAZZINI>
https://github.com/gelin/weather-notification.git<FAZZINI>OpenWeatherMapWeatherTest<FAZZINI>testGetForecastURL<FAZZINI>{    ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);    org.junit.Assert.assertEquals(new java.net.URL("https://openweathermap.org/city/1496153"), weather.getForecastURL());}<FAZZINI>getForecastURL<FAZZINI>{    return this.forecastURL;}<FAZZINI>none-fazzini<FAZZINI>getForecastURL()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(new java.net.URL("https://openweathermap.org/city/1496153"), weather.getForecastURL())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>NotificationDataTest<FAZZINI>testGetAccount<FAZZINI>{    org.junit.Assert.assertEquals(account, notificationData.getAccount());}<FAZZINI>getAccount<FAZZINI>{    return account;}<FAZZINI>none-fazzini<FAZZINI>getAccount()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(account, notificationData.getAccount())<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderRecurrenceTest<FAZZINI>testRRuleWith2ndOverrideAndCompleted1st<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskOverride = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.Put<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.opentaskspal.tasks.TitleData("override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Assert<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, taskOverride, new org.dmfs.opentaskstestpal.InstanceTestData(second.addDuration(hour), second.addDuration(hour).addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0)))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.Put<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.opentaskspal.tasks.TitleData("override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Assert<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, taskOverride, new org.dmfs.opentaskstestpal.InstanceTestData(second.addDuration(hour), second.addDuration(hour).addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0)))))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>CancelParticipantSelectionHandlerTest<FAZZINI>ShouldNotBeAbleToOpenForDifferentMenuId<FAZZINI>{    org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == MENU_ID;}<FAZZINI>[R.id.action_refused]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>BackHomeHandlerTest<FAZZINI>ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches<FAZZINI>{    org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home));}<FAZZINI>shouldOpen<FAZZINI>{    return android.R.id.home == menu_id;}<FAZZINI>[android.R.id.home]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>atanTest4<FAZZINI>{    org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.atan(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("atan(tan(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), angleUnits);}<FAZZINI>["atan(tan(45))", com.guliash.parser.AngleUnits.DEG]<FAZZINI>calculate(java.lang.String,com.guliash.parser.AngleUnits)<FAZZINI>[java.lang.String, com.guliash.parser.AngleUnits]<FAZZINI>org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.atan(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("atan(tan(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>MyDeckAdapterTest<FAZZINI>shouldShowShareButtonWhenMenuIsClicked<FAZZINI>{    android.widget.PopupMenu popupMenu = openDeckPopupMenu();    org.junit.Assert.assertEquals("Share", popupMenu.getMenu().findItem(R.id.share_deck).toString());}<FAZZINI>openDeckPopupMenu<FAZZINI>{    android.view.View deckMenu = view.findViewById(R.id.deck_menu);    deckMenu.performClick();    return org.robolectric.shadows.ShadowPopupMenu.getLatestPopupMenu();}<FAZZINI>none-fazzini<FAZZINI>openDeckPopupMenu()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("Share", popupMenu.getMenu().findItem(R.id.share_deck).toString())<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>MetadataTranslaterTest<FAZZINI>testConnectedSurveyIsTranslatedToJson<FAZZINI>{    org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();    org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.mockSurveyUri(survey, "basic");    org.hwyl.sexytopo.model.survey.Survey connectedSurvey = new org.hwyl.sexytopo.model.survey.Survey();    org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.mockSurveyUri(connectedSurvey, "connected");    org.hwyl.sexytopo.control.io.basic.MetadataTranslaterTest.connectTwoSurveys(survey, survey.getOrigin(), connectedSurvey, connectedSurvey.getOrigin());    java.lang.String translated = org.hwyl.sexytopo.control.io.basic.MetadataTranslater.translate(survey);    org.junit.Assert.assertEquals("{\"active-station\":\"1\",\"connections\":{\"1\":[[\"connected\",\"1\"]]}}", translated.replaceAll("\\s", ""));}<FAZZINI>replaceAll<FAZZINI>{    return java.util.regex.Pattern.compile(regex).matcher(this).replaceAll(replacement);}<FAZZINI>["\\s", ""]<FAZZINI>replaceAll(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("{\"active-station\":\"1\",\"connections\":{\"1\":[[\"connected\",\"1\"]]}}", translated.replaceAll("\\s", ""))<FAZZINI>
https://github.com/openwebnet/openwebnet-android.git<FAZZINI>EnergyModelTest<FAZZINI>testEnergyModelAddBuilder_success<FAZZINI>{    com.github.openwebnet.model.EnergyModel energy = com.github.openwebnet.model.EnergyModel.addBuilder().environment(ENERGY_ENVIRONMENT).gateway(ENERGY_GATEWAY).name(ENERGY_NAME).where(ENERGY_WHERE).version(ENERGY_VERSION).favourite(ENERGY_FAVOURITE).build();    org.junit.Assert.assertNotNull("invalid uuid", energy.getUuid());    assertCommonFields(energy);}<FAZZINI>assertCommonFields<FAZZINI>{    org.junit.Assert.assertEquals("invalid environmentId", ENERGY_ENVIRONMENT, energy.getEnvironmentId());    org.junit.Assert.assertEquals("invalid gatewayUuid", ENERGY_GATEWAY, energy.getGatewayUuid());    org.junit.Assert.assertEquals("invalid name", ENERGY_NAME, energy.getName());    org.junit.Assert.assertEquals("invalid where", ENERGY_WHERE, energy.getWhere());    org.junit.Assert.assertEquals("invalid version", ENERGY_VERSION, energy.getEnergyManagementVersion());    org.junit.Assert.assertEquals("invalid favourite", ENERGY_FAVOURITE, energy.isFavourite());}<FAZZINI>[energy]<FAZZINI>assertCommonFields(com.github.openwebnet.model.EnergyModel)<FAZZINI>[com.github.openwebnet.model.EnergyModel]<FAZZINI>org.junit.Assert.assertNotNull("invalid uuid", energy.getUuid())<FAZZINI>
https://github.com/yasmindunsky/FrizzleApp.git<FAZZINI>CodeCheckUtilsTest<FAZZINI>checkIfContainsSpeakOutAndString_containsAndShouldnt_false<FAZZINI>{    java.lang.String code = "speakOut(\"hello\");";    boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsSpeakOutAndString(code, "hello", false);    org.junit.Assert.assertEquals(false, answer);}<FAZZINI>checkIfContainsSpeakOutAndString<FAZZINI>{    boolean correct;    string = string.trim().toLowerCase();    boolean containsString = code.toLowerCase().contains(string);    correct = shouldContain == containsString;    correct &= code.contains(com.frizzl.app.frizzleapp.CodeCheckUtils.speakOutIdentification);    code = code.replaceAll("\\s+", "");    correct &= code.contains("(\"");    correct &= code.contains("\");");    int numOfParentheses = code.length() - code.replace("\"", "").length();    correct &= numOfParentheses == 2;    return correct;}<FAZZINI>[code, "hello", false]<FAZZINI>checkIfContainsSpeakOutAndString(java.lang.String,java.lang.String,boolean)<FAZZINI>[java.lang.String, java.lang.String, boolean]<FAZZINI>org.junit.Assert.assertEquals(false, answer)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>NotificationIdsTest<FAZZINI>getNewMailStackedNotificationId_withDefaultAccount<FAZZINI>{    com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);    int notificationIndex = 0;    int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);    org.junit.Assert.assertEquals(7, notificationId);}<FAZZINI>getNewMailStackedNotificationId<FAZZINI>{    if ((index < 0) || (index >= com.fsck.k9.notification.NotificationIds.NUMBER_OF_STACKED_NOTIFICATIONS)) {        throw new java.lang.IndexOutOfBoundsException("Invalid value: " + index);    }    return (com.fsck.k9.notification.NotificationIds.getBaseNotificationId(account) + com.fsck.k9.notification.NotificationIds.OFFSET_NEW_MAIL_STACKED) + index;}<FAZZINI>[account, notificationIndex]<FAZZINI>getNewMailStackedNotificationId(com.fsck.k9.Account,int)<FAZZINI>[com.fsck.k9.Account, int]<FAZZINI>org.junit.Assert.assertEquals(7, notificationId)<FAZZINI>
https://github.com/MrR0bo7/FreezerManager.git<FAZZINI>ItemTest<FAZZINI>testConstructorWithName<FAZZINI>{    java.lang.String expected = "Ice Cream";    de.geek_hub.freezermanager.Item classUnderTest = new de.geek_hub.freezermanager.Item(expected);    org.junit.Assert.assertEquals("Name does not match", expected, classUnderTest.getName());}<FAZZINI>getName<FAZZINI>{    return name;}<FAZZINI>none-fazzini<FAZZINI>getName()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("Name does not match", expected, classUnderTest.getName())<FAZZINI>
https://github.com/GroopyMusic/GroopyApp.git<FAZZINI>AudiencePresenterTest<FAZZINI>filterInFail<FAZZINI>{    java.lang.String pattern = "11";    java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.IN);    org.junit.Assert.assertEquals(0, filtered.size());}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, filtered.size())<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderRecurrenceTest<FAZZINI>testRRuleWithExDates<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z,20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z,20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))))<FAZZINI>
https://github.com/TimLavers/IndoFlashJava.git<FAZZINI>WordListSpecTest<FAZZINI>toStringTest<FAZZINI>{    java.lang.String title = "The title";    org.junit.Assert.assertEquals(title, org.grandtestauto.indoflash.spec.WordListSpecTest.wordListSpec(title, "The file").toString());}<FAZZINI>wordListSpec<FAZZINI>{    return new org.grandtestauto.indoflash.spec.WordListSpec(title, fileName);}<FAZZINI>[title, "The file"]<FAZZINI>wordListSpec(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(title, org.grandtestauto.indoflash.spec.WordListSpecTest.wordListSpec(title, "The file").toString())<FAZZINI>
https://github.com/openwebnet/openwebnet-android.git<FAZZINI>GatewayEditTextPreferenceTest<FAZZINI>testValidHost<FAZZINI>{    setupDialog();    android.widget.EditText mEditTextHost = ((android.widget.EditText) (gatewayEditTextPreference.getDialog().findViewById(R.id.editTextDialogGatewayHost)));    org.junit.Assert.assertNotNull("should not be null", mEditTextHost);}<FAZZINI>setupDialog<FAZZINI>{    org.mockito.Mockito.when(utilityService.isBlankText(org.mockito.Matchers.any(android.widget.TextView.class))).thenCallRealMethod();    org.mockito.Mockito.when(utilityService.sanitizedText(org.mockito.Matchers.any(android.widget.TextView.class))).thenCallRealMethod();    com.github.openwebnet.view.settings.SettingsFragment settingsFragment = new com.github.openwebnet.view.settings.SettingsFragment();    org.robolectric.util.FragmentTestUtil.startVisibleFragment(settingsFragment);    org.junit.Assert.assertNotNull("fragment is null", settingsFragment);    android.preference.PreferenceScreen preferenceScreen = settingsFragment.getPreferenceScreen();    initGatewayEditTextPreference(preferenceScreen);    org.junit.Assert.assertTrue("should be visible", gatewayEditTextPreference.getDialog().isShowing());}<FAZZINI>none-fazzini<FAZZINI>setupDialog()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull("should not be null", mEditTextHost)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>TextPartFinderTest<FAZZINI>findFirstTextPart_withoutTextPart<FAZZINI>{    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg");    com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);    org.junit.Assert.assertNull(result);}<FAZZINI>findFirstTextPart<FAZZINI>{    java.lang.String mimeType = part.getMimeType();    com.fsck.k9.mail.Body body = part.getBody();    if (body instanceof com.fsck.k9.mail.Multipart) {        com.fsck.k9.mail.Multipart multipart = ((com.fsck.k9.mail.Multipart) (body));        if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "multipart/alternative")) {            return findTextPartInMultipartAlternative(multipart);        } else {            return findTextPartInMultipart(multipart);        }    } else if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/plain") || com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/html")) {        return part;    }    return null;}<FAZZINI>[part]<FAZZINI>findFirstTextPart(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertNull(result)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>RemoveNotificationResultTest<FAZZINI>unknownNotification_isUnknownNotification_shouldReturnTrue<FAZZINI>{    com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.unknownNotification();    org.junit.Assert.assertTrue(result.isUnknownNotification());}<FAZZINI>isUnknownNotification<FAZZINI>{    return unknownNotification;}<FAZZINI>none-fazzini<FAZZINI>isUnknownNotification()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(result.isUnknownNotification())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>HouseholdAdapterTest<FAZZINI>testGetItemIdShouldReturnOneAsLong<FAZZINI>{    org.junit.Assert.assertEquals(1, adapter.getItemId(0));}<FAZZINI>getItemId<FAZZINI>{    return java.lang.Long.parseLong(households.get(position).getId());}<FAZZINI>[0]<FAZZINI>getItemId(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(1, adapter.getItemId(0))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>PreviewTextExtractorTest<FAZZINI>extractPreview_shouldStripHorizontalRules<FAZZINI>{    java.lang.String text = ("line 1" + "------------------------------\r\n") + "line 2";    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);    java.lang.String preview = previewTextExtractor.extractPreview(part);    org.junit.Assert.assertEquals("line 1 line 2", preview);}<FAZZINI>extractPreview<FAZZINI>{    java.lang.String text = com.fsck.k9.mail.internet.MessageExtractor.getTextFromPart(textPart, com.fsck.k9.message.extractors.PreviewTextExtractor.MAX_CHARACTERS_CHECKED_FOR_PREVIEW);    if (text == null) {        throw new com.fsck.k9.message.extractors.PreviewExtractionException("Couldn't get text from part");    }    java.lang.String plainText = convertFromHtmlIfNecessary(textPart, text);    return stripTextForPreview(plainText);}<FAZZINI>[part]<FAZZINI>extractPreview(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertEquals("line 1 line 2", preview)<FAZZINI>
https://github.com/5calls/android.git<FAZZINI>StudioViewModelTest<FAZZINI>publishedFailed<FAZZINI>{    mMockWebServer.setDispatcher(new okhttp3.mockwebserver.Dispatcher() {        @java.lang.Override        public okhttp3.mockwebserver.MockResponse dispatch(okhttp3.mockwebserver.RecordedRequest request) throws java.lang.InterruptedException {            return new okhttp3.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR);        }    });    mViewModel.onPhotoTaken(createMockedImage());    assertEditState();    mViewModel.onSent();    assertSentState();    assertPublishFailed();    org.junit.Assert.assertEquals(com.truethat.android.viewmodel.StudioViewModelTest.SENT_FAILED, mView.getToastText());}<FAZZINI>getToastText<FAZZINI>{    return mToastText;}<FAZZINI>none-fazzini<FAZZINI>getToastText()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.truethat.android.viewmodel.StudioViewModelTest.SENT_FAILED, mView.getToastText())<FAZZINI>
https://github.com/OpenStack-mobile/summit-app-android.git<FAZZINI>ClassResolverTests<FAZZINI>fromName_Presentation_returnsCorrectType<FAZZINI>{    org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();    java.lang.String className = "Presentation";    java.lang.Class type = classResolver.fromName(className);    org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class);}<FAZZINI>fromName<FAZZINI>{    java.lang.String fullyQualifiedClassName = java.lang.String.format("org.openstack.android.summit.common.entities.%s", className);    java.lang.Class type = null;    if (className.equals("PresentationCategory")) {        type = org.openstack.android.summit.common.entities.Track.class;    }    if (className.equals("SummitExternalLocation")) {        type = org.openstack.android.summit.common.entities.Venue.class;    }    if (className.equals("PresentationCategoryGroup")) {        type = org.openstack.android.summit.common.entities.TrackGroup.class;    }    if (className.equals("SummitLocationMap")) {        type = org.openstack.android.summit.common.entities.Image.class;    }    if (className.equals("SummitVenueFloor")) {        type = org.openstack.android.summit.common.entities.VenueFloor.class;    }    if (className.equals("SummitLocationImage")) {        type = org.openstack.android.summit.common.entities.Image.class;    }    if ((((className.equals("MySchedule") || className.equals("MyFavorite")) || className.equals("Presentation")) || className.equals("SummitGroupEvent")) || className.equals("SummitEventWithFile")) {        type = org.openstack.android.summit.common.entities.SummitEvent.class;    }    if (className.equals("SummitEventType")) {        type = org.openstack.android.summit.common.entities.EventType.class;    }    if (className.equals("SummitVenueRoom")) {        type = org.openstack.android.summit.common.entities.VenueRoom.class;    }    if (type == null) {        try {            type = java.lang.Class.forName(fullyQualifiedClassName);        } catch (java.lang.ClassNotFoundException e) {            android.util.Log.d(org.openstack.android.summit.common.Constants.LOG_TAG, java.lang.String.format("Class with name %s not found", fullyQualifiedClassName));        }    }    if (type == null) {        try {            fullyQualifiedClassName = java.lang.String.format(java.util.Locale.US, "org.openstack.android.summit.common.entities.%s", className.replace("Summit", ""));            type = java.lang.Class.forName(fullyQualifiedClassName);        } catch (java.lang.ClassNotFoundException e) {            android.util.Log.d(org.openstack.android.summit.common.Constants.LOG_TAG, java.lang.String.format("Class with name %s not found", fullyQualifiedClassName));        }    }    if (type == null) {        fullyQualifiedClassName = java.lang.String.format(java.util.Locale.US, "%s.Summit%s", this.getClass().getPackage().getName(), className);        type = java.lang.Class.forName(fullyQualifiedClassName);    }    return type;}<FAZZINI>[className]<FAZZINI>fromName(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class)<FAZZINI>
https://github.com/charlesmadere/that-lil-hummingbird.git<FAZZINI>FeedTest<FAZZINI>testGetAnimeLibraryEntries<FAZZINI>{    final java.util.ArrayList<com.charlesmadere.hummingbird.models.AnimeLibraryEntry> libraryEntries = mFeed.getAnimeLibraryEntries();    org.junit.Assert.assertTrue((libraryEntries == null) || libraryEntries.isEmpty());}<FAZZINI>isEmpty<FAZZINI>{    return size == 0;}<FAZZINI>none-fazzini<FAZZINI>isEmpty()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue((libraryEntries == null) || libraryEntries.isEmpty())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectedParticipantActionsHandlerTest<FAZZINI>ShouldInactivateWhenMemberIsNotSelected<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);    org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean selected = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    boolean deferred = household.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    boolean incomplete = household.getStatus() == com.onaio.steps.model.InterviewStatus.INCOMPLETE;    return !((selected || deferred) || incomplete);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate())<FAZZINI>
https://github.com/Artenes/speedbro.git<FAZZINI>ContractTest<FAZZINI>appendPathToAuthority<FAZZINI>{    org.junit.Assert.assertEquals("https://www.speedrun.com/mypath", io.github.artenes.speedbro.speedrun.com.Contract.asAbsolutePath("mypath"));}<FAZZINI>asAbsolutePath<FAZZINI>{    if (relativeUri.isEmpty()) {        return relativeUri;    }    return io.github.artenes.speedbro.speedrun.com.Contract.AUTHORITY + io.github.artenes.speedbro.speedrun.com.Utils.withoutStartingSlash(relativeUri);}<FAZZINI>["mypath"]<FAZZINI>asAbsolutePath(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("https://www.speedrun.com/mypath", io.github.artenes.speedbro.speedrun.com.Contract.asAbsolutePath("mypath"))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectParticipantHandlerTest<FAZZINI>ShouldInActivateWhenThereAreNoMembers<FAZZINI>{    org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);    org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean noMember = household.numberOfNonSelectedMembers(db) == 0;    boolean noSelection = (household.getStatus() == com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE) || (household.getStatus() == com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);    return noMember || (!noSelection);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate())<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreLocationContentProviderTest<FAZZINI>whenMultipleLocationsAreDeletedThenMultipleDeletionsShouldHaveOccurred<FAZZINI>{    android.content.ContentValues values = createDefaultLocationValues();    android.content.ContentValues secondValues = createDefaultLocationValues();    secondValues.put(com.groceryreminder.data.ReminderContract.Locations.PLACES_ID, values.getAsString(com.groceryreminder.data.ReminderContract.Locations.PLACES_ID + 1));    provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);    provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, secondValues);    int count = provider.delete(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, "", null);    org.junit.Assert.assertEquals(2, count);}<FAZZINI>delete<FAZZINI>{    android.database.sqlite.SQLiteDatabase writableDatabase = reminderDBHelper.getWritableDatabase();    int deletedCount = 0;    switch (com.groceryreminder.data.GroceryStoreLocationContentProvider.URI_MATCHER.match(uri)) {        case com.groceryreminder.data.GroceryStoreLocationContentProvider.LOCATION_LIST :            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.LOCATIONS, selection, selectionArgs);            break;        case com.groceryreminder.data.GroceryStoreLocationContentProvider.LOCATION_ITEM_ID :            java.lang.String id = uri.getLastPathSegment();            java.lang.String whereClause = (com.groceryreminder.data.ReminderContract.Locations._ID + " = ") + id;            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.LOCATIONS, whereClause, selectionArgs);            break;    }    if (deletedCount > 0) {        getContext().getContentResolver().notifyChange(uri, null);    }    return deletedCount;}<FAZZINI>[com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, "", null]<FAZZINI>delete(android.net.Uri,java.lang.String,java.lang.String[])<FAZZINI>[android.net.Uri, java.lang.String, java.lang.String[]]<FAZZINI>org.junit.Assert.assertEquals(2, count)<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>PathDetailTest<FAZZINI>testIntersectsRectangleReturnsTrueForRectangleThatEntersBoundingBox<FAZZINI>{    org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);    pathDetail.lineTo(new org.hwyl.sexytopo.model.graph.Coord2D(1.5F, 1.5F));    org.junit.Assert.assertTrue(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)));}<FAZZINI>intersectsRectangle<FAZZINI>{    float left1 = rectangleTopLeft.x;    float top1 = rectangleTopLeft.y;    float right1 = rectangleBottomRight.x;    float bottom1 = rectangleBottomRight.y;    return ((right >= left1) && (left <= right1)) && ((top <= bottom1) && (bottom >= top1));}<FAZZINI>[new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)]<FAZZINI>intersectsRectangle(org.hwyl.sexytopo.model.graph.Coord2D,org.hwyl.sexytopo.model.graph.Coord2D)<FAZZINI>[org.hwyl.sexytopo.model.graph.Coord2D, org.hwyl.sexytopo.model.graph.Coord2D]<FAZZINI>org.junit.Assert.assertTrue(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)))<FAZZINI>
https://github.com/BioID-GmbH/BWS-Android.git<FAZZINI>VerificationPresenterTest<FAZZINI>verify_resetBiometricOperation<FAZZINI>{    presenter.executeVerify = true;    presenter.verify();    org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[true]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NewMemberActivityHandlerTest<FAZZINI>ShouldNotOpenForOtherMenuIdAndForRefusedState<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);    org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == R.id.action_add_member;}<FAZZINI>[R.id.action_deferred]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred))<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>ReminderContentProviderTest<FAZZINI>whenTheProviderIsCreatedThenItShouldBeInitialized<FAZZINI>{    com.groceryreminder.data.ReminderContentProvider provider = new com.groceryreminder.data.ReminderContentProvider();    org.junit.Assert.assertTrue(provider.onCreate());}<FAZZINI>onCreate<FAZZINI>{    reminderDBHelper = new com.groceryreminder.data.ReminderDBHelper(getContext());    return true;}<FAZZINI>none-fazzini<FAZZINI>onCreate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(provider.onCreate())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>QRCodeScanHandlerTest<FAZZINI>shouldOpen<FAZZINI>{    org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn));}<FAZZINI>shouldOpen<FAZZINI>{    return menu_id == com.onaio.steps.handler.actions.QRCodeScanHandler.MENU_ID;}<FAZZINI>[R.id.scanCodeBtn]<FAZZINI>shouldOpen(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn))<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>PathDetailTest<FAZZINI>testIntersectsRectangleReturnsFalseForNonIntersectingRectangle<FAZZINI>{    org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);    org.junit.Assert.assertFalse(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)));}<FAZZINI>intersectsRectangle<FAZZINI>{    float left1 = rectangleTopLeft.x;    float top1 = rectangleTopLeft.y;    float right1 = rectangleBottomRight.x;    float bottom1 = rectangleBottomRight.y;    return ((right >= left1) && (left <= right1)) && ((top <= bottom1) && (bottom >= top1));}<FAZZINI>[new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)]<FAZZINI>intersectsRectangle(org.hwyl.sexytopo.model.graph.Coord2D,org.hwyl.sexytopo.model.graph.Coord2D)<FAZZINI>[org.hwyl.sexytopo.model.graph.Coord2D, org.hwyl.sexytopo.model.graph.Coord2D]<FAZZINI>org.junit.Assert.assertFalse(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2)))<FAZZINI>
https://github.com/gelin/weather-notification.git<FAZZINI>UpdateTimeFormatTest<FAZZINI>test1Day<FAZZINI>{    org.junit.Assert.assertEquals("<1d", format(addMinutes(this.now, ((-24) * 60) + 1)));}<FAZZINI>addMinutes<FAZZINI>{    java.util.Calendar calendar = java.util.Calendar.getInstance();    calendar.setTime(date);    calendar.add(java.util.Calendar.MINUTE, minutes);    return calendar.getTime();}<FAZZINI>[this.now, ((-24) * 60) + 1]<FAZZINI>addMinutes(java.util.Date,int)<FAZZINI>[java.util.Date, int]<FAZZINI>org.junit.Assert.assertEquals("<1d", format(addMinutes(this.now, ((-24) * 60) + 1)))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationCardsISOTest<FAZZINI>shouldFetchFAIsoCodeForPersianLanguageName<FAZZINI>{    org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Persian"));}<FAZZINI>getISOCodeForLanguage<FAZZINI>{    if (language != null) {        for (java.lang.String isoCode : org.mercycorps.translationcards.porting.TranslationCardsISO.languageMap.keySet()) {            if (org.mercycorps.translationcards.porting.TranslationCardsISO.languageMap.get(isoCode).contains(org.mercycorps.translationcards.porting.TranslationCardsISO.getTitleCaseName(language.trim()))) {                return isoCode;            }        }    }    return org.mercycorps.translationcards.porting.TranslationCardsISO.INVALID_ISO_CODE;}<FAZZINI>["Persian"]<FAZZINI>getISOCodeForLanguage(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Persian"))<FAZZINI>
https://github.com/xbmc/Kore.git<FAZZINI>MusicActivityTests<FAZZINI>showArrowWhenSelectingListItem<FAZZINI>{    org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(org.xbmc.kore.tests.ui.music.MusicActivityTests.ArtistTestData.title, R.id.list);    org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow());}<FAZZINI>getActivity<FAZZINI>{    if (activityTestRule != null) {        return activityTestRule.getActivity();    }    return null;}<FAZZINI>none-fazzini<FAZZINI>getActivity()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow())<FAZZINI>
https://github.com/niteshpatel/ministocks.git<FAZZINI>NumberToolsTests<FAZZINI>trimWithNumberLessThan100AndScale4<FAZZINI>{    java.lang.String expected = "43.26";    java.lang.String result = nitezh.ministock.utils.NumberTools.trim("43.2572", java.util.Locale.US);    org.junit.Assert.assertEquals(expected, result);}<FAZZINI>trim<FAZZINI>{    char decimalFormatSymbol = new java.text.DecimalFormatSymbols(locale).getDecimalSeparator();    int digitsAfterDecimal = (value.length() - value.indexOf(decimalFormatSymbol)) - 1;    java.lang.Double p = nitezh.ministock.utils.NumberTools.parseDouble(value, locale);    int maxPrecision = java.lang.Math.min(4, digitsAfterDecimal);    return nitezh.ministock.utils.NumberTools.getTrimmedDouble(p, 6, maxPrecision);}<FAZZINI>["43.2572", java.util.Locale.US]<FAZZINI>trim(java.lang.String,java.util.Locale)<FAZZINI>[java.lang.String, java.util.Locale]<FAZZINI>org.junit.Assert.assertEquals(expected, result)<FAZZINI>
https://github.com/etp404/frenchverbinator.git<FAZZINI>ScoreTest<FAZZINI>testThatScoringTwoCorrectAnswersGivesExpectedScore<FAZZINI>{    uk.co.mould.matt.marking.Score score = new uk.co.mould.matt.marking.Score();    score.addCorrect();    score.addCorrect();    org.junit.Assert.assertThat(score.toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 2, 2)));}<FAZZINI>format<FAZZINI>{    return new java.util.Formatter().format(format, args).toString();}<FAZZINI>[uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 2, 2]<FAZZINI>format(java.lang.String,java.lang.Object[])<FAZZINI>[java.lang.String, java.lang.Object[]]<FAZZINI>org.junit.Assert.assertThat(score.toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 2, 2)))<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>XviImporterTest<FAZZINI>testGetEmptyBlockContents<FAZZINI>{    java.lang.String simpleText = "set Command{}";    java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");    org.junit.Assert.assertEquals("", contents);}<FAZZINI>getBlockContents<FAZZINI>{    outer : for (int i = 0; i < text.length(); i++) {        for (int j = 0; j < command.length(); j++) {            char text_current = text.charAt(i + j);            char command_current = command.charAt(j);            if (text_current != command_current) {                continue outer;            }        }        i += command.length();        while (java.lang.Character.isWhitespace(text.charAt(i))) {            i++;        }         if (text.charAt(i) == '{') {            i++;        } else {            continue outer;        }        int openBraces = 1;        int startOfContent = i;        for (; i < text.length(); i++) {            if (text.charAt(i) == '{') {                openBraces++;            } else if (text.charAt(i) == '}') {                openBraces--;            }            if (openBraces == 0) {                int endOfContent = i;                java.lang.String content = text.substring(startOfContent, endOfContent);                return content;            }        }        throw new java.lang.Exception("Malformed text: could not match braces");    }    throw new java.lang.Exception("Could not match command in text");}<FAZZINI>[simpleText, "set Command"]<FAZZINI>getBlockContents(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("", contents)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>PreviewTextExtractorTest<FAZZINI>extractPreview_shouldCollapseAndTrimWhitespace<FAZZINI>{    java.lang.String text = " whitespace     is\t\tfun  ";    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);    java.lang.String preview = previewTextExtractor.extractPreview(part);    org.junit.Assert.assertEquals("whitespace is fun", preview);}<FAZZINI>extractPreview<FAZZINI>{    java.lang.String text = com.fsck.k9.mail.internet.MessageExtractor.getTextFromPart(textPart, com.fsck.k9.message.extractors.PreviewTextExtractor.MAX_CHARACTERS_CHECKED_FOR_PREVIEW);    if (text == null) {        throw new com.fsck.k9.message.extractors.PreviewExtractionException("Couldn't get text from part");    }    java.lang.String plainText = convertFromHtmlIfNecessary(textPart, text);    return stripTextForPreview(plainText);}<FAZZINI>[part]<FAZZINI>extractPreview(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertEquals("whitespace is fun", preview)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>MathTester<FAZZINI>minTest3<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.min(0, 0), calculate("min(0, 0)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["min(0, 0)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.min(0, 0), calculate("min(0, 0)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectParticipantHandlerTest<FAZZINI>ShouldInActivateWhenHouseholdStatusIsDeferred<FAZZINI>{    org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);    org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean noMember = household.numberOfNonSelectedMembers(db) == 0;    boolean noSelection = (household.getStatus() == com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE) || (household.getStatus() == com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);    return noMember || (!noSelection);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>HtmlSanitizerTest<FAZZINI>shouldRemoveMetaRefreshWithSpacesInAttributeValue<FAZZINI>{    java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh \" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";    org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html));}<FAZZINI>sanitize<FAZZINI>{    org.htmlcleaner.TagNode rootNode = com.fsck.k9.helper.HtmlSanitizer.HTML_CLEANER.clean(html);    com.fsck.k9.helper.HtmlSanitizer.removeMetaRefresh(rootNode);    return com.fsck.k9.helper.HtmlSanitizer.HTML_SERIALIZER.getAsString(rootNode, "UTF8");}<FAZZINI>[html]<FAZZINI>sanitize(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html))<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenProximityAlertIsAddedThenTheRadiusIsSetToFiftyFeetInMeters<FAZZINI>{    se.walkercrou.places.Place place = createDefaultGooglePlace();    java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();    places.add(place);    groceryStoreManager.addProximityAlerts(places);    com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());    org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS, proximityAlert.getRadius(), 0.001);}<FAZZINI>getRadius<FAZZINI>{    return radius;}<FAZZINI>none-fazzini<FAZZINI>getRadius()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS, proximityAlert.getRadius(), 0.001)<FAZZINI>
https://github.com/dsolonenko/financisto.git<FAZZINI>QifExportTest<FAZZINI>should_export_only_selected_accounts<FAZZINI>{    createSampleData();    org.junit.Assert.assertEquals(((((((((("!Account\n" + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "^\n") + "D02/01/2011\n") + "T54.00\n") + "^\n", exportAsString(new long[]{ a2.id }));}<FAZZINI>exportAsString<FAZZINI>{    ru.orangesoftware.financisto.export.qif.QifExportOptions options = new ru.orangesoftware.financisto.export.qif.QifExportOptions(ru.orangesoftware.financisto.model.Currency.EMPTY, ru.orangesoftware.financisto.export.qif.QifExportOptions.DEFAULT_DATE_FORMAT, accounts, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);    return exportAsString(options);}<FAZZINI>[new long[]{ a2.id }]<FAZZINI>exportAsString(long[])<FAZZINI>[long[]]<FAZZINI>org.junit.Assert.assertEquals(((((((((("!Account\n" + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "^\n") + "D02/01/2011\n") + "T54.00\n") + "^\n", exportAsString(new long[]{ a2.id }))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>VariablesTester<FAZZINI>variableCanContainExpressions<FAZZINI>{    java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();    java.lang.Double a = java.lang.Math.sin(2 * java.lang.Math.cos(3));    variables.add(new com.guliash.parser.StringVariable("a", "sin(2*cos(3))"));    org.junit.Assert.assertEquals(java.lang.Math.tan(a), calculate("tan(a)", variables), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, variables, com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["tan(a)", variables]<FAZZINI>calculate(java.lang.String,java.util.List)<FAZZINI>[java.lang.String, java.util.List<com.guliash.parser.StringVariable>]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.tan(a), calculate("tan(a)", variables), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/nishaSTM/Logistic-Demo-App.git<FAZZINI>DeliveryItemTest<FAZZINI>getLocationAssertValue<FAZZINI>{    com.delivery.model.LocationCoordinates location = deliveryItem.getLocation();    org.junit.Assert.assertEquals(this.locationCoordinates, location);}<FAZZINI>getLocation<FAZZINI>{    return location;}<FAZZINI>none-fazzini<FAZZINI>getLocation()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(this.locationCoordinates, location)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectedParticipantActionsHandlerTest<FAZZINI>ShouldNotInactivateWhenSurveyDone<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);    org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean selected = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    boolean deferred = household.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    boolean incomplete = household.getStatus() == com.onaio.steps.model.InterviewStatus.INCOMPLETE;    return !((selected || deferred) || incomplete);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate())<FAZZINI>
https://github.com/Q115/Goalie_Android.git<FAZZINI>NewGoalPresenterUnitTest<FAZZINI>getOptions<FAZZINI>{    org.junit.Assert.assertNotNull(mPresenter.getSublimePickerOptions(0));}<FAZZINI>getSublimePickerOptions<FAZZINI>{    com.appeaser.sublimepickerlibrary.helpers.SublimeOptions options = new com.appeaser.sublimepickerlibrary.helpers.SublimeOptions();    int displayOptions = 0;    displayOptions |= com.appeaser.sublimepickerlibrary.helpers.SublimeOptions.ACTIVATE_DATE_PICKER;    displayOptions |= com.appeaser.sublimepickerlibrary.helpers.SublimeOptions.ACTIVATE_TIME_PICKER;    displayOptions &= ~com.appeaser.sublimepickerlibrary.helpers.SublimeOptions.ACTIVATE_RECURRENCE_PICKER;    options.setDisplayOptions(displayOptions);    options.setCanPickDateRange(false);    setSublimeDateOptions(options, viewID);    return options;}<FAZZINI>[0]<FAZZINI>getSublimePickerOptions(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertNotNull(mPresenter.getSublimePickerOptions(0))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>EncryptionDetectorTest<FAZZINI>isEncrypted_withQuotedInlinePgp_shouldReturnFalse<FAZZINI>{    com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((((((("" + "good talk!") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-- ") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "my signature");    org.mockito.Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);    boolean encrypted = encryptionDetector.isEncrypted(message);    org.junit.Assert.assertFalse(encrypted);}<FAZZINI>isEncrypted<FAZZINI>{    return isPgpMimeOrSMimeEncrypted(message) || containsInlinePgpEncryptedText(message);}<FAZZINI>[message]<FAZZINI>isEncrypted(com.fsck.k9.mail.Message)<FAZZINI>[com.fsck.k9.mail.Message]<FAZZINI>org.junit.Assert.assertFalse(encrypted)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>ReminderContentProviderTest<FAZZINI>whenMultipleRemindersAreDeletedThenMultipleDeletionsShouldHaveOccurred<FAZZINI>{    android.content.ContentValues values = createDefaultReminderValues();    android.content.ContentValues secondValues = createDefaultReminderValues();    provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);    provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, secondValues);    int count = provider.delete(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, "", null);    org.junit.Assert.assertEquals(2, count);}<FAZZINI>delete<FAZZINI>{    android.database.sqlite.SQLiteDatabase writableDatabase = reminderDBHelper.getWritableDatabase();    int deletedCount = 0;    switch (com.groceryreminder.data.ReminderContentProvider.URI_MATCHER.match(uri)) {        case com.groceryreminder.data.ReminderContentProvider.REMINDER_LIST :            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.REMINDERS, selection, selectionArgs);            break;        case com.groceryreminder.data.ReminderContentProvider.REMINDER_ITEM_ID :            java.lang.String id = uri.getLastPathSegment();            java.lang.String whereClause = (com.groceryreminder.data.ReminderContract.Reminders._ID + " = ") + id;            deletedCount = writableDatabase.delete(com.groceryreminder.data.DBSchema.REMINDERS, whereClause, selectionArgs);            break;    }    if (deletedCount > 0) {        getContext().getContentResolver().notifyChange(uri, null);    }    return deletedCount;}<FAZZINI>[com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, "", null]<FAZZINI>delete(android.net.Uri,java.lang.String,java.lang.String[])<FAZZINI>[android.net.Uri, java.lang.String, java.lang.String[]]<FAZZINI>org.junit.Assert.assertEquals(2, count)<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testSyncChangeServerCategory<FAZZINI>{    final com.google.firebase.database.DataSnapshot serverCategory = addServerCategory("category1", 255);    authenticateAndWaitSynchronizer();    final java.util.LinkedHashMap<java.lang.String, java.lang.Object> newValues = new java.util.LinkedHashMap<>();    newValues.put("name", "changedName");    newValues.put("naturalId", "changedName".toLowerCase());    newValues.put("color", 1);    final java.util.Date changeDate = new java.util.Date();    newValues.put("lastChangeDate", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseDate(changeDate));    serverCategory.getRef().updateChildren(newValues);    waitBackgroundTasks();    final com.google.firebase.database.DataSnapshot updatedCategory = getUpdatedSnapshot(serverCategory);    assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(serverCategory))), updatedCategory);    org.junit.Assert.assertEquals(getDate(updatedCategory, "lastChangeDate"), changeDate);}<FAZZINI>getDate<FAZZINI>{    final com.google.firebase.database.DataSnapshot valueNode = entity.child(value);    if (!valueNode.exists()) {        return null;    }    final java.lang.Long millis = valueNode.getValue(java.lang.Long.class);    return new java.util.Date(millis);}<FAZZINI>[updatedCategory, "lastChangeDate"]<FAZZINI>getDate(com.google.firebase.database.DataSnapshot,java.lang.String)<FAZZINI>[com.google.firebase.database.DataSnapshot, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(getDate(updatedCategory, "lastChangeDate"), changeDate)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>EncryptionDetectorTest<FAZZINI>isEncrypted_withPlainTextAndInlinePgp_shouldReturnTrue<FAZZINI>{    com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((("" + "preamble") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "epilogue");    org.mockito.Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);    boolean encrypted = encryptionDetector.isEncrypted(message);    org.junit.Assert.assertTrue(encrypted);}<FAZZINI>isEncrypted<FAZZINI>{    return isPgpMimeOrSMimeEncrypted(message) || containsInlinePgpEncryptedText(message);}<FAZZINI>[message]<FAZZINI>isEncrypted(com.fsck.k9.mail.Message)<FAZZINI>[com.fsck.k9.mail.Message]<FAZZINI>org.junit.Assert.assertTrue(encrypted)<FAZZINI>
https://github.com/5calls/android.git<FAZZINI>FakePermissionsManagerTest<FAZZINI>requestIfNeeded_alreadyForbidden<FAZZINI>{    mFakePermissionsManager.forbid(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);    mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);    org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION));}<FAZZINI>isPermissionGranted<FAZZINI>{    return mPermissionToState.containsKey(permission) && (mPermissionToState.get(permission) == com.truethat.android.application.permissions.FakePermissionsManager.PermissionState.GRANTED);}<FAZZINI>[com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION]<FAZZINI>isPermissionGranted(com.truethat.android.application.permissions.Permission)<FAZZINI>[com.truethat.android.application.permissions.Permission]<FAZZINI>org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION))<FAZZINI>
https://github.com/RogerTsai917/MakeCoffe.git<FAZZINI>NewsDataUnitTest<FAZZINI>articleIsLegal<FAZZINI>{    org.junit.Assert.assertEquals(testValue, mNewsData.getNewsDataSize());}<FAZZINI>getNewsDataSize<FAZZINI>{    return mNewsArrayList.size();}<FAZZINI>none-fazzini<FAZZINI>getNewsDataSize()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(testValue, mNewsData.getNewsDataSize())<FAZZINI>
https://github.com/niccokunzmann/mundraub-android.git<FAZZINI>MapUrlTest<FAZZINI>testSetZoom<FAZZINI>{    eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl(0, 0);    for (int i = 1; i < 4; i++) {        mapUrl.setZoomTo(i);        org.junit.Assert.assertEquals(java.lang.Integer.toString(i), mapUrl.getString("zoom"));    }}<FAZZINI>getString<FAZZINI>{    return configuration.get(name);}<FAZZINI>["zoom"]<FAZZINI>getString(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Integer.toString(i), mapUrl.getString("zoom"))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationsActivityTest<FAZZINI>shouldNotSetEditFlagInContextWhenCreateNewTranslationButtonIsClicked<FAZZINI>{    org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(translationsActivity, R.id.add_translation_button);    android.content.Intent nextStartedActivity = org.robolectric.Shadows.shadowOf(translationsActivity).getNextStartedActivity();    org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext context = nextStartedActivity.getParcelableExtra(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.CONTEXT_INTENT_KEY);    org.junit.Assert.assertFalse(context.isEdit());}<FAZZINI>isEdit<FAZZINI>{    return isEdit;}<FAZZINI>none-fazzini<FAZZINI>isEdit()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(context.isEdit())<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>MyDeckAdapterTest<FAZZINI>shouldLaunchAlertDialogWhenDeleteButtonClicked<FAZZINI>{    android.widget.PopupMenu popupMenu = openDeckPopupMenu();    clickMenuItemWithId(popupMenu, R.id.delete_deck);    android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));    org.robolectric.shadows.ShadowDialog shadowDialog = org.robolectric.Shadows.shadowOf(alertDialog);    org.junit.Assert.assertThat(shadowDialog.getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_ALERT_DIALOG_TITLE));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_ALERT_DIALOG_TITLE]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(shadowDialog.getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_ALERT_DIALOG_TITLE))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>NotificationIdsTest<FAZZINI>getAuthenticationErrorNotificationId_forOutgoingServerWithDefaultAccount<FAZZINI>{    com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);    int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);    org.junit.Assert.assertEquals(4, notificationId);}<FAZZINI>getAuthenticationErrorNotificationId<FAZZINI>{    int offset = (incoming) ? com.fsck.k9.notification.NotificationIds.OFFSET_AUTHENTICATION_ERROR_INCOMING : com.fsck.k9.notification.NotificationIds.OFFSET_AUTHENTICATION_ERROR_OUTGOING;    return com.fsck.k9.notification.NotificationIds.getBaseNotificationId(account) + offset;}<FAZZINI>[account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING]<FAZZINI>getAuthenticationErrorNotificationId(com.fsck.k9.Account,boolean)<FAZZINI>[com.fsck.k9.Account, boolean]<FAZZINI>org.junit.Assert.assertEquals(4, notificationId)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SongServiceTest<FAZZINI>songStatsTest_getTotalSongPlays<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Song> songList = classUnderTest.getSongs();    int i = 0;    int expected = 0;    for (fifthelement.theelement.objects.Song song : songList) {        song.setNumPlayed(i);        expected += i++;    }    int actual = classUnderTest.getTotalSongPlays();    org.junit.Assert.assertEquals(expected, actual);}<FAZZINI>getTotalSongPlays<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Song> songList = this.getSongs();    int totalPlays = 0;    for (fifthelement.theelement.objects.Song song : songList) {        totalPlays += song.getNumPlayed();    }    return totalPlays;}<FAZZINI>none-fazzini<FAZZINI>getTotalSongPlays()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(expected, actual)<FAZZINI>
https://github.com/etp404/frenchverbinator.git<FAZZINI>QuestionGeneratorTests<FAZZINI>generatesNewQuestionFromAvailableCombinationsIfShouldUseOldQuestionReturnsFalse<FAZZINI>{    uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), java.util.Collections.singletonList(verb), java.util.Collections.singletonList(person), new uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider(java.util.Collections.singletonList(verbMoodAndTense)), new uk.co.mould.matt.helpers.FakeFailedQuestionStore(), new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(false));    uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();    randomQuestionGenerator.getQuestion(callback);    uk.co.mould.matt.questions.Question expectedQuestion = new uk.co.mould.matt.questions.Question(person, verb, verbMoodAndTense);    org.junit.Assert.assertEquals(expectedQuestion, callback.question);}<FAZZINI>getQuestion<FAZZINI>{    if (moodsAndTensesToSelectFromProvider.includedTensesCount() == 0) {        callback.noTensesSelected();    } else if (shouldUseFailedQuestion.invoke()) {        tryToUseOldQuestion(callback);    } else {        callback.questionProvided(new uk.co.mould.matt.questions.Question(getRandomPerson(), getRandomVerb(), getRandomVerbMoodAndTense()));    }}<FAZZINI>[callback]<FAZZINI>getQuestion(uk.co.mould.matt.questions.Callback)<FAZZINI>[uk.co.mould.matt.questions.Callback]<FAZZINI>org.junit.Assert.assertEquals(expectedQuestion, callback.question)<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>HotpInfoTest<FAZZINI>testHotpInfoOtp<FAZZINI>{    for (int i = 0; i < com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS.length; i++) {        com.beemdevelopment.aegis.otp.HotpInfo info = new com.beemdevelopment.aegis.otp.HotpInfo(com.beemdevelopment.aegis.crypto.otp.HOTPTest.SECRET, com.beemdevelopment.aegis.otp.OtpInfo.DEFAULT_ALGORITHM, com.beemdevelopment.aegis.otp.OtpInfo.DEFAULT_DIGITS, i);        org.junit.Assert.assertEquals(info.getOtp(), com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i]);    }}<FAZZINI>getOtp<FAZZINI>{    checkSecret();    try {        com.beemdevelopment.aegis.crypto.otp.OTP otp = com.beemdevelopment.aegis.crypto.otp.HOTP.generateOTP(getSecret(), getAlgorithm(true), getDigits(), getCounter());        return otp.toString();    } catch (java.security.NoSuchAlgorithmException | java.security.InvalidKeyException e) {        throw new java.lang.RuntimeException(e);    }}<FAZZINI>none-fazzini<FAZZINI>getOtp()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(info.getOtp(), com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i])<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderTest<FAZZINI>testInsertTaskWithStartAndDueUpdateStatus<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();    org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));    org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC")))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC")))))<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testUnsubscribedAfterLogout<FAZZINI>{    authenticate();    firebaseSynchronizer.waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.SUBSCRIBED, 2000);    disconnect();    final net.buggy.shoplist.sharing.FirebaseSynchronizer.State state = firebaseSynchronizer.waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, 2000);    org.junit.Assert.assertEquals(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, state);}<FAZZINI>waitState<FAZZINI>{    if (stateReference.get() == expectedState) {        return expectedState;    }    final long maxTime = java.lang.System.currentTimeMillis() + waitTime;    while (java.lang.System.currentTimeMillis() < maxTime) {        if (stateReference.get() == expectedState) {            return expectedState;        }        try {            java.lang.Thread.sleep(1);        } catch (java.lang.InterruptedException e) {            java.lang.Thread.currentThread().interrupt();            break;        }    }     return stateReference.get();}<FAZZINI>[net.buggy.shoplist.sharing.FirebaseSynchronizer.State.SUBSCRIBED, 2000]<FAZZINI>waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer$State,long)<FAZZINI>[net.buggy.shoplist.sharing.FirebaseSynchronizer.State, long]<FAZZINI>org.junit.Assert.assertEquals(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, state)<FAZZINI>
https://github.com/lewismcgeary/AndroidGameofLife.git<FAZZINI>GridCellUnitTestCreatedInStudio<FAZZINI>givenTheGridHasOneLiveCell_WhenNoMovesAreMade_ThenGridStillHasOneLiveCell<FAZZINI>{    io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);    worldGrid.giveLifeToCell(10, 10);    org.junit.Assert.assertEquals(1, worldGrid.countLivingCells());}<FAZZINI>countLivingCells<FAZZINI>{    int liveCount = 0;    for (int x = 0; x < xLength; x++) {        for (int y = 0; y < yLength; y++) {            if (members.get(x).get(y).getState()) {                liveCount++;            }        }    }    return liveCount;}<FAZZINI>none-fazzini<FAZZINI>countLivingCells()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(1, worldGrid.countLivingCells())<FAZZINI>
https://github.com/artemkv/notedok-android-app.git<FAZZINI>WikiToHtmlFormatterTest<FAZZINI>listItemFormatting<FAZZINI>{    java.lang.String text = "List with formatting inside:\n* *Bold* item\n* Item _italic_\n* Item with {code}code{code} inside";    java.lang.String expectedText = "List with formatting inside:\n<ul><li><b>Bold</b> item</li>\n<li>Item <i>italic</i></li>\n<li>Item with <pre class='codeblock'>code</pre> inside</li></ul>\n";    com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();    java.lang.String formattedText = formatter.format(text);    org.junit.Assert.assertEquals("lists formatting - item formatting", expectedText, formattedText);}<FAZZINI>format<FAZZINI>{    java.lang.String[] strings = wiki.split("\\r\\n|\\n|\\r", -1);    java.lang.StringBuilder sb = new java.lang.StringBuilder(wiki.length());    if (strings.length > 0) {        for (int i = 0; i < strings.length; i++) {            sb.append(strings[i]);            sb.append("\n");        }        _text = sb.toString();    } else {        _text = "\n";    }    for (_pos = 0; _pos < _text.length(); _pos++) {        _char = getCharAt(_text, _pos);        if (_char.equals("*")) {            tryWrap("*", "<b>", "</b>");            tryUl("*");        } else if (_char.equals("_")) {            tryWrap("_", "<i>", "</i>");        } else if (_char.equals("-")) {            tryWrap("--", "<del>", "</del>");            tryUl("-");        } else if (_char.equals("+")) {            tryWrap("++", "<u>", "</u>");        } else if (_char.equals("^")) {            tryWrap("^", "<sup>", "</sup>");        } else if (_char.equals("~")) {            tryWrap("~", "<sub>", "</sub>");        } else if (_char.equals("{")) {            tryEscaped();            tryCode();        } else if (_char.equals("[")) {            tryAnchor();        } else if (_char.equals("!")) {            tryHeader("!");        } else if (_char.equals("h")) {            tryNumberedHeader();        }    }    return _text;}<FAZZINI>[text]<FAZZINI>format(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("lists formatting - item formatting", expectedText, formattedText)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectedParticipantActionsHandlerTest<FAZZINI>ShouldNotInactivateWhenSurveyNotDone<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);    org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean selected = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    boolean deferred = household.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    boolean incomplete = household.getStatus() == com.onaio.steps.model.InterviewStatus.INCOMPLETE;    return !((selected || deferred) || incomplete);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>EditParticipantActivityHandlerTest<FAZZINI>ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled<FAZZINI>{    org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()))<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>DateTimeIterableFieldAdapterTest<FAZZINI>testSetInMultiAbsolute<FAZZINI>{    android.content.ContentValues values = new android.content.ContentValues();    org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");    adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180110T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180111T150000")));    org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T140000Z,20180110T140000Z,20180111T140000Z"));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>["20180109T140000Z,20180110T140000Z,20180111T140000Z"]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T140000Z,20180110T140000Z,20180111T140000Z"))<FAZZINI>
https://github.com/GroopyMusic/GroopyApp.git<FAZZINI>AudiencePresenterTest<FAZZINI>getNbOutTest<FAZZINI>{    int result = 30;    org.junit.Assert.assertEquals(presenter.getNbOut(), result);}<FAZZINI>getNbOut<FAZZINI>{    return getNbAll() - getNbIn();}<FAZZINI>none-fazzini<FAZZINI>getNbOut()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(presenter.getNbOut(), result)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SongListServiceTest<FAZZINI>skipSongTest<FAZZINI>{    classUnderTest.getSongAtIndex(0);    fifthelement.theelement.objects.Song nextSong = classUnderTest.skipToNextSong();    org.junit.Assert.assertTrue("Skip function did not retrieve the 'next' song in list", nextSong.getName().equals("This is America"));}<FAZZINI>getName<FAZZINI>{    return songName;}<FAZZINI>none-fazzini<FAZZINI>getName()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("Skip function did not retrieve the 'next' song in list", nextSong.getName().equals("This is America"))<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>handleAudibleAlerts_nullLocationDoesNotCauseRunnableExecutionOrError<FAZZINI>{    com.ds.avare.adsb.AudibleTrafficAlerts spyAta = spy(getTestAudibleTrafficAlerts(10));    com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor capEx = new com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor();    doReturn(capEx).when(spyAta).getTrafficAlertProducerExecutor();    java.util.LinkedList<com.ds.avare.adsb.Traffic> someTraffic = new java.util.LinkedList<>();    com.ds.avare.adsb.Traffic t = new com.ds.avare.adsb.Traffic();    t.mIsAirborne = true;    someTraffic.add(t);    spyAta.handleAudibleAlerts(null, someTraffic, mock(com.ds.avare.storage.Preferences.class), 2200, true, 20);    org.junit.Assert.assertEquals("Executed runnables", 0, capEx.runnables.size());}<FAZZINI>size<FAZZINI>{    return size;}<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("Executed runnables", 0, capEx.runnables.size())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>PreviewTextExtractorTest<FAZZINI>extractPreview_shouldStripHorizontalLine<FAZZINI>{    java.lang.String text = (("" + "line 1\r\n") + "----\r\n") + "line 2";    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);    java.lang.String preview = previewTextExtractor.extractPreview(part);    org.junit.Assert.assertEquals("line 1 line 2", preview);}<FAZZINI>extractPreview<FAZZINI>{    java.lang.String text = com.fsck.k9.mail.internet.MessageExtractor.getTextFromPart(textPart, com.fsck.k9.message.extractors.PreviewTextExtractor.MAX_CHARACTERS_CHECKED_FOR_PREVIEW);    if (text == null) {        throw new com.fsck.k9.message.extractors.PreviewExtractionException("Couldn't get text from part");    }    java.lang.String plainText = convertFromHtmlIfNecessary(textPart, text);    return stripTextForPreview(plainText);}<FAZZINI>[part]<FAZZINI>extractPreview(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertEquals("line 1 line 2", preview)<FAZZINI>
https://github.com/openwebnet/openwebnet-android.git<FAZZINI>AutomationModelTest<FAZZINI>testAutomationModelAddBuilder_success<FAZZINI>{    com.github.openwebnet.model.AutomationModel automation = com.github.openwebnet.model.AutomationModel.addBuilder().environment(AUTOMATION_ENVIRONMENT).gateway(AUTOMATION_GATEWAY).name(AUTOMATION_NAME).where(AUTOMATION_WHERE).type(AUTOMATION_TYPE).bus(AUTOMATION_BUS).favourite(AUTOMATION_FAVOURITE).build();    org.junit.Assert.assertNotNull("invalid uuid", automation.getUuid());    assertCommonFields(automation);}<FAZZINI>assertCommonFields<FAZZINI>{    org.junit.Assert.assertEquals("invalid environmentId", AUTOMATION_ENVIRONMENT, automation.getEnvironmentId());    org.junit.Assert.assertEquals("invalid gatewayUuid", AUTOMATION_GATEWAY, automation.getGatewayUuid());    org.junit.Assert.assertEquals("invalid name", AUTOMATION_NAME, automation.getName());    org.junit.Assert.assertEquals("invalid where", AUTOMATION_WHERE, automation.getWhere());    org.junit.Assert.assertEquals("invalid favourite", AUTOMATION_FAVOURITE, automation.isFavourite());    org.junit.Assert.assertNull("invalid status", automation.getStatus());}<FAZZINI>[automation]<FAZZINI>assertCommonFields(com.github.openwebnet.model.AutomationModel)<FAZZINI>[com.github.openwebnet.model.AutomationModel]<FAZZINI>org.junit.Assert.assertNotNull("invalid uuid", automation.getUuid())<FAZZINI>
https://github.com/Artenes/speedbro.git<FAZZINI>RunsHtmlParserTest<FAZZINI>ignoreHtmlTableThatDoesNotFollowStructure<FAZZINI>{    org.jsoup.nodes.Document document = org.jsoup.Jsoup.parse("<html><body><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></body></html>");    java.util.List<io.github.artenes.speedbro.speedrun.com.models.Run> latestRuns = parser.parse(document);    org.junit.Assert.assertTrue(latestRuns.isEmpty());}<FAZZINI>isEmpty<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>isEmpty()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(latestRuns.isEmpty())<FAZZINI>
https://github.com/CarstenKarbach/VoBox.git<FAZZINI>DictionaryManagementTest<FAZZINI>testReadDictionaryList<FAZZINI>{    de.karbach.superapp.StarterActivity activity = org.robolectric.Robolectric.buildActivity(de.karbach.superapp.StarterActivity.class).setup().get();    de.karbach.superapp.data.DictionaryManagement dm = de.karbach.superapp.data.DictionaryManagement.getInstance(activity);    java.util.Set<java.lang.String> dictList = dm.readDictionaryList();    org.junit.Assert.assertTrue(dictList.size() > 0);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(dictList.size() > 0)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NotReachableSurveyForParticipantStrategyTest<FAZZINI>ShouldInactivateWhenSurveyIsDone<FAZZINI>{    org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);    org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate());}<FAZZINI>shouldInactivate<FAZZINI>{    boolean deferredStatus = participant.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    boolean notSelectedStatus = participant.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    return !(deferredStatus || notSelectedStatus);}<FAZZINI>none-fazzini<FAZZINI>shouldInactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate())<FAZZINI>
https://github.com/michael830713/ProjectBoxScore.git<FAZZINI>MainActivityTest<FAZZINI>testFibonacciOne<FAZZINI>{    long result = mFibonacci.getFibonacci(2);    org.junit.Assert.assertEquals(1, result);}<FAZZINI>getFibonacci<FAZZINI>{    if (amount == 0) {        return 0;    } else if (amount == 1) {        return 1;    } else if ((amount - 2) >= 0) {        c = a + b;        a = b;        b = c;        java.lang.System.out.println("" + c);        amount -= 1;        getFibonacci(amount);    }    return c;}<FAZZINI>[2]<FAZZINI>getFibonacci(long)<FAZZINI>[long]<FAZZINI>org.junit.Assert.assertEquals(1, result)<FAZZINI>
https://github.com/nettrash/SIB.Android.git<FAZZINI>MD5UnitTest<FAZZINI>hashMD5_isCorrect<FAZZINI>{    byte[] bytes = "NETTRASH".getBytes();    ru.nettrash.crypto.MD5 md = new ru.nettrash.crypto.MD5();    md.update(bytes);    byte[] hash = md.digest();    java.lang.StringBuilder sb = new java.lang.StringBuilder();    for (byte b : hash) {        sb.append(java.lang.String.format("%02X", b & 0xff));    }    org.junit.Assert.assertEquals("90bc0c1e6158acdddf5eb5f357ae565a", sb.toString().toLowerCase());}<FAZZINI>toString<FAZZINI>{    return new java.lang.String(this);}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("90bc0c1e6158acdddf5eb5f357ae565a", sb.toString().toLowerCase())<FAZZINI>
https://github.com/GlobalTechnology/android-ekko.git<FAZZINI>ResourceUtilsTest<FAZZINI>testYouTubeExtractVideoId<FAZZINI>{    final java.lang.String id = "dQw4w9WgXcQ";    final java.lang.String[] urls = new java.lang.String[]{ "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "http://www.youtube.com/watch?v=dQw4w9WgXcQ&feature=related", "http://youtu.be/dQw4w9WgXcQ", "http://www.youtube.com/embed/dQw4w9WgXcQ", "http://www.youtube.com/v/dQw4w9WgXcQ", "https://youtube.googleapis.com/v/dQw4w9WgXcQ", "http://m.youtube.com/watch?v=dQw4w9WgXcQ", "http://www.youtube.com/ytscreeningroom?v=dQw4w9WgXcQ" };    for (final java.lang.String url : urls) {        org.junit.Assert.assertEquals(url, id, org.ekkoproject.android.player.util.ResourceUtils.youtubeExtractVideoId(android.net.Uri.parse(url)));    }}<FAZZINI>youtubeExtractVideoId<FAZZINI>{    try {        assert uri != null;        assert uri.getScheme() != null;        assert uri.getHost() != null;        assert uri.getPathSegments() != null;        switch (uri.getScheme().toLowerCase(java.util.Locale.US)) {            case "http" :            case "https" :                final java.util.List<java.lang.String> path = uri.getPathSegments();                switch (uri.getHost().toLowerCase(java.util.Locale.US)) {                    case "www.youtube.com" :                    case "youtube.com" :                    case "m.youtube.com" :                    case "youtube.googleapis.com" :                        switch (path.get(0).toLowerCase(java.util.Locale.US)) {                            case "watch" :                            case "ytscreeningroom" :                                if (path.size() == 1) {                                    return uri.getQueryParameter("v");                                }                                break;                            case "embed" :                            case "v" :                                if (path.size() == 2) {                                    return path.get(1);                                }                                break;                        }                        break;                    case "youtu.be" :                        if (path.size() == 1) {                            return path.get(0);                        }                        break;                }        }    } catch (final java.lang.Exception ignored) {    }    return null;}<FAZZINI>[android.net.Uri.parse(url)]<FAZZINI>youtubeExtractVideoId(android.net.Uri)<FAZZINI>[android.net.Uri]<FAZZINI>org.junit.Assert.assertEquals(url, id, org.ekkoproject.android.player.util.ResourceUtils.youtubeExtractVideoId(android.net.Uri.parse(url)))<FAZZINI>
https://github.com/farmasek/Audio_Manager.git<FAZZINI>TimerProfileHelperTest<FAZZINI>testGetFormatedEndTimeNextDay<FAZZINI>{    baranek.vojtech.audiomanager.model.TimerProfile timerProfile = new baranek.vojtech.audiomanager.model.TimerProfile();    timerProfile.setZacCas(baranek.vojtech.audiomanager.model.TimerProfileHelper.getCasFromHodMin(15, 2));    timerProfile.setCasDoKonce(1439);    java.lang.String actualString = baranek.vojtech.audiomanager.model.TimerProfileHelper.getFormatedEndTime(timerProfile);    java.lang.String expectedString = "Další den 15:01";    org.junit.Assert.assertThat(actualString, org.hamcrest.core.IsEqual.equalTo(expectedString));}<FAZZINI>equalTo<FAZZINI>{    return new org.hamcrest.core.IsEqual<>(operand);}<FAZZINI>[expectedString]<FAZZINI>equalTo(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(actualString, org.hamcrest.core.IsEqual.equalTo(expectedString))<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>givenCurrentIsNotSetWhenALocationWithAnAccuracyWorseThanTheMaximumAccuracyTheNewLocationIsNotBetter<FAZZINI>{    android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);    location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);    location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);    location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS + 1);    org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(location));}<FAZZINI>isBetterThanCurrentLocation<FAZZINI>{    if (!isAccurate(location)) {        android.util.Log.d(com.groceryreminder.domain.GroceryStoreManager.TAG, "Location accuracy is not good enough");        return false;    }    if (currentLocation != null) {        return compareLocations(currentLocation, location);    }    return true;}<FAZZINI>[location]<FAZZINI>isBetterThanCurrentLocation(android.location.Location)<FAZZINI>[android.location.Location]<FAZZINI>org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(location))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>UidReverseComparatorTest<FAZZINI>compare_withLeftMessageWithInvalidUid_shouldReturnPositive<FAZZINI>{    com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();    com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);    int result = comparator.compare(messageLeft, messageRight);    org.junit.Assert.assertTrue("result must be > 0 when left argument is message with invalid UID", result > 0);}<FAZZINI>compare<FAZZINI>{    java.lang.Long uidLeft = getUidForMessage(messageLeft);    java.lang.Long uidRight = getUidForMessage(messageRight);    if ((uidLeft == null) && (uidRight == null)) {        return 0;    } else if (uidLeft == null) {        return 1;    } else if (uidRight == null) {        return -1;    }    return uidRight.compareTo(uidLeft);}<FAZZINI>[messageLeft, messageRight]<FAZZINI>compare(com.fsck.k9.mail.Message,com.fsck.k9.mail.Message)<FAZZINI>[com.fsck.k9.mail.Message, com.fsck.k9.mail.Message]<FAZZINI>org.junit.Assert.assertTrue("result must be > 0 when left argument is message with invalid UID", result > 0)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>HouseholdFlowTest<FAZZINI>ShouldNotBeAbleToHandleParticipantFlowType<FAZZINI>{    org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant));}<FAZZINI>canHandle<FAZZINI>{    return com.onaio.steps.orchestrators.flows.FlowType.Household.equals(flowType);}<FAZZINI>[com.onaio.steps.orchestrators.flows.FlowType.Participant]<FAZZINI>canHandle(com.onaio.steps.orchestrators.flows.FlowType)<FAZZINI>[com.onaio.steps.orchestrators.flows.FlowType]<FAZZINI>org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant))<FAZZINI>
https://github.com/Dev1012You/GGP_Android.git<FAZZINI>MovieUtilsTest<FAZZINI>testBuildFandangoUrl<FAZZINI>{    java.lang.String purchaseTicketsUrl = com.ggp.theclub.util.MovieUtils.buildPurchaseTicketsUrl(movie, movieShowtime, movieTheater.getTheaterUrl(), movieTheater.getTmsId());    java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(fandangoDateTimeFormat);    java.lang.String formattedDateTime = dateFormat.format(movieShowtime.getMovieShowtime());    java.lang.String expectedFandangoUrl = java.lang.String.format(fandangoUrlFormat, mockFandangoId, mockTmsId, formattedDateTime);    org.junit.Assert.assertEquals(expectedFandangoUrl, purchaseTicketsUrl);}<FAZZINI>format<FAZZINI>{    return new java.util.Formatter().format(format, args).toString();}<FAZZINI>[fandangoUrlFormat, mockFandangoId, mockTmsId, formattedDateTime]<FAZZINI>format(java.lang.String,java.lang.Object[])<FAZZINI>[java.lang.String, java.lang.Object[]]<FAZZINI>org.junit.Assert.assertEquals(expectedFandangoUrl, purchaseTicketsUrl)<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderRecurrenceTest<FAZZINI>testRDateFirstCompleteFirstInserted<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> override = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Assert<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp()))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Assert<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp()))))<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>PrimeraFormaNormalTest<FAZZINI>justificaMiFN<FAZZINI>{    org.junit.Assert.assertEquals((("Esta en 1ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.PrimeraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.JustificaMiFN());}<FAZZINI>JustificaMiFN<FAZZINI>{    return ("Esta en 1ra Forma Normal :\nPor la dependencia Funcional " + dependenciaFuncional.toString()) + ". ";}<FAZZINI>none-fazzini<FAZZINI>JustificaMiFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals((("Esta en 1ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.PrimeraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.JustificaMiFN())<FAZZINI>
https://github.com/borfast/arrispwgen-android.git<FAZZINI>ArrispwgenTest<FAZZINI>generates_single_password_if_date_interval_just_one_date<FAZZINI>{    org.threeten.bp.LocalDate d1 = org.threeten.bp.LocalDate.of(2016, 1, 5);    org.threeten.bp.LocalDate d2 = org.threeten.bp.LocalDate.of(2016, 1, 5);    java.util.Map<org.threeten.bp.LocalDate, java.lang.String> potd_list = com.grounduphq.arrispwgen.Arrispwgen.generate_multi(d1, d2, com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);    org.junit.Assert.assertEquals(1, potd_list.size());}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(1, potd_list.size())<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>PlaylistServiceTest<FAZZINI>insertPlaylistValidTest<FAZZINI>{    fifthelement.theelement.objects.Playlist playlist = new fifthelement.theelement.objects.Playlist("Bad");    classUnderTest.insertPlaylist(playlist);    org.junit.Assert.assertTrue("insertAuthorValidTest: playlist size != 4", classUnderTest.getAllPlaylists().size() == 4);}<FAZZINI>getAllPlaylists<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Playlist> playlists = playlistPersistence.getAllPlaylists();    if (playlists != null) {        for (fifthelement.theelement.objects.Playlist playlist : playlists) {            java.util.List<fifthelement.theelement.objects.Song> songs = playlistPersistence.getAllSongsByPlaylist(playlist.getUUID());            java.util.List<fifthelement.theelement.objects.Song> updatedSongs = new java.util.ArrayList<>();            if (songs != null) {                for (fifthelement.theelement.objects.Song song : songs) {                    song = songPersistence.getSongByUUID(song.getUUID());                    updatedSongs.add(song);                }            }            playlist.setSongs(updatedSongs);        }    }    return playlists;}<FAZZINI>none-fazzini<FAZZINI>getAllPlaylists()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("insertAuthorValidTest: playlist size != 4", classUnderTest.getAllPlaylists().size() == 4)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NotReachableOnEmptyHouseholdHandlerTest<FAZZINI>ShouldReturnExpectedViewId<FAZZINI>{    org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId());}<FAZZINI>getViewId<FAZZINI>{    return R.id.action_not_reachable_empty_hh;}<FAZZINI>none-fazzini<FAZZINI>getViewId()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId())<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SettingsTest<FAZZINI>playSongWithSongPlayedCheck<FAZZINI>{    checkStatsPage();    int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();    android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));    appCompatImageButton.perform(click());    android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));    navigationMenuItemView.perform(click());    android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);    frameLayout.perform(click());    frameLayout.perform(click());    checkStatsPage();    int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();    org.junit.Assert.assertTrue((oldMostPlayed + 2) == newMostPlayed);}<FAZZINI>checkStatsPage<FAZZINI>{    android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));    appCompatImageButton.perform(click());    android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 5), isDisplayed()));    navigationMenuItemView.perform(click());    android.support.test.espresso.DataInteraction appCompatTextView = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0))).atPosition(2);    appCompatTextView.perform(click());}<FAZZINI>none-fazzini<FAZZINI>checkStatsPage()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue((oldMostPlayed + 2) == newMostPlayed)<FAZZINI>
https://github.com/yasmindunsky/FrizzleApp.git<FAZZINI>CodeCheckUtilsTest<FAZZINI>checkIfSpeakOutIsInsideCurlyBrackets_isBefore_false<FAZZINI>{    java.lang.String code = "function funcNamespeakOut(\"hello\");(element){}";    boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakOutIsInsideCurlyBrackets(code);    org.junit.Assert.assertEquals(false, answer);}<FAZZINI>checkIfSpeakOutIsInsideCurlyBrackets<FAZZINI>{    int i = code.indexOf(com.frizzl.app.frizzleapp.CodeCheckUtils.speakOutIdentification);    if (i < 0) {        return false;    }    java.lang.String beforeSpeakOut = code.substring(0, i);    java.lang.String afterSpeakOut = code.substring(i + com.frizzl.app.frizzleapp.CodeCheckUtils.speakOutIdentification.length(), code.length());    return beforeSpeakOut.contains("{") && afterSpeakOut.contains("}");}<FAZZINI>[code]<FAZZINI>checkIfSpeakOutIsInsideCurlyBrackets(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(false, answer)<FAZZINI>
https://github.com/niccokunzmann/mundraub-android.git<FAZZINI>HelperTest<FAZZINI>distanceInMetersBetween<FAZZINI>{    double delta = 1.0E-6;    double longitude1 = 10.01;    double latitude1 = 11.02;    double longitude2 = 12.03;    double latitude2 = 13.04;    double distanceInMetersBetween = eu.quelltext.mundraub.common.Helper.distanceInMetersBetween(longitude1, latitude1, longitude2, latitude2);    double expected = 315583.811651;    org.junit.Assert.assertEquals(expected, distanceInMetersBetween, delta);}<FAZZINI>distanceInMetersBetween<FAZZINI>{    double phi1 = eu.quelltext.mundraub.common.Helper.deg2rad(latitude1);    double phi2 = eu.quelltext.mundraub.common.Helper.deg2rad(latitude2);    double lambda1 = eu.quelltext.mundraub.common.Helper.deg2rad(longitude1);    double lambda2 = eu.quelltext.mundraub.common.Helper.deg2rad(longitude2);    double dPhi = phi1 - phi2;    double dLambda = lambda1 - lambda2;    double dRoh = 2 * java.lang.Math.asin(java.lang.Math.sqrt(java.lang.Math.pow(java.lang.Math.sin(dPhi / 2), 2) + ((java.lang.Math.cos(phi1) * java.lang.Math.cos(phi2)) * java.lang.Math.pow(java.lang.Math.sin(dLambda / 2), 2))));    double distance = eu.quelltext.mundraub.common.Helper.EARTH_RADIUS_METERS * dRoh;    return distance;}<FAZZINI>[longitude1, latitude1, longitude2, latitude2]<FAZZINI>distanceInMetersBetween(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(expected, distanceInMetersBetween, delta)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenProximityAlertIsAddedThenTheExpirationDoesNotExpire<FAZZINI>{    se.walkercrou.places.Place place = createDefaultGooglePlace();    java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();    places.add(place);    groceryStoreManager.addProximityAlerts(places);    com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());    org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.PROXIMITY_ALERT_EXPIRATION, proximityAlert.getExpiration());}<FAZZINI>getExpiration<FAZZINI>{    return expiration;}<FAZZINI>none-fazzini<FAZZINI>getExpiration()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.PROXIMITY_ALERT_EXPIRATION, proximityAlert.getExpiration())<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>angleFromCoordinate_east<FAZZINI>{    org.junit.Assert.assertEquals(90, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 0, 45), 0);}<FAZZINI>angleFromCoordinate<FAZZINI>{    final double lat1Rad = java.lang.Math.toRadians(lat1);    final double long1Rad = java.lang.Math.toRadians(long1);    final double lat2Rad = java.lang.Math.toRadians(lat2);    final double long2Rad = java.lang.Math.toRadians(long2);    final double dLon = long2Rad - long1Rad;    final double y = java.lang.Math.sin(dLon) * java.lang.Math.cos(lat2Rad);    final double x = (java.lang.Math.cos(lat1Rad) * java.lang.Math.sin(lat2Rad)) - ((java.lang.Math.sin(lat1Rad) * java.lang.Math.cos(lat2Rad)) * java.lang.Math.cos(dLon));    final double bearingRad = java.lang.Math.atan2(y, x);    return (java.lang.Math.toDegrees(bearingRad) + 360) % 360;}<FAZZINI>[0, 0, 0, 45]<FAZZINI>angleFromCoordinate(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(90, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 0, 45), 0)<FAZZINI>
https://github.com/Suwie/improvebcs.git<FAZZINI>ImageUtilsTest<FAZZINI>profileImageResourceByGenderWithEmptyStringParameterReturnsDefaultResource<FAZZINI>{    org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(""), R.drawable.child_boy_infant);}<FAZZINI>profileImageResourceByGender<FAZZINI>{    if (org.apache.commons.lang3.StringUtils.isNotBlank(gender)) {        if (gender.equalsIgnoreCase(util.PathConstants.GENDER.MALE)) {            return R.drawable.child_boy_infant;        } else if (gender.equalsIgnoreCase(util.PathConstants.GENDER.FEMALE)) {            return R.drawable.child_girl_infant;        } else if (gender.toLowerCase().contains("trans")) {            return R.drawable.child_transgender_inflant;        }    }    return R.drawable.child_boy_infant;}<FAZZINI>[""]<FAZZINI>profileImageResourceByGender(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(""), R.drawable.child_boy_infant)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>cotTest1<FAZZINI>{    org.junit.Assert.assertEquals(1 / java.lang.Math.tan(java.lang.Math.PI / 2), calculate("cot(pi/2)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["cot(pi/2)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(1 / java.lang.Math.tan(java.lang.Math.PI / 2), calculate("cot(pi/2)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>UidReverseComparatorTest<FAZZINI>compare_withMessageWithNullUidAndMessageWithInvalidUid_shouldReturnZero<FAZZINI>{    com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();    com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();    int result = comparator.compare(messageLeft, messageRight);    org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result);}<FAZZINI>compare<FAZZINI>{    java.lang.Long uidLeft = getUidForMessage(messageLeft);    java.lang.Long uidRight = getUidForMessage(messageRight);    if ((uidLeft == null) && (uidRight == null)) {        return 0;    } else if (uidLeft == null) {        return 1;    } else if (uidRight == null) {        return -1;    }    return uidRight.compareTo(uidLeft);}<FAZZINI>[messageLeft, messageRight]<FAZZINI>compare(com.fsck.k9.mail.Message,com.fsck.k9.mail.Message)<FAZZINI>[com.fsck.k9.mail.Message, com.fsck.k9.mail.Message]<FAZZINI>org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result)<FAZZINI>
https://github.com/proninyaroslav/libretorrent.git<FAZZINI>FixedRingBufferTest<FAZZINI>testIterator<FAZZINI>{    org.proninyaroslav.libretorrent.core.collections.FixedRingBuffer<java.lang.Integer> buffer = new org.proninyaroslav.libretorrent.core.collections.FixedRingBuffer<>(10);    java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(10);    for (int i = 0; i < buffer.size(); i++) {        buffer.add(i * i);        expected.add(i * i);    }    java.util.ArrayList<java.lang.Integer> actual = new java.util.ArrayList<>(10);    for (int i : buffer) {        actual.add(i);    }    org.junit.Assert.assertEquals(expected, actual);}<FAZZINI>add<FAZZINI>{    modCount++;    add(e, elementData, size);    return true;}<FAZZINI>[i * i]<FAZZINI>add(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertEquals(expected, actual)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AuthorServiceTest<FAZZINI>authorStatsTest_SetterGetterTest<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Author> authorList = classUnderTest.getAuthors();    int i = 0;    for (fifthelement.theelement.objects.Author author : authorList) {        author.setNumPlayed(i);        org.junit.Assert.assertEquals(author.getNumPlayed(), i);        i++;    }}<FAZZINI>getNumPlayed<FAZZINI>{    return numPlayed;}<FAZZINI>none-fazzini<FAZZINI>getNumPlayed()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(author.getNumPlayed(), i)<FAZZINI>
https://github.com/niteshpatel/ministocks.git<FAZZINI>NumberToolsTests<FAZZINI>trimWithNumberLessThan100AndScale1<FAZZINI>{    java.lang.String expected = "12.30";    java.lang.String result = nitezh.ministock.utils.NumberTools.trim("12.3", java.util.Locale.US);    org.junit.Assert.assertEquals(expected, result);}<FAZZINI>trim<FAZZINI>{    char decimalFormatSymbol = new java.text.DecimalFormatSymbols(locale).getDecimalSeparator();    int digitsAfterDecimal = (value.length() - value.indexOf(decimalFormatSymbol)) - 1;    java.lang.Double p = nitezh.ministock.utils.NumberTools.parseDouble(value, locale);    int maxPrecision = java.lang.Math.min(4, digitsAfterDecimal);    return nitezh.ministock.utils.NumberTools.getTrimmedDouble(p, 6, maxPrecision);}<FAZZINI>["12.3", java.util.Locale.US]<FAZZINI>trim(java.lang.String,java.util.Locale)<FAZZINI>[java.lang.String, java.util.Locale]<FAZZINI>org.junit.Assert.assertEquals(expected, result)<FAZZINI>
https://github.com/hodlwallet/hodl-wallet-android.git<FAZZINI>KVStoreTests<FAZZINI>testGetNonExistentKeyFails<FAZZINI>{    co.platform.kvstore.CompletionObject object = co.hodlwallet.platform.KVStoreTests.store.get("hello", 0);    co.platform.sqlite.KVItem getKv = object.kv;    org.junit.Assert.assertNull(getKv);}<FAZZINI>get<FAZZINI>{    co.platform.sqlite.KVItem kv = null;    android.database.Cursor cursor = null;    long curVer = 0;    try {        android.database.sqlite.SQLiteDatabase db = getReadable();        if (version == 0) {            curVer = _localVersion(key).version;        } else {            cursor = db.query(co.platform.sqlite.PlatformSqliteHelper.KV_STORE_TABLE_NAME, allColumns, "key = ? AND version = ?", new java.lang.String[]{ key, java.lang.String.valueOf(version) }, null, null, "version DESC", "1");            if (cursor.moveToNext()) {                curVer = cursor.getLong(0);            } else {                curVer = 0;            }        }        if (curVer == 0) {            return new co.platform.kvstore.CompletionObject(co.platform.kvstore.CompletionObject.RemoteKVStoreError.notFound);        }        if (cursor != null) {            cursor.close();        }        cursor = db.query(co.platform.sqlite.PlatformSqliteHelper.KV_STORE_TABLE_NAME, allColumns, "key = ? AND version = ?", new java.lang.String[]{ key, java.lang.String.valueOf(curVer) }, null, null, "version DESC", "1");        if (cursor.moveToNext()) {            kv = cursorToKv(cursor);        }        if (kv != null) {            byte[] val = kv.value;            kv.value = (encrypted) ? co.platform.kvstore.ReplicatedKVStore.decrypt(val, co.platform.kvstore.ReplicatedKVStore.mContext) : val;            if ((val != null) && co.hodlwallet.tools.util.Utils.isNullOrEmpty(kv.value)) {                android.util.Log.e(co.platform.kvstore.ReplicatedKVStore.TAG, ("get: Decrypting failed for key: " + key) + ", deleting the kv");                delete(key, curVer);            }        }    } catch (java.lang.Exception e) {        e.printStackTrace();    } finally {        if (cursor != null) {            cursor.close();        }    }    return kv == null ? new co.platform.kvstore.CompletionObject(co.platform.kvstore.CompletionObject.RemoteKVStoreError.notFound) : new co.platform.kvstore.CompletionObject(kv, null);}<FAZZINI>["hello", 0]<FAZZINI>get(java.lang.String,long)<FAZZINI>[java.lang.String, long]<FAZZINI>org.junit.Assert.assertNull(getKv)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenLocationUpdatesAreRequestedWithGPSUpdatesThenAGPSListenerIsAddedToTheLocationManager<FAZZINI>{    groceryStoreManager.listenForLocationUpdates(true);    java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();    org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER));}<FAZZINI>get<FAZZINI>null<FAZZINI>[0]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER))<FAZZINI>
https://github.com/WrenSecurity/forgerock-authenticator-android.git<FAZZINI>IdentityTest<FAZZINI>canAddMechanism<FAZZINI>{    org.mockito.BDDMockito.given(identityDatabase.addMechanism(org.mockito.Matchers.any(com.forgerock.authenticator.mechanisms.base.Mechanism.class))).willReturn(1L);    com.forgerock.authenticator.mechanisms.base.Mechanism.PartialMechanismBuilder mechanismBuilder = MINIMUM_OATH_BUILDER;    com.forgerock.authenticator.mechanisms.base.Mechanism mechanism = identity.addMechanism(mechanismBuilder);    org.junit.Assert.assertTrue(identity.getMechanisms().contains(mechanism));}<FAZZINI>getMechanisms<FAZZINI>{    return java.util.Collections.unmodifiableList(mechanismList);}<FAZZINI>none-fazzini<FAZZINI>getMechanisms()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(identity.getMechanisms().contains(mechanism))<FAZZINI>
https://github.com/maxpower47/PinDroid.git<FAZZINI>SaxUpdateParserTest<FAZZINI>testUpdateParsing<FAZZINI>{    java.io.InputStream is = new java.io.ByteArrayInputStream(updateTest.getBytes());    com.pindroid.xml.SaxUpdateParser parser = new com.pindroid.xml.SaxUpdateParser(is);    com.pindroid.client.Update r = parser.parse();    org.junit.Assert.assertEquals(1300993327000L, r.getLastUpdate());    try {        is.close();    } catch (java.io.IOException e) {        e.printStackTrace();    }}<FAZZINI>printStackTrace<FAZZINI>{    printStackTrace(java.lang.System.err);}<FAZZINI>none-fazzini<FAZZINI>printStackTrace()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(1300993327000L, r.getLastUpdate())<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>ReminderTest<FAZZINI>givenAReminderWithTextWhenToStringIsCalledThenTheTextIsReturned<FAZZINI>{    com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, "test");    org.junit.Assert.assertEquals("test", reminder.toString());}<FAZZINI>toString<FAZZINI>{    return text;}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("test", reminder.toString())<FAZZINI>
https://github.com/Ifsttar/NoiseCapture.git<FAZZINI>PeakFinderTest<FAZZINI>findPeaksIncreaseCondition<FAZZINI>{    org.noise_planet.noisecapture.util.PeakFinder peakFinder = new org.noise_planet.noisecapture.util.PeakFinder();    peakFinder.setMinIncreaseCount(3);    double[] values = new double[]{ 4, 5, 7, 13, 10, 9, 9, 10, 4, 6, 7, 8, 11, 3, 2, 2 };    long index = 0;    for (double value : values) {        peakFinder.add(index++, value);    }    int[] expectedIndex = new int[]{ 3, 12 };    java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> results = peakFinder.getPeaks();    int[] got = new int[results.size()];    for (int i = 0; i < results.size(); i++) {        got[i] = ((int) (results.get(i).index));    }    org.junit.Assert.assertArrayEquals(expectedIndex, got);}<FAZZINI>get<FAZZINI>null<FAZZINI>[i]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertArrayEquals(expectedIndex, got)<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>WearNotificationsTest<FAZZINI>testBuildStackedNotificationWithArchiveActionEnabled<FAZZINI>{    enableArchiveAction();    int notificationIndex = 0;    int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);    com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);    com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);    com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);    android.app.PendingIntent archivePendingIntent = createFakePendingIntent(1);    org.mockito.Mockito.when(actionCreator.createArchiveMessagePendingIntent(messageReference, notificationId)).thenReturn(archivePendingIntent);    android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);    org.junit.Assert.assertEquals(notification, result);    verifyExtendWasOnlyCalledOnce();    verifyAddAction(R.drawable.ic_action_archive_dark, "Archive", archivePendingIntent);}<FAZZINI>verifyAddAction<FAZZINI>{    org.mockito.Mockito.verify(builder).extend(action(icon, title, pendingIntent));}<FAZZINI>[R.drawable.ic_action_archive_dark, "Archive", archivePendingIntent]<FAZZINI>verifyAddAction(int,java.lang.String,android.app.PendingIntent)<FAZZINI>[int, java.lang.String, android.app.PendingIntent]<FAZZINI>org.junit.Assert.assertEquals(notification, result)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>PowTester<FAZZINI>powTest3<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.pow(-2.0, 2.999), calculate("pow(-2,2.999)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["pow(-2,2.999)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.pow(-2.0, 2.999), calculate("pow(-2,2.999)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/Suwie/improvebcs.git<FAZZINI>ImageUtilsTest<FAZZINI>profileImageResourceByGenderWithFemaleObjectReturnsFemaleResource<FAZZINI>{    org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(org.opensrp.api.constants.Gender.FEMALE), R.drawable.child_girl_infant);}<FAZZINI>profileImageResourceByGender<FAZZINI>{    if (org.apache.commons.lang3.StringUtils.isNotBlank(gender)) {        if (gender.equalsIgnoreCase(util.PathConstants.GENDER.MALE)) {            return R.drawable.child_boy_infant;        } else if (gender.equalsIgnoreCase(util.PathConstants.GENDER.FEMALE)) {            return R.drawable.child_girl_infant;        } else if (gender.toLowerCase().contains("trans")) {            return R.drawable.child_transgender_inflant;        }    }    return R.drawable.child_boy_infant;}<FAZZINI>[org.opensrp.api.constants.Gender.FEMALE]<FAZZINI>profileImageResourceByGender(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(org.opensrp.api.constants.Gender.FEMALE), R.drawable.child_girl_infant)<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderDetachInstancesTest<FAZZINI>testRRuleRDateCompleteFirstTwo<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);    queue.enqueue(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180103T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))));    queue.flush();    org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));    org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180103T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180103T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180103T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day).addDuration(day), due.addDuration(day).addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, java.lang.String.valueOf(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp())))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_NEEDS_ACTION)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))));}<FAZZINI>valueOf<FAZZINI>{    return java.lang.Integer.toString(i);}<FAZZINI>[org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED]<FAZZINI>valueOf(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180103T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180103T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180103T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day).addDuration(day), due.addDuration(day).addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, java.lang.String.valueOf(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp())))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_NEEDS_ACTION)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))))<FAZZINI>
https://github.com/andreynovikov/trekarta.git<FAZZINI>CoordinatesParserTest<FAZZINI>testNumericLexer<FAZZINI>{    java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("39.095973 -94.573414");    java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39.095973", 0, 9), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 11, 1), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94.573414", 12, 9));    org.junit.Assert.assertEquals(expected, actual);}<FAZZINI>asList<FAZZINI>{    return new java.util.Arrays.ArrayList<>(a);}<FAZZINI>[new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39.095973", 0, 9), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 11, 1), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94.573414", 12, 9)]<FAZZINI>asList(java.lang.Object[])<FAZZINI>[java.lang.Object[]]<FAZZINI>org.junit.Assert.assertEquals(expected, actual)<FAZZINI>
https://github.com/yasmindunsky/FrizzleApp.git<FAZZINI>CodeCheckUtilsTest<FAZZINI>checkIfSpeakoutIsEmpty_speakOutEmpty_true<FAZZINI>{    java.lang.String code = "speakOut(\"\");";    boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakoutIsEmpty(code);    org.junit.Assert.assertEquals(true, answer);}<FAZZINI>checkIfSpeakoutIsEmpty<FAZZINI>{    java.lang.String speakOutPrefix = com.frizzl.app.frizzleapp.CodeCheckUtils.speakOutIdentification + "(\"";    int i = code.indexOf(speakOutPrefix);    if (i < 0) {        return true;    }    int nextCharIndex = i + speakOutPrefix.length();    java.lang.String nextChar = code.substring(nextCharIndex, nextCharIndex + 1);    return java.util.Objects.equals(nextChar, "\"");}<FAZZINI>[code]<FAZZINI>checkIfSpeakoutIsEmpty(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(true, answer)<FAZZINI>
https://github.com/nishaSTM/Logistic-Demo-App.git<FAZZINI>LocationViewModelTest<FAZZINI>getDescriptionAssertValue<FAZZINI>{    java.lang.String actualDescriptionValue = locationViewModel.description.getValue();    org.junit.Assert.assertEquals(deliveryItem.getDescription(), actualDescriptionValue);}<FAZZINI>getDescription<FAZZINI>{    return description;}<FAZZINI>none-fazzini<FAZZINI>getDescription()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(deliveryItem.getDescription(), actualDescriptionValue)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreNotificationManagerTest<FAZZINI>whenANotificationIsSentThenTheContentTitleIsSet<FAZZINI>{    android.content.Intent intent = buildIntentToListenFor();    groceryStoreNotificationManager.sendNotification(intent);    org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();    org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));    org.junit.Assert.assertEquals((org.robolectric.RuntimeEnvironment.application.getString(R.string.app_name) + ": ") + com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, notification.getContentTitle());}<FAZZINI>getShadowNotificationManager<FAZZINI>{    return org.robolectric.Shadows.shadowOf(((android.app.NotificationManager) (org.robolectric.RuntimeEnvironment.application.getSystemService(android.content.Context.NOTIFICATION_SERVICE))));}<FAZZINI>none-fazzini<FAZZINI>getShadowNotificationManager()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals((org.robolectric.RuntimeEnvironment.application.getString(R.string.app_name) + ": ") + com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, notification.getContentTitle())<FAZZINI>
https://github.com/WrenSecurity/forgerock-authenticator-android.git<FAZZINI>IdentityDatabaseTest<FAZZINI>cantAddDuplicateMechanism<FAZZINI>{    com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(database.addMechanism(PREREQUISITE_MECHANISM), -1L);    org.junit.Assert.assertEquals(database.addMechanism(PREREQUISITE_MECHANISM), -1L);}<FAZZINI>addMechanism<FAZZINI>{    java.lang.String issuer = mechanism.getOwner().getIssuer();    java.lang.String accountName = mechanism.getOwner().getAccountName();    java.lang.String type = mechanism.getInfo().getMechanismString();    int version = mechanism.getVersion();    java.lang.String options = gson.toJson(mechanism.asMap());    android.content.ContentValues values = new android.content.ContentValues();    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ISSUER, issuer);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ACCOUNT_NAME, accountName);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.TYPE, type);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.VERSION, version);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.OPTIONS, options);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_UID, mechanism.getMechanismUID());    long rowId = database.insert(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_TABLE_NAME, null, values);    return rowId;}<FAZZINI>[PREREQUISITE_MECHANISM]<FAZZINI>addMechanism(com.forgerock.authenticator.mechanisms.base.Mechanism)<FAZZINI>[com.forgerock.authenticator.mechanisms.base.Mechanism]<FAZZINI>org.junit.Assert.assertEquals(database.addMechanism(PREREQUISITE_MECHANISM), -1L)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>tanTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 2), calculate("tan(pi/2)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["tan(pi/2)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 2), calculate("tan(pi/2)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/namlit/siteswap_generator.git<FAZZINI>SiteswapTest<FAZZINI>testMergeSyncSiteswapsFailOnInvalidSiteswap<FAZZINI>{    siteswaplib.Siteswap s1 = new siteswaplib.Siteswap("86277");    siteswaplib.Siteswap s2 = new siteswaplib.Siteswap("6787a");    siteswaplib.Siteswap merged = siteswaplib.Siteswap.mergeCompatible(s1, s2);    org.junit.Assert.assertEquals(merged, null);}<FAZZINI>mergeCompatible<FAZZINI>{    siteswaplib.Siteswap i1 = s1.toInterface().toPattern();    siteswaplib.Siteswap i2 = s2.toInterface().toPattern();    if (!s2.rotateToInterface(i1)) {        return null;    }    int length = 2 * s1.period_length();    siteswaplib.Siteswap mergedSiteswap = new siteswaplib.Siteswap(new byte[length]);    mergedSiteswap.setSynchronousStartPosition(s1.getSynchronousStartPosition());    mergedSiteswap.setNumberOfSynchronousHands(s1.getNumberOfSynchronousHands());    mergedSiteswap.setNumberOfJugglers(s1.getNumberOfJugglers());    for (int i = 0; i < s1.period_length(); ++i) {        mergedSiteswap.set(2 * i, s1.at(2 * i));        mergedSiteswap.set((2 * i) + 1, s2.at((2 * i) + 1));    }    if (!mergedSiteswap.isValid()) {        return null;    }    return mergedSiteswap;}<FAZZINI>[s1, s2]<FAZZINI>mergeCompatible(siteswaplib.Siteswap,siteswaplib.Siteswap)<FAZZINI>[siteswaplib.Siteswap, siteswaplib.Siteswap]<FAZZINI>org.junit.Assert.assertEquals(merged, null)<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderRecurrenceTest<FAZZINI>testRRuleWithOverride2<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.opentaskspal.tables.TasksTable(mAuthority);    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, tasksTable));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<org.dmfs.tasks.contract.TaskContract.Instances>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override")), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(tasksTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(third.shiftTimeZone(start.getTimeZone()), third.shiftTimeZone(start.getTimeZone()).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, third))), new org.dmfs.android.contentpal.operations.Counted<>(4, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(third, third.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(third), 2), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fourth, fourth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fourth), 3), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fifth, fifth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fifth), 4), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<org.dmfs.tasks.contract.TaskContract.Instances>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override")), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(tasksTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(third.shiftTimeZone(start.getTimeZone()), third.shiftTimeZone(start.getTimeZone()).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, third))), new org.dmfs.android.contentpal.operations.Counted<>(4, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(third, third.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(third), 2), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fourth, fourth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fourth), 3), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fifth, fifth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fifth), 4), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))))<FAZZINI>
https://github.com/yasmindunsky/FrizzleApp.git<FAZZINI>CodeCheckUtilsTest<FAZZINI>checkIfFunctionSignatureIsValid_missingSpace_false<FAZZINI>{    java.lang.String code = "functionotherName(element){speakOut(\"hello\");}";    boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfFunctionSignatureIsValid(code);    org.junit.Assert.assertEquals(false, answer);}<FAZZINI>checkIfFunctionSignatureIsValid<FAZZINI>{    int i = code.indexOf(com.frizzl.app.frizzleapp.CodeCheckUtils.functionIdentification + " ");    if (i < 0) {        return false;    }    code = code.substring(i + (com.frizzl.app.frizzleapp.CodeCheckUtils.functionIdentification + " ").length(), code.length());    i = code.indexOf(com.frizzl.app.frizzleapp.CodeCheckUtils.functionParams + "{");    if (i < 0) {        return false;    }    code = code.substring(i + com.frizzl.app.frizzleapp.CodeCheckUtils.functionParams.length(), code.length());    i = code.indexOf("}");    return i >= 0;}<FAZZINI>[code]<FAZZINI>checkIfFunctionSignatureIsValid(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(false, answer)<FAZZINI>
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git<FAZZINI>RecipeTest<FAZZINI>setNic<FAZZINI>{    recipe.setNic(12);    org.junit.Assert.assertThat(recipe.getNic(), org.hamcrest.CoreMatchers.equalTo(12));}<FAZZINI>equalTo<FAZZINI>{    return org.hamcrest.core.IsEqual.equalTo(operand);}<FAZZINI>[12]<FAZZINI>equalTo(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(recipe.getNic(), org.hamcrest.CoreMatchers.equalTo(12))<FAZZINI>
https://github.com/dsolonenko/financisto.git<FAZZINI>OpenExchangeRatesDownloaderTest<FAZZINI>should_skip_unknown_currency<FAZZINI>{    givenResponseFromWebService(ru.orangesoftware.financisto.rates.AbstractRatesDownloaderTest.anyUrl(), "open_exchange_normal_response.json");    ru.orangesoftware.financisto.rates.ExchangeRate rate = downloadRate("USD", "AAA");    org.junit.Assert.assertFalse(rate.isOk());    assertRate(rate, "USD", "AAA");}<FAZZINI>assertRate<FAZZINI>{    org.junit.Assert.assertEquals("Expected " + fromCurrency, currency(fromCurrency).id, exchangeRate.fromCurrencyId);    org.junit.Assert.assertEquals("Expected " + toCurrency, currency(toCurrency).id, exchangeRate.toCurrencyId);}<FAZZINI>[rate, "USD", "AAA"]<FAZZINI>assertRate(ru.orangesoftware.financisto.rates.ExchangeRate,java.lang.String,java.lang.String)<FAZZINI>[ru.orangesoftware.financisto.rates.ExchangeRate, java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertFalse(rate.isOk())<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>MathTester<FAZZINI>floorTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.floor(-2.5), calculate("floor(-2.5)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["floor(-2.5)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.floor(-2.5), calculate("floor(-2.5)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/niccokunzmann/mundraub-android.git<FAZZINI>NominatimTest<FAZZINI>testCreatedSearchIsEmpty<FAZZINI>{    org.junit.Assert.assertEquals(search.size(), 0);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(search.size(), 0)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>ImportExportActivityHandlerTest<FAZZINI>cannotHandleResultForOtherRequestCodes<FAZZINI>{    org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode()))<FAZZINI>
https://github.com/sicheng-zhu/HouseholdManagement.git<FAZZINI>ValidatorUnitTest<FAZZINI>assert_isNotValidFirstName<FAZZINI>{    java.lang.String name = "";    org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name));}<FAZZINI>isValidPattern<FAZZINI>{    java.util.regex.Pattern p = null;    if (patternsEnum.equals(com.householdmanagement.controller.Patterns.FIRST_NAME)) {        p = com.householdmanagement.controller.Validator.FIRST_NAME;    } else if (patternsEnum.equals(com.householdmanagement.controller.Patterns.LAST_NAME)) {        p = com.householdmanagement.controller.Validator.LAST_NAME;    } else if (patternsEnum.equals(com.householdmanagement.controller.Patterns.PASSWORD)) {        p = com.householdmanagement.controller.Validator.PASSWORD;    }    java.util.regex.Matcher matcher = p.matcher(toMatch);    if (matcher.matches()) {        return true;    } else {        return false;    }}<FAZZINI>[com.householdmanagement.controller.Patterns.FIRST_NAME, name]<FAZZINI>isValidPattern(java.lang.Enum,java.lang.String)<FAZZINI>[java.lang.Enum<com.householdmanagement.controller.Patterns>, java.lang.String]<FAZZINI>org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationServiceTest<FAZZINI>allTranslationsShouldBeMinimizedByDefault<FAZZINI>{    for (int index = 0; index < translationService.getCurrentTranslations().size(); index++) {        org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(index));    }}<FAZZINI>cardIsExpanded<FAZZINI>{    return (expanded.size() > 0) && expanded.get(position);}<FAZZINI>[index]<FAZZINI>cardIsExpanded(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(index))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>RefuseSurveyForParticipantStrategyTest<FAZZINI>ShouldNotInactivateWhenSurveyIsDone<FAZZINI>{    org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);    org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate());}<FAZZINI>shouldInactivate<FAZZINI>{    boolean deferredStatus = participant.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    boolean notSelectedStatus = participant.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    return !(deferredStatus || notSelectedStatus);}<FAZZINI>none-fazzini<FAZZINI>shouldInactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>RemoveNotificationResultTest<FAZZINI>cancelNotification_getNotificationId_shouldReturnNotificationId<FAZZINI>{    com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);    org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId());}<FAZZINI>getNotificationId<FAZZINI>{    if (isUnknownNotification()) {        throw new java.lang.IllegalStateException("getNotificationId() can only be called when " + "isUnknownNotification() returns false");    }    return notificationId;}<FAZZINI>none-fazzini<FAZZINI>getNotificationId()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId())<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationsActivityTest<FAZZINI>onCreate_shouldShowDeckNameInToolbar<FAZZINI>{    org.junit.Assert.assertThat(translationsActivity.getSupportActionBar().getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.DEFAULT_DECK_NAME));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[org.mercycorps.translationcards.activity.TranslationsActivityTest.DEFAULT_DECK_NAME]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(translationsActivity.getSupportActionBar().getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.DEFAULT_DECK_NAME))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NewParticipantActivityHandlerTest<FAZZINI>ShouldNotHandleRequestForImproperRequestCode<FAZZINI>{    org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()));}<FAZZINI>getCode<FAZZINI>{    return code;}<FAZZINI>none-fazzini<FAZZINI>getCode()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode()))<FAZZINI>
https://github.com/artem122ya/TomatoTimer-Android.git<FAZZINI>TimerViewTest<FAZZINI>onTimerStarted_shouldSetSweepAngleToHalf_whenPassedHalfOfTime<FAZZINI>{    timerView.onTimerStarted(10000, 5300);    org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0);}<FAZZINI>getCurrentArcSweepAngle<FAZZINI>{    return currentArcSweepAngle;}<FAZZINI>none-fazzini<FAZZINI>getCurrentArcSweepAngle()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>AngleTester<FAZZINI>angleTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("cos(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), angleUnits);}<FAZZINI>["cos(45)", com.guliash.parser.AngleUnits.DEG]<FAZZINI>calculate(java.lang.String,com.guliash.parser.AngleUnits)<FAZZINI>[java.lang.String, com.guliash.parser.AngleUnits]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("cos(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/sicheng-zhu/HouseholdManagement.git<FAZZINI>ValidatorUnitTest<FAZZINI>assert_isValidAmount<FAZZINI>{    java.lang.String amount = "208.16";    org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidAmount(amount, 1000.0F));}<FAZZINI>isValidAmount<FAZZINI>{    java.lang.Float f = java.lang.Float.parseFloat(s);    if (f < maxAmount) {        return true;    } else {        return false;    }}<FAZZINI>[amount, 1000.0F]<FAZZINI>isValidAmount(java.lang.String,java.lang.Float)<FAZZINI>[java.lang.String, java.lang.Float]<FAZZINI>org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidAmount(amount, 1000.0F))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>DeckTest<FAZZINI>getCreationDate_shouldFormatCreationDate<FAZZINI>{    org.junit.Assert.assertThat(deck.getCreationDateString(), org.hamcrest.CoreMatchers.is("02/08/16"));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>["02/08/16"]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(deck.getCreationDateString(), org.hamcrest.CoreMatchers.is("02/08/16"))<FAZZINI>
https://github.com/proninyaroslav/libretorrent.git<FAZZINI>LoggerTest<FAZZINI>testGetLogEntries_entriesLessThanMaxSize<FAZZINI>{    org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(10);    for (int i = 1; i <= 5; i++) {        logger.send(new org.proninyaroslav.libretorrent.core.logger.LogEntry(i, "TEST", "" + i, i));    }    org.proninyaroslav.libretorrent.core.logger.LogEntry[] expected = new org.proninyaroslav.libretorrent.core.logger.LogEntry[]{ new org.proninyaroslav.libretorrent.core.logger.LogEntry(3, "TEST", "3", 3), new org.proninyaroslav.libretorrent.core.logger.LogEntry(4, "TEST", "4", 4), new org.proninyaroslav.libretorrent.core.logger.LogEntry(5, "TEST", "5", 5) };    java.util.List<org.proninyaroslav.libretorrent.core.logger.LogEntry> actual = logger.getEntries(2, 5);    for (int i = 0; i < actual.size(); i++) {        org.junit.Assert.assertEquals(expected[i], actual.get(i));    }}<FAZZINI>get<FAZZINI>null<FAZZINI>[i]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(expected[i], actual.get(i))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>UploadFileTaskTest<FAZZINI>testFindErrorShouldReturnValidError<FAZZINI>{    okhttp3.ResponseBody errorBody = org.mockito.Mockito.mock(okhttp3.ResponseBody.class);    org.mockito.Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");    org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody));}<FAZZINI>findError<FAZZINI>{    java.lang.String error = null;    if (errorBody != null) {        try {            java.lang.String rawError = errorBody.string();            org.json.JSONObject jsonObject = new org.json.JSONObject(rawError);            error = jsonObject.getString("error");        } catch (org.json.JSONException | java.io.IOException ex) {            timber.log.Timber.e(ex);        }    }    return error;}<FAZZINI>[errorBody]<FAZZINI>findError(okhttp3.ResponseBody)<FAZZINI>[okhttp3.ResponseBody]<FAZZINI>org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>TextPartFinderTest<FAZZINI>findFirstTextPart_withMultipartAlternativeContainingOnlyTextHtmlPart<FAZZINI>{    com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));    com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);    org.junit.Assert.assertEquals(expected, result);}<FAZZINI>findFirstTextPart<FAZZINI>{    java.lang.String mimeType = part.getMimeType();    com.fsck.k9.mail.Body body = part.getBody();    if (body instanceof com.fsck.k9.mail.Multipart) {        com.fsck.k9.mail.Multipart multipart = ((com.fsck.k9.mail.Multipart) (body));        if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "multipart/alternative")) {            return findTextPartInMultipartAlternative(multipart);        } else {            return findTextPartInMultipart(multipart);        }    } else if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/plain") || com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/html")) {        return part;    }    return null;}<FAZZINI>[part]<FAZZINI>findFirstTextPart(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertEquals(expected, result)<FAZZINI>
https://github.com/artemkv/notedok-android-app.git<FAZZINI>WikiToHtmlFormatterTest<FAZZINI>cancelFormatting<FAZZINI>{    java.lang.String text = "This is *bold* and this is _italic_ formatting.\nThis is {&quot;no *bold* and _italic_ formatting&quot;}*and here there is*\nThis is a link [http://++notedok++.com]. Inside the link formatting doesn't apply\nImmediately after a link [http://notedok.com]*text is formatted*.\nThe {&quot;rest of \nthe _text_\nis not *formatted*";    java.lang.String expectedText = "This is <b>bold</b> and this is <i>italic</i> formatting.\nThis is no *bold* and _italic_ formatting<b>and here there is</b>\nThis is a link <a href='http://++notedok++.com' target='_blank'>http://++notedok++.com</a>. Inside the link formatting doesn't apply\nImmediately after a link <a href='http://notedok.com' target='_blank'>http://notedok.com</a><b>text is formatted</b>.\nThe rest of \nthe _text_\nis not *formatted*\n";    com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();    java.lang.String formattedText = formatter.format(text);    org.junit.Assert.assertEquals("cancel formatting", expectedText, formattedText);}<FAZZINI>format<FAZZINI>{    java.lang.String[] strings = wiki.split("\\r\\n|\\n|\\r", -1);    java.lang.StringBuilder sb = new java.lang.StringBuilder(wiki.length());    if (strings.length > 0) {        for (int i = 0; i < strings.length; i++) {            sb.append(strings[i]);            sb.append("\n");        }        _text = sb.toString();    } else {        _text = "\n";    }    for (_pos = 0; _pos < _text.length(); _pos++) {        _char = getCharAt(_text, _pos);        if (_char.equals("*")) {            tryWrap("*", "<b>", "</b>");            tryUl("*");        } else if (_char.equals("_")) {            tryWrap("_", "<i>", "</i>");        } else if (_char.equals("-")) {            tryWrap("--", "<del>", "</del>");            tryUl("-");        } else if (_char.equals("+")) {            tryWrap("++", "<u>", "</u>");        } else if (_char.equals("^")) {            tryWrap("^", "<sup>", "</sup>");        } else if (_char.equals("~")) {            tryWrap("~", "<sub>", "</sub>");        } else if (_char.equals("{")) {            tryEscaped();            tryCode();        } else if (_char.equals("[")) {            tryAnchor();        } else if (_char.equals("!")) {            tryHeader("!");        } else if (_char.equals("h")) {            tryNumberedHeader();        }    }    return _text;}<FAZZINI>[text]<FAZZINI>format(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("cancel formatting", expectedText, formattedText)<FAZZINI>
https://github.com/MicGun/LeLeLe.git<FAZZINI>ElectricityLandlordUnitTest<FAZZINI>testMonthBeUpdated<FAZZINI>{    org.junit.Assert.assertEquals("12", mElectricityLandlordPresenter.getMonthBeUpdated(0));}<FAZZINI>getMonthBeUpdated<FAZZINI>{    java.lang.String monthBeUpdated;    if (month == 0) {        monthBeUpdated = "12";    } else if (month < 10) {        monthBeUpdated = "0" + java.lang.String.valueOf(month);    } else {        monthBeUpdated = java.lang.String.valueOf(month);    }    return monthBeUpdated;}<FAZZINI>[0]<FAZZINI>getMonthBeUpdated(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals("12", mElectricityLandlordPresenter.getMonthBeUpdated(0))<FAZZINI>
https://github.com/AndrewPochapsky/RoutinePlanner.git<FAZZINI>JsonTests<FAZZINI>routinesToJson_SingleRoutineJson_ReturnsValidJson<FAZZINI>{    java.lang.String json = ((((("[\n" + "  {\n") + "    \"name\": \"test\",\n") + "    \"interval\": 5,\n") + "    \"savedDate\": \"0000\"\n") + "  }\n") + "]";    json = json.replaceAll("[\r\n]+", " ");    json = json.replaceAll(" ", "");    com.company.loaf.routinescheduler.Routine[] routines = new com.company.loaf.routinescheduler.Routine[]{ new com.company.loaf.routinescheduler.Routine("test", 5, "0000") };    java.lang.String returnedJson = com.company.loaf.routinescheduler.utils.JSONUtils.routinesToJson(routines);    org.junit.Assert.assertEquals(json, returnedJson);}<FAZZINI>routinesToJson<FAZZINI>{    return new com.google.gson.Gson().toJson(routines);}<FAZZINI>[routines]<FAZZINI>routinesToJson(com.company.loaf.routinescheduler.Routine[])<FAZZINI>[com.company.loaf.routinescheduler.Routine[]]<FAZZINI>org.junit.Assert.assertEquals(json, returnedJson)<FAZZINI>
https://github.com/linux-colonel/AdminControl.git<FAZZINI>KeyguardFeaturesTest<FAZZINI>test_changeAllKeyguardFeaturesDisabled<FAZZINI>{    int expected = android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL;    int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL, true);    org.junit.Assert.assertEquals(expected, result);}<FAZZINI>setFingerprintDisabled<FAZZINI>{    int keyguardDisabledFeatures;    if (fingerprintDisabled) {        keyguardDisabledFeatures = currentDisabledFeatures | android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT;    } else {        keyguardDisabledFeatures = currentDisabledFeatures & (~android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT);    }    return keyguardDisabledFeatures;}<FAZZINI>[android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL, true]<FAZZINI>setFingerprintDisabled(int,boolean)<FAZZINI>[int, boolean]<FAZZINI>org.junit.Assert.assertEquals(expected, result)<FAZZINI>
https://github.com/kalaspuffar/secure-quick-reliable-login.git<FAZZINI>SQRLURLUnitTest<FAZZINI>extensionCaseAndLimitByQuestionMark<FAZZINI>{    java.lang.String cryptDomain = testMatch("sqrl://EXAMPLE.COM/JIMBO?x=16&nut=oOB4QOFJux5Z");    org.junit.Assert.assertEquals("example.com/JIMBO", cryptDomain);}<FAZZINI>testMatch<FAZZINI>{    org.ea.sqrl.processors.CommunicationHandler communicationHandler = org.ea.sqrl.processors.CommunicationHandler.getInstance(null);    java.util.regex.Matcher mSqrlMatcher = org.ea.sqrl.processors.CommunicationHandler.sqrlPattern.matcher(url);    if (!mSqrlMatcher.matches()) {        throw new java.lang.Exception("Incorrect URL");    }    communicationHandler.setDomain(mSqrlMatcher.group(1), mSqrlMatcher.group(2));    return new java.lang.String(communicationHandler.getDomain());}<FAZZINI>["sqrl://EXAMPLE.COM/JIMBO?x=16&nut=oOB4QOFJux5Z"]<FAZZINI>testMatch(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("example.com/JIMBO", cryptDomain)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>RemindersRecyclerViewAdapterTest<FAZZINI>whenTheViewHolderIsCreatedThenTheReminderListViewHolderIsNotNull<FAZZINI>{    android.support.v7.widget.RecyclerView viewGroup = getRecyclerView();    com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = new com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter(reminders, activity);    com.groceryreminder.views.reminders.ReminderListViewHolder viewHolder = adapter.onCreateViewHolder(viewGroup, -1);    org.junit.Assert.assertNotNull(viewHolder);}<FAZZINI>getRecyclerView<FAZZINI>{    android.support.v7.widget.RecyclerView viewGroup = ((android.support.v7.widget.RecyclerView) (activity.findViewById(R.id.reminders_recycler_view)));    viewGroup.setLayoutManager(new android.support.v7.widget.LinearLayoutManager(activity));    return viewGroup;}<FAZZINI>none-fazzini<FAZZINI>getRecyclerView()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(viewHolder)<FAZZINI>
https://github.com/maciej-kaznowski/Londair.git<FAZZINI>PrefUtilsTest<FAZZINI>setInt<FAZZINI>{    java.lang.String key = "key";    int value = 0;    com.innercirclesoftware.londair.utils.PrefUtils.setInt(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value);    org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getInt(key, -1));}<FAZZINI>setInt<FAZZINI>{    timber.log.Timber.v("Settings %s to integer %s", key, value);    sharedPreferences.edit().putInt(key, value).apply();}<FAZZINI>[com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value]<FAZZINI>setInt(android.content.SharedPreferences,java.lang.String,int)<FAZZINI>[android.content.SharedPreferences, java.lang.String, int]<FAZZINI>org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getInt(key, -1))<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderDetachInstancesTest<FAZZINI>testRRuleRDateCompleteOnlyRRuleInstances<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);    queue.enqueue(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180104T123456Z")))))));    queue.flush();    org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));    org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(org.dmfs.rfc5545.DateTime.parse("20180106T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180106T133456Z")), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))));}<FAZZINI>valueOf<FAZZINI>{    return java.lang.Integer.toString(i);}<FAZZINI>[org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED]<FAZZINI>valueOf(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(org.dmfs.rfc5545.DateTime.parse("20180106T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180106T133456Z")), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))))<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SongServiceTest<FAZZINI>createSongInvalidTest<FAZZINI>{    java.lang.String path = null;    java.lang.String name = null;    java.lang.String artist = null;    java.lang.String album = null;    java.lang.String genre = null;    classUnderTest.createSong(path, name, artist, album, genre);    org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 6", classUnderTest.getSongs().size() == 5);}<FAZZINI>getSongs<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Song> songs = songPersistence.getAllSongs();    if (songs != null) {        for (fifthelement.theelement.objects.Song song : songs) {            if (song.getAuthor() != null) {                song.setAuthor(authorPersistence.getAuthorByUUID(song.getAuthor().getUUID()));            }            if (song.getAlbum() != null) {                fifthelement.theelement.objects.Album album = albumPersistence.getAlbumByUUID(song.getAlbum().getUUID());                if (album.getAuthor() != null) {                    album.setAuthor(authorPersistence.getAuthorByUUID(album.getAuthor().getUUID()));                }                song.setAlbum(album);            }        }    }    return songs;}<FAZZINI>none-fazzini<FAZZINI>getSongs()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 6", classUnderTest.getSongs().size() == 5)<FAZZINI>
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git<FAZZINI>PreferenceUtilsTest<FAZZINI>testLoadCurPlayingFail<FAZZINI>{    org.mockito.Mockito.when(context.getSharedPreferences(org.mockito.Matchers.anyString(), org.mockito.Matchers.anyInt())).thenReturn(sharedBrokenPreferences);    org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context));}<FAZZINI>loadCurPlaying<FAZZINI>{    if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {        android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "loadCurPlaying");    }    android.content.SharedPreferences preferences = context.getSharedPreferences(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_PREFERENCES, android.content.Context.MODE_PRIVATE);    xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    try {        int queuePos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_POS, xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.UNKNOWN_POS);        int seekPos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_SEEKPOS, 0);        state.setQueuePos(queuePos);        state.setSeekPos(seekPos);    } catch (java.lang.ClassCastException e) {        if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {            android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "Incorrect type found for preference");        }        state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    }    return state;}<FAZZINI>[context]<FAZZINI>loadCurPlaying(android.content.Context)<FAZZINI>[android.content.Context]<FAZZINI>org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context))<FAZZINI>
https://github.com/hei-connect/android.git<FAZZINI>FakeInternalStorageManagerTest<FAZZINI>readShouldFail<FAZZINI>{    mFakeInternalStorage.write(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME, "");    mFakeInternalStorage.setShouldFail(true);    mFakeInternalStorage.read(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME);    mFakeInternalStorage.setShouldFail(false);    org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME));}<FAZZINI>exists<FAZZINI>{    return mFileNameToBytes.containsKey(fileName);}<FAZZINI>[com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME]<FAZZINI>exists(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME))<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>HtmlSanitizerTest<FAZZINI>shouldRemoveMetaRefreshWithMixedCaseAttributeValue<FAZZINI>{    java.lang.String html = (("<html>" + "<head><meta http-equiv=\"Refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";    org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html));}<FAZZINI>sanitize<FAZZINI>{    org.htmlcleaner.TagNode rootNode = com.fsck.k9.helper.HtmlSanitizer.HTML_CLEANER.clean(html);    com.fsck.k9.helper.HtmlSanitizer.removeMetaRefresh(rootNode);    return com.fsck.k9.helper.HtmlSanitizer.HTML_SERIALIZER.getAsString(rootNode, "UTF8");}<FAZZINI>[html]<FAZZINI>sanitize(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html))<FAZZINI>
https://github.com/artem122ya/TomatoTimer-Android.git<FAZZINI>TimerViewTest<FAZZINI>onTimerUpdate_shouldSetDisplayedTime_whenPassedTime<FAZZINI>{    timerView.onTimerStopped(61000, 61000);    org.junit.Assert.assertEquals("01:01", timerView.getDisplayedTime());}<FAZZINI>getDisplayedTime<FAZZINI>{    return displayedTime;}<FAZZINI>none-fazzini<FAZZINI>getDisplayedTime()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("01:01", timerView.getDisplayedTime())<FAZZINI>
https://github.com/Izodine/Capstone-Project.git<FAZZINI>IASMUtilsTest<FAZZINI>testIsNumeric_WITH_EMPTYSTRING<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Integer.valueOf(0x0), com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.radix16Parse(""));}<FAZZINI>radix16Parse<FAZZINI>{    if (operand.trim().isEmpty()) {        return 0;    }    operand = operand.toUpperCase();    if (operand.contains("H")) {        return com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.bigIntStringToInt(operand.replace("H", ""), 16);    }    if (operand.contains("0X")) {        return com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.bigIntStringToInt(operand.replace("X", ""), 16);    }    return com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.bigIntStringToInt(operand, 16);}<FAZZINI>[""]<FAZZINI>radix16Parse(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Integer.valueOf(0x0), com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.radix16Parse(""))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>MyDeckAdapterTest<FAZZINI>shouldHaveTranslationLanguagesTextWhenDeckIsPresent<FAZZINI>{    android.widget.TextView translationLanguagesTextView = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findAnyView(view, R.id.translation_languages);    java.lang.String expectedLanguages = (org.mercycorps.translationcards.activity.MyDeckAdapterTest.ALPHABETICALLY_HIGH_LANGUAGE.toUpperCase() + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DELIMITER) + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_TRANSLATION_LANGUAGE.toUpperCase();    org.junit.Assert.assertEquals(expectedLanguages, translationLanguagesTextView.getText().toString());}<FAZZINI>toUpperCase<FAZZINI>{    return toUpperCase(java.util.Locale.getDefault());}<FAZZINI>none-fazzini<FAZZINI>toUpperCase()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(expectedLanguages, translationLanguagesTextView.getText().toString())<FAZZINI>
https://github.com/proninyaroslav/libretorrent.git<FAZZINI>FileSystemFacadeTest<FAZZINI>getDirName<FAZZINI>{    fsResolver.existsFileNames = java.util.Collections.singletonList("bar");    org.junit.Assert.assertEquals("bar", fakeFs.getDirPath(android.net.Uri.parse("file///root/bar")));    fsResolver.existsFileNames = null;}<FAZZINI>getDirPath<FAZZINI>{    org.proninyaroslav.libretorrent.core.system.FsModule fsModule = fsResolver.resolveFsByUri(dir);    return fsModule.getDirPath(dir);}<FAZZINI>[android.net.Uri.parse("file///root/bar")]<FAZZINI>getDirPath(android.net.Uri)<FAZZINI>[android.net.Uri]<FAZZINI>org.junit.Assert.assertEquals("bar", fakeFs.getDirPath(android.net.Uri.parse("file///root/bar")))<FAZZINI>
https://github.com/hei-connect/android.git<FAZZINI>StudioViewModelTest<FAZZINI>approvalCancel<FAZZINI>{    mViewModel.onPhotoTaken(createMockedImage());    assertEditState();    mViewModel.onCancel();    assertCameraState();    org.junit.Assert.assertTrue(mView.mPreviewRestored);}<FAZZINI>assertCameraState<FAZZINI>{    org.awaitility.Awaitility.await().untilAsserted(new org.awaitility.core.ThrowingRunnable() {        @java.lang.Override        public void run() throws java.lang.Throwable {            org.junit.Assert.assertEquals(com.truethat.android.viewmodel.StudioViewModel.DirectingState.CAMERA, mViewModel.getState());        }    });    org.junit.Assert.assertTrue(mView.isToolbarVisible());    org.junit.Assert.assertTrue(mViewModel.mSwitchCameraButtonVisibility.get());    org.junit.Assert.assertFalse(mViewModel.mSendButtonVisibility.get());    org.junit.Assert.assertFalse(mViewModel.mCancelButtonVisibility.get());    org.junit.Assert.assertFalse(mViewModel.mLoadingImageVisibility.get());    org.junit.Assert.assertFalse(mViewModel.mScenePreviewVisibility.get());    org.junit.Assert.assertTrue(mViewModel.mCameraPreviewVisibility.get());    if (mViewModel.getDirectedScene() != null) {        org.junit.Assert.assertNotNull(mViewModel.getChosenReaction());    }    org.junit.Assert.assertNull(mView.mDisplayedMedia);}<FAZZINI>none-fazzini<FAZZINI>assertCameraState()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(mView.mPreviewRestored)<FAZZINI>
https://github.com/xbmc/Kore.git<FAZZINI>SlideUpPanelTests<FAZZINI>setVolume<FAZZINI>{    final int volume = 16;    org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().setVolume(volume, true);    org.junit.Assert.assertTrue(org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume() == volume);    expandPanel();    androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_seek_bar)).check(androidx.test.espresso.assertion.ViewAssertions.matches(org.xbmc.kore.testhelpers.Matchers.withProgress(volume)));    androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_volume_text)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.withText(java.lang.String.valueOf(volume))));}<FAZZINI>valueOf<FAZZINI>{    return java.lang.Integer.toString(i);}<FAZZINI>[volume]<FAZZINI>valueOf(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume() == volume)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>EditParticipantActivityHandlerTest<FAZZINI>ShouldInactivateWhenParticipantSurveyIsDone<FAZZINI>{    android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);    org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);    org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate());}<FAZZINI>withMenu<FAZZINI>{    this.menu = menu;    return this;}<FAZZINI>[menuMock]<FAZZINI>withMenu(android.view.Menu)<FAZZINI>[android.view.Menu]<FAZZINI>org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate())<FAZZINI>
https://github.com/charlesmadere/that-lil-hummingbird.git<FAZZINI>FeedTest<FAZZINI>testHasGroups<FAZZINI>{    org.junit.Assert.assertFalse(mFeed.hasGroups());}<FAZZINI>hasGroups<FAZZINI>{    return (mGroups != null) && (!mGroups.isEmpty());}<FAZZINI>none-fazzini<FAZZINI>hasGroups()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(mFeed.hasGroups())<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>LanguagesImportUtilityTest<FAZZINI>shouldRemoveCharactersAfterTwoLetterIsoCode<FAZZINI>{    java.util.Map<java.lang.String, java.util.List<java.lang.String>> actualValues = org.mercycorps.translationcards.porting.LanguagesImportUtilityTest.languagesImportUtility.getLanguageMap();    org.junit.Assert.assertEquals(expectedValues, actualValues);}<FAZZINI>getLanguageMap<FAZZINI>{    return languageMap;}<FAZZINI>none-fazzini<FAZZINI>getLanguageMap()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(expectedValues, actualValues)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>sinTest2<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.PI / 4), calculate("sin(pi / 4)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), angleUnits);}<FAZZINI>["sin(pi / 4)", com.guliash.parser.AngleUnits.RAD]<FAZZINI>calculate(java.lang.String,com.guliash.parser.AngleUnits)<FAZZINI>[java.lang.String, com.guliash.parser.AngleUnits]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.PI / 4), calculate("sin(pi / 4)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/MrR0bo7/FreezerManager.git<FAZZINI>ItemListInstrumentedTest<FAZZINI>testLoadItems<FAZZINI>{    android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();    java.lang.String data = "[{\"category\":\"meat\",\"freezeDate\":\"2017-10-05 18:30:15.562\",\"name\":\"Ice Cream\",\"notifiedAboutExpire\":true,\"section\":0,\"size\":-1.0,\"unit\":\"mass\"}]";    android.content.SharedPreferences prefs = context.getSharedPreferences("de.geek-hub.freezermanager.data", android.content.Context.MODE_PRIVATE);    prefs.edit().putString("items", data).apply();    de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);    org.junit.Assert.assertEquals("ItemList should have loaded 1 item", 1, classUnderTest.length());}<FAZZINI>length<FAZZINI>{    this.loadItems();    return itemList.size();}<FAZZINI>none-fazzini<FAZZINI>length()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("ItemList should have loaded 1 item", 1, classUnderTest.length())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NotReachableSurveyForHouseholdStrategyTest<FAZZINI>ShouldInactivateWhenSurveyIsDeferred<FAZZINI>{    org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);    org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate());}<FAZZINI>shouldInactivate<FAZZINI>{    boolean interviewNotDone = household.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    boolean interviewDeferred = household.getStatus() == com.onaio.steps.model.InterviewStatus.DEFERRED;    return !(interviewNotDone || interviewDeferred);}<FAZZINI>none-fazzini<FAZZINI>shouldInactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate())<FAZZINI>
https://github.com/artem122ya/TomatoTimer-Android.git<FAZZINI>TimerServiceTest<FAZZINI>onSkipButtonClick_shouldSkipToNextPeriod_whenCalled<FAZZINI>{    timerService.onSkipButtonClickInActivity();    org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.PeriodState.BREAK, timerService.getCurrentPeriod());}<FAZZINI>getCurrentPeriod<FAZZINI>{    return currentPeriod;}<FAZZINI>none-fazzini<FAZZINI>getCurrentPeriod()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.PeriodState.BREAK, timerService.getCurrentPeriod())<FAZZINI>
https://github.com/maciej-kaznowski/Londair.git<FAZZINI>PrefUtilsTest<FAZZINI>setBoolean<FAZZINI>{    java.lang.String key = "key";    com.innercirclesoftware.londair.utils.PrefUtils.setBoolean(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, true);    org.junit.Assert.assertTrue(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getBoolean(key, false));}<FAZZINI>setBoolean<FAZZINI>{    timber.log.Timber.v("Settings %s to boolean %s", key, value);    sharedPreferences.edit().putBoolean(key, value).apply();}<FAZZINI>[com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, true]<FAZZINI>setBoolean(android.content.SharedPreferences,java.lang.String,boolean)<FAZZINI>[android.content.SharedPreferences, java.lang.String, boolean]<FAZZINI>org.junit.Assert.assertTrue(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getBoolean(key, false))<FAZZINI>
https://github.com/maciej-kaznowski/Londair.git<FAZZINI>PrefUtilsTest<FAZZINI>setString<FAZZINI>{    java.lang.String key = "key";    java.lang.String value = "value";    com.innercirclesoftware.londair.utils.PrefUtils.setString(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value);    org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getString(key, ""));}<FAZZINI>setString<FAZZINI>{    timber.log.Timber.v("Settings %s to string %s", key, value);    sharedPreferences.edit().putString(key, value).apply();}<FAZZINI>[com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value]<FAZZINI>setString(android.content.SharedPreferences,java.lang.String,java.lang.String)<FAZZINI>[android.content.SharedPreferences, java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getString(key, ""))<FAZZINI>
https://github.com/codimoc/PrismaCallBlocker.git<FAZZINI>DbHelperTest<FAZZINI>TestDeleteFilterById<FAZZINI>{    com.prismaqf.callblocker.filters.FilterHandle fh1 = new com.prismaqf.callblocker.filters.FilterHandle("first", "My calendar1", "My patterns1", "My action1");    long filterid = com.prismaqf.callblocker.sql.FilterProvider.InsertRow(myDb, fh1);    com.prismaqf.callblocker.sql.FilterProvider.DeleteFilter(myDb, filterid);    com.prismaqf.callblocker.filters.FilterHandle fh2 = com.prismaqf.callblocker.sql.FilterProvider.FindFilter(myDb, filterid);    org.junit.Assert.assertNull("Rule deleted and not found", fh2);}<FAZZINI>FindFilter<FAZZINI>{    java.lang.String selection = com.prismaqf.callblocker.sql.DbContract.Filters._ID + " = ?";    java.lang.String[] selectionArgs = new java.lang.String[]{ java.lang.String.valueOf(filterId) };    android.database.Cursor c = db.query(com.prismaqf.callblocker.sql.DbContract.Filters.TABLE_NAME, null, selection, selectionArgs, null, null, null, null);    if (c.moveToFirst()) {        java.lang.String name = c.getString(c.getColumnIndexOrThrow(com.prismaqf.callblocker.sql.DbContract.Filters.COLUMN_NAME_FILTERNAME));        java.lang.String calendar = c.getString(c.getColumnIndexOrThrow(com.prismaqf.callblocker.sql.DbContract.Filters.COLUMN_NAME_CALENDARRULENAME));        java.lang.String patterns = c.getString(c.getColumnIndexOrThrow(com.prismaqf.callblocker.sql.DbContract.Filters.COLUMN_NAME_FILTERRULENAME));        java.lang.String action = c.getString(c.getColumnIndexOrThrow(com.prismaqf.callblocker.sql.DbContract.Filters.COLUMN_NAME_ACTIONNAME));        c.close();        return new com.prismaqf.callblocker.filters.FilterHandle(name, calendar, patterns, action);    }    c.close();    return null;}<FAZZINI>[myDb, filterid]<FAZZINI>FindFilter(android.database.sqlite.SQLiteDatabase,long)<FAZZINI>[android.database.sqlite.SQLiteDatabase, long]<FAZZINI>org.junit.Assert.assertNull("Rule deleted and not found", fh2)<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testNoSyncDeleteServerShopItemAfterDisconnect<FAZZINI>{    final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);    final com.google.firebase.database.DataSnapshot shopItem1 = addServerShopItem(product1, null, null, null);    authenticateAndWaitSynchronizer();    disconnect();    shopItem1.getRef().removeValue();    waitBackgroundTasks();    final net.buggy.shoplist.model.ShopItem clientShopItem = findClientEntity(shopItem1);    org.junit.Assert.assertNotNull(clientShopItem);}<FAZZINI>findClientEntity<FAZZINI>{    final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Entity> syncRecord = findSyncRecord(serverEntity);    if (syncRecord == null) {        return null;    }    if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Category.class)) {        return ((T) (dao.findCategory(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.Product.class)) {        return ((T) (dao.findProduct(syncRecord.getInternalId())));    } else if (syncRecord.getEntityClass().isAssignableFrom(net.buggy.shoplist.model.ShopItem.class)) {        return ((T) (dao.findShopItem(syncRecord.getInternalId())));    }    throw new java.lang.IllegalStateException("Unsupported class " + syncRecord.getEntityClass());}<FAZZINI>[shopItem1]<FAZZINI>findClientEntity(com.google.firebase.database.DataSnapshot)<FAZZINI>[com.google.firebase.database.DataSnapshot]<FAZZINI>org.junit.Assert.assertNotNull(clientShopItem)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>HouseholdAdapterTest<FAZZINI>testGetCountShouldReturnOne<FAZZINI>{    org.junit.Assert.assertEquals(1, adapter.getItemCount());}<FAZZINI>getItemCount<FAZZINI>{    return households.size();}<FAZZINI>none-fazzini<FAZZINI>getItemCount()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(1, adapter.getItemCount())<FAZZINI>
https://github.com/pjwelcome/WeatherAppDemo.git<FAZZINI>WeatherUtilsTest<FAZZINI>DayNameTomorrowTest<FAZZINI>{    java.lang.String tomorrow = com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.getInstance().getDayName(context, 1);    org.junit.Assert.assertEquals(tomorrow, context.getString(R.string.tomorrow));}<FAZZINI>getInstance<FAZZINI>{    if (com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.mInstance == null) {        com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.mInstance = new com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities();    }    return com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.mInstance;}<FAZZINI>none-fazzini<FAZZINI>getInstance()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(tomorrow, context.getString(R.string.tomorrow))<FAZZINI>
https://github.com/Klemek/AngersTramWidget.git<FAZZINI>HttpUtilsTest<FAZZINI>testExecuteRequestError404<FAZZINI>{    fr.klemek.angerstramwidget.utils.HttpUtils.HttpResult hr = fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest("GET", "http://httpbin.org/404");    org.junit.Assert.assertEquals(404, hr.code);}<FAZZINI>executeRequest<FAZZINI>{    return fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest(sMethod, sUrl, null, null, null);}<FAZZINI>["GET", "http://httpbin.org/404"]<FAZZINI>executeRequest(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(404, hr.code)<FAZZINI>
https://github.com/domogik/domodroid.git<FAZZINI>Entity_Feature_AssociationTest<FAZZINI>testGetFeat_id<FAZZINI>{    Entity.Entity_Feature_Association feature_association = new Entity.Entity_Feature_Association(0, null, 0, 0, null);    int feature_id = feature_association.getFeat_id();    org.junit.Assert.assertEquals(0, feature_id);    org.json.JSONObject device_feature_model_id = new org.json.JSONObject();    device_feature_model_id.put("id", "125");    feature_association.setDevice_feature(device_feature_model_id);    feature_id = feature_association.getFeat_id();}<FAZZINI>getFeat_id<FAZZINI>{    return feat_id;}<FAZZINI>none-fazzini<FAZZINI>getFeat_id()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, feature_id)<FAZZINI>
https://github.com/pumpkinz/pumpkin-reader.git<FAZZINI>UtilTest<FAZZINI>getDomainName<FAZZINI>{    org.junit.Assert.assertEquals("reddit.com", io.pumpkinz.pumpkinreader.util.Util.getDomainName("https://www.reddit.com/r/funny/comments/3cz30y/one_of_the_better_things_ive_seen_at_comic_con/"));}<FAZZINI>getDomainName<FAZZINI>{    try {        java.net.URL uri = new java.net.URL(url);        java.lang.String domain = uri.getHost();        return domain.startsWith("www.") ? domain.substring(4) : domain;    } catch (java.net.MalformedURLException ex) {        android.util.Log.e("URL ERROR", ex.toString());        return "";    }}<FAZZINI>["https://www.reddit.com/r/funny/comments/3cz30y/one_of_the_better_things_ive_seen_at_comic_con/"]<FAZZINI>getDomainName(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("reddit.com", io.pumpkinz.pumpkinreader.util.Util.getDomainName("https://www.reddit.com/r/funny/comments/3cz30y/one_of_the_better_things_ive_seen_at_comic_con/"))<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>XviImporterTest<FAZZINI>testGetSimpleBlockContents<FAZZINI>{    java.lang.String simpleText = "set Command {foo}";    java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");    org.junit.Assert.assertEquals("foo", contents);}<FAZZINI>getBlockContents<FAZZINI>{    outer : for (int i = 0; i < text.length(); i++) {        for (int j = 0; j < command.length(); j++) {            char text_current = text.charAt(i + j);            char command_current = command.charAt(j);            if (text_current != command_current) {                continue outer;            }        }        i += command.length();        while (java.lang.Character.isWhitespace(text.charAt(i))) {            i++;        }         if (text.charAt(i) == '{') {            i++;        } else {            continue outer;        }        int openBraces = 1;        int startOfContent = i;        for (; i < text.length(); i++) {            if (text.charAt(i) == '{') {                openBraces++;            } else if (text.charAt(i) == '}') {                openBraces--;            }            if (openBraces == 0) {                int endOfContent = i;                java.lang.String content = text.substring(startOfContent, endOfContent);                return content;            }        }        throw new java.lang.Exception("Malformed text: could not match braces");    }    throw new java.lang.Exception("Could not match command in text");}<FAZZINI>[simpleText, "set Command"]<FAZZINI>getBlockContents(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("foo", contents)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>BasicTester<FAZZINI>additionTest4<FAZZINI>{    org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["1e+9 + 1e-9"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/TimLavers/IndoFlashJava.git<FAZZINI>Shuffle<FAZZINI>doIt<FAZZINI>{    ui.checkCurrentWordIs("you");    ui.shuffleUnshuffleButton().checkDescription("Turn shuffle on");    ui.shuffleUnshuffleButton().activate();    ui.shuffleUnshuffleButton().checkDescription("Turn shuffle off");    org.junit.Assert.assertNotEquals(firstFiveWordsShowing(), firstFiveWordsUnshuffled());}<FAZZINI>firstFiveWordsUnshuffled<FAZZINI>{    java.util.List<java.lang.CharSequence> wordsInOrder = new java.util.LinkedList<>();    wordsInOrder.add("you");    wordsInOrder.add("what");    wordsInOrder.add("How are you?");    wordsInOrder.add("good");    wordsInOrder.add("fine");    return wordsInOrder;}<FAZZINI>none-fazzini<FAZZINI>firstFiveWordsUnshuffled()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotEquals(firstFiveWordsShowing(), firstFiveWordsUnshuffled())<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>SelectParticipantHandlerTest<FAZZINI>ShouldInActivateWhenHouseholdStatusIsIncomplete<FAZZINI>{    org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);    org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    boolean noMember = household.numberOfNonSelectedMembers(db) == 0;    boolean noSelection = (household.getStatus() == com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE) || (household.getStatus() == com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);    return noMember || (!noSelection);}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate())<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>PowTester<FAZZINI>expTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.exp(3), calculate("exp(3)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["exp(3)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.exp(3), calculate("exp(3)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>SummaryActivityTest<FAZZINI>shouldDisplayLanguageTabsFragmentWhenActivityIsCreated<FAZZINI>{    android.app.Activity activity = helper.createActivityToTest();    org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll));}<FAZZINI>createActivityToTest<FAZZINI>{    android.content.Intent intent = new android.content.Intent();    org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = new org.mercycorps.translationcards.activity.addTranslation.NewTranslation(dictionary);    org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext context = new org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext(java.util.Collections.singletonList(newTranslation));    intent.putExtra(org.mercycorps.translationcards.util.AddTranslationActivityHelper.CONTEXT_INTENT_KEY, context);    return getActivityWithIntent(intent);}<FAZZINI>none-fazzini<FAZZINI>createActivityToTest()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll))<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>DeferSurveyForParticipantStrategyTest<FAZZINI>ShouldNotInactivateWhenSurveyIsDone<FAZZINI>{    org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);    org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate());}<FAZZINI>shouldInactivate<FAZZINI>{    boolean participantNotSelected = participant.getStatus() == com.onaio.steps.model.InterviewStatus.NOT_DONE;    return !participantNotSelected;}<FAZZINI>none-fazzini<FAZZINI>shouldInactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate())<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testNoSyncAnotherUserChangeClientProduct<FAZZINI>{    final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);    setUnitTestFirebaseUser("AnotherUser");    authenticateAndWaitSynchronizer();    disconnect();    setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);    authenticateAndWaitSynchronizer();    setUnitTestFirebaseUser("AnotherUser");    product.setName("newName");    dao.saveProduct(product);    waitBackgroundTasks();    final com.google.firebase.database.DataSnapshot serverProduct = findServerEntity(product);    org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name"));}<FAZZINI>getString<FAZZINI>{    return entity.child(value).getValue(java.lang.String.class);}<FAZZINI>[serverProduct, "name"]<FAZZINI>getString(com.google.firebase.database.DataSnapshot,java.lang.String)<FAZZINI>[com.google.firebase.database.DataSnapshot, java.lang.String]<FAZZINI>org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name"))<FAZZINI>
https://github.com/Infineon/BlockchainSecurity2Go-Android.git<FAZZINI>UriUtilsTest<FAZZINI>extractEtherAddressWithChecksum<FAZZINI>{    final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("6e670c473A2AD5894aE354b832aD4BADF1d919bf");    org.junit.Assert.assertEquals("0x6e670c473A2AD5894aE354b832aD4BADF1d919bf", result);}<FAZZINI>extractEtherAddressFromUri<FAZZINI>{    java.lang.String uriWithoutSchema = uri.replaceFirst("ethereum:", "");    uriWithoutSchema = org.web3j.utils.Numeric.cleanHexPrefix(uriWithoutSchema);    if (uriWithoutSchema.length() != 40) {        throw new co.coinfinity.infineonandroidapp.ethereum.exceptions.InvalidEthereumAddressException("Invalid address. The Ethereum address does not match the 40 char length!");    }    boolean hasChecksum = (!uriWithoutSchema.equals(uriWithoutSchema.toLowerCase())) && (!uriWithoutSchema.equals(uriWithoutSchema.toUpperCase()));    uriWithoutSchema = org.web3j.utils.Numeric.prependHexPrefix(uriWithoutSchema);    if (hasChecksum) {        if (!uriWithoutSchema.equals(org.web3j.crypto.Keys.toChecksumAddress(uriWithoutSchema))) {            throw new co.coinfinity.infineonandroidapp.ethereum.exceptions.InvalidEthereumAddressException("Wrong checksum. The Ethereum address is invalid!");        }    }    return uriWithoutSchema;}<FAZZINI>["6e670c473A2AD5894aE354b832aD4BADF1d919bf"]<FAZZINI>extractEtherAddressFromUri(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("0x6e670c473A2AD5894aE354b832aD4BADF1d919bf", result)<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>CalibrationProtocolTest<FAZZINI>testReadDoubleByteMz<FAZZINI>{    double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_MAGNETIC_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_HIGH_BYTE);    org.junit.Assert.assertEquals(16090, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA);}<FAZZINI>readDoubleByte<FAZZINI>{    int low = packet[lowByteIndex] & 0xff;    int high = packet[highByteIndex] & 0xff;    int combined = (high * 256) + low;    if (combined > 32768) {        combined -= 65536;    }    return combined;}<FAZZINI>[TEST_MAGNETIC_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_HIGH_BYTE]<FAZZINI>readDoubleByte(byte[],int,int)<FAZZINI>[byte[], int, int]<FAZZINI>org.junit.Assert.assertEquals(16090, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NewParticipantActivityHandlerTest<FAZZINI>ShouldStartNewParticipantActivity<FAZZINI>{    newParticipantActivityHandler.open();    org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(participantListActivity);    android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();    org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName());}<FAZZINI>getName<FAZZINI>{    java.lang.String name = this.name;    return name != null ? name : initClassName();}<FAZZINI>none-fazzini<FAZZINI>getName()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName())<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>tanTest2<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 4), calculate("tan(pi/4)"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["tan(pi/4)"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 4), calculate("tan(pi/4)"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/wilmol/Sleep-Easy.git<FAZZINI>TestTime12HourFormatAddMethod<FAZZINI>add90Pm<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(7, 00, false);    java.lang.String result = time.addNinteyMinutesXTimes(1).toString();    org.junit.Assert.assertEquals("8:30PM", result);}<FAZZINI>addNinteyMinutesXTimes<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(_hour, _minute, _isAM);    while ((x--) > 0) {        time = time.addNinteyMinutes();    }     return time;}<FAZZINI>[1]<FAZZINI>addNinteyMinutesXTimes(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals("8:30PM", result)<FAZZINI>
https://github.com/wilmol/Sleep-Easy.git<FAZZINI>TestTime12HourFormatAddMethod<FAZZINI>addBothAM<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(3, 30, true);    wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(4, 30, true);    java.lang.String result = time1.add(time2).toString();    org.junit.Assert.assertEquals("8:00AM", result);}<FAZZINI>add<FAZZINI>{    int totalMinutes = getTotalMinutes(this, time, true);    return extractHoursAndMinutesAndGenerate12HourTime(totalMinutes);}<FAZZINI>[time2]<FAZZINI>add(wilmol.com.github.sleepeasy.tools.Time12HourFormat)<FAZZINI>[wilmol.com.github.sleepeasy.tools.Time12HourFormat]<FAZZINI>org.junit.Assert.assertEquals("8:00AM", result)<FAZZINI>
https://github.com/wilmol/Sleep-Easy.git<FAZZINI>TestTime12HourFormatAddMethod<FAZZINI>addBothPM<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(3, 30, false);    wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(4, 30, false);    java.lang.String result = time1.add(time2).toString();    org.junit.Assert.assertEquals("8:00AM", result);}<FAZZINI>add<FAZZINI>{    int totalMinutes = getTotalMinutes(this, time, true);    return extractHoursAndMinutesAndGenerate12HourTime(totalMinutes);}<FAZZINI>[time2]<FAZZINI>add(wilmol.com.github.sleepeasy.tools.Time12HourFormat)<FAZZINI>[wilmol.com.github.sleepeasy.tools.Time12HourFormat]<FAZZINI>org.junit.Assert.assertEquals("8:00AM", result)<FAZZINI>
https://github.com/WrenSecurity/forgerock-authenticator-android.git<FAZZINI>IdentityDatabaseTest<FAZZINI>cannotAddMechanismWithoutFirstAddingIdentity<FAZZINI>{    org.junit.Assert.assertEquals(database.addMechanism(BASIC_MECHANISM), -1);}<FAZZINI>addMechanism<FAZZINI>{    java.lang.String issuer = mechanism.getOwner().getIssuer();    java.lang.String accountName = mechanism.getOwner().getAccountName();    java.lang.String type = mechanism.getInfo().getMechanismString();    int version = mechanism.getVersion();    java.lang.String options = gson.toJson(mechanism.asMap());    android.content.ContentValues values = new android.content.ContentValues();    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ISSUER, issuer);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.ID_ACCOUNT_NAME, accountName);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.TYPE, type);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.VERSION, version);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.OPTIONS, options);    values.put(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_UID, mechanism.getMechanismUID());    long rowId = database.insert(com.forgerock.authenticator.storage.IdentityDatabase.MECHANISM_TABLE_NAME, null, values);    return rowId;}<FAZZINI>[BASIC_MECHANISM]<FAZZINI>addMechanism(com.forgerock.authenticator.mechanisms.base.Mechanism)<FAZZINI>[com.forgerock.authenticator.mechanisms.base.Mechanism]<FAZZINI>org.junit.Assert.assertEquals(database.addMechanism(BASIC_MECHANISM), -1)<FAZZINI>
https://github.com/dsolonenko/financisto.git<FAZZINI>SubCategoryReportTest<FAZZINI>should_calculate_correct_report_with_multiple_currencies_2<FAZZINI>{    ru.orangesoftware.financisto.test.RateBuilder.withDb(db).at(ru.orangesoftware.financisto.test.DateTime.today()).from(c2).to(c1).rate(0.1F).create();    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("A")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-100).create();    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("A1")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-100).create();    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a3).category(categories.get("A2")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(250).create();    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("B")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(500).create();    ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a3).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-5000).withSplit(categories.get("A1"), -1000).withSplit(categories.get("A2"), -2200).withSplit(categories.get("B"), -1800).create();    java.util.List<ru.orangesoftware.financisto.graph.GraphUnit> units = assertReportReturnsData();    org.junit.Assert.assertEquals(3, units.size());    assertUnit(units.get(0), "A", -520, 25);    assertUnit(units.get(1), "A2", -220, 25);    assertUnit(units.get(2), "A1", -200, 0);}<FAZZINI>get<FAZZINI>null<FAZZINI>[0]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(3, units.size())<FAZZINI>
https://github.com/bugy/SheLi.git<FAZZINI>FirebaseSynchronizerTest<FAZZINI>testNoSyncChangeClientProductAfterDisconnect<FAZZINI>{    final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);    authenticateAndWaitSynchronizer();    disconnect();    product.setName("newName");    dao.saveProduct(product);    waitBackgroundTasks();    final com.google.firebase.database.DataSnapshot serverProduct = findServerEntity(product);    org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name"));}<FAZZINI>getString<FAZZINI>{    return entity.child(value).getValue(java.lang.String.class);}<FAZZINI>[serverProduct, "name"]<FAZZINI>getString(com.google.firebase.database.DataSnapshot,java.lang.String)<FAZZINI>[com.google.firebase.database.DataSnapshot, java.lang.String]<FAZZINI>org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name"))<FAZZINI>
https://github.com/BioID-GmbH/BWS-Android.git<FAZZINI>FacialRecognitionBasePresenterTest<FAZZINI>onCameraPermissionGranted_permissionStateIsSetToGranted<FAZZINI>{    presenter.onCameraPermissionGranted();    org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED))<FAZZINI>
https://github.com/codimoc/PrismaCallBlocker.git<FAZZINI>NewCalendarRuleTest<FAZZINI>TestParcelable<FAZZINI>{    com.prismaqf.callblocker.rules.CalendarRule c1 = new com.prismaqf.callblocker.rules.CalendarRule("first", java.util.EnumSet.of(com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.MONDAY, com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.FRIDAY), 2, 15, 10, 7);    android.os.Parcel parcel = android.os.Parcel.obtain();    c1.writeToParcel(parcel, 0);    parcel.setDataPosition(0);    com.prismaqf.callblocker.rules.CalendarRule c2 = com.prismaqf.callblocker.rules.CalendarRule.CREATOR.createFromParcel(parcel);    org.junit.Assert.assertEquals("Equal after Prcelization", c1, c2);}<FAZZINI>writeToParcel<FAZZINI>{    dest.writeString(name);    dest.writeSerializable(dayMask);    dest.writeInt(startHour);    dest.writeInt(startMin);    dest.writeInt(endHour);    dest.writeInt(endMin);}<FAZZINI>[parcel, 0]<FAZZINI>writeToParcel(android.os.Parcel,int)<FAZZINI>[android.os.Parcel, int]<FAZZINI>org.junit.Assert.assertEquals("Equal after Prcelization", c1, c2)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NotReachableHandlerTest<FAZZINI>ShouldNotInactivateWhenSurveyDeferred<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);    org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    return refusedSurveyStrategy.shouldInactivate();}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate())<FAZZINI>
https://github.com/artemkv/notedok-android-app.git<FAZZINI>WikiToHtmlFormatterTest<FAZZINI>codeBlock<FAZZINI>{    java.lang.String text = "This is code block:\n\n{code}\nfunction tryAnchor(): void {\n\tvar nextChar = _text[_pos + 1];\n\t// The link opening bracket is immediately followed by the link\n\tif (nextChar !== &quot;[&quot; && !WHITESPACE.test(nextChar) && !NEWLINE.test(nextChar)) {\n\t\t// There is a closing bracket\n\t\tvar closingBracketPos = _text.indexOf(&quot;]&quot;, _pos + 1);\n\t\tif (closingBracketPos > 0 && _text.indexOf(&quot;\n&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t// The closing character is before &quot;<&quot; on the same line\n\t\t\tif (_text.indexOf(&quot;<&quot;, _pos + 1) == -1 || _text.indexOf(&quot;<&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t\tvar href = _text.substring(_pos + 1, closingBracketPos);\n\t\t\t\tvar link = &quot;<a href='&quot; + href + &quot;' target='_blank'>&quot; + href + &quot;</a>&quot;;\n\t\t\t\t_text = _text.substring(0, _pos) + link + _text.substring(closingBracketPos + 1);\n\t\t\t\t_pos = closingBracketPos + link.length - href.length - 2; // 1 removed char, 1 char back from the closing bracket\n\t\t\t}\n\t\t}\n\t}\n}{code}";    java.lang.String expectedText = "This is code block:\n\n<pre class='codeblock'>\nfunction tryAnchor(): void {\n\tvar nextChar = _text[_pos + 1];\n\t// The link opening bracket is immediately followed by the link\n\tif (nextChar !== &quot;[&quot; && !WHITESPACE.test(nextChar) && !NEWLINE.test(nextChar)) {\n\t\t// There is a closing bracket\n\t\tvar closingBracketPos = _text.indexOf(&quot;]&quot;, _pos + 1);\n\t\tif (closingBracketPos > 0 && _text.indexOf(&quot;\n&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t// The closing character is before &quot;<&quot; on the same line\n\t\t\tif (_text.indexOf(&quot;<&quot;, _pos + 1) == -1 || _text.indexOf(&quot;<&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t\tvar href = _text.substring(_pos + 1, closingBracketPos);\n\t\t\t\tvar link = &quot;<a href='&quot; + href + &quot;' target='_blank'>&quot; + href + &quot;</a>&quot;;\n\t\t\t\t_text = _text.substring(0, _pos) + link + _text.substring(closingBracketPos + 1);\n\t\t\t\t_pos = closingBracketPos + link.length - href.length - 2; // 1 removed char, 1 char back from the closing bracket\n\t\t\t}\n\t\t}\n\t}\n}</pre>\n";    com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();    java.lang.String formattedText = formatter.format(text);    org.junit.Assert.assertEquals("code block", expectedText, formattedText);}<FAZZINI>format<FAZZINI>{    java.lang.String[] strings = wiki.split("\\r\\n|\\n|\\r", -1);    java.lang.StringBuilder sb = new java.lang.StringBuilder(wiki.length());    if (strings.length > 0) {        for (int i = 0; i < strings.length; i++) {            sb.append(strings[i]);            sb.append("\n");        }        _text = sb.toString();    } else {        _text = "\n";    }    for (_pos = 0; _pos < _text.length(); _pos++) {        _char = getCharAt(_text, _pos);        if (_char.equals("*")) {            tryWrap("*", "<b>", "</b>");            tryUl("*");        } else if (_char.equals("_")) {            tryWrap("_", "<i>", "</i>");        } else if (_char.equals("-")) {            tryWrap("--", "<del>", "</del>");            tryUl("-");        } else if (_char.equals("+")) {            tryWrap("++", "<u>", "</u>");        } else if (_char.equals("^")) {            tryWrap("^", "<sup>", "</sup>");        } else if (_char.equals("~")) {            tryWrap("~", "<sub>", "</sub>");        } else if (_char.equals("{")) {            tryEscaped();            tryCode();        } else if (_char.equals("[")) {            tryAnchor();        } else if (_char.equals("!")) {            tryHeader("!");        } else if (_char.equals("h")) {            tryNumberedHeader();        }    }    return _text;}<FAZZINI>[text]<FAZZINI>format(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("code block", expectedText, formattedText)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>AngleTester<FAZZINI>angleTest3<FAZZINI>{    org.junit.Assert.assertEquals(-1, calculate("cos(pi)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), angleUnits);}<FAZZINI>["cos(pi)", com.guliash.parser.AngleUnits.RAD]<FAZZINI>calculate(java.lang.String,com.guliash.parser.AngleUnits)<FAZZINI>[java.lang.String, com.guliash.parser.AngleUnits]<FAZZINI>org.junit.Assert.assertEquals(-1, calculate("cos(pi)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/lewismcgeary/AndroidGameofLife.git<FAZZINI>GridCellUnitTestCreatedInStudio<FAZZINI>givenTheGridHasOneLiveCell_WhenAMoveIsMade_ThenGridHasNoLiveCells<FAZZINI>{    io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);    worldGrid.giveLifeToCell(10, 10);    worldGrid.calculateNextStateOfCells();    worldGrid.switchCellsToNextState();    org.junit.Assert.assertEquals(0, worldGrid.countLivingCells());}<FAZZINI>countLivingCells<FAZZINI>{    int liveCount = 0;    for (int x = 0; x < xLength; x++) {        for (int y = 0; y < yLength; y++) {            if (members.get(x).get(y).getState()) {                liveCount++;            }        }    }    return liveCount;}<FAZZINI>none-fazzini<FAZZINI>countLivingCells()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, worldGrid.countLivingCells())<FAZZINI>
https://github.com/shannah/cn1-android-importer.git<FAZZINI>TextPartFinderTest<FAZZINI>findFirstTextPart_withMultipartAlternativeNotContainingTextPart<FAZZINI>{    com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), com.fsck.k9.message.MessageCreationHelper.createPart("application/pdf"));    com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);    org.junit.Assert.assertNull(result);}<FAZZINI>findFirstTextPart<FAZZINI>{    java.lang.String mimeType = part.getMimeType();    com.fsck.k9.mail.Body body = part.getBody();    if (body instanceof com.fsck.k9.mail.Multipart) {        com.fsck.k9.mail.Multipart multipart = ((com.fsck.k9.mail.Multipart) (body));        if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "multipart/alternative")) {            return findTextPartInMultipartAlternative(multipart);        } else {            return findTextPartInMultipart(multipart);        }    } else if (com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/plain") || com.fsck.k9.mail.internet.MimeUtility.isSameMimeType(mimeType, "text/html")) {        return part;    }    return null;}<FAZZINI>[part]<FAZZINI>findFirstTextPart(com.fsck.k9.mail.Part)<FAZZINI>[com.fsck.k9.mail.Part]<FAZZINI>org.junit.Assert.assertNull(result)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>NumberTester<FAZZINI>numberTest12<FAZZINI>{    org.junit.Assert.assertEquals(2.0E-11, calculate("2e-0011"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["2e-0011"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(2.0E-11, calculate("2e-0011"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>StemmerTester<FAZZINI>checkWordCharacterLetterIsOk2<FAZZINI>{    org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('ш'), true);}<FAZZINI>isWordOnlyCharacter<FAZZINI>{    return (java.lang.Character.isLetter(ch) || (ch == '$')) || (ch == '_');}<FAZZINI>['ш']<FAZZINI>isWordOnlyCharacter(char)<FAZZINI>[char]<FAZZINI>org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('ш'), true)<FAZZINI>
https://github.com/etp404/frenchverbinator.git<FAZZINI>ConjugatorTest<FAZZINI>testThatPerfectTenseCanBeFormedWithEtreForSingularPerson<FAZZINI>{    uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aller", null, "être"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PerfectIndicative());    org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Je suis allé"), conjugatedVerbWithPronoun);}<FAZZINI>getConjugationOf<FAZZINI>{    uk.co.mould.matt.conjugators.VerbConjugator conjugator = tenseToConjugator.get(verbMoodAndTense.getClass());    uk.co.mould.matt.data.Conjugation conjugation = conjugator.conjugate(infinitiveVerb, person, verbMoodAndTense);    return pronounHandler.addPronoun(conjugation, person);}<FAZZINI>[new uk.co.mould.matt.data.InfinitiveVerb("aller", null, "être"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PerfectIndicative()]<FAZZINI>getConjugationOf(uk.co.mould.matt.data.InfinitiveVerb,uk.co.mould.matt.data.Persons$Person,uk.co.mould.matt.data.tenses.MoodAndTense)<FAZZINI>[uk.co.mould.matt.data.InfinitiveVerb, uk.co.mould.matt.data.Persons.Person, uk.co.mould.matt.data.tenses.MoodAndTense]<FAZZINI>org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Je suis allé"), conjugatedVerbWithPronoun)<FAZZINI>
https://github.com/BioID-GmbH/BWS-Android.git<FAZZINI>FacialRecognitionBasePresenterTest<FAZZINI>onImageCaptured_ifImageUploadFailed_failedUploadCounterDoesIncrement<FAZZINI>{    presenter.failedUploads = 0;    mockStateWaitingForReferenceImage();    org.mockito.Mockito.doThrow(new com.bioid.authenticator.base.network.bioid.webservice.NotRecognizedException()).when(bioIdWebserviceClient).uploadImage(org.mockito.ArgumentMatchers.any(com.bioid.authenticator.base.image.Yuv420Image.class), org.mockito.ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.token.BwsToken.class), org.mockito.ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.MovementDirection.class), org.mockito.ArgumentMatchers.anyInt());    presenter.onImageCaptured(img);    org.junit.Assert.assertThat(presenter.failedUploads, org.hamcrest.Matchers.is(1));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[1]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(presenter.failedUploads, org.hamcrest.Matchers.is(1))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>FunctionsTest<FAZZINI>functionsTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.log(2) * java.lang.Math.cos(3)), calculate("sin(ln(2) * cos(3))"), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), com.guliash.parser.AngleUnits.RAD);}<FAZZINI>["sin(ln(2) * cos(3))"]<FAZZINI>calculate(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.log(2) * java.lang.Math.cos(3)), calculate("sin(ln(2) * cos(3))"), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SongListServiceTest<FAZZINI>removeSongFromListTest<FAZZINI>{    fifthelement.theelement.objects.Song toRemove = classUnderTest.getSongAtIndex(0);    classUnderTest.removeSongFromList(toRemove);    fifthelement.theelement.objects.Song shouldNotEqual = classUnderTest.getSongAtIndex(0);    org.junit.Assert.assertFalse("Remove function did not remove the song from the list", shouldNotEqual.getName().equals("Pristine"));}<FAZZINI>getName<FAZZINI>{    return songName;}<FAZZINI>none-fazzini<FAZZINI>getName()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertFalse("Remove function did not remove the song from the list", shouldNotEqual.getName().equals("Pristine"))<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>SettingsTest<FAZZINI>skipSongWithSongPlayedCheck<FAZZINI>{    checkStatsPage();    int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();    android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));    appCompatImageButton.perform(click());    android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));    navigationMenuItemView.perform(click());    android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);    frameLayout.perform(click());    android.support.test.espresso.ViewInteraction appCompatImageButton2 = onView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.support.constraint.ConstraintLayout")), 0), 2), isDisplayed()));    appCompatImageButton2.perform(click());    appCompatImageButton2.perform(click());    checkStatsPage();    int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();    org.junit.Assert.assertTrue((oldMostPlayed + 1) == newMostPlayed);}<FAZZINI>checkStatsPage<FAZZINI>{    android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));    appCompatImageButton.perform(click());    android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 5), isDisplayed()));    navigationMenuItemView.perform(click());    android.support.test.espresso.DataInteraction appCompatTextView = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0))).atPosition(2);    appCompatTextView.perform(click());}<FAZZINI>none-fazzini<FAZZINI>checkStatsPage()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue((oldMostPlayed + 1) == newMostPlayed)<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderRecurrenceTest<FAZZINI>testRRuleWithExDates<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z,20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))));}<FAZZINI>getDefault<FAZZINI>{    return ((java.util.TimeZone) (java.util.TimeZone.getDefaultRef().clone()));}<FAZZINI>none-fazzini<FAZZINI>getDefault()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third, fifth))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z,20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))))<FAZZINI>
https://github.com/richsmith/sexytopo.git<FAZZINI>TextToolsTest<FAZZINI>testAdvanceLastNumber2<FAZZINI>{    java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("S2-1.1");    org.junit.Assert.assertEquals("S2-1.2", advanced);}<FAZZINI>advanceLastNumber<FAZZINI>{    if (originatingName.length() == 0) {        return "1";    }    int lastDigitChar = -1;    int firstDigitChar = -1;    for (int i = originatingName.length() - 1; i >= 0; i--) {        char c = originatingName.charAt(i);        if ((lastDigitChar == (-1)) && java.lang.Character.isDigit(c)) {            lastDigitChar = i;        }        if (java.lang.Character.isDigit(c)) {            firstDigitChar = i;        }        if ((!java.lang.Character.isDigit(c)) && (firstDigitChar > (-1))) {            break;        }    }    if (lastDigitChar == (-1)) {        return originatingName + "1";    } else {        java.lang.String oldDigitString = originatingName.substring(firstDigitChar, lastDigitChar + 1);        int oldValue = java.lang.Integer.parseInt(oldDigitString);        int newValue = oldValue + 1;        java.lang.String newDigitString = java.lang.Integer.toString(newValue);        int lengthDifference = oldDigitString.length() - newDigitString.length();        if (lengthDifference > 0) {            java.lang.String zeroPadding = new java.lang.String(new char[lengthDifference]).replace("\u0000", "0");            newDigitString = zeroPadding + newDigitString;        }        java.lang.String firstPart = originatingName.substring(0, firstDigitChar);        java.lang.String lastPart = originatingName.substring(lastDigitChar + 1);        return (firstPart + newDigitString) + lastPart;    }}<FAZZINI>["S2-1.1"]<FAZZINI>advanceLastNumber(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("S2-1.2", advanced)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>NotReachableHandlerTest<FAZZINI>ShouldInactivateWhenMemberIsNotSelected<FAZZINI>{    org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);    org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate());}<FAZZINI>shouldDeactivate<FAZZINI>{    return refusedSurveyStrategy.shouldInactivate();}<FAZZINI>none-fazzini<FAZZINI>shouldDeactivate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate())<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreNotificationManagerTest<FAZZINI>whenANotificationIsSentThenTheNotificationShouldBeCreated<FAZZINI>{    android.content.Intent intent = buildIntentToListenFor();    groceryStoreNotificationManager.sendNotification(intent);    org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();    android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);    org.junit.Assert.assertNotNull(notification);}<FAZZINI>getShadowNotificationManager<FAZZINI>{    return org.robolectric.Shadows.shadowOf(((android.app.NotificationManager) (org.robolectric.RuntimeEnvironment.application.getSystemService(android.content.Context.NOTIFICATION_SERVICE))));}<FAZZINI>none-fazzini<FAZZINI>getShadowNotificationManager()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(notification)<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenLocationUpdatesAreRequestedThenAPassiveListenerIsAddedToTheLocationManager<FAZZINI>{    groceryStoreManager.listenForLocationUpdates(false);    java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();    org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.PASSIVE_PROVIDER));}<FAZZINI>get<FAZZINI>null<FAZZINI>[0]<FAZZINI>get(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.PASSIVE_PROVIDER))<FAZZINI>
https://github.com/hei-connect/android.git<FAZZINI>StudioViewModelTest<FAZZINI>previousMedia<FAZZINI>{    mViewModel.onPhotoTaken(createMockedImage());    assertEditState();    mViewModel.onReactionChosen(com.truethat.android.model.Emotion.DISGUST);    assertCameraState();    mViewModel.onPhotoTaken(createMockedImage());    assertEditState();    mViewModel.displayParentMedia();    assertEditState();    org.junit.Assert.assertEquals(mViewModel.getDirectedScene().getRootMedia(), mViewModel.getCurrentMedia());}<FAZZINI>getCurrentMedia<FAZZINI>{    return mCurrentMedia;}<FAZZINI>none-fazzini<FAZZINI>getCurrentMedia()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(mViewModel.getDirectedScene().getRootMedia(), mViewModel.getCurrentMedia())<FAZZINI>
https://github.com/jameskbride/grocery-reminder.git<FAZZINI>GroceryStoreManagerTest<FAZZINI>whenProximityAlertIsAddedThenTheRadiusIsSetToFiftyFeetInMeters<FAZZINI>{    se.walkercrou.places.Place place = createDefaultGooglePlace();    java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();    places.add(place);    groceryStoreManager.addProximityAlerts(places);    com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());    org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS, proximityAlert.getRadius(), 0.001);}<FAZZINI>getRadius<FAZZINI>{    return radius;}<FAZZINI>none-fazzini<FAZZINI>getRadius()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS, proximityAlert.getRadius(), 0.001)<FAZZINI>
https://github.com/Suwie/improvebcs.git<FAZZINI>UtilsTest<FAZZINI>callingGetDateFromStringWithInvalidDatePatternThrowsIllegalArgException<FAZZINI>{    try {        util.Utils.getDateFromString("2017-09-09", "invalid date format");    } catch (java.lang.Exception e) {        org.junit.Assert.assertTrue(e instanceof java.lang.IllegalArgumentException);    }}<FAZZINI>getDateFromString<FAZZINI>{    try {        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(dateFormatPattern);        return dateFormat.parse(date);    } catch (java.text.ParseException e) {        android.util.Log.e(util.Utils.TAG, e.getMessage());        return null;    }}<FAZZINI>["2017-09-09", "invalid date format"]<FAZZINI>getDateFromString(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertTrue(e instanceof java.lang.IllegalArgumentException)<FAZZINI>
https://github.com/onaio/steps-app.git<FAZZINI>EditParticipantActivityHandlerTest<FAZZINI>ShouldInactivateWhenParticipantSurveyIsRefused<FAZZINI>{    android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);    org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);    org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate());}<FAZZINI>withMenu<FAZZINI>{    this.menu = menu;    return this;}<FAZZINI>[menuMock]<FAZZINI>withMenu(android.view.Menu)<FAZZINI>[android.view.Menu]<FAZZINI>org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate())<FAZZINI>
https://github.com/hodlwallet/hodl-wallet-android.git<FAZZINI>KeyStoreTests<FAZZINI>setGetSpendLimit<FAZZINI>{    long spendLimit = 100000;    co.hodlwallet.tools.security.BRKeyStore.putSpendLimit(spendLimit, mActivityRule.getActivity());    assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.SPEND_LIMIT_ALIAS);    long freshGet;    freshGet = co.hodlwallet.tools.security.BRKeyStore.getSpendLimit(mActivityRule.getActivity());    org.junit.Assert.assertEquals(freshGet, freshGet);}<FAZZINI>assertFilesExist<FAZZINI>{    org.junit.Assert.assertTrue(new java.io.File(co.hodlwallet.tools.security.BRKeyStore.getFilePath(co.hodlwallet.tools.security.BRKeyStore.aliasObjectMap.get(alias).datafileName, mActivityRule.getActivity())).exists());    org.junit.Assert.assertTrue(new java.io.File(co.hodlwallet.tools.security.BRKeyStore.getFilePath(co.hodlwallet.tools.security.BRKeyStore.aliasObjectMap.get(alias).ivFileName, mActivityRule.getActivity())).exists());}<FAZZINI>[co.hodlwallet.tools.security.BRKeyStore.SPEND_LIMIT_ALIAS]<FAZZINI>assertFilesExist(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(freshGet, freshGet)<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>TerceraFormaNormalTest<FAZZINI>soyPrimeraFN<FAZZINI>{    org.junit.Assert.assertEquals(false, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soyPrimeraFN());}<FAZZINI>soyPrimeraFN<FAZZINI>{    return false;}<FAZZINI>none-fazzini<FAZZINI>soyPrimeraFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(false, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soyPrimeraFN())<FAZZINI>
https://github.com/hei-connect/android.git<FAZZINI>FakePermissionsManagerTest<FAZZINI>requestIfNeeded_alreadyForbidden<FAZZINI>{    mFakePermissionsManager.forbid(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);    mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);    org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION));}<FAZZINI>isPermissionGranted<FAZZINI>{    return mPermissionToState.containsKey(permission) && (mPermissionToState.get(permission) == com.truethat.android.application.permissions.FakePermissionsManager.PermissionState.GRANTED);}<FAZZINI>[com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION]<FAZZINI>isPermissionGranted(com.truethat.android.application.permissions.Permission)<FAZZINI>[com.truethat.android.application.permissions.Permission]<FAZZINI>org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION))<FAZZINI>
https://github.com/guliash/Calculator.git<FAZZINI>TrigonometricTester<FAZZINI>asinTest1<FAZZINI>{    org.junit.Assert.assertEquals(java.lang.Math.asin(java.lang.Math.sin(java.lang.Math.PI / 2)), calculate("asin(sin(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS);}<FAZZINI>calculate<FAZZINI>{    return calculate(expression, new java.util.ArrayList<com.guliash.parser.StringVariable>(), angleUnits);}<FAZZINI>["asin(sin(pi/2))", com.guliash.parser.AngleUnits.RAD]<FAZZINI>calculate(java.lang.String,com.guliash.parser.AngleUnits)<FAZZINI>[java.lang.String, com.guliash.parser.AngleUnits]<FAZZINI>org.junit.Assert.assertEquals(java.lang.Math.asin(java.lang.Math.sin(java.lang.Math.PI / 2)), calculate("asin(sin(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS)<FAZZINI>
https://github.com/BioID-GmbH/BWS-Android.git<FAZZINI>VerificationPresenterTest<FAZZINI>onUploadSuccessful_ifFirstImageOfPairWasUploaded_waitForSecondImageUploadToComplete<FAZZINI>{    presenter.setSuccessfulUploads(2);    presenter.onUploadSuccessful();    org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false));}<FAZZINI>is<FAZZINI>{    return org.hamcrest.core.Is.is(value);}<FAZZINI>[false]<FAZZINI>is(java.lang.Object)<FAZZINI>[java.lang.Object]<FAZZINI>org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false))<FAZZINI>
https://github.com/dmfs/opentasks.git<FAZZINI>TaskProviderDetachInstancesTest<FAZZINI>testRRule<FAZZINI>{    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));    org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);    org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));    org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 0, 3600);    org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");    org.dmfs.rfc5545.DateTime due = start.addDuration(hour);    org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);    org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);    org.dmfs.rfc5545.DateTime third = second.addDuration(day);    org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);    org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);    org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());    org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);    queue.enqueue(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))));    queue.flush();    org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day), due.addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=4"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp()))));}<FAZZINI>valueOf<FAZZINI>{    return java.lang.Integer.toString(i);}<FAZZINI>[org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED]<FAZZINI>valueOf(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day), due.addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=4"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp()))))<FAZZINI>
https://github.com/translation-cards/translation-cards.git<FAZZINI>TranslationTabsFragmentTest<FAZZINI>shouldInflateFragmentWithLanguagesTab<FAZZINI>{    org.junit.Assert.assertNotNull(getFragmentView());}<FAZZINI>getFragmentView<FAZZINI>{    return translationTabsFragment.getView();}<FAZZINI>none-fazzini<FAZZINI>getFragmentView()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(getFragmentView())<FAZZINI>
https://github.com/rmm01/CycleBattleDemo.git<FAZZINI>GameManagerTest<FAZZINI>testHeightGreaterThanWidth<FAZZINI>{    mGameManager1 = new com.yckir.cyclebattledemo.views.gameSurfaceView.GameManager(new com.yckir.cyclebattledemo.views.gameSurfaceView.Grid(5, 5, 10), 500, 500, mMockPaint);    org.junit.Assert.assertTrue(mGameManager1.getFrameWidth() <= mGameManager1.getFrameHeight());}<FAZZINI>getFrameHeight<FAZZINI>{    return mFrameHeight;}<FAZZINI>none-fazzini<FAZZINI>getFrameHeight()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(mGameManager1.getFrameWidth() <= mGameManager1.getFrameHeight())<FAZZINI>
https://github.com/TimLavers/IndoFlashJava.git<FAZZINI>WordTest<FAZZINI>testWord<FAZZINI>{    org.grandtestauto.indoflash.word.Word word = new org.grandtestauto.indoflash.word.Word("satu", "one");    org.junit.Assert.assertEquals("satu", word.word());}<FAZZINI>word<FAZZINI>{    return word;}<FAZZINI>none-fazzini<FAZZINI>word()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("satu", word.word())<FAZZINI>
https://github.com/domogik/domodroid.git<FAZZINI>Entity_Feature_AssociationTest<FAZZINI>testGetFeat_device_id<FAZZINI>{    Entity.Entity_Feature_Association feature_association = new Entity.Entity_Feature_Association(0, null, 0, 0, null);    int feature_device_id = feature_association.getFeat_device_id();    org.junit.Assert.assertEquals(0, feature_device_id);    org.json.JSONObject device_feature_model_id = new org.json.JSONObject();    device_feature_model_id.put("device_id", "125");    feature_device_id = feature_association.getFeat_device_id();}<FAZZINI>getFeat_device_id<FAZZINI>{    return feat_device_id;}<FAZZINI>none-fazzini<FAZZINI>getFeat_device_id()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, feature_device_id)<FAZZINI>
https://github.com/Suwie/improvebcs.git<FAZZINI>ImageUtilsTest<FAZZINI>profileImageResourceByGenderWithMaleParameterReturnsMaleResource<FAZZINI>{    org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(util.PathConstants.GENDER.MALE), R.drawable.child_boy_infant);}<FAZZINI>profileImageResourceByGender<FAZZINI>{    if (org.apache.commons.lang3.StringUtils.isNotBlank(gender)) {        if (gender.equalsIgnoreCase(util.PathConstants.GENDER.MALE)) {            return R.drawable.child_boy_infant;        } else if (gender.equalsIgnoreCase(util.PathConstants.GENDER.FEMALE)) {            return R.drawable.child_girl_infant;        } else if (gender.toLowerCase().contains("trans")) {            return R.drawable.child_transgender_inflant;        }    }    return R.drawable.child_boy_infant;}<FAZZINI>[util.PathConstants.GENDER.MALE]<FAZZINI>profileImageResourceByGender(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(util.PathConstants.GENDER.MALE), R.drawable.child_boy_infant)<FAZZINI>
https://github.com/KlubJagiellonski/pola-android.git<FAZZINI>SessionIdTest<FAZZINI>testGetReturnsNotNullWhenCreated<FAZZINI>{    final java.lang.String sessionId = pl.pola_app.helpers.SessionId.create(context).get();    org.junit.Assert.assertNotNull(sessionId);}<FAZZINI>create<FAZZINI>{    return new pl.pola_app.helpers.SessionId(context);}<FAZZINI>[context]<FAZZINI>create(android.content.Context)<FAZZINI>[android.content.Context]<FAZZINI>org.junit.Assert.assertNotNull(sessionId)<FAZZINI>
https://github.com/proninyaroslav/libretorrent.git<FAZZINI>LoggerTest<FAZZINI>testGetLogEntry_outOfBounds<FAZZINI>{    org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(1);    org.proninyaroslav.libretorrent.core.logger.LogEntry entry = new org.proninyaroslav.libretorrent.core.logger.LogEntry(1, "TEST", "1", 1);    logger.send(entry);    org.junit.Assert.assertEquals(entry, logger.getEntry(1));}<FAZZINI>getEntry<FAZZINI>{    logLock.lock();    try {        org.proninyaroslav.libretorrent.core.collections.FixedRingBuffer<org.proninyaroslav.libretorrent.core.logger.LogEntry> outputBuf = lazyGetOutputBuf();        swapBuffers();        if ((pos < 0) || (pos >= outputBuf.size())) {            throw new java.lang.IllegalArgumentException("Invalid position = " + pos);        }        return outputBuf.get(pos);    } finally {        logLock.unlock();    }}<FAZZINI>[1]<FAZZINI>getEntry(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals(entry, logger.getEntry(1))<FAZZINI>
https://github.com/gummangummangumman/WhoseTweetIsThatAppThing.git<FAZZINI>RandomTweeterTest<FAZZINI>theSizeIsFour<FAZZINI>{    tweeters = hotboys69.dat153.whosetweetisthatappthing.util.TweeterRandomiser.getRandomTweeters(null);    org.junit.Assert.assertEquals(tweeters.size(), 4);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(tweeters.size(), 4)<FAZZINI>
https://github.com/wilmol/Sleep-Easy.git<FAZZINI>TestTime12HourFormatAddMethod<FAZZINI>add90PmToAm<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(11, 00, false);    java.lang.String result = time.addNinteyMinutesXTimes(1).toString();    org.junit.Assert.assertEquals("12:30AM", result);}<FAZZINI>addNinteyMinutesXTimes<FAZZINI>{    wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(_hour, _minute, _isAM);    while ((x--) > 0) {        time = time.addNinteyMinutes();    }     return time;}<FAZZINI>[1]<FAZZINI>addNinteyMinutesXTimes(int)<FAZZINI>[int]<FAZZINI>org.junit.Assert.assertEquals("12:30AM", result)<FAZZINI>
https://github.com/lewismcgeary/AndroidGameofLife.git<FAZZINI>GridCellUnitTestCreatedInStudio<FAZZINI>givenTheGridIsInitialised_WhenAllCellsAreDead_ThenACellsLiveNeighbourCountIsZero<FAZZINI>{    io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);    org.junit.Assert.assertEquals(0, worldGrid.getCell(10, 10).countLivingNeighbours(worldGrid, 10, 10));}<FAZZINI>getCell<FAZZINI>{    return members.get(x).get(y);}<FAZZINI>[10, 10]<FAZZINI>getCell(int,int)<FAZZINI>[int, int]<FAZZINI>org.junit.Assert.assertEquals(0, worldGrid.getCell(10, 10).countLivingNeighbours(worldGrid, 10, 10))<FAZZINI>
https://github.com/lewismcgeary/AndroidGameofLife.git<FAZZINI>GridCellUnitTestCreatedInStudio<FAZZINI>givenTheGridIsInitialised_WhenACellHasOneLiveNeighbour_ThenTheCellsLiveNeighbourCountIsOne<FAZZINI>{    io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);    worldGrid.giveLifeToCell(10, 10);    org.junit.Assert.assertEquals(1, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10));}<FAZZINI>getCell<FAZZINI>{    return members.get(x).get(y);}<FAZZINI>[9, 10]<FAZZINI>getCell(int,int)<FAZZINI>[int, int]<FAZZINI>org.junit.Assert.assertEquals(1, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10))<FAZZINI>
https://github.com/lewismcgeary/AndroidGameofLife.git<FAZZINI>GridCellUnitTestCreatedInStudio<FAZZINI>givenTheGridIsInitialised_WhenACellHasTwoLiveNeighbours_ThenTheCellsLiveNeighbourCountIsTwo<FAZZINI>{    io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);    worldGrid.giveLifeToCell(10, 10);    worldGrid.giveLifeToCell(9, 11);    org.junit.Assert.assertEquals(2, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10));}<FAZZINI>getCell<FAZZINI>{    return members.get(x).get(y);}<FAZZINI>[9, 10]<FAZZINI>getCell(int,int)<FAZZINI>[int, int]<FAZZINI>org.junit.Assert.assertEquals(2, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10))<FAZZINI>
https://github.com/Klemek/AngersTramWidget.git<FAZZINI>HttpUtilsTest<FAZZINI>testExecuteRequestGETRedirect<FAZZINI>{    fr.klemek.angerstramwidget.utils.HttpUtils.HttpResult hr = fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest("GET", "http://klemek.fr");    org.junit.Assert.assertEquals(200, hr.code);}<FAZZINI>executeRequest<FAZZINI>{    return fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest(sMethod, sUrl, null, null, null);}<FAZZINI>["GET", "http://klemek.fr"]<FAZZINI>executeRequest(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(200, hr.code)<FAZZINI>
https://github.com/Infineon/BlockchainSecurity2Go-Android.git<FAZZINI>UriUtilsTest<FAZZINI>extractEtherAddressWithUppercaseLetters<FAZZINI>{    final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("0x6E670C473A2AD5894AE354B832AD4BADF1D919BF");    org.junit.Assert.assertEquals("0x6E670C473A2AD5894AE354B832AD4BADF1D919BF", result);}<FAZZINI>extractEtherAddressFromUri<FAZZINI>{    java.lang.String uriWithoutSchema = uri.replaceFirst("ethereum:", "");    uriWithoutSchema = org.web3j.utils.Numeric.cleanHexPrefix(uriWithoutSchema);    if (uriWithoutSchema.length() != 40) {        throw new co.coinfinity.infineonandroidapp.ethereum.exceptions.InvalidEthereumAddressException("Invalid address. The Ethereum address does not match the 40 char length!");    }    boolean hasChecksum = (!uriWithoutSchema.equals(uriWithoutSchema.toLowerCase())) && (!uriWithoutSchema.equals(uriWithoutSchema.toUpperCase()));    uriWithoutSchema = org.web3j.utils.Numeric.prependHexPrefix(uriWithoutSchema);    if (hasChecksum) {        if (!uriWithoutSchema.equals(org.web3j.crypto.Keys.toChecksumAddress(uriWithoutSchema))) {            throw new co.coinfinity.infineonandroidapp.ethereum.exceptions.InvalidEthereumAddressException("Wrong checksum. The Ethereum address is invalid!");        }    }    return uriWithoutSchema;}<FAZZINI>["0x6E670C473A2AD5894AE354B832AD4BADF1D919BF"]<FAZZINI>extractEtherAddressFromUri(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("0x6E670C473A2AD5894AE354B832AD4BADF1D919BF", result)<FAZZINI>
https://github.com/Infineon/BlockchainSecurity2Go-Android.git<FAZZINI>VotingUtilsTest<FAZZINI>testWhitelistedSenderAddresses<FAZZINI>{    final org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.Address> addresses = co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtils.whitelistedSenderAddresses(co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtilsTest.CONTRACT_ADDRESS, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getAddress(), co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_PRICE, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_LIMIT, co.coinfinity.AppConstants.ROPSTEN_URI);    org.junit.Assert.assertEquals(4, addresses.getValue().size());}<FAZZINI>whitelistedSenderAddresses<FAZZINI>{    co.coinfinity.infineonandroidapp.ethereum.contract.Voting contract = co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtils.prepareReadOnlyVotingContract(contractAddress, from, gasPrice, gasLimit, url);    co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtils.assertContract(contract);    return contract.whitelistedSenderAddresses().send();}<FAZZINI>[co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtilsTest.CONTRACT_ADDRESS, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getAddress(), co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_PRICE, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_LIMIT, co.coinfinity.AppConstants.ROPSTEN_URI]<FAZZINI>whitelistedSenderAddresses(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String, java.math.BigInteger, java.math.BigInteger, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(4, addresses.getValue().size())<FAZZINI>
https://github.com/apachucy/MTGDraftParingApp.git<FAZZINI>AutomaticAlgorithmTest<FAZZINI>verifyThatPlayerShouldNotBeReturnedWhenNullWereProvided<FAZZINI>{    java.util.List<java.lang.String> playerNames = new java.util.ArrayList<>(java.util.Arrays.asList("Arek", "Tomek", "Mirek", "Sirek"));    objectUnderTest.setDraftStartedPlayersList(populatePlayersList(playerNames));    objectUnderTest.setCurrentRound(0);    unii.draft.mtg.parings.logic.pojo.Player selectedPlayer = objectUnderTest.getPlayer(null);    org.junit.Assert.assertNull(selectedPlayer);}<FAZZINI>getPlayer<FAZZINI>{    for (unii.draft.mtg.parings.logic.pojo.Player player : mDraftDataProvider.getPlayerList()) {        if (player.getPlayerName().equals(playerName)) {            return player;        }    }    return null;}<FAZZINI>[null]<FAZZINI>getPlayer(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertNull(selectedPlayer)<FAZZINI>
https://github.com/apachucy/MTGDraftParingApp.git<FAZZINI>AutomaticAlgorithmTest<FAZZINI>verifyThatPlayerShouldNotBeReturnedWhenNameNotOnListWereProvided<FAZZINI>{    java.util.List<java.lang.String> playerNames = new java.util.ArrayList<>(java.util.Arrays.asList("Arek", "Tomek", "Mirek", "Sirek"));    objectUnderTest.setDraftStartedPlayersList(populatePlayersList(playerNames));    objectUnderTest.setCurrentRound(0);    unii.draft.mtg.parings.logic.pojo.Player selectedPlayer = objectUnderTest.getPlayer("Zbyszek");    org.junit.Assert.assertNull(selectedPlayer);}<FAZZINI>getPlayer<FAZZINI>{    for (unii.draft.mtg.parings.logic.pojo.Player player : mDraftDataProvider.getPlayerList()) {        if (player.getPlayerName().equals(playerName)) {            return player;        }    }    return null;}<FAZZINI>["Zbyszek"]<FAZZINI>getPlayer(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertNull(selectedPlayer)<FAZZINI>
https://github.com/abhijitvalluri/fitnotifications.git<FAZZINI>TransliterationTest<FAZZINI>transliterateJapanese<FAZZINI>{    org.junit.Assert.assertEquals("arufabetto", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("アルファベット"));}<FAZZINI>getInstance<FAZZINI>{    return com.ibm.icu.text.Transliterator.getInstance(ID, com.ibm.icu.text.Transliterator.FORWARD);}<FAZZINI>["Any-Latin"]<FAZZINI>getInstance(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("arufabetto", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("アルファベット"))<FAZZINI>
https://github.com/abhijitvalluri/fitnotifications.git<FAZZINI>TransliterationTest<FAZZINI>transliterateGreek<FAZZINI>{    org.junit.Assert.assertEquals("Alphabētikós", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("Αλφαβητικός"));}<FAZZINI>getInstance<FAZZINI>{    return com.ibm.icu.text.Transliterator.getInstance(ID, com.ibm.icu.text.Transliterator.FORWARD);}<FAZZINI>["Any-Latin"]<FAZZINI>getInstance(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("Alphabētikós", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("Αλφαβητικός"))<FAZZINI>
https://github.com/abhijitvalluri/fitnotifications.git<FAZZINI>TransliterationTest<FAZZINI>transliterateThai<FAZZINI>{    org.junit.Assert.assertEquals("tạw xạks̄ʹr", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("ตัวอักษร"));}<FAZZINI>getInstance<FAZZINI>{    return com.ibm.icu.text.Transliterator.getInstance(ID, com.ibm.icu.text.Transliterator.FORWARD);}<FAZZINI>["Any-Latin"]<FAZZINI>getInstance(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals("tạw xạks̄ʹr", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("ตัวอักษร"))<FAZZINI>
https://github.com/jonatantierno/huggingNepal.git<FAZZINI>TownSummaryTest<FAZZINI>shouldTurnDraftToString<FAZZINI>{    com.katmandu.katmandu.TownSummary summaryUnderTest = com.katmandu.katmandu.TownSummary.buildDraft("Town Name", com.katmandu.katmandu.TownStatus.BLACK, "12345");    java.lang.String serialized = summaryUnderTest.toString();    com.katmandu.katmandu.TownSummary deserialized = com.katmandu.katmandu.TownSummary.deserialize(serialized);    org.junit.Assert.assertEquals(deserialized, summaryUnderTest);}<FAZZINI>deserialize<FAZZINI>{    java.util.Scanner scanner = new java.util.Scanner(serialized).useDelimiter("\n");    return new com.katmandu.katmandu.TownSummary(scanner.next(), com.katmandu.katmandu.TownStatus.valueOf(scanner.next()), scanner.next(), scanner.nextBoolean(), scanner.nextBoolean());}<FAZZINI>[serialized]<FAZZINI>deserialize(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(deserialized, summaryUnderTest)<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>angleFromCoordinate_straightUp<FAZZINI>{    org.junit.Assert.assertEquals(0, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 90, 0), 0);}<FAZZINI>angleFromCoordinate<FAZZINI>{    final double lat1Rad = java.lang.Math.toRadians(lat1);    final double long1Rad = java.lang.Math.toRadians(long1);    final double lat2Rad = java.lang.Math.toRadians(lat2);    final double long2Rad = java.lang.Math.toRadians(long2);    final double dLon = long2Rad - long1Rad;    final double y = java.lang.Math.sin(dLon) * java.lang.Math.cos(lat2Rad);    final double x = (java.lang.Math.cos(lat1Rad) * java.lang.Math.sin(lat2Rad)) - ((java.lang.Math.sin(lat1Rad) * java.lang.Math.cos(lat2Rad)) * java.lang.Math.cos(dLon));    final double bearingRad = java.lang.Math.atan2(y, x);    return (java.lang.Math.toDegrees(bearingRad) + 360) % 360;}<FAZZINI>[0, 0, 90, 0]<FAZZINI>angleFromCoordinate(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(0, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 90, 0), 0)<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>angleFromCoordinate_east<FAZZINI>{    org.junit.Assert.assertEquals(90, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 0, 45), 0);}<FAZZINI>angleFromCoordinate<FAZZINI>{    final double lat1Rad = java.lang.Math.toRadians(lat1);    final double long1Rad = java.lang.Math.toRadians(long1);    final double lat2Rad = java.lang.Math.toRadians(lat2);    final double long2Rad = java.lang.Math.toRadians(long2);    final double dLon = long2Rad - long1Rad;    final double y = java.lang.Math.sin(dLon) * java.lang.Math.cos(lat2Rad);    final double x = (java.lang.Math.cos(lat1Rad) * java.lang.Math.sin(lat2Rad)) - ((java.lang.Math.sin(lat1Rad) * java.lang.Math.cos(lat2Rad)) * java.lang.Math.cos(dLon));    final double bearingRad = java.lang.Math.atan2(y, x);    return (java.lang.Math.toDegrees(bearingRad) + 360) % 360;}<FAZZINI>[0, 0, 0, 45]<FAZZINI>angleFromCoordinate(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(90, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 0, 45), 0)<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>angleFromCoordinate_west<FAZZINI>{    org.junit.Assert.assertEquals(270, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 90, 0, 45), 0);}<FAZZINI>angleFromCoordinate<FAZZINI>{    final double lat1Rad = java.lang.Math.toRadians(lat1);    final double long1Rad = java.lang.Math.toRadians(long1);    final double lat2Rad = java.lang.Math.toRadians(lat2);    final double long2Rad = java.lang.Math.toRadians(long2);    final double dLon = long2Rad - long1Rad;    final double y = java.lang.Math.sin(dLon) * java.lang.Math.cos(lat2Rad);    final double x = (java.lang.Math.cos(lat1Rad) * java.lang.Math.sin(lat2Rad)) - ((java.lang.Math.sin(lat1Rad) * java.lang.Math.cos(lat2Rad)) * java.lang.Math.cos(dLon));    final double bearingRad = java.lang.Math.atan2(y, x);    return (java.lang.Math.toDegrees(bearingRad) + 360) % 360;}<FAZZINI>[0, 90, 0, 45]<FAZZINI>angleFromCoordinate(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(270, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 90, 0, 45), 0)<FAZZINI>
https://github.com/apps4av/avare.git<FAZZINI>AudibleTrafficAlertsTest<FAZZINI>angleFromCoordinate_diagonal<FAZZINI>{    org.junit.Assert.assertEquals(225, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(43.5439, -96.73, 42.57, -98.0421), 0.5);}<FAZZINI>angleFromCoordinate<FAZZINI>{    final double lat1Rad = java.lang.Math.toRadians(lat1);    final double long1Rad = java.lang.Math.toRadians(long1);    final double lat2Rad = java.lang.Math.toRadians(lat2);    final double long2Rad = java.lang.Math.toRadians(long2);    final double dLon = long2Rad - long1Rad;    final double y = java.lang.Math.sin(dLon) * java.lang.Math.cos(lat2Rad);    final double x = (java.lang.Math.cos(lat1Rad) * java.lang.Math.sin(lat2Rad)) - ((java.lang.Math.sin(lat1Rad) * java.lang.Math.cos(lat2Rad)) * java.lang.Math.cos(dLon));    final double bearingRad = java.lang.Math.atan2(y, x);    return (java.lang.Math.toDegrees(bearingRad) + 360) % 360;}<FAZZINI>[43.5439, -96.73, 42.57, -98.0421]<FAZZINI>angleFromCoordinate(double,double,double,double)<FAZZINI>[double, double, double, double]<FAZZINI>org.junit.Assert.assertEquals(225, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(43.5439, -96.73, 42.57, -98.0421), 0.5)<FAZZINI>
https://github.com/koelleChristian/trickytripper.git<FAZZINI>ApiResponseTest<FAZZINI>testJSONShitTest<FAZZINI>{    java.lang.String JSON_STRING = "{\"EUR_USD\":{\"val\":1.174549}}";    org.json.JSONObject object = new org.json.JSONObject(JSON_STRING.replace("\"", "'"));    java.lang.System.out.println(object.get("EUR_USD"));    org.junit.Assert.assertEquals("1.174549", new org.json.JSONObject(object.get(object.keys().next()).toString()).getString("val"));}<FAZZINI>println<FAZZINI>{    if (getClass() == java.io.PrintStream.class) {        writeln(x);    } else {        synchronized(this) {            print(x);            newLine();        }    }}<FAZZINI>[object.get("EUR_USD")]<FAZZINI>println(char[])<FAZZINI>[char[]]<FAZZINI>org.junit.Assert.assertEquals("1.174549", new org.json.JSONObject(object.get(object.keys().next()).toString()).getString("val"))<FAZZINI>
https://github.com/koelleChristian/trickytripper.git<FAZZINI>DeleteTripTest<FAZZINI>testDeleteTrip<FAZZINI>{    de.koelle.christian.trickytripper.dataaccess.impl.DataManagerImpl dataManager = new de.koelle.christian.trickytripper.dataaccess.impl.DataManagerImpl(androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().getTargetContext());    dataManager.removeAll();    long tripId = dataManager.persistTrip(de.koelle.christian.trickytripper.factories.ModelFactory.createNewTrip("MyTrip", java.util.Currency.getInstance("USD"))).getId();    de.koelle.christian.trickytripper.model.Participant p1 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Tony", true));    de.koelle.christian.trickytripper.model.Participant p2 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Steve", false));    de.koelle.christian.trickytripper.model.Participant p3 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Bruce", false));    de.koelle.christian.trickytripper.model.Payment payment01In = de.koelle.christian.trickytripper.factories.ModelFactory.createNewPayment("MyDescription01", de.koelle.christian.trickytripper.model.PaymentCategory.BEVERAGES);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 33.2, "EUR", true, p1);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 10.1, "EUR", false, p1);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 11.1, "EUR", false, p2);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 12.0, "EUR", false, p3);    dataManager.persistPaymentInTrip(tripId, payment01In);    de.koelle.christian.trickytripper.model.Payment payment02In = de.koelle.christian.trickytripper.factories.ModelFactory.createNewPayment("MyDescription02", de.koelle.christian.trickytripper.model.PaymentCategory.GAS);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment02In, 10.0, "USD", true, p1);    de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment02In, 10.0, "USD", false, p2);    dataManager.persistPaymentInTrip(tripId, payment02In);    de.koelle.christian.trickytripper.model.TripSummary tripSummary = new de.koelle.christian.trickytripper.model.TripSummary();    tripSummary.setId(tripId);    dataManager.deleteTrip(tripSummary);    org.junit.Assert.assertEquals(null, dataManager.loadTripById(tripId));}<FAZZINI>loadTripById<FAZZINI>{    de.koelle.christian.trickytripper.model.Trip result = tripDao.get(tripId);    if (result == null) {        return null;    }    result.setParticipant(new java.util.ArrayList<de.koelle.christian.trickytripper.model.Participant>());    result.setPayments(new java.util.ArrayList<de.koelle.christian.trickytripper.model.Payment>());    java.util.List<de.koelle.christian.trickytripper.model.Participant> participantsInTrip = participantDao.getAllParticipantsInTrip(tripId);    result.getParticipant().addAll(participantsInTrip);    java.util.List<de.koelle.christian.trickytripper.dataaccess.impl.tecbeans.PaymentReference> interimPaymentResult = paymentDao.getAllPaymentsInTrip(tripId);    java.util.List<de.koelle.christian.trickytripper.model.Payment> payments = convertPaymentReferenceToPayment(interimPaymentResult, participantsInTrip);    result.getPayments().addAll(payments);    return result;}<FAZZINI>[tripId]<FAZZINI>loadTripById(long)<FAZZINI>[long]<FAZZINI>org.junit.Assert.assertEquals(null, dataManager.loadTripById(tripId))<FAZZINI>
https://github.com/SecUSo/privacy-friendly-shopping-list.git<FAZZINI>DateUtilsTest<FAZZINI>getFormattedDateString<FAZZINI>{    java.lang.String formattedDateString = privacyfriendlyshoppinglist.secuso.org.privacyfriendlyshoppinglist.framework.utils.DateUtils.getFormattedDateString(data.getInputDate(), data.getInputPattern(), data.getOutputPaterrn(), data.getLanguage());    org.junit.Assert.assertEquals(data.getExpectedDate(), formattedDateString);}<FAZZINI>getExpectedDate<FAZZINI>{    return expectedDate;}<FAZZINI>none-fazzini<FAZZINI>getExpectedDate()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(data.getExpectedDate(), formattedDateString)<FAZZINI>
https://github.com/vbier/habpanelviewer.git<FAZZINI>SseConnectionTest<FAZZINI>testNoNetwork<FAZZINI>{    mSseConnection.setServerUrl("http://localhost:8080");    org.junit.Assert.assertEquals(de.vier_bier.habpanelviewer.openhab.SseConnection.Status.NO_NETWORK, mSseConnection.getStatus());}<FAZZINI>getStatus<FAZZINI>{    return mStatus;}<FAZZINI>none-fazzini<FAZZINI>getStatus()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(de.vier_bier.habpanelviewer.openhab.SseConnection.Status.NO_NETWORK, mSseConnection.getStatus())<FAZZINI>
https://github.com/bigmikehoncho/RiskDiceSimulator.git<FAZZINI>RiskDiceSimulatorUnitTest<FAZZINI>checkIfValidBattle<FAZZINI>{    org.junit.Assert.assertTrue(mSimulator.isAttackPossible());}<FAZZINI>isAttackPossible<FAZZINI>{    int possibleUnitsToLose = (attackerUnitCount > defenderUnitCount) ? java.lang.Math.min(defenderUnitCount, 2) : java.lang.Math.min(attackerUnitCount - 1, 2);    return (((defenderUnitCount > 0) && (attackerUnitCount > 1)) && ((attackerUnitCount - possibleUnitsToLose) >= attackerSafety)) && ((defenderUnitCount - possibleUnitsToLose) >= defenderSafety);}<FAZZINI>none-fazzini<FAZZINI>isAttackPossible()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(mSimulator.isAttackPossible())<FAZZINI>
https://github.com/PiXeL16/Sea-Nec-IO.git<FAZZINI>PhoneNumberUtilsTests<FAZZINI>testStripCountryCodeWithErrors<FAZZINI>{    java.lang.String result = com.greenpixels.seanecio.telephony.PhoneNumberUtils.stripCountryCodeFromPhoneNumber("+151-10-10", "CR");    org.junit.Assert.assertEquals(result, "511010");}<FAZZINI>stripCountryCodeFromPhoneNumber<FAZZINI>{    com.google.i18n.phonenumbers.PhoneNumberUtil phoneUtil = com.google.i18n.phonenumbers.PhoneNumberUtil.getInstance();    java.lang.String returnValue = phoneNumberToStrip;    try {        com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber = phoneUtil.parse(phoneNumberToStrip, countryCode);        returnValue = java.lang.String.valueOf(phoneNumber.getNationalNumber());    } catch (com.google.i18n.phonenumbers.NumberParseException e) {        timber.log.Timber.e(e.getLocalizedMessage());    }    return returnValue;}<FAZZINI>["+151-10-10", "CR"]<FAZZINI>stripCountryCodeFromPhoneNumber(java.lang.String,java.lang.String)<FAZZINI>[java.lang.String, java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(result, "511010")<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>SegundaFormaNormalTest<FAZZINI>soyprimeraFormaNormal<FAZZINI>{    org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyFNBC());}<FAZZINI>soyFNBC<FAZZINI>{    return false;}<FAZZINI>none-fazzini<FAZZINI>soyFNBC()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyFNBC())<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>SegundaFormaNormalTest<FAZZINI>soyTerceraFN<FAZZINI>{    org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyTerceraFN());}<FAZZINI>soyTerceraFN<FAZZINI>{    return false;}<FAZZINI>none-fazzini<FAZZINI>soyTerceraFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyTerceraFN())<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>SegundaFormaNormalTest<FAZZINI>soySegundaFN<FAZZINI>{    org.junit.Assert.assertEquals(true, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soySegundaFN());}<FAZZINI>soySegundaFN<FAZZINI>{    return true;}<FAZZINI>none-fazzini<FAZZINI>soySegundaFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(true, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soySegundaFN())<FAZZINI>
https://github.com/fedeLizondo/BaseDeDatos.git<FAZZINI>SegundaFormaNormalTest<FAZZINI>soyPrimeraFN<FAZZINI>{    org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyPrimeraFN());}<FAZZINI>soyPrimeraFN<FAZZINI>{    return false;}<FAZZINI>none-fazzini<FAZZINI>soyPrimeraFN()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyPrimeraFN())<FAZZINI>
https://github.com/ProjectUNBI/Iyek_Retouch.git<FAZZINI>doIyekTest<FAZZINI>convertnow<FAZZINI>{    com.unbi.iyekretouch.userSavePreferance userpref = new com.unbi.iyekretouch.userSavePreferance();    android.content.Context context = null;    java.lang.String preIyek = "k";    com.unbi.iyekretouch.doIyek doiyek = new com.unbi.iyekretouch.doIyek();    doiyek.convertnow("hh", context, preIyek, userpref);    java.lang.String output = doiyek.getConverted();    java.lang.System.out.print(output);    java.lang.String expect = "ꯀ";    org.junit.Assert.assertEquals(expect, output);}<FAZZINI>print<FAZZINI>{    write(java.lang.String.valueOf(s));}<FAZZINI>[output]<FAZZINI>print(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertEquals(expect, output)<FAZZINI>
https://github.com/CarstenKarbach/VoBox.git<FAZZINI>DictionaryTest<FAZZINI>testLoadIfPossible<FAZZINI>{    de.karbach.superapp.StarterActivity activity = org.robolectric.Robolectric.buildActivity(de.karbach.superapp.StarterActivity.class).setup().get();    de.karbach.superapp.data.Dictionary dict = new de.karbach.superapp.data.Dictionary("test");    dict.loadIfPossible(activity);    org.junit.Assert.assertEquals(0, dict.getCards().size());}<FAZZINI>getCards<FAZZINI>{    return cards;}<FAZZINI>none-fazzini<FAZZINI>getCards()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(0, dict.getCards().size())<FAZZINI>
https://github.com/jaunerc/ThinkQuick.git<FAZZINI>LifeTest<FAZZINI>getLife<FAZZINI>{    org.junit.Assert.assertEquals(3, life.getLife());}<FAZZINI>getLife<FAZZINI>{    return life;}<FAZZINI>none-fazzini<FAZZINI>getLife()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(3, life.getLife())<FAZZINI>
https://github.com/jaunerc/ThinkQuick.git<FAZZINI>MatchResultTest<FAZZINI>getWinner<FAZZINI>{    matchResult.match(ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.ROCK, ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.PAPER);    org.junit.Assert.assertEquals(ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.PAPER, matchResult.getWinner());}<FAZZINI>getWinner<FAZZINI>{    return winner;}<FAZZINI>none-fazzini<FAZZINI>getWinner()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.PAPER, matchResult.getWinner())<FAZZINI>
https://github.com/codimoc/PrismaCallBlocker.git<FAZZINI>TestCalendarRule<FAZZINI>TestEqualityVsNull<FAZZINI>{    com.prismaqf.callblocker.rules.CalendarRule c1 = new com.prismaqf.callblocker.rules.CalendarRule("first", java.util.EnumSet.of(com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.MONDAY, com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.FRIDAY), 2, 15, 10, 7);    org.junit.Assert.assertNotEquals("Null is not equal to any object", c1, null);}<FAZZINI>of<FAZZINI>{    java.util.EnumSet<E> result = java.util.EnumSet.noneOf(e1.getDeclaringClass());    result.add(e1);    result.add(e2);    return result;}<FAZZINI>[com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.MONDAY, com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.FRIDAY]<FAZZINI>of(java.lang.Enum,java.lang.Enum)<FAZZINI>[java.lang.Enum<E>, java.lang.Enum<E>]<FAZZINI>org.junit.Assert.assertNotEquals("Null is not equal to any object", c1, null)<FAZZINI>
https://github.com/codimoc/PrismaCallBlocker.git<FAZZINI>FilterCreationTest<FAZZINI>ParcelableTest<FAZZINI>{    com.prismaqf.callblocker.filters.FilterHandle fh1 = new com.prismaqf.callblocker.filters.FilterHandle("myFilter", com.prismaqf.callblocker.FilterCreationTest.CAL_RULE, com.prismaqf.callblocker.FilterCreationTest.FIL_RULE, com.prismaqf.callblocker.actions.DropCallByDownButton.class.getCanonicalName());    android.os.Parcel parcel = android.os.Parcel.obtain();    fh1.writeToParcel(parcel, 0);    parcel.setDataPosition(0);    com.prismaqf.callblocker.filters.FilterHandle fh2 = com.prismaqf.callblocker.filters.FilterHandle.CREATOR.createFromParcel(parcel);    org.junit.Assert.assertEquals("Equal after Parcelization", fh1, fh2);}<FAZZINI>writeToParcel<FAZZINI>{    dest.writeString(name);    dest.writeString(calendarRuleName);    dest.writeString(filterRuleName);    dest.writeString(actionName);}<FAZZINI>[parcel, 0]<FAZZINI>writeToParcel(android.os.Parcel,int)<FAZZINI>[android.os.Parcel, int]<FAZZINI>org.junit.Assert.assertEquals("Equal after Parcelization", fh1, fh2)<FAZZINI>
https://github.com/codimoc/PrismaCallBlocker.git<FAZZINI>FilterRuleParcelTest<FAZZINI>TestParcelable<FAZZINI>{    com.prismaqf.callblocker.rules.FilterRule fr1 = new com.prismaqf.callblocker.rules.FilterRule("first", "A filter");    fr1.addPattern("123");    fr1.addPattern("4*56");    android.os.Parcel parcel = android.os.Parcel.obtain();    fr1.writeToParcel(parcel, 0);    parcel.setDataPosition(0);    com.prismaqf.callblocker.rules.FilterRule fr2 = com.prismaqf.callblocker.rules.FilterRule.CREATOR.createFromParcel(parcel);    org.junit.Assert.assertEquals("Equal after Prcelization", fr1, fr2);}<FAZZINI>writeToParcel<FAZZINI>{    dest.writeString(name);    dest.writeString(description);    dest.writeInt(patterns.size());    for (java.lang.String key : patterns.keySet()) {        dest.writeString(key);    }}<FAZZINI>[parcel, 0]<FAZZINI>writeToParcel(android.os.Parcel,int)<FAZZINI>[android.os.Parcel, int]<FAZZINI>org.junit.Assert.assertEquals("Equal after Prcelization", fr1, fr2)<FAZZINI>
https://github.com/sewerina/reek.git<FAZZINI>UnitTest<FAZZINI>testHasMapScreen<FAZZINI>{    com.github.sewerina.reek.ui.MainViewModel viewModel = new com.github.sewerina.reek.ui.MainViewModel();    viewModel.setMapScreenPath("abcPath");    org.junit.Assert.assertTrue(viewModel.hasMapScreen());}<FAZZINI>hasMapScreen<FAZZINI>{    return (mMapScreenPath.getValue() != null) && (!mMapScreenPath.getValue().isEmpty());}<FAZZINI>none-fazzini<FAZZINI>hasMapScreen()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue(viewModel.hasMapScreen())<FAZZINI>
https://github.com/AndrewPochapsky/RoutinePlanner.git<FAZZINI>JsonTests<FAZZINI>jsonToRoutines_EmptyJson_ReturnsEmptyArray<FAZZINI>{    com.company.loaf.routinescheduler.Routine[] arr = com.company.loaf.routinescheduler.utils.JSONUtils.jsonToRoutines("");    org.junit.Assert.assertNull(arr);}<FAZZINI>jsonToRoutines<FAZZINI>{    return new com.google.gson.Gson().fromJson(json, com.company.loaf.routinescheduler.Routine[].class);}<FAZZINI>[""]<FAZZINI>jsonToRoutines(java.lang.String)<FAZZINI>[java.lang.String]<FAZZINI>org.junit.Assert.assertNull(arr)<FAZZINI>
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git<FAZZINI>PreferenceUtilsTest<FAZZINI>testSaveCurPlayingSuccess<FAZZINI>{    org.mockito.Mockito.when(context.getSharedPreferences(org.mockito.Matchers.anyString(), org.mockito.Matchers.anyInt())).thenReturn(sharedPreferences);    xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState testState = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_POS, xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_SEEK_POS);    xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.saveCurPlaying(context, testState);    org.junit.Assert.assertEquals(testState, xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context));}<FAZZINI>loadCurPlaying<FAZZINI>{    if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {        android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "loadCurPlaying");    }    android.content.SharedPreferences preferences = context.getSharedPreferences(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_PREFERENCES, android.content.Context.MODE_PRIVATE);    xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    try {        int queuePos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_POS, xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.UNKNOWN_POS);        int seekPos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_SEEKPOS, 0);        state.setQueuePos(queuePos);        state.setSeekPos(seekPos);    } catch (java.lang.ClassCastException e) {        if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {            android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "Incorrect type found for preference");        }        state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    }    return state;}<FAZZINI>[context]<FAZZINI>loadCurPlaying(android.content.Context)<FAZZINI>[android.content.Context]<FAZZINI>org.junit.Assert.assertEquals(testState, xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context))<FAZZINI>
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git<FAZZINI>PreferenceUtilsTest<FAZZINI>testSaveCurPlayingFail<FAZZINI>{    org.mockito.Mockito.when(context.getSharedPreferences(org.mockito.Matchers.anyString(), org.mockito.Matchers.anyInt())).thenReturn(sharedBrokenPreferences);    xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.saveCurPlaying(context, new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_POS, xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_SEEK_POS));    org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context));}<FAZZINI>loadCurPlaying<FAZZINI>{    if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {        android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "loadCurPlaying");    }    android.content.SharedPreferences preferences = context.getSharedPreferences(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_PREFERENCES, android.content.Context.MODE_PRIVATE);    xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    try {        int queuePos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_POS, xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.UNKNOWN_POS);        int seekPos = preferences.getInt(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.SERVICE_QUEUE_PLAYING_SEEKPOS, 0);        state.setQueuePos(queuePos);        state.setSeekPos(seekPos);    } catch (java.lang.ClassCastException e) {        if (xyz.lostalishar.nyaanyaamusicplayer.BuildConfig.DEBUG) {            android.util.Log.d(xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.TAG, "Incorrect type found for preference");        }        state = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState();    }    return state;}<FAZZINI>[context]<FAZZINI>loadCurPlaying(android.content.Context)<FAZZINI>[android.content.Context]<FAZZINI>org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context))<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AuthorServiceIT<FAZZINI>getAllAuthorsTest<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Author> authors = authorService.getAuthors();    org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 2", authors.size() == 2);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 2", authors.size() == 2)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AuthorServiceIT<FAZZINI>insertAuthorValidTest<FAZZINI>{    fifthelement.theelement.objects.Author author = new fifthelement.theelement.objects.Author("Jim Bob");    authorService.insertAuthor(author);    org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 3", authorService.getAuthors().size() == 3);}<FAZZINI>getAuthors<FAZZINI>{    return authorPersistence.getAllAuthors();}<FAZZINI>none-fazzini<FAZZINI>getAuthors()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 3", authorService.getAuthors().size() == 3)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AuthorServiceTest<FAZZINI>getAllAuthorsTest<FAZZINI>{    java.util.List<fifthelement.theelement.objects.Author> authors = classUnderTest.getAuthors();    org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 3", authors.size() == 3);}<FAZZINI>size<FAZZINI>null<FAZZINI>none-fazzini<FAZZINI>size()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 3", authors.size() == 3)<FAZZINI>
https://github.com/Tenacle/FifthElement.git<FAZZINI>AuthorServiceTest<FAZZINI>insertAuthorValidTest<FAZZINI>{    fifthelement.theelement.objects.Author author = new fifthelement.theelement.objects.Author("Jim Bob");    classUnderTest.insertAuthor(author);    org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 4", classUnderTest.getAuthors().size() == 4);}<FAZZINI>getAuthors<FAZZINI>{    return authorPersistence.getAllAuthors();}<FAZZINI>none-fazzini<FAZZINI>getAuthors()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 4", classUnderTest.getAuthors().size() == 4)<FAZZINI>
https://github.com/Q115/Goalie_Android.git<FAZZINI>ImageHelperInstrumentedTest<FAZZINI>initalization<FAZZINI>{    org.junit.Assert.assertNotNull(com.github.q115.goalie_android.utils.ImageHelper.getInstance().getImagePrivateStorageDirectory(""));}<FAZZINI>getInstance<FAZZINI>{    if (com.github.q115.goalie_android.utils.ImageHelper.mInstance == null) {        com.github.q115.goalie_android.utils.ImageHelper.mInstance = new com.github.q115.goalie_android.utils.ImageHelper();    }    return com.github.q115.goalie_android.utils.ImageHelper.mInstance;}<FAZZINI>none-fazzini<FAZZINI>getInstance()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertNotNull(com.github.q115.goalie_android.utils.ImageHelper.getInstance().getImagePrivateStorageDirectory(""))<FAZZINI>
https://github.com/Q115/Goalie_Android.git<FAZZINI>PreferenceHelperInstrumentedTest<FAZZINI>setPushID<FAZZINI>{    com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setPushID("new pushID");    org.junit.Assert.assertEquals("new pushID", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getPushID());}<FAZZINI>getInstance<FAZZINI>{    if (com.github.q115.goalie_android.utils.PreferenceHelper.mInstance == null) {        com.github.q115.goalie_android.utils.PreferenceHelper.mInstance = new com.github.q115.goalie_android.utils.PreferenceHelper();    }    return com.github.q115.goalie_android.utils.PreferenceHelper.mInstance;}<FAZZINI>none-fazzini<FAZZINI>getInstance()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("new pushID", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getPushID())<FAZZINI>
https://github.com/Q115/Goalie_Android.git<FAZZINI>PreferenceHelperInstrumentedTest<FAZZINI>setAccountUsername<FAZZINI>{    com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setAccountUsername("new AccountUsername");    org.junit.Assert.assertEquals("new AccountUsername", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getAccountUsername());}<FAZZINI>getInstance<FAZZINI>{    if (com.github.q115.goalie_android.utils.PreferenceHelper.mInstance == null) {        com.github.q115.goalie_android.utils.PreferenceHelper.mInstance = new com.github.q115.goalie_android.utils.PreferenceHelper();    }    return com.github.q115.goalie_android.utils.PreferenceHelper.mInstance;}<FAZZINI>none-fazzini<FAZZINI>getInstance()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals("new AccountUsername", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getAccountUsername())<FAZZINI>
https://github.com/Q115/Goalie_Android.git<FAZZINI>PreferenceHelperInstrumentedTest<FAZZINI>setLastSyncedTimeEpoch<FAZZINI>{    com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setLastSyncedTimeEpoch(22);    org.junit.Assert.assertEquals(22, com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getLastSyncedTimeEpoch());}<FAZZINI>getInstance<FAZZINI>{    if (com.github.q115.goalie_android.utils.PreferenceHelper.mInstance == null) {        com.github.q115.goalie_android.utils.PreferenceHelper.mInstance = new com.github.q115.goalie_android.utils.PreferenceHelper();    }    return com.github.q115.goalie_android.utils.PreferenceHelper.mInstance;}<FAZZINI>none-fazzini<FAZZINI>getInstance()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(22, com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getLastSyncedTimeEpoch())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>SlotTest<FAZZINI>testPasswordSlotCrypto<FAZZINI>{    final char[] password = "test".toCharArray();    final com.beemdevelopment.aegis.crypto.SCryptParameters scryptParams = new com.beemdevelopment.aegis.crypto.SCryptParameters(com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_N, com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_p, com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_r, new byte[com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_AEAD_KEY_SIZE]);    com.beemdevelopment.aegis.vault.slots.PasswordSlot slot = new com.beemdevelopment.aegis.vault.slots.PasswordSlot();    javax.crypto.SecretKey passwordKey = slot.deriveKey(password, scryptParams);    javax.crypto.Cipher cipher = com.beemdevelopment.aegis.crypto.CryptoUtils.createEncryptCipher(passwordKey);    slot.setKey(_masterKey, cipher);    cipher = slot.createDecryptCipher(passwordKey);    com.beemdevelopment.aegis.crypto.MasterKey decryptedKey = slot.getKey(cipher);    org.junit.Assert.assertArrayEquals(_masterKey.getBytes(), decryptedKey.getBytes());}<FAZZINI>getBytes<FAZZINI>{    return _key.getEncoded();}<FAZZINI>none-fazzini<FAZZINI>getBytes()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertArrayEquals(_masterKey.getBytes(), decryptedKey.getBytes())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>HOTPTest<FAZZINI>vectorsMatch<FAZZINI>{    for (int i = 0; i < com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS.length; i++) {        com.beemdevelopment.aegis.crypto.otp.OTP otp = com.beemdevelopment.aegis.crypto.otp.HOTP.generateOTP(com.beemdevelopment.aegis.crypto.otp.HOTPTest.SECRET, "HmacSHA1", 6, i);        org.junit.Assert.assertEquals(com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i], otp.toString());    }}<FAZZINI>toString<FAZZINI>{    int code = _code % ((int) (java.lang.Math.pow(10, _digits)));    java.lang.StringBuilder res = new java.lang.StringBuilder(java.lang.Long.toString(code));    while (res.length() < _digits) {        res.insert(0, "0");    }     return res.toString();}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i], otp.toString())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>MOTPTest<FAZZINI>testOutputCode<FAZZINI>{    for (com.beemdevelopment.aegis.crypto.otp.MOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.MOTPTest.VECTORS) {        com.beemdevelopment.aegis.crypto.otp.MOTP otp = com.beemdevelopment.aegis.crypto.otp.MOTP.generateOTP(com.beemdevelopment.aegis.encoding.Hex.decode(vector.Secret), "MD5", 6, 10, vector.Pin, vector.Time);        org.junit.Assert.assertEquals(vector.OTP, otp.toString());    }}<FAZZINI>toString<FAZZINI>{    return _code.substring(0, _digits);}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(vector.OTP, otp.toString())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>TOTPTest<FAZZINI>vectorsMatch<FAZZINI>{    for (com.beemdevelopment.aegis.crypto.otp.TOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.TOTPTest.VECTORS) {        byte[] seed = com.beemdevelopment.aegis.crypto.otp.TOTPTest.getSeed(vector.Algo);        com.beemdevelopment.aegis.crypto.otp.OTP otp = com.beemdevelopment.aegis.crypto.otp.TOTP.generateOTP(seed, vector.Algo, 8, 30, vector.Time);        org.junit.Assert.assertEquals(vector.OTP, otp.toString());    }}<FAZZINI>toString<FAZZINI>{    int code = _code % ((int) (java.lang.Math.pow(10, _digits)));    java.lang.StringBuilder res = new java.lang.StringBuilder(java.lang.Long.toString(code));    while (res.length() < _digits) {        res.insert(0, "0");    }     return res.toString();}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(vector.OTP, otp.toString())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>YAOTPTest<FAZZINI>validateYaOtp<FAZZINI>{    for (com.beemdevelopment.aegis.crypto.otp.YAOTPTest.Vector testCase : com.beemdevelopment.aegis.crypto.otp.YAOTPTest.TEST_CASES) {        byte[] secret = com.beemdevelopment.aegis.otp.YandexInfo.parseSecret(com.beemdevelopment.aegis.encoding.Base32.decode(testCase.secret));        com.beemdevelopment.aegis.crypto.otp.YAOTP otp = com.beemdevelopment.aegis.crypto.otp.YAOTP.generateOTP(secret, testCase.pin, 8, "HmacSHA256", testCase.timestamp, 30);        org.junit.Assert.assertEquals(testCase.expected, otp.toString());    }}<FAZZINI>toString<FAZZINI>{    long code = _code % ((long) (java.lang.Math.pow(com.beemdevelopment.aegis.crypto.otp.YAOTP.EN_ALPHABET_LENGTH, _digits)));    char[] chars = new char[_digits];    for (int i = _digits - 1; i >= 0; i--) {        chars[i] = ((char) ('a' + (code % com.beemdevelopment.aegis.crypto.otp.YAOTP.EN_ALPHABET_LENGTH)));        code /= com.beemdevelopment.aegis.crypto.otp.YAOTP.EN_ALPHABET_LENGTH;    }    return new java.lang.String(chars);}<FAZZINI>none-fazzini<FAZZINI>toString()<FAZZINI>[]<FAZZINI>org.junit.Assert.assertEquals(testCase.expected, otp.toString())<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>QrCodeAnalyzerTest<FAZZINI>testScanQrCode<FAZZINI>{    boolean found = scan("qr.y.gz", 1600, 1200, 1600);    org.junit.Assert.assertTrue("QR code not found", found);}<FAZZINI>scan<FAZZINI>{    java.util.concurrent.atomic.AtomicBoolean found = new java.util.concurrent.atomic.AtomicBoolean();    com.beemdevelopment.aegis.helpers.QrCodeAnalyzer analyzer = new com.beemdevelopment.aegis.helpers.QrCodeAnalyzer(result -> {        org.junit.Assert.assertEquals(com.beemdevelopment.aegis.helpers.QrCodeAnalyzerTest._expectedUri, result.getText());        found.set(true);    });    com.beemdevelopment.aegis.helpers.QrCodeAnalyzerTest.FakeImageProxy imgProxy;    try (java.io.InputStream inStream = getClass().getResourceAsStream(fileName);java.util.zip.GZIPInputStream zipStream = new java.util.zip.GZIPInputStream(inStream)) {        imgProxy = new com.beemdevelopment.aegis.helpers.QrCodeAnalyzerTest.FakeImageProxy(com.beemdevelopment.aegis.util.IOUtils.readAll(zipStream), width, height, rowStride);    } catch (java.io.IOException e) {        throw new java.lang.RuntimeException(e);    }    analyzer.analyze(imgProxy);    return found.get();}<FAZZINI>["qr.y.gz", 1600, 1200, 1600]<FAZZINI>scan(java.lang.String,int,int,int)<FAZZINI>[java.lang.String, int, int, int]<FAZZINI>org.junit.Assert.assertTrue("QR code not found", found)<FAZZINI>
https://github.com/beemdevelopment/Aegis.git<FAZZINI>GoogleAuthInfoTest<FAZZINI>testGoogleAuthInfoEmptySecret<FAZZINI>{    java.lang.String uri = "otpauth://totp/test:test?secret=%s&algo=SHA1&digits=6&period=30";    com.beemdevelopment.aegis.otp.GoogleAuthInfo.parseUri(java.lang.String.format(uri, "AA"));    org.junit.Assert.assertThrows(com.beemdevelopment.aegis.otp.GoogleAuthInfoException.class, () -> com.beemdevelopment.aegis.otp.GoogleAuthInfo.parseUri(java.lang.String.format(uri, "")));}<FAZZINI>format<FAZZINI>{    return new java.util.Formatter().format(format, args).toString();}<FAZZINI>[uri, "AA"]<FAZZINI>format(java.lang.String,java.lang.Object[])<FAZZINI>[java.lang.String, java.lang.Object[]]<FAZZINI>org.junit.Assert.assertThrows(com.beemdevelopment.aegis.otp.GoogleAuthInfoException.class, () -> com.beemdevelopment.aegis.otp.GoogleAuthInfo.parseUri(java.lang.String.format(uri, "")))<FAZZINI>
