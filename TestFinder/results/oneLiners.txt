https://github.com/onaio/steps-app.git,EditHouseholdActivityTest,ShouldFinishTheActivityOnCancel,{     editHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(editHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditMemberActivityTest,ShouldFinishTheActivityOnCancel,{     editMemberActivity.cancel(null);     org.junit.Assert.assertTrue(editMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityTest,ShouldFinishTheActivityOnCancel,{     editParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(editParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.main_activity_actions, householdListActivityMock.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getMenuHandlers();     org.junit.Assert.assertEquals(6, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();     org.junit.Assert.assertEquals(2, resultHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuPreparer,{     android.view.Menu mock = org.mockito.Mockito.mock(android.view.Menu.class);     java.util.List<com.onaio.steps.handler.interfaces.IMenuPreparer> menuHandlers = householdListActivityMock.getMenuPreparer(mock);     org.junit.Assert.assertEquals(1, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperCustomMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getCustomMenuHandler();     org.junit.Assert.assertEquals(2, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityTest,ShouldFinishActivityOnCancel,{     newHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(newHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewMemberActivityTest,ShouldFinishActivityWhenCanceled,{     newMemberActivity.cancel(null);     org.junit.Assert.assertTrue(newMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityTest,ShouldFinishActivityWhenCanceled,{     newParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(newParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,ParticipantListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.participant_list_actions, participantListActivity.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,SettingsActivityTest,ShouldFinishActivityOnCancel,{     settingsActivity.cancel(null);     org.junit.Assert.assertTrue(settingsActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,WelcomeActivityTest,ShouldBeAbleToLoadWelcomeLayout,{     org.junit.Assert.assertEquals(R.id.welcome_layout, Shadows.shadowOf(welcomeActivity).getContentView().getId()); }
https://github.com/onaio/steps-app.git,StepsFileDecoratorTest,testGetFormTitleShouldReturnValidFormTitle,{     org.junit.Assert.assertEquals("A", stepsFileDecorator.getFormTitle()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testDialogShouldNotNull,{     org.junit.Assert.assertNotNull(org.robolectric.shadows.ShadowDialog.getLatestDialog()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testVerifyUploadResultSequence,{     android.app.Dialog dialog = org.robolectric.shadows.ShadowDialog.getLatestDialog();     androidx.recyclerview.widget.RecyclerView recyclerView = dialog.findViewById(R.id.rv_upload_results);     com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter adapter = ((com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter) (recyclerView.getAdapter()));     java.util.List<com.onaio.steps.model.UploadResult> uploadResults = adapter.getUploadResults();     org.junit.Assert.assertEquals(6, uploadResults.size());     verifySortedList(uploadResults.get(0), true);     verifySortedList(uploadResults.get(1), true);     verifySortedList(uploadResults.get(2), true);     verifySortedList(uploadResults.get(3), false);     verifySortedList(uploadResults.get(4), false);     verifySortedList(uploadResults.get(5), false); }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testExtractDataPutAllDataInIntent,{     java.lang.String[] row = new java.lang.String[]{ "1-2-1", "Rav", "Ron", "1", "32", "1", "50" };     android.content.Intent resultIntent = new android.content.Intent();     java.util.List<java.lang.String[]> data = new java.util.ArrayList<>();     data.add(row);     dataProviderActivity.extractData(data, resultIntent);     for (com.onaio.steps.external.DataKeys dataKey : com.onaio.steps.external.DataKeys.values()) {         org.junit.Assert.assertEquals(row[dataKey.getIndex()], resultIntent.getStringExtra(dataKey.getKey()));     } }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testReturnedIntentShouldReturnNonNullIntent,{     org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent()); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches,{     org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home)); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanNotBeStartedForOtherId,{     org.junit.Assert.assertFalse(backHomeHandler.shouldOpen(android.R.id.background)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(selectionHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deferredHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deferredHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deleteMemberHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deleteMemberHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenMemberIsSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotInactivateWhenMemberIsNotSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(2);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityOpensWhenProperIdMatches,{     org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityShouldNotOpenForOtherId,{     org.junit.Assert.assertFalse(exportHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testSavedFileValues,{     java.lang.String hhName = "testHhName";     java.lang.String phoneNumber = "00000000";     com.onaio.steps.model.InterviewStatus interviewStatus = com.onaio.steps.model.InterviewStatus.NOT_DONE;     java.lang.String createdAt = new java.text.SimpleDateFormat(com.onaio.steps.helper.Constants.DATE_FORMAT, java.util.Locale.ENGLISH).format(new java.util.Date());     java.lang.String comment = "testComment";     java.lang.String deviceIMEI = "123456";     java.lang.String odkJrFormId = "Test_Form";     java.lang.String odkJrFormTitle = "Test Form";     com.onaio.steps.model.Household householdMock = org.mockito.Mockito.mock(com.onaio.steps.model.Household.class);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(interviewStatus);     org.mockito.Mockito.when(householdMock.getName()).thenReturn(hhName);     org.mockito.Mockito.when(householdMock.getPhoneNumber()).thenReturn(phoneNumber);     org.mockito.Mockito.when(householdMock.getCreatedAt()).thenReturn(createdAt);     org.mockito.Mockito.when(householdMock.getComments()).thenReturn(comment);     org.mockito.Mockito.when(householdMock.getOdkJrFormId()).thenReturn(odkJrFormId);     org.mockito.Mockito.when(householdMock.getOdkJrFormTitle()).thenReturn(odkJrFormTitle);     int id = 2;     java.lang.String surname = "testSurname";     java.lang.String firstName = "testFirstName";     com.onaio.steps.model.Gender gender = com.onaio.steps.model.Gender.Female;     int age = 30;     java.lang.String memberId = "testMemberId";     com.onaio.steps.model.Member selectedMember = new com.onaio.steps.model.Member(id, surname, firstName, gender, age, householdMock, memberId, false);     org.mockito.Mockito.when(householdMock.getSelectedMember(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(selectedMember);     android.content.Intent intent = new android.content.Intent();     intent.putExtra(com.onaio.steps.helper.Constants.HH_HOUSEHOLD, householdMock);     android.telephony.TelephonyManager telephonyManager = org.mockito.Mockito.mock(android.telephony.TelephonyManager.class);     org.mockito.Mockito.when(telephonyManager.getDeviceId()).thenReturn(deviceIMEI);     org.mockito.Mockito.when(householdActivityMock.getSystemService(android.content.Context.TELEPHONY_SERVICE)).thenReturn(telephonyManager);     org.mockito.Mockito.when(householdActivityMock.getApplicationContext()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext());     org.mockito.Mockito.when(householdActivityMock.getFilesDir()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext().getFilesDir());     householdMock.save(db);     selectedMember.save(db);     com.onaio.steps.handler.actions.ExportHandler exportHandler = org.mockito.Mockito.spy(new com.onaio.steps.handler.actions.ExportHandler(householdActivityMock));     org.mockito.Mockito.when(exportHandler.getReElectReasons(org.mockito.Mockito.any(com.onaio.steps.model.Household.class))).thenReturn(new java.util.ArrayList<>());     org.mockito.Mockito.when(exportHandler.getDatabaseHelper()).thenReturn(db);     org.mockito.Mockito.when(exportHandler.getDeviceId()).thenReturn("testdevice");     java.util.List<com.onaio.steps.model.Household> householdList = new java.util.ArrayList<>();     householdList.add(householdMock);     java.util.Queue<com.onaio.steps.decorators.FileDecorator> exportedFiles = exportHandler.with(householdList).saveFiles();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(exportedFiles.remove().getFile().getAbsolutePath());     java.lang.String[] expectedValues = new java.lang.String[]{ phoneNumber, hhName, comment, hhName + "-0", null, null, null, null, null, null, "0", null, null, null, "0", deviceIMEI, createdAt, "0" };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < expectedValues.length; i++) {             if (expectedValues[i] != null) {                 org.junit.Assert.assertEquals(expectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDatabaseHelperShouldReturnNonNull,{     org.junit.Assert.assertNotNull(exportHandler.getDatabaseHelper()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testReplaceCommasShouldReturnFilterString,{     java.lang.String result = org.robolectric.util.ReflectionHelpers.callInstanceMethod(exportHandler, "replaceCommas", org.robolectric.util.ReflectionHelpers.ClassParameter.from(java.lang.String.class, "\"john,123\""));     org.junit.Assert.assertEquals("john;123", result); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDeviceIdShouldReturnNonNullDeviceId,{     com.onaio.steps.helper.KeyValueStore keyValueStore = org.mockito.Mockito.mock(com.onaio.steps.helper.KeyValueStore.class);     org.mockito.MockedStatic<com.onaio.steps.helper.KeyValueStoreFactory> keyValueStoreFactoryMockedStatic = org.mockito.Mockito.mockStatic(com.onaio.steps.helper.KeyValueStoreFactory.class);     keyValueStoreFactoryMockedStatic.when(() -> com.onaio.steps.helper.KeyValueStoreFactory.instance(org.mockito.Mockito.any())).thenReturn(keyValueStore);     org.mockito.Mockito.when(keyValueStore.getString(org.mockito.Mockito.eq(com.onaio.steps.helper.Constants.HH_PHONE_ID))).thenReturn("123");     org.junit.Assert.assertEquals("123", exportHandler.getDeviceId());     keyValueStoreFactoryMockedStatic.close(); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(finalisedFormHandler.shouldOpen(R.id.action_saved_form)); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(finalisedFormHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldBeOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(importHandler.shouldOpen(R.id.action_import)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldNotBeOpenWhenMenuIdDiffers,{     org.junit.Assert.assertFalse(importHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(notReachableHandler.shouldOpen(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(notReachableHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyNotReachable,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_REACHABLE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,NotReachableOnEmptyHouseholdHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(pickImageHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldNotOpenWhenExportActionIsChosen,{     org.junit.Assert.assertFalse(pickImageHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.QR_CODE_SCAN.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,cannotHandleResultForPickImageRequestCode,{     org.junit.Assert.assertFalse(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldNotOpenWhenPickImageActionIsChosen,{     org.junit.Assert.assertFalse(qrCodeScanHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(refusedHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(refusedHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     int MENU_ID = R.id.action_select_participant;     org.junit.Assert.assertTrue(selectParticipantHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectParticipantHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenThereAreNoMembers,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDeferred,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsRefused,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsNotDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldActivateWhenHouseholdStatusIsNotSelected,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldActivateWhenSurveyIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(shareHandler.shouldOpen(R.id.menu_item_settings_share)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldNotOpen,{     org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldDeactivate,{     org.junit.Assert.assertTrue(shareHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(takeSurveyHandler.shouldOpen(R.id.action_take_survey)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(takeSurveyHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyRefused,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.SURVEY.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,testGetSavedFormsShouldReturnNullWhenExceptionOccur,{     com.onaio.steps.utils.Faker.mockQueryInActivityToFindOdkSavedForm(householdActivitySpy);     android.content.Intent intent = Mockito.mock(android.content.Intent.class);     android.net.Uri uri = Mockito.mock(android.net.Uri.class);     Mockito.when(intent.getData()).thenReturn(uri);     Mockito.when(uri.getLastPathSegment()).thenReturn("");     android.content.ContentResolver contentResolver = householdActivitySpy.getContentResolver();     Mockito.when(contentResolver.acquireContentProviderClient(ArgumentMatchers.any(android.net.Uri.class))).thenReturn(null);     org.junit.Assert.assertNull(takeSurveyHandler.getSavedForms(intent)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForEditHouseholdIdentifier,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherIdentifier,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldBeAbleToOpenEditParticipantActivityWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.shouldOpen(R.id.action_edit)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotBeAbleToOpenEditParticipantActivityForOtherMenuId,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForProperRequestCodeCanBeHandled,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsDone,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsIncomplete,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotInactivateWhenParticipantIsSelected,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(importExportActivityHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,handleResultShouldNotShowToastWhenResultCancelled,{     importExportActivityHandler.handleResult(null, android.app.Activity.RESULT_CANCELED);     android.widget.Toast latestToast = org.robolectric.shadows.ShadowToast.getLatestToast();     org.junit.Assert.assertNull(latestToast); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,canHandleResultForExportImportSettingsPageRequestCode,{     org.junit.Assert.assertTrue(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.IMPORT_EXPORT_SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,cannotHandleResultForOtherRequestCodes,{     org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldOpenWhenProperMenuItemIsClicked,{     org.junit.Assert.assertTrue(handler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotOpenWhenOtherMenuItemIsClicked,{     org.junit.Assert.assertFalse(handler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForNewHouseholdRequestCode,{     org.junit.Assert.assertTrue(handler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(handler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassedAndWhenSurveyIsNotRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotOpenForOtherMenuIdAndForRefusedState,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdSurveyIsIncomplete,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassed,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldBeAbleToHandleRequestForProperRequestCode,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotHandleRequestForImproperRequestCode,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldStartNewParticipantActivity,{     newParticipantActivityHandler.open();     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(participantListActivity);     android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();     org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldCheckSettingsActivityShouldNotStartedForOtherId,{     org.junit.Assert.assertFalse(settingActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldNotHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,HouseholdActivityFactoryTest,ShouldHaveMemberActivityHandlerAsMemberItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler itemHandler = com.onaio.steps.handler.factories.HouseholdActivityFactory.getMemberItemHandler(activity, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.MemberActivityHandler.class, itemHandler.getClass()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.HouseholdListActivityFactory.getHouseholdItemHandler(householdListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.HouseholdActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,MemberActivityFactoryTest,ShouldGetProperMenuResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> menuHandlers = com.onaio.steps.handler.factories.MemberActivityFactory.getMenuResultHandlers(memberActivity, member);     java.util.ArrayList<java.lang.Class> handlerTypes = getTypes(menuHandlers);     junit.framework.TestCase.assertEquals(1, menuHandlers.size());     org.junit.Assert.assertTrue(handlerTypes.contains(com.onaio.steps.handler.activities.EditMemberActivityHandler.class)); }
https://github.com/onaio/steps-app.git,ParticipantListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.ParticipantListActivityFactory.getParticipantItemHandler(participantListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.ParticipantActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForEmptyHouseholdStrategyTest,ShouldInactivateWhenHouseholdIsNotEmpty,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.EMPTY_HOUSEHOLD);     org.junit.Assert.assertFalse(notReachableSurveyForEmptyHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(household.getName()).thenReturn("123-100");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100", takeSurveyForHouseholdStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(participant.getParticipantID()).thenReturn("123-100-3");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100-3", takeSurveyForParticipantStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVisiblePasswordByDefault,{     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     android.widget.EditText passwordEditText = authDialog.findViewById(R.id.passwordEditText);     org.junit.Assert.assertEquals(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, passwordEditText.getInputType()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfStoredMD5HashMatched,{     java.lang.String text = "test";     java.lang.String storedMd5Hash = "098f6bcd4621d373cade4e832627b4f6";     java.lang.String enteredSha256Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredSha256Hash, storedMd5Hash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfHashMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnFalseIfHashNotMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822c";// invalid hash      com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertFalse(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldFailValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "20");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "65");     dataValidator.validateAgeRange("17", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("70", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("3", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(3, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldPassValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "18");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "70");     dataValidator.validateAgeRange("18", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("69", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("50", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldFail,{     dataValidator.validate(com.onaio.steps.model.Gender.NotDefined, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(1, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldPass,{     dataValidator.validate(com.onaio.steps.model.Gender.Male, activity.getString(R.string.member_gender_hint));     dataValidator.validate(com.onaio.steps.model.Gender.Female, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldFail,{     java.lang.String nullString = null;     dataValidator.validate("", "String error");     dataValidator.validate(nullString, "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(2, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldPass,{     dataValidator.validate("Precious", "String error");     dataValidator.validate("Property", "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DeviceTest,testGenerateUniqueDeviceIdShouldReturnNull,{     android.content.Context context = androidx.test.core.app.ApplicationProvider.getApplicationContext();     java.lang.String uniqueDeviceId = com.onaio.steps.helper.Device.generateUniqueDeviceId(context);     org.junit.Assert.assertNull(uniqueDeviceId); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnMD5Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "098f6bcd4621d373cade4e832627b4f6";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.MD5)); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnSHA256Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.SHA_256)); }
https://github.com/onaio/steps-app.git,KeyValueStoreTest,testGetPreferenceFileNameShouldReturnMainActivityOrchestratorFileName,{     org.junit.Assert.assertEquals("activities." + com.onaio.steps.activities.MainActivityOrchestrator.class.getSimpleName(), keyValueStore.getPreferenceFileName()); }
https://github.com/onaio/steps-app.git,NetworkConnectivityTest,testIsNetworkAvailableShouldReturnTrue,{     android.content.Context context = org.mockito.Mockito.mock(android.content.Context.class);     android.net.ConnectivityManager connectivityManager = org.mockito.Mockito.mock(android.net.ConnectivityManager.class);     android.net.NetworkInfo networkInfo = org.mockito.Mockito.mock(android.net.NetworkInfo.class);     org.mockito.Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     org.mockito.Mockito.when(connectivityManager.getActiveNetworkInfo()).thenReturn(networkInfo);     org.mockito.Mockito.when(networkInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(com.onaio.steps.helper.NetworkConnectivity.isNetworkAvailable(context)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullOnWhenErrorBodyIsNull,{     org.junit.Assert.assertNull(uploadFileTask.findError(null)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullWhenExceptionOccur,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("");     org.junit.Assert.assertNull(uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnValidError,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");     org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,HouseholdMemberFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the household member     java.lang.String blankFormMediaPath = householdActivity.getFilesDir().getPath();     java.lang.String householdName = "household name";     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(householdMock.getName()).thenReturn(householdName);     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.HouseholdMemberFormStrategy(householdMock, DEVICE_ID), householdActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(householdActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ MEMBER_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ParticipantFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the participant     java.lang.String blankFormMediaPath = participantActivity.getFilesDir().getPath();     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.ParticipantFormStrategy(participant, DEVICE_ID), participantActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(participantActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ PARTICIPANT_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ODKBlankFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.forms/forms/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ODKSavedFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.instances/instances/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ReElectReasonTest,ShouldSaveReasonsToDatabase,{     org.junit.Assert.assertEquals(0, reElectReason.save(db)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldBeAbleHandleHouseholdFlowType,{     org.junit.Assert.assertTrue(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldNotBeAbleToHandleParticipantFlowType,{     org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,validateHouseHoldSettingsShouldPass,{     org.junit.Assert.assertEquals(0, householdFlow.validateHouseHoldSettings("uid", "pwd", "deid", "fid", "56", "89", true).size()); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.HouseholdListActivity.class.getName(), householdFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldBeAbleHandleParticipantFlowType,{     org.junit.Assert.assertTrue(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldNotBeAbleToHandleHouseholdFlowType,{     org.junit.Assert.assertFalse(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.ParticipantListActivity.class.getName(), participantFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,compress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.compress(loremIpsumText);     org.junit.Assert.assertEquals(compressedText, resultText); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,decompress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.decompress(compressedText);     org.junit.Assert.assertEquals(loremIpsumText, resultText); }
https://github.com/onaio/steps-app.git,QRCodeUtilsTest,exportSettingsToJSON,{     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MAX_AGE, "78");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MIN_AGE, "17");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_USER_ID, "some user id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_PHONE_ID, "some device id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_HOUSEHOLD_SEED, "1");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.IMPORT_URL, "some import url");     keyValueStore.putString(com.onaio.steps.helper.Constants.ENDPOINT_URL, "some export url");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_PHONE_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MIN_AGE, "12");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MAX_AGE, "98");     java.lang.String exportSettingsJSON = com.onaio.steps.utils.QRCodeUtils.exportSettingsToJSON(activity);     org.json.JSONObject resultJSON = new org.json.JSONObject(exportSettingsJSON);     org.json.JSONObject expectedJSON = new org.json.JSONObject(settingsJSONString);     org.junit.Assert.assertEquals(expectedJSON.toString(), resultJSON.toString());     clearSettings(); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetCountShouldReturnOne,{     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetItemIdShouldReturnOneAsLong,{     org.junit.Assert.assertEquals(1, adapter.getItemId(0)); }
https://github.com/onaio/steps-app.git,RootDetectionTaskTest,testDoInBackgroundShouldReturnTrue,{     org.junit.Assert.assertTrue(rootDetectionTask.doInBackground(androidx.test.core.app.ApplicationProvider.getApplicationContext())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityTest,ShouldFinishTheActivityOnCancel,{     editHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(editHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditMemberActivityTest,ShouldFinishTheActivityOnCancel,{     editMemberActivity.cancel(null);     org.junit.Assert.assertTrue(editMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityTest,ShouldFinishTheActivityOnCancel,{     editParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(editParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.main_activity_actions, householdListActivityMock.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getMenuHandlers();     org.junit.Assert.assertEquals(6, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();     org.junit.Assert.assertEquals(2, resultHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuPreparer,{     android.view.Menu mock = org.mockito.Mockito.mock(android.view.Menu.class);     java.util.List<com.onaio.steps.handler.interfaces.IMenuPreparer> menuHandlers = householdListActivityMock.getMenuPreparer(mock);     org.junit.Assert.assertEquals(1, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperCustomMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getCustomMenuHandler();     org.junit.Assert.assertEquals(2, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityTest,ShouldFinishActivityOnCancel,{     newHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(newHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewMemberActivityTest,ShouldFinishActivityWhenCanceled,{     newMemberActivity.cancel(null);     org.junit.Assert.assertTrue(newMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityTest,ShouldFinishActivityWhenCanceled,{     newParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(newParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,ParticipantListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.participant_list_actions, participantListActivity.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,SettingsActivityTest,ShouldFinishActivityOnCancel,{     settingsActivity.cancel(null);     org.junit.Assert.assertTrue(settingsActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,WelcomeActivityTest,ShouldBeAbleToLoadWelcomeLayout,{     org.junit.Assert.assertEquals(R.id.welcome_layout, Shadows.shadowOf(welcomeActivity).getContentView().getId()); }
https://github.com/onaio/steps-app.git,StepsFileDecoratorTest,testGetFormTitleShouldReturnValidFormTitle,{     org.junit.Assert.assertEquals("A", stepsFileDecorator.getFormTitle()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testDialogShouldNotNull,{     org.junit.Assert.assertNotNull(org.robolectric.shadows.ShadowDialog.getLatestDialog()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testVerifyUploadResultSequence,{     android.app.Dialog dialog = org.robolectric.shadows.ShadowDialog.getLatestDialog();     androidx.recyclerview.widget.RecyclerView recyclerView = dialog.findViewById(R.id.rv_upload_results);     com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter adapter = ((com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter) (recyclerView.getAdapter()));     java.util.List<com.onaio.steps.model.UploadResult> uploadResults = adapter.getUploadResults();     org.junit.Assert.assertEquals(6, uploadResults.size());     verifySortedList(uploadResults.get(0), true);     verifySortedList(uploadResults.get(1), true);     verifySortedList(uploadResults.get(2), true);     verifySortedList(uploadResults.get(3), false);     verifySortedList(uploadResults.get(4), false);     verifySortedList(uploadResults.get(5), false); }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testExtractDataPutAllDataInIntent,{     java.lang.String[] row = new java.lang.String[]{ "1-2-1", "Rav", "Ron", "1", "32", "1", "50" };     android.content.Intent resultIntent = new android.content.Intent();     java.util.List<java.lang.String[]> data = new java.util.ArrayList<>();     data.add(row);     dataProviderActivity.extractData(data, resultIntent);     for (com.onaio.steps.external.DataKeys dataKey : com.onaio.steps.external.DataKeys.values()) {         org.junit.Assert.assertEquals(row[dataKey.getIndex()], resultIntent.getStringExtra(dataKey.getKey()));     } }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testReturnedIntentShouldReturnNonNullIntent,{     org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent()); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches,{     org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home)); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanNotBeStartedForOtherId,{     org.junit.Assert.assertFalse(backHomeHandler.shouldOpen(android.R.id.background)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(selectionHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deferredHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deferredHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deleteMemberHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deleteMemberHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenMemberIsSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotInactivateWhenMemberIsNotSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(2);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityOpensWhenProperIdMatches,{     org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityShouldNotOpenForOtherId,{     org.junit.Assert.assertFalse(exportHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testSavedFileValues,{     java.lang.String hhName = "testHhName";     java.lang.String phoneNumber = "00000000";     com.onaio.steps.model.InterviewStatus interviewStatus = com.onaio.steps.model.InterviewStatus.NOT_DONE;     java.lang.String createdAt = new java.text.SimpleDateFormat(com.onaio.steps.helper.Constants.DATE_FORMAT, java.util.Locale.ENGLISH).format(new java.util.Date());     java.lang.String comment = "testComment";     java.lang.String deviceIMEI = "123456";     java.lang.String odkJrFormId = "Test_Form";     java.lang.String odkJrFormTitle = "Test Form";     com.onaio.steps.model.Household householdMock = org.mockito.Mockito.mock(com.onaio.steps.model.Household.class);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(interviewStatus);     org.mockito.Mockito.when(householdMock.getName()).thenReturn(hhName);     org.mockito.Mockito.when(householdMock.getPhoneNumber()).thenReturn(phoneNumber);     org.mockito.Mockito.when(householdMock.getCreatedAt()).thenReturn(createdAt);     org.mockito.Mockito.when(householdMock.getComments()).thenReturn(comment);     org.mockito.Mockito.when(householdMock.getOdkJrFormId()).thenReturn(odkJrFormId);     org.mockito.Mockito.when(householdMock.getOdkJrFormTitle()).thenReturn(odkJrFormTitle);     int id = 2;     java.lang.String surname = "testSurname";     java.lang.String firstName = "testFirstName";     com.onaio.steps.model.Gender gender = com.onaio.steps.model.Gender.Female;     int age = 30;     java.lang.String memberId = "testMemberId";     com.onaio.steps.model.Member selectedMember = new com.onaio.steps.model.Member(id, surname, firstName, gender, age, householdMock, memberId, false);     org.mockito.Mockito.when(householdMock.getSelectedMember(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(selectedMember);     android.content.Intent intent = new android.content.Intent();     intent.putExtra(com.onaio.steps.helper.Constants.HH_HOUSEHOLD, householdMock);     android.telephony.TelephonyManager telephonyManager = org.mockito.Mockito.mock(android.telephony.TelephonyManager.class);     org.mockito.Mockito.when(telephonyManager.getDeviceId()).thenReturn(deviceIMEI);     org.mockito.Mockito.when(householdActivityMock.getSystemService(android.content.Context.TELEPHONY_SERVICE)).thenReturn(telephonyManager);     org.mockito.Mockito.when(householdActivityMock.getApplicationContext()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext());     org.mockito.Mockito.when(householdActivityMock.getFilesDir()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext().getFilesDir());     householdMock.save(db);     selectedMember.save(db);     com.onaio.steps.handler.actions.ExportHandler exportHandler = org.mockito.Mockito.spy(new com.onaio.steps.handler.actions.ExportHandler(householdActivityMock));     org.mockito.Mockito.when(exportHandler.getReElectReasons(org.mockito.Mockito.any(com.onaio.steps.model.Household.class))).thenReturn(new java.util.ArrayList<>());     org.mockito.Mockito.when(exportHandler.getDatabaseHelper()).thenReturn(db);     org.mockito.Mockito.when(exportHandler.getDeviceId()).thenReturn("testdevice");     java.util.List<com.onaio.steps.model.Household> householdList = new java.util.ArrayList<>();     householdList.add(householdMock);     java.util.Queue<com.onaio.steps.decorators.FileDecorator> exportedFiles = exportHandler.with(householdList).saveFiles();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(exportedFiles.remove().getFile().getAbsolutePath());     java.lang.String[] expectedValues = new java.lang.String[]{ phoneNumber, hhName, comment, hhName + "-0", null, null, null, null, null, null, "0", null, null, null, "0", deviceIMEI, createdAt, "0" };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < expectedValues.length; i++) {             if (expectedValues[i] != null) {                 org.junit.Assert.assertEquals(expectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDatabaseHelperShouldReturnNonNull,{     org.junit.Assert.assertNotNull(exportHandler.getDatabaseHelper()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testReplaceCommasShouldReturnFilterString,{     java.lang.String result = org.robolectric.util.ReflectionHelpers.callInstanceMethod(exportHandler, "replaceCommas", org.robolectric.util.ReflectionHelpers.ClassParameter.from(java.lang.String.class, "\"john,123\""));     org.junit.Assert.assertEquals("john;123", result); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDeviceIdShouldReturnNonNullDeviceId,{     com.onaio.steps.helper.KeyValueStore keyValueStore = org.mockito.Mockito.mock(com.onaio.steps.helper.KeyValueStore.class);     org.mockito.MockedStatic<com.onaio.steps.helper.KeyValueStoreFactory> keyValueStoreFactoryMockedStatic = org.mockito.Mockito.mockStatic(com.onaio.steps.helper.KeyValueStoreFactory.class);     keyValueStoreFactoryMockedStatic.when(() -> com.onaio.steps.helper.KeyValueStoreFactory.instance(org.mockito.Mockito.any())).thenReturn(keyValueStore);     org.mockito.Mockito.when(keyValueStore.getString(org.mockito.Mockito.eq(com.onaio.steps.helper.Constants.HH_PHONE_ID))).thenReturn("123");     org.junit.Assert.assertEquals("123", exportHandler.getDeviceId());     keyValueStoreFactoryMockedStatic.close(); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(finalisedFormHandler.shouldOpen(R.id.action_saved_form)); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(finalisedFormHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldBeOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(importHandler.shouldOpen(R.id.action_import)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldNotBeOpenWhenMenuIdDiffers,{     org.junit.Assert.assertFalse(importHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(notReachableHandler.shouldOpen(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(notReachableHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyNotReachable,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_REACHABLE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,NotReachableOnEmptyHouseholdHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(pickImageHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldNotOpenWhenExportActionIsChosen,{     org.junit.Assert.assertFalse(pickImageHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.QR_CODE_SCAN.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,cannotHandleResultForPickImageRequestCode,{     org.junit.Assert.assertFalse(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldNotOpenWhenPickImageActionIsChosen,{     org.junit.Assert.assertFalse(qrCodeScanHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(refusedHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(refusedHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     int MENU_ID = R.id.action_select_participant;     org.junit.Assert.assertTrue(selectParticipantHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectParticipantHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenThereAreNoMembers,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDeferred,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsRefused,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsNotDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldActivateWhenHouseholdStatusIsNotSelected,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldActivateWhenSurveyIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(shareHandler.shouldOpen(R.id.menu_item_settings_share)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldNotOpen,{     org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldDeactivate,{     org.junit.Assert.assertTrue(shareHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(takeSurveyHandler.shouldOpen(R.id.action_take_survey)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(takeSurveyHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyRefused,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.SURVEY.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,testGetSavedFormsShouldReturnNullWhenExceptionOccur,{     com.onaio.steps.utils.Faker.mockQueryInActivityToFindOdkSavedForm(householdActivitySpy);     android.content.Intent intent = Mockito.mock(android.content.Intent.class);     android.net.Uri uri = Mockito.mock(android.net.Uri.class);     Mockito.when(intent.getData()).thenReturn(uri);     Mockito.when(uri.getLastPathSegment()).thenReturn("");     android.content.ContentResolver contentResolver = householdActivitySpy.getContentResolver();     Mockito.when(contentResolver.acquireContentProviderClient(ArgumentMatchers.any(android.net.Uri.class))).thenReturn(null);     org.junit.Assert.assertNull(takeSurveyHandler.getSavedForms(intent)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForEditHouseholdIdentifier,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherIdentifier,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldBeAbleToOpenEditParticipantActivityWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.shouldOpen(R.id.action_edit)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotBeAbleToOpenEditParticipantActivityForOtherMenuId,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForProperRequestCodeCanBeHandled,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsDone,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsIncomplete,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotInactivateWhenParticipantIsSelected,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(importExportActivityHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,handleResultShouldNotShowToastWhenResultCancelled,{     importExportActivityHandler.handleResult(null, android.app.Activity.RESULT_CANCELED);     android.widget.Toast latestToast = org.robolectric.shadows.ShadowToast.getLatestToast();     org.junit.Assert.assertNull(latestToast); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,canHandleResultForExportImportSettingsPageRequestCode,{     org.junit.Assert.assertTrue(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.IMPORT_EXPORT_SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,cannotHandleResultForOtherRequestCodes,{     org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldOpenWhenProperMenuItemIsClicked,{     org.junit.Assert.assertTrue(handler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotOpenWhenOtherMenuItemIsClicked,{     org.junit.Assert.assertFalse(handler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForNewHouseholdRequestCode,{     org.junit.Assert.assertTrue(handler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(handler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassedAndWhenSurveyIsNotRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotOpenForOtherMenuIdAndForRefusedState,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdSurveyIsIncomplete,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassed,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldBeAbleToHandleRequestForProperRequestCode,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotHandleRequestForImproperRequestCode,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldStartNewParticipantActivity,{     newParticipantActivityHandler.open();     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(participantListActivity);     android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();     org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldCheckSettingsActivityShouldNotStartedForOtherId,{     org.junit.Assert.assertFalse(settingActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldNotHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,HouseholdActivityFactoryTest,ShouldHaveMemberActivityHandlerAsMemberItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler itemHandler = com.onaio.steps.handler.factories.HouseholdActivityFactory.getMemberItemHandler(activity, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.MemberActivityHandler.class, itemHandler.getClass()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.HouseholdListActivityFactory.getHouseholdItemHandler(householdListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.HouseholdActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,MemberActivityFactoryTest,ShouldGetProperMenuResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> menuHandlers = com.onaio.steps.handler.factories.MemberActivityFactory.getMenuResultHandlers(memberActivity, member);     java.util.ArrayList<java.lang.Class> handlerTypes = getTypes(menuHandlers);     junit.framework.TestCase.assertEquals(1, menuHandlers.size());     org.junit.Assert.assertTrue(handlerTypes.contains(com.onaio.steps.handler.activities.EditMemberActivityHandler.class)); }
https://github.com/onaio/steps-app.git,ParticipantListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.ParticipantListActivityFactory.getParticipantItemHandler(participantListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.ParticipantActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForEmptyHouseholdStrategyTest,ShouldInactivateWhenHouseholdIsNotEmpty,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.EMPTY_HOUSEHOLD);     org.junit.Assert.assertFalse(notReachableSurveyForEmptyHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(household.getName()).thenReturn("123-100");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100", takeSurveyForHouseholdStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(participant.getParticipantID()).thenReturn("123-100-3");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100-3", takeSurveyForParticipantStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVisiblePasswordByDefault,{     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     android.widget.EditText passwordEditText = authDialog.findViewById(R.id.passwordEditText);     org.junit.Assert.assertEquals(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, passwordEditText.getInputType()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfStoredMD5HashMatched,{     java.lang.String text = "test";     java.lang.String storedMd5Hash = "098f6bcd4621d373cade4e832627b4f6";     java.lang.String enteredSha256Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredSha256Hash, storedMd5Hash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfHashMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnFalseIfHashNotMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822c";// invalid hash      com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertFalse(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldFailValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "20");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "65");     dataValidator.validateAgeRange("17", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("70", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("3", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(3, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldPassValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "18");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "70");     dataValidator.validateAgeRange("18", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("69", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("50", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldFail,{     dataValidator.validate(com.onaio.steps.model.Gender.NotDefined, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(1, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldPass,{     dataValidator.validate(com.onaio.steps.model.Gender.Male, activity.getString(R.string.member_gender_hint));     dataValidator.validate(com.onaio.steps.model.Gender.Female, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldFail,{     java.lang.String nullString = null;     dataValidator.validate("", "String error");     dataValidator.validate(nullString, "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(2, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldPass,{     dataValidator.validate("Precious", "String error");     dataValidator.validate("Property", "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DeviceTest,testGenerateUniqueDeviceIdShouldReturnNull,{     android.content.Context context = androidx.test.core.app.ApplicationProvider.getApplicationContext();     java.lang.String uniqueDeviceId = com.onaio.steps.helper.Device.generateUniqueDeviceId(context);     org.junit.Assert.assertNull(uniqueDeviceId); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnMD5Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "098f6bcd4621d373cade4e832627b4f6";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.MD5)); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnSHA256Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.SHA_256)); }
https://github.com/onaio/steps-app.git,KeyValueStoreTest,testGetPreferenceFileNameShouldReturnMainActivityOrchestratorFileName,{     org.junit.Assert.assertEquals("activities." + com.onaio.steps.activities.MainActivityOrchestrator.class.getSimpleName(), keyValueStore.getPreferenceFileName()); }
https://github.com/onaio/steps-app.git,NetworkConnectivityTest,testIsNetworkAvailableShouldReturnTrue,{     android.content.Context context = org.mockito.Mockito.mock(android.content.Context.class);     android.net.ConnectivityManager connectivityManager = org.mockito.Mockito.mock(android.net.ConnectivityManager.class);     android.net.NetworkInfo networkInfo = org.mockito.Mockito.mock(android.net.NetworkInfo.class);     org.mockito.Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     org.mockito.Mockito.when(connectivityManager.getActiveNetworkInfo()).thenReturn(networkInfo);     org.mockito.Mockito.when(networkInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(com.onaio.steps.helper.NetworkConnectivity.isNetworkAvailable(context)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullOnWhenErrorBodyIsNull,{     org.junit.Assert.assertNull(uploadFileTask.findError(null)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullWhenExceptionOccur,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("");     org.junit.Assert.assertNull(uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnValidError,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");     org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,HouseholdMemberFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the household member     java.lang.String blankFormMediaPath = householdActivity.getFilesDir().getPath();     java.lang.String householdName = "household name";     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(householdMock.getName()).thenReturn(householdName);     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.HouseholdMemberFormStrategy(householdMock, DEVICE_ID), householdActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(householdActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ MEMBER_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ParticipantFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the participant     java.lang.String blankFormMediaPath = participantActivity.getFilesDir().getPath();     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.ParticipantFormStrategy(participant, DEVICE_ID), participantActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(participantActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ PARTICIPANT_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ODKBlankFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.forms/forms/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ODKSavedFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.instances/instances/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ReElectReasonTest,ShouldSaveReasonsToDatabase,{     org.junit.Assert.assertEquals(0, reElectReason.save(db)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldBeAbleHandleHouseholdFlowType,{     org.junit.Assert.assertTrue(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldNotBeAbleToHandleParticipantFlowType,{     org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,validateHouseHoldSettingsShouldPass,{     org.junit.Assert.assertEquals(0, householdFlow.validateHouseHoldSettings("uid", "pwd", "deid", "fid", "56", "89", true).size()); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.HouseholdListActivity.class.getName(), householdFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldBeAbleHandleParticipantFlowType,{     org.junit.Assert.assertTrue(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldNotBeAbleToHandleHouseholdFlowType,{     org.junit.Assert.assertFalse(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.ParticipantListActivity.class.getName(), participantFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,compress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.compress(loremIpsumText);     org.junit.Assert.assertEquals(compressedText, resultText); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,decompress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.decompress(compressedText);     org.junit.Assert.assertEquals(loremIpsumText, resultText); }
https://github.com/onaio/steps-app.git,QRCodeUtilsTest,exportSettingsToJSON,{     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MAX_AGE, "78");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MIN_AGE, "17");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_USER_ID, "some user id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_PHONE_ID, "some device id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_HOUSEHOLD_SEED, "1");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.IMPORT_URL, "some import url");     keyValueStore.putString(com.onaio.steps.helper.Constants.ENDPOINT_URL, "some export url");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_PHONE_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MIN_AGE, "12");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MAX_AGE, "98");     java.lang.String exportSettingsJSON = com.onaio.steps.utils.QRCodeUtils.exportSettingsToJSON(activity);     org.json.JSONObject resultJSON = new org.json.JSONObject(exportSettingsJSON);     org.json.JSONObject expectedJSON = new org.json.JSONObject(settingsJSONString);     org.junit.Assert.assertEquals(expectedJSON.toString(), resultJSON.toString());     clearSettings(); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetCountShouldReturnOne,{     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetItemIdShouldReturnOneAsLong,{     org.junit.Assert.assertEquals(1, adapter.getItemId(0)); }
https://github.com/onaio/steps-app.git,RootDetectionTaskTest,testDoInBackgroundShouldReturnTrue,{     org.junit.Assert.assertTrue(rootDetectionTask.doInBackground(androidx.test.core.app.ApplicationProvider.getApplicationContext())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityTest,ShouldFinishTheActivityOnCancel,{     editHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(editHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditMemberActivityTest,ShouldFinishTheActivityOnCancel,{     editMemberActivity.cancel(null);     org.junit.Assert.assertTrue(editMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityTest,ShouldFinishTheActivityOnCancel,{     editParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(editParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.main_activity_actions, householdListActivityMock.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getMenuHandlers();     org.junit.Assert.assertEquals(6, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();     org.junit.Assert.assertEquals(2, resultHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuPreparer,{     android.view.Menu mock = org.mockito.Mockito.mock(android.view.Menu.class);     java.util.List<com.onaio.steps.handler.interfaces.IMenuPreparer> menuHandlers = householdListActivityMock.getMenuPreparer(mock);     org.junit.Assert.assertEquals(1, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperCustomMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getCustomMenuHandler();     org.junit.Assert.assertEquals(2, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityTest,ShouldFinishActivityOnCancel,{     newHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(newHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewMemberActivityTest,ShouldFinishActivityWhenCanceled,{     newMemberActivity.cancel(null);     org.junit.Assert.assertTrue(newMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityTest,ShouldFinishActivityWhenCanceled,{     newParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(newParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,ParticipantListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.participant_list_actions, participantListActivity.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,SettingsActivityTest,ShouldFinishActivityOnCancel,{     settingsActivity.cancel(null);     org.junit.Assert.assertTrue(settingsActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,WelcomeActivityTest,ShouldBeAbleToLoadWelcomeLayout,{     org.junit.Assert.assertEquals(R.id.welcome_layout, Shadows.shadowOf(welcomeActivity).getContentView().getId()); }
https://github.com/onaio/steps-app.git,StepsFileDecoratorTest,testGetFormTitleShouldReturnValidFormTitle,{     org.junit.Assert.assertEquals("A", stepsFileDecorator.getFormTitle()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testDialogShouldNotNull,{     org.junit.Assert.assertNotNull(org.robolectric.shadows.ShadowDialog.getLatestDialog()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testVerifyUploadResultSequence,{     android.app.Dialog dialog = org.robolectric.shadows.ShadowDialog.getLatestDialog();     androidx.recyclerview.widget.RecyclerView recyclerView = dialog.findViewById(R.id.rv_upload_results);     com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter adapter = ((com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter) (recyclerView.getAdapter()));     java.util.List<com.onaio.steps.model.UploadResult> uploadResults = adapter.getUploadResults();     org.junit.Assert.assertEquals(6, uploadResults.size());     verifySortedList(uploadResults.get(0), true);     verifySortedList(uploadResults.get(1), true);     verifySortedList(uploadResults.get(2), true);     verifySortedList(uploadResults.get(3), false);     verifySortedList(uploadResults.get(4), false);     verifySortedList(uploadResults.get(5), false); }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testExtractDataPutAllDataInIntent,{     java.lang.String[] row = new java.lang.String[]{ "1-2-1", "Rav", "Ron", "1", "32", "1", "50" };     android.content.Intent resultIntent = new android.content.Intent();     java.util.List<java.lang.String[]> data = new java.util.ArrayList<>();     data.add(row);     dataProviderActivity.extractData(data, resultIntent);     for (com.onaio.steps.external.DataKeys dataKey : com.onaio.steps.external.DataKeys.values()) {         org.junit.Assert.assertEquals(row[dataKey.getIndex()], resultIntent.getStringExtra(dataKey.getKey()));     } }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testReturnedIntentShouldReturnNonNullIntent,{     org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent()); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches,{     org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home)); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanNotBeStartedForOtherId,{     org.junit.Assert.assertFalse(backHomeHandler.shouldOpen(android.R.id.background)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(selectionHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deferredHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deferredHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deleteMemberHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deleteMemberHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenMemberIsSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotInactivateWhenMemberIsNotSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(2);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityOpensWhenProperIdMatches,{     org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityShouldNotOpenForOtherId,{     org.junit.Assert.assertFalse(exportHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testSavedFileValues,{     java.lang.String hhName = "testHhName";     java.lang.String phoneNumber = "00000000";     com.onaio.steps.model.InterviewStatus interviewStatus = com.onaio.steps.model.InterviewStatus.NOT_DONE;     java.lang.String createdAt = new java.text.SimpleDateFormat(com.onaio.steps.helper.Constants.DATE_FORMAT, java.util.Locale.ENGLISH).format(new java.util.Date());     java.lang.String comment = "testComment";     java.lang.String deviceIMEI = "123456";     java.lang.String odkJrFormId = "Test_Form";     java.lang.String odkJrFormTitle = "Test Form";     com.onaio.steps.model.Household householdMock = org.mockito.Mockito.mock(com.onaio.steps.model.Household.class);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(interviewStatus);     org.mockito.Mockito.when(householdMock.getName()).thenReturn(hhName);     org.mockito.Mockito.when(householdMock.getPhoneNumber()).thenReturn(phoneNumber);     org.mockito.Mockito.when(householdMock.getCreatedAt()).thenReturn(createdAt);     org.mockito.Mockito.when(householdMock.getComments()).thenReturn(comment);     org.mockito.Mockito.when(householdMock.getOdkJrFormId()).thenReturn(odkJrFormId);     org.mockito.Mockito.when(householdMock.getOdkJrFormTitle()).thenReturn(odkJrFormTitle);     int id = 2;     java.lang.String surname = "testSurname";     java.lang.String firstName = "testFirstName";     com.onaio.steps.model.Gender gender = com.onaio.steps.model.Gender.Female;     int age = 30;     java.lang.String memberId = "testMemberId";     com.onaio.steps.model.Member selectedMember = new com.onaio.steps.model.Member(id, surname, firstName, gender, age, householdMock, memberId, false);     org.mockito.Mockito.when(householdMock.getSelectedMember(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(selectedMember);     android.content.Intent intent = new android.content.Intent();     intent.putExtra(com.onaio.steps.helper.Constants.HH_HOUSEHOLD, householdMock);     android.telephony.TelephonyManager telephonyManager = org.mockito.Mockito.mock(android.telephony.TelephonyManager.class);     org.mockito.Mockito.when(telephonyManager.getDeviceId()).thenReturn(deviceIMEI);     org.mockito.Mockito.when(householdActivityMock.getSystemService(android.content.Context.TELEPHONY_SERVICE)).thenReturn(telephonyManager);     org.mockito.Mockito.when(householdActivityMock.getApplicationContext()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext());     org.mockito.Mockito.when(householdActivityMock.getFilesDir()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext().getFilesDir());     householdMock.save(db);     selectedMember.save(db);     com.onaio.steps.handler.actions.ExportHandler exportHandler = org.mockito.Mockito.spy(new com.onaio.steps.handler.actions.ExportHandler(householdActivityMock));     org.mockito.Mockito.when(exportHandler.getReElectReasons(org.mockito.Mockito.any(com.onaio.steps.model.Household.class))).thenReturn(new java.util.ArrayList<>());     org.mockito.Mockito.when(exportHandler.getDatabaseHelper()).thenReturn(db);     org.mockito.Mockito.when(exportHandler.getDeviceId()).thenReturn("testdevice");     java.util.List<com.onaio.steps.model.Household> householdList = new java.util.ArrayList<>();     householdList.add(householdMock);     java.util.Queue<com.onaio.steps.decorators.FileDecorator> exportedFiles = exportHandler.with(householdList).saveFiles();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(exportedFiles.remove().getFile().getAbsolutePath());     java.lang.String[] expectedValues = new java.lang.String[]{ phoneNumber, hhName, comment, hhName + "-0", null, null, null, null, null, null, "0", null, null, null, "0", deviceIMEI, createdAt, "0" };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < expectedValues.length; i++) {             if (expectedValues[i] != null) {                 org.junit.Assert.assertEquals(expectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDatabaseHelperShouldReturnNonNull,{     org.junit.Assert.assertNotNull(exportHandler.getDatabaseHelper()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testReplaceCommasShouldReturnFilterString,{     java.lang.String result = org.robolectric.util.ReflectionHelpers.callInstanceMethod(exportHandler, "replaceCommas", org.robolectric.util.ReflectionHelpers.ClassParameter.from(java.lang.String.class, "\"john,123\""));     org.junit.Assert.assertEquals("john;123", result); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDeviceIdShouldReturnNonNullDeviceId,{     com.onaio.steps.helper.KeyValueStore keyValueStore = org.mockito.Mockito.mock(com.onaio.steps.helper.KeyValueStore.class);     org.mockito.MockedStatic<com.onaio.steps.helper.KeyValueStoreFactory> keyValueStoreFactoryMockedStatic = org.mockito.Mockito.mockStatic(com.onaio.steps.helper.KeyValueStoreFactory.class);     keyValueStoreFactoryMockedStatic.when(() -> com.onaio.steps.helper.KeyValueStoreFactory.instance(org.mockito.Mockito.any())).thenReturn(keyValueStore);     org.mockito.Mockito.when(keyValueStore.getString(org.mockito.Mockito.eq(com.onaio.steps.helper.Constants.HH_PHONE_ID))).thenReturn("123");     org.junit.Assert.assertEquals("123", exportHandler.getDeviceId());     keyValueStoreFactoryMockedStatic.close(); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(finalisedFormHandler.shouldOpen(R.id.action_saved_form)); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(finalisedFormHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldBeOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(importHandler.shouldOpen(R.id.action_import)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldNotBeOpenWhenMenuIdDiffers,{     org.junit.Assert.assertFalse(importHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(notReachableHandler.shouldOpen(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(notReachableHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyNotReachable,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_REACHABLE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,NotReachableOnEmptyHouseholdHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(pickImageHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldNotOpenWhenExportActionIsChosen,{     org.junit.Assert.assertFalse(pickImageHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.QR_CODE_SCAN.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,cannotHandleResultForPickImageRequestCode,{     org.junit.Assert.assertFalse(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldNotOpenWhenPickImageActionIsChosen,{     org.junit.Assert.assertFalse(qrCodeScanHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(refusedHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(refusedHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     int MENU_ID = R.id.action_select_participant;     org.junit.Assert.assertTrue(selectParticipantHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectParticipantHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenThereAreNoMembers,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDeferred,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsRefused,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsNotDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldActivateWhenHouseholdStatusIsNotSelected,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldActivateWhenSurveyIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(shareHandler.shouldOpen(R.id.menu_item_settings_share)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldNotOpen,{     org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldDeactivate,{     org.junit.Assert.assertTrue(shareHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(takeSurveyHandler.shouldOpen(R.id.action_take_survey)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(takeSurveyHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyRefused,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.SURVEY.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,testGetSavedFormsShouldReturnNullWhenExceptionOccur,{     com.onaio.steps.utils.Faker.mockQueryInActivityToFindOdkSavedForm(householdActivitySpy);     android.content.Intent intent = Mockito.mock(android.content.Intent.class);     android.net.Uri uri = Mockito.mock(android.net.Uri.class);     Mockito.when(intent.getData()).thenReturn(uri);     Mockito.when(uri.getLastPathSegment()).thenReturn("");     android.content.ContentResolver contentResolver = householdActivitySpy.getContentResolver();     Mockito.when(contentResolver.acquireContentProviderClient(ArgumentMatchers.any(android.net.Uri.class))).thenReturn(null);     org.junit.Assert.assertNull(takeSurveyHandler.getSavedForms(intent)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForEditHouseholdIdentifier,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherIdentifier,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldBeAbleToOpenEditParticipantActivityWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.shouldOpen(R.id.action_edit)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotBeAbleToOpenEditParticipantActivityForOtherMenuId,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForProperRequestCodeCanBeHandled,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsDone,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsIncomplete,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotInactivateWhenParticipantIsSelected,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(importExportActivityHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,handleResultShouldNotShowToastWhenResultCancelled,{     importExportActivityHandler.handleResult(null, android.app.Activity.RESULT_CANCELED);     android.widget.Toast latestToast = org.robolectric.shadows.ShadowToast.getLatestToast();     org.junit.Assert.assertNull(latestToast); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,canHandleResultForExportImportSettingsPageRequestCode,{     org.junit.Assert.assertTrue(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.IMPORT_EXPORT_SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,cannotHandleResultForOtherRequestCodes,{     org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldOpenWhenProperMenuItemIsClicked,{     org.junit.Assert.assertTrue(handler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotOpenWhenOtherMenuItemIsClicked,{     org.junit.Assert.assertFalse(handler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForNewHouseholdRequestCode,{     org.junit.Assert.assertTrue(handler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(handler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassedAndWhenSurveyIsNotRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotOpenForOtherMenuIdAndForRefusedState,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdSurveyIsIncomplete,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassed,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldBeAbleToHandleRequestForProperRequestCode,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotHandleRequestForImproperRequestCode,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldStartNewParticipantActivity,{     newParticipantActivityHandler.open();     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(participantListActivity);     android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();     org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldCheckSettingsActivityShouldNotStartedForOtherId,{     org.junit.Assert.assertFalse(settingActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldNotHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,HouseholdActivityFactoryTest,ShouldHaveMemberActivityHandlerAsMemberItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler itemHandler = com.onaio.steps.handler.factories.HouseholdActivityFactory.getMemberItemHandler(activity, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.MemberActivityHandler.class, itemHandler.getClass()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.HouseholdListActivityFactory.getHouseholdItemHandler(householdListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.HouseholdActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,MemberActivityFactoryTest,ShouldGetProperMenuResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> menuHandlers = com.onaio.steps.handler.factories.MemberActivityFactory.getMenuResultHandlers(memberActivity, member);     java.util.ArrayList<java.lang.Class> handlerTypes = getTypes(menuHandlers);     junit.framework.TestCase.assertEquals(1, menuHandlers.size());     org.junit.Assert.assertTrue(handlerTypes.contains(com.onaio.steps.handler.activities.EditMemberActivityHandler.class)); }
https://github.com/onaio/steps-app.git,ParticipantListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.ParticipantListActivityFactory.getParticipantItemHandler(participantListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.ParticipantActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForEmptyHouseholdStrategyTest,ShouldInactivateWhenHouseholdIsNotEmpty,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.EMPTY_HOUSEHOLD);     org.junit.Assert.assertFalse(notReachableSurveyForEmptyHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(household.getName()).thenReturn("123-100");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100", takeSurveyForHouseholdStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(participant.getParticipantID()).thenReturn("123-100-3");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100-3", takeSurveyForParticipantStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVisiblePasswordByDefault,{     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     android.widget.EditText passwordEditText = authDialog.findViewById(R.id.passwordEditText);     org.junit.Assert.assertEquals(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, passwordEditText.getInputType()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfStoredMD5HashMatched,{     java.lang.String text = "test";     java.lang.String storedMd5Hash = "098f6bcd4621d373cade4e832627b4f6";     java.lang.String enteredSha256Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredSha256Hash, storedMd5Hash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfHashMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnFalseIfHashNotMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822c";// invalid hash      com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertFalse(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldFailValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "20");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "65");     dataValidator.validateAgeRange("17", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("70", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("3", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(3, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldPassValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "18");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "70");     dataValidator.validateAgeRange("18", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("69", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("50", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldFail,{     dataValidator.validate(com.onaio.steps.model.Gender.NotDefined, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(1, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldPass,{     dataValidator.validate(com.onaio.steps.model.Gender.Male, activity.getString(R.string.member_gender_hint));     dataValidator.validate(com.onaio.steps.model.Gender.Female, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldFail,{     java.lang.String nullString = null;     dataValidator.validate("", "String error");     dataValidator.validate(nullString, "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(2, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldPass,{     dataValidator.validate("Precious", "String error");     dataValidator.validate("Property", "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DeviceTest,testGenerateUniqueDeviceIdShouldReturnNull,{     android.content.Context context = androidx.test.core.app.ApplicationProvider.getApplicationContext();     java.lang.String uniqueDeviceId = com.onaio.steps.helper.Device.generateUniqueDeviceId(context);     org.junit.Assert.assertNull(uniqueDeviceId); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnMD5Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "098f6bcd4621d373cade4e832627b4f6";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.MD5)); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnSHA256Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.SHA_256)); }
https://github.com/onaio/steps-app.git,KeyValueStoreTest,testGetPreferenceFileNameShouldReturnMainActivityOrchestratorFileName,{     org.junit.Assert.assertEquals("activities." + com.onaio.steps.activities.MainActivityOrchestrator.class.getSimpleName(), keyValueStore.getPreferenceFileName()); }
https://github.com/onaio/steps-app.git,NetworkConnectivityTest,testIsNetworkAvailableShouldReturnTrue,{     android.content.Context context = org.mockito.Mockito.mock(android.content.Context.class);     android.net.ConnectivityManager connectivityManager = org.mockito.Mockito.mock(android.net.ConnectivityManager.class);     android.net.NetworkInfo networkInfo = org.mockito.Mockito.mock(android.net.NetworkInfo.class);     org.mockito.Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     org.mockito.Mockito.when(connectivityManager.getActiveNetworkInfo()).thenReturn(networkInfo);     org.mockito.Mockito.when(networkInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(com.onaio.steps.helper.NetworkConnectivity.isNetworkAvailable(context)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullOnWhenErrorBodyIsNull,{     org.junit.Assert.assertNull(uploadFileTask.findError(null)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullWhenExceptionOccur,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("");     org.junit.Assert.assertNull(uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnValidError,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");     org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,HouseholdMemberFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the household member     java.lang.String blankFormMediaPath = householdActivity.getFilesDir().getPath();     java.lang.String householdName = "household name";     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(householdMock.getName()).thenReturn(householdName);     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.HouseholdMemberFormStrategy(householdMock, DEVICE_ID), householdActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(householdActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ MEMBER_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ParticipantFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the participant     java.lang.String blankFormMediaPath = participantActivity.getFilesDir().getPath();     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.ParticipantFormStrategy(participant, DEVICE_ID), participantActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(participantActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ PARTICIPANT_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ODKBlankFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.forms/forms/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ODKSavedFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.instances/instances/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ReElectReasonTest,ShouldSaveReasonsToDatabase,{     org.junit.Assert.assertEquals(0, reElectReason.save(db)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldBeAbleHandleHouseholdFlowType,{     org.junit.Assert.assertTrue(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldNotBeAbleToHandleParticipantFlowType,{     org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,validateHouseHoldSettingsShouldPass,{     org.junit.Assert.assertEquals(0, householdFlow.validateHouseHoldSettings("uid", "pwd", "deid", "fid", "56", "89", true).size()); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.HouseholdListActivity.class.getName(), householdFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldBeAbleHandleParticipantFlowType,{     org.junit.Assert.assertTrue(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldNotBeAbleToHandleHouseholdFlowType,{     org.junit.Assert.assertFalse(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.ParticipantListActivity.class.getName(), participantFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,compress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.compress(loremIpsumText);     org.junit.Assert.assertEquals(compressedText, resultText); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,decompress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.decompress(compressedText);     org.junit.Assert.assertEquals(loremIpsumText, resultText); }
https://github.com/onaio/steps-app.git,QRCodeUtilsTest,exportSettingsToJSON,{     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MAX_AGE, "78");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MIN_AGE, "17");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_USER_ID, "some user id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_PHONE_ID, "some device id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_HOUSEHOLD_SEED, "1");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.IMPORT_URL, "some import url");     keyValueStore.putString(com.onaio.steps.helper.Constants.ENDPOINT_URL, "some export url");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_PHONE_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MIN_AGE, "12");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MAX_AGE, "98");     java.lang.String exportSettingsJSON = com.onaio.steps.utils.QRCodeUtils.exportSettingsToJSON(activity);     org.json.JSONObject resultJSON = new org.json.JSONObject(exportSettingsJSON);     org.json.JSONObject expectedJSON = new org.json.JSONObject(settingsJSONString);     org.junit.Assert.assertEquals(expectedJSON.toString(), resultJSON.toString());     clearSettings(); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetCountShouldReturnOne,{     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetItemIdShouldReturnOneAsLong,{     org.junit.Assert.assertEquals(1, adapter.getItemId(0)); }
https://github.com/onaio/steps-app.git,RootDetectionTaskTest,testDoInBackgroundShouldReturnTrue,{     org.junit.Assert.assertTrue(rootDetectionTask.doInBackground(androidx.test.core.app.ApplicationProvider.getApplicationContext())); }
