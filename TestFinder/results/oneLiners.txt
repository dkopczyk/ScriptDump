https://github.com/onaio/steps-app.git,EditHouseholdActivityTest,ShouldFinishTheActivityOnCancel,{     editHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(editHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditMemberActivityTest,ShouldFinishTheActivityOnCancel,{     editMemberActivity.cancel(null);     org.junit.Assert.assertTrue(editMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityTest,ShouldFinishTheActivityOnCancel,{     editParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(editParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.main_activity_actions, householdListActivityMock.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getMenuHandlers();     org.junit.Assert.assertEquals(6, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();     org.junit.Assert.assertEquals(2, resultHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuPreparer,{     android.view.Menu mock = org.mockito.Mockito.mock(android.view.Menu.class);     java.util.List<com.onaio.steps.handler.interfaces.IMenuPreparer> menuHandlers = householdListActivityMock.getMenuPreparer(mock);     org.junit.Assert.assertEquals(1, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperCustomMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getCustomMenuHandler();     org.junit.Assert.assertEquals(2, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityTest,ShouldFinishActivityOnCancel,{     newHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(newHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewMemberActivityTest,ShouldFinishActivityWhenCanceled,{     newMemberActivity.cancel(null);     org.junit.Assert.assertTrue(newMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityTest,ShouldFinishActivityWhenCanceled,{     newParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(newParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,ParticipantListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.participant_list_actions, participantListActivity.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,SettingsActivityTest,ShouldFinishActivityOnCancel,{     settingsActivity.cancel(null);     org.junit.Assert.assertTrue(settingsActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,WelcomeActivityTest,ShouldBeAbleToLoadWelcomeLayout,{     org.junit.Assert.assertEquals(R.id.welcome_layout, Shadows.shadowOf(welcomeActivity).getContentView().getId()); }
https://github.com/onaio/steps-app.git,StepsFileDecoratorTest,testGetFormTitleShouldReturnValidFormTitle,{     org.junit.Assert.assertEquals("A", stepsFileDecorator.getFormTitle()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testDialogShouldNotNull,{     org.junit.Assert.assertNotNull(org.robolectric.shadows.ShadowDialog.getLatestDialog()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testVerifyUploadResultSequence,{     android.app.Dialog dialog = org.robolectric.shadows.ShadowDialog.getLatestDialog();     androidx.recyclerview.widget.RecyclerView recyclerView = dialog.findViewById(R.id.rv_upload_results);     com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter adapter = ((com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter) (recyclerView.getAdapter()));     java.util.List<com.onaio.steps.model.UploadResult> uploadResults = adapter.getUploadResults();     org.junit.Assert.assertEquals(6, uploadResults.size());     verifySortedList(uploadResults.get(0), true);     verifySortedList(uploadResults.get(1), true);     verifySortedList(uploadResults.get(2), true);     verifySortedList(uploadResults.get(3), false);     verifySortedList(uploadResults.get(4), false);     verifySortedList(uploadResults.get(5), false); }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testExtractDataPutAllDataInIntent,{     java.lang.String[] row = new java.lang.String[]{ "1-2-1", "Rav", "Ron", "1", "32", "1", "50" };     android.content.Intent resultIntent = new android.content.Intent();     java.util.List<java.lang.String[]> data = new java.util.ArrayList<>();     data.add(row);     dataProviderActivity.extractData(data, resultIntent);     for (com.onaio.steps.external.DataKeys dataKey : com.onaio.steps.external.DataKeys.values()) {         org.junit.Assert.assertEquals(row[dataKey.getIndex()], resultIntent.getStringExtra(dataKey.getKey()));     } }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testReturnedIntentShouldReturnNonNullIntent,{     org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent()); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches,{     org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home)); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanNotBeStartedForOtherId,{     org.junit.Assert.assertFalse(backHomeHandler.shouldOpen(android.R.id.background)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(selectionHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deferredHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deferredHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deleteMemberHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deleteMemberHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenMemberIsSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotInactivateWhenMemberIsNotSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(2);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityOpensWhenProperIdMatches,{     org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityShouldNotOpenForOtherId,{     org.junit.Assert.assertFalse(exportHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testSavedFileValues,{     java.lang.String hhName = "testHhName";     java.lang.String phoneNumber = "00000000";     com.onaio.steps.model.InterviewStatus interviewStatus = com.onaio.steps.model.InterviewStatus.NOT_DONE;     java.lang.String createdAt = new java.text.SimpleDateFormat(com.onaio.steps.helper.Constants.DATE_FORMAT, java.util.Locale.ENGLISH).format(new java.util.Date());     java.lang.String comment = "testComment";     java.lang.String deviceIMEI = "123456";     java.lang.String odkJrFormId = "Test_Form";     java.lang.String odkJrFormTitle = "Test Form";     com.onaio.steps.model.Household householdMock = org.mockito.Mockito.mock(com.onaio.steps.model.Household.class);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(interviewStatus);     org.mockito.Mockito.when(householdMock.getName()).thenReturn(hhName);     org.mockito.Mockito.when(householdMock.getPhoneNumber()).thenReturn(phoneNumber);     org.mockito.Mockito.when(householdMock.getCreatedAt()).thenReturn(createdAt);     org.mockito.Mockito.when(householdMock.getComments()).thenReturn(comment);     org.mockito.Mockito.when(householdMock.getOdkJrFormId()).thenReturn(odkJrFormId);     org.mockito.Mockito.when(householdMock.getOdkJrFormTitle()).thenReturn(odkJrFormTitle);     int id = 2;     java.lang.String surname = "testSurname";     java.lang.String firstName = "testFirstName";     com.onaio.steps.model.Gender gender = com.onaio.steps.model.Gender.Female;     int age = 30;     java.lang.String memberId = "testMemberId";     com.onaio.steps.model.Member selectedMember = new com.onaio.steps.model.Member(id, surname, firstName, gender, age, householdMock, memberId, false);     org.mockito.Mockito.when(householdMock.getSelectedMember(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(selectedMember);     android.content.Intent intent = new android.content.Intent();     intent.putExtra(com.onaio.steps.helper.Constants.HH_HOUSEHOLD, householdMock);     android.telephony.TelephonyManager telephonyManager = org.mockito.Mockito.mock(android.telephony.TelephonyManager.class);     org.mockito.Mockito.when(telephonyManager.getDeviceId()).thenReturn(deviceIMEI);     org.mockito.Mockito.when(householdActivityMock.getSystemService(android.content.Context.TELEPHONY_SERVICE)).thenReturn(telephonyManager);     org.mockito.Mockito.when(householdActivityMock.getApplicationContext()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext());     org.mockito.Mockito.when(householdActivityMock.getFilesDir()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext().getFilesDir());     householdMock.save(db);     selectedMember.save(db);     com.onaio.steps.handler.actions.ExportHandler exportHandler = org.mockito.Mockito.spy(new com.onaio.steps.handler.actions.ExportHandler(householdActivityMock));     org.mockito.Mockito.when(exportHandler.getReElectReasons(org.mockito.Mockito.any(com.onaio.steps.model.Household.class))).thenReturn(new java.util.ArrayList<>());     org.mockito.Mockito.when(exportHandler.getDatabaseHelper()).thenReturn(db);     org.mockito.Mockito.when(exportHandler.getDeviceId()).thenReturn("testdevice");     java.util.List<com.onaio.steps.model.Household> householdList = new java.util.ArrayList<>();     householdList.add(householdMock);     java.util.Queue<com.onaio.steps.decorators.FileDecorator> exportedFiles = exportHandler.with(householdList).saveFiles();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(exportedFiles.remove().getFile().getAbsolutePath());     java.lang.String[] expectedValues = new java.lang.String[]{ phoneNumber, hhName, comment, hhName + "-0", null, null, null, null, null, null, "0", null, null, null, "0", deviceIMEI, createdAt, "0" };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < expectedValues.length; i++) {             if (expectedValues[i] != null) {                 org.junit.Assert.assertEquals(expectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDatabaseHelperShouldReturnNonNull,{     org.junit.Assert.assertNotNull(exportHandler.getDatabaseHelper()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testReplaceCommasShouldReturnFilterString,{     java.lang.String result = org.robolectric.util.ReflectionHelpers.callInstanceMethod(exportHandler, "replaceCommas", org.robolectric.util.ReflectionHelpers.ClassParameter.from(java.lang.String.class, "\"john,123\""));     org.junit.Assert.assertEquals("john;123", result); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDeviceIdShouldReturnNonNullDeviceId,{     com.onaio.steps.helper.KeyValueStore keyValueStore = org.mockito.Mockito.mock(com.onaio.steps.helper.KeyValueStore.class);     org.mockito.MockedStatic<com.onaio.steps.helper.KeyValueStoreFactory> keyValueStoreFactoryMockedStatic = org.mockito.Mockito.mockStatic(com.onaio.steps.helper.KeyValueStoreFactory.class);     keyValueStoreFactoryMockedStatic.when(() -> com.onaio.steps.helper.KeyValueStoreFactory.instance(org.mockito.Mockito.any())).thenReturn(keyValueStore);     org.mockito.Mockito.when(keyValueStore.getString(org.mockito.Mockito.eq(com.onaio.steps.helper.Constants.HH_PHONE_ID))).thenReturn("123");     org.junit.Assert.assertEquals("123", exportHandler.getDeviceId());     keyValueStoreFactoryMockedStatic.close(); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(finalisedFormHandler.shouldOpen(R.id.action_saved_form)); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(finalisedFormHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldBeOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(importHandler.shouldOpen(R.id.action_import)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldNotBeOpenWhenMenuIdDiffers,{     org.junit.Assert.assertFalse(importHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(notReachableHandler.shouldOpen(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(notReachableHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyNotReachable,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_REACHABLE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,NotReachableOnEmptyHouseholdHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(pickImageHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldNotOpenWhenExportActionIsChosen,{     org.junit.Assert.assertFalse(pickImageHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.QR_CODE_SCAN.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,cannotHandleResultForPickImageRequestCode,{     org.junit.Assert.assertFalse(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldNotOpenWhenPickImageActionIsChosen,{     org.junit.Assert.assertFalse(qrCodeScanHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(refusedHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(refusedHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     int MENU_ID = R.id.action_select_participant;     org.junit.Assert.assertTrue(selectParticipantHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectParticipantHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenThereAreNoMembers,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDeferred,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsRefused,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsNotDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldActivateWhenHouseholdStatusIsNotSelected,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldActivateWhenSurveyIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(shareHandler.shouldOpen(R.id.menu_item_settings_share)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldNotOpen,{     org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldDeactivate,{     org.junit.Assert.assertTrue(shareHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(takeSurveyHandler.shouldOpen(R.id.action_take_survey)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(takeSurveyHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyRefused,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.SURVEY.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,testGetSavedFormsShouldReturnNullWhenExceptionOccur,{     com.onaio.steps.utils.Faker.mockQueryInActivityToFindOdkSavedForm(householdActivitySpy);     android.content.Intent intent = Mockito.mock(android.content.Intent.class);     android.net.Uri uri = Mockito.mock(android.net.Uri.class);     Mockito.when(intent.getData()).thenReturn(uri);     Mockito.when(uri.getLastPathSegment()).thenReturn("");     android.content.ContentResolver contentResolver = householdActivitySpy.getContentResolver();     Mockito.when(contentResolver.acquireContentProviderClient(ArgumentMatchers.any(android.net.Uri.class))).thenReturn(null);     org.junit.Assert.assertNull(takeSurveyHandler.getSavedForms(intent)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForEditHouseholdIdentifier,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherIdentifier,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldBeAbleToOpenEditParticipantActivityWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.shouldOpen(R.id.action_edit)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotBeAbleToOpenEditParticipantActivityForOtherMenuId,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForProperRequestCodeCanBeHandled,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsDone,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsIncomplete,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotInactivateWhenParticipantIsSelected,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(importExportActivityHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,handleResultShouldNotShowToastWhenResultCancelled,{     importExportActivityHandler.handleResult(null, android.app.Activity.RESULT_CANCELED);     android.widget.Toast latestToast = org.robolectric.shadows.ShadowToast.getLatestToast();     org.junit.Assert.assertNull(latestToast); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,canHandleResultForExportImportSettingsPageRequestCode,{     org.junit.Assert.assertTrue(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.IMPORT_EXPORT_SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,cannotHandleResultForOtherRequestCodes,{     org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldOpenWhenProperMenuItemIsClicked,{     org.junit.Assert.assertTrue(handler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotOpenWhenOtherMenuItemIsClicked,{     org.junit.Assert.assertFalse(handler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForNewHouseholdRequestCode,{     org.junit.Assert.assertTrue(handler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(handler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassedAndWhenSurveyIsNotRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotOpenForOtherMenuIdAndForRefusedState,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdSurveyIsIncomplete,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassed,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldBeAbleToHandleRequestForProperRequestCode,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotHandleRequestForImproperRequestCode,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldStartNewParticipantActivity,{     newParticipantActivityHandler.open();     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(participantListActivity);     android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();     org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldCheckSettingsActivityShouldNotStartedForOtherId,{     org.junit.Assert.assertFalse(settingActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldNotHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,HouseholdActivityFactoryTest,ShouldHaveMemberActivityHandlerAsMemberItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler itemHandler = com.onaio.steps.handler.factories.HouseholdActivityFactory.getMemberItemHandler(activity, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.MemberActivityHandler.class, itemHandler.getClass()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.HouseholdListActivityFactory.getHouseholdItemHandler(householdListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.HouseholdActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,MemberActivityFactoryTest,ShouldGetProperMenuResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> menuHandlers = com.onaio.steps.handler.factories.MemberActivityFactory.getMenuResultHandlers(memberActivity, member);     java.util.ArrayList<java.lang.Class> handlerTypes = getTypes(menuHandlers);     junit.framework.TestCase.assertEquals(1, menuHandlers.size());     org.junit.Assert.assertTrue(handlerTypes.contains(com.onaio.steps.handler.activities.EditMemberActivityHandler.class)); }
https://github.com/onaio/steps-app.git,ParticipantListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.ParticipantListActivityFactory.getParticipantItemHandler(participantListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.ParticipantActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForEmptyHouseholdStrategyTest,ShouldInactivateWhenHouseholdIsNotEmpty,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.EMPTY_HOUSEHOLD);     org.junit.Assert.assertFalse(notReachableSurveyForEmptyHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(household.getName()).thenReturn("123-100");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100", takeSurveyForHouseholdStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(participant.getParticipantID()).thenReturn("123-100-3");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100-3", takeSurveyForParticipantStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVisiblePasswordByDefault,{     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     android.widget.EditText passwordEditText = authDialog.findViewById(R.id.passwordEditText);     org.junit.Assert.assertEquals(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, passwordEditText.getInputType()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfStoredMD5HashMatched,{     java.lang.String text = "test";     java.lang.String storedMd5Hash = "098f6bcd4621d373cade4e832627b4f6";     java.lang.String enteredSha256Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredSha256Hash, storedMd5Hash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfHashMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnFalseIfHashNotMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822c";// invalid hash      com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertFalse(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldFailValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "20");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "65");     dataValidator.validateAgeRange("17", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("70", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("3", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(3, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldPassValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "18");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "70");     dataValidator.validateAgeRange("18", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("69", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("50", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldFail,{     dataValidator.validate(com.onaio.steps.model.Gender.NotDefined, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(1, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldPass,{     dataValidator.validate(com.onaio.steps.model.Gender.Male, activity.getString(R.string.member_gender_hint));     dataValidator.validate(com.onaio.steps.model.Gender.Female, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldFail,{     java.lang.String nullString = null;     dataValidator.validate("", "String error");     dataValidator.validate(nullString, "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(2, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldPass,{     dataValidator.validate("Precious", "String error");     dataValidator.validate("Property", "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DeviceTest,testGenerateUniqueDeviceIdShouldReturnNull,{     android.content.Context context = androidx.test.core.app.ApplicationProvider.getApplicationContext();     java.lang.String uniqueDeviceId = com.onaio.steps.helper.Device.generateUniqueDeviceId(context);     org.junit.Assert.assertNull(uniqueDeviceId); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnMD5Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "098f6bcd4621d373cade4e832627b4f6";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.MD5)); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnSHA256Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.SHA_256)); }
https://github.com/onaio/steps-app.git,KeyValueStoreTest,testGetPreferenceFileNameShouldReturnMainActivityOrchestratorFileName,{     org.junit.Assert.assertEquals("activities." + com.onaio.steps.activities.MainActivityOrchestrator.class.getSimpleName(), keyValueStore.getPreferenceFileName()); }
https://github.com/onaio/steps-app.git,NetworkConnectivityTest,testIsNetworkAvailableShouldReturnTrue,{     android.content.Context context = org.mockito.Mockito.mock(android.content.Context.class);     android.net.ConnectivityManager connectivityManager = org.mockito.Mockito.mock(android.net.ConnectivityManager.class);     android.net.NetworkInfo networkInfo = org.mockito.Mockito.mock(android.net.NetworkInfo.class);     org.mockito.Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     org.mockito.Mockito.when(connectivityManager.getActiveNetworkInfo()).thenReturn(networkInfo);     org.mockito.Mockito.when(networkInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(com.onaio.steps.helper.NetworkConnectivity.isNetworkAvailable(context)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullOnWhenErrorBodyIsNull,{     org.junit.Assert.assertNull(uploadFileTask.findError(null)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullWhenExceptionOccur,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("");     org.junit.Assert.assertNull(uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnValidError,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");     org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,HouseholdMemberFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the household member     java.lang.String blankFormMediaPath = householdActivity.getFilesDir().getPath();     java.lang.String householdName = "household name";     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(householdMock.getName()).thenReturn(householdName);     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.HouseholdMemberFormStrategy(householdMock, DEVICE_ID), householdActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(householdActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ MEMBER_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ParticipantFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the participant     java.lang.String blankFormMediaPath = participantActivity.getFilesDir().getPath();     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.ParticipantFormStrategy(participant, DEVICE_ID), participantActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(participantActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ PARTICIPANT_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ODKBlankFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.forms/forms/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ODKSavedFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.instances/instances/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ReElectReasonTest,ShouldSaveReasonsToDatabase,{     org.junit.Assert.assertEquals(0, reElectReason.save(db)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldBeAbleHandleHouseholdFlowType,{     org.junit.Assert.assertTrue(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldNotBeAbleToHandleParticipantFlowType,{     org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,validateHouseHoldSettingsShouldPass,{     org.junit.Assert.assertEquals(0, householdFlow.validateHouseHoldSettings("uid", "pwd", "deid", "fid", "56", "89", true).size()); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.HouseholdListActivity.class.getName(), householdFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldBeAbleHandleParticipantFlowType,{     org.junit.Assert.assertTrue(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldNotBeAbleToHandleHouseholdFlowType,{     org.junit.Assert.assertFalse(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.ParticipantListActivity.class.getName(), participantFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,compress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.compress(loremIpsumText);     org.junit.Assert.assertEquals(compressedText, resultText); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,decompress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.decompress(compressedText);     org.junit.Assert.assertEquals(loremIpsumText, resultText); }
https://github.com/onaio/steps-app.git,QRCodeUtilsTest,exportSettingsToJSON,{     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MAX_AGE, "78");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MIN_AGE, "17");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_USER_ID, "some user id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_PHONE_ID, "some device id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_HOUSEHOLD_SEED, "1");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.IMPORT_URL, "some import url");     keyValueStore.putString(com.onaio.steps.helper.Constants.ENDPOINT_URL, "some export url");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_PHONE_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MIN_AGE, "12");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MAX_AGE, "98");     java.lang.String exportSettingsJSON = com.onaio.steps.utils.QRCodeUtils.exportSettingsToJSON(activity);     org.json.JSONObject resultJSON = new org.json.JSONObject(exportSettingsJSON);     org.json.JSONObject expectedJSON = new org.json.JSONObject(settingsJSONString);     org.junit.Assert.assertEquals(expectedJSON.toString(), resultJSON.toString());     clearSettings(); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetCountShouldReturnOne,{     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetItemIdShouldReturnOneAsLong,{     org.junit.Assert.assertEquals(1, adapter.getItemId(0)); }
https://github.com/onaio/steps-app.git,RootDetectionTaskTest,testDoInBackgroundShouldReturnTrue,{     org.junit.Assert.assertTrue(rootDetectionTask.doInBackground(androidx.test.core.app.ApplicationProvider.getApplicationContext())); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshInHead,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshBetweenHeadAndBody,{     java.lang.String html = (("<html>" + "<head></head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshInBody,{     java.lang.String html = (("<html>" + "<head></head>") + "<body><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithUpperCaseAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"REFRESH\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithMixedCaseAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"Refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithoutQuotesAroundAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=refresh content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithSpacesInAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh \" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMultipleMetaRefreshTags,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshButKeepOtherMetaTags,{     java.lang.String html = ((((("<html>" + "<head>") + "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">") + "<meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">") + "</head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" /></head>" + "<body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority?a=one&b=two&c=three");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("b");     org.junit.Assert.assertThat(java.util.Collections.singletonList("two"), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper_multipleMatchingQueryParameters,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority?xname=one&name=two&Name=Three&NAME=FOUR");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("name");     org.junit.Assert.assertThat(java.util.Arrays.asList("two", "Three", "FOUR"), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper_withoutQueryParameters,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("name");     org.junit.Assert.assertThat(java.util.Collections.<java.lang.String>emptyList(), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,UNKNOWN_getDatabaseName_shouldReturnUnknown,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "unknown", com.fsck.k9.mailstore.LocalFolder.MoreMessages.UNKNOWN.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,TRUE_getDatabaseName_shouldReturnTrue,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "true", com.fsck.k9.mailstore.LocalFolder.MoreMessages.TRUE.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,FALSE_getDatabaseName_shouldReturnFalse,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "false", com.fsck.k9.mailstore.LocalFolder.MoreMessages.FALSE.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withImap_shouldReturn_ON_DELETE,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.ON_DELETE, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withPop3_shouldReturn_NEVER,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.POP3);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.NEVER, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withWebDav_shouldReturn_ON_DELETE,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.WebDAV);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.ON_DELETE, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withNoConnectionSecurityAndImap_shouldReturnDefaultPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.NONE, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultPort, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withStartTlsAndImap_shouldReturnDefaultPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.STARTTLS_REQUIRED, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultPort, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withTlsAndImap_shouldReturnDefaultTlsPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.SSL_TLS_REQUIRED, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultTlsPort, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoNullArguments_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are null", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withNullArgumentAndMessageWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithNullUidAndNullArgument_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoMessagesWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are a message with a null UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withNullArgumentAndMessageWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithInvalidUidAndNullArgument_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoMessagesWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are a message with an invalid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithNullUidAndMessageWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithInvalidUidAndMessageWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftNullArgument_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is null", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftMessageWithNullUid_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is message with null UID", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftMessageWithInvalidUid_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is message with invalid UID", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightNullArgument_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is null", result < 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightMessageWithNullUid_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is message with null UID", result < 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightMessageWithInvalidUid_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is message with invalid UID", result < 0); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withTextPlain_shouldReturnFalse,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", "plain text");     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertFalse(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withMultipartEncrypted_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMultipartMessage("multipart/encrypted", com.fsck.k9.message.MessageCreationHelper.createPart("application/octet-stream"), com.fsck.k9.message.MessageCreationHelper.createPart("application/octet-stream"));     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withSMimePart_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMessage("application/pkcs7-mime");     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withMultipartMixedContainingSMimePart_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMultipartMessage("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("application/pkcs7-mime"), com.fsck.k9.message.MessageCreationHelper.createPart("text/plain"));     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withInlinePgp_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((("" + "-----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----END PGP MESSAGE-----");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withPlainTextAndInlinePgp_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((("" + "preamble") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "epilogue");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withQuotedInlinePgp_shouldReturnFalse,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((((((("" + "good talk!") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-- ") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "my signature");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertFalse(encrypted); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withSimpleTextPlain,{     java.lang.String text = "The quick brown fox jumps over the lazy dog";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals(text, preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withSimpleTextHtml,{     java.lang.String text = "<b>The quick brown fox jumps over the lazy dog</b>";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("The quick brown fox jumps over the lazy dog", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withLongTextPlain,{     java.lang.String text = (((((((((("" + "10--------20--------30--------40--------50--------") + "60--------70--------80--------90--------100-------") + "110-------120-------130-------140-------150-------") + "160-------170-------180-------190-------200-------") + "210-------220-------230-------240-------250-------") + "260-------270-------280-------290-------300-------") + "310-------320-------330-------340-------350-------") + "360-------370-------380-------390-------400-------") + "410-------420-------430-------440-------450-------") + "460-------470-------480-------490-------500-------") + "510-------520-------";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals(text.substring(0, 511) + "…", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripSignature,{     java.lang.String text = (("" + "Some text\r\n") + "-- \r\n") + "Signature";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("Some text", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripHorizontalLine,{     java.lang.String text = (("" + "line 1\r\n") + "----\r\n") + "line 2";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("line 1 line 2", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripQuoteHeaderAndQuotedText,{     java.lang.String text = ((("" + "some text\r\n") + "On 01/02/03 someone wrote\r\n") + "> some quoted text\r\n") + "# some other quoted text\r\n";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("some text", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripGenericQuoteHeader,{     java.lang.String text = (("" + "Am 13.12.2015 um 23:42 schrieb Hans:\r\n") + "> hallo\r\n") + "hi there\r\n";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("hi there", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripHorizontalRules,{     java.lang.String text = ("line 1" + "------------------------------\r\n") + "line 2";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("line 1 line 2", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldReplaceUrl,{     java.lang.String text = "some url: https://k9mail.org/";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("some url: ...", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldCollapseAndTrimWhitespace,{     java.lang.String text = " whitespace     is\t\tfun  ";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("whitespace is fun", preview); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withTextPlainPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(part, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withTextHtmlPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(part, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withoutTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternative,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeHtmlPartFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingOnlyTextHtmlPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeNotContainingTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), com.fsck.k9.message.MessageCreationHelper.createPart("application/pdf"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingMultipartRelatedContainingTextPlain,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/related", expected, com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg")), com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingMultipartRelatedContainingTextHtmlFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/related", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg")), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingTextPlain,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingTextHtmlFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedNotContainingTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingMultipartAlternative,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html")), com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingMultipartAlternativeWithTextPlainPartLast,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), expected));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingEmptyTextPlainPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createEmptyPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingEmptyTextHtmlPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createEmptyPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,newNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.newNotification(notificationHolder);     org.junit.Assert.assertFalse(result.shouldCancelNotification()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,replaceNotification_shouldCancelNotification_shouldReturnTrue,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertTrue(result.shouldCancelNotification()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,replaceNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertEquals(com.fsck.k9.notification.AddNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,getNotificationHolder_shouldReturnNotificationHolder,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertEquals(notificationHolder, result.getNotificationHolder()); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_ALWAYS,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.ALWAYS);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertTrue(result); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_FOR_SINGLE_MSG,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.FOR_SINGLE_MSG);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertTrue(result); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_NEVER,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.NEVER);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertFalse(result); }
https://github.com/shannah/cn1-android-importer.git,LockScreenNotificationTest,configureLockScreenNotification_SENDERS_makeSureWeGetEnoughSenderNames,{     org.junit.Assert.assertTrue(com.fsck.k9.notification.NotificationData.MAX_NUMBER_OF_MESSAGES_FOR_SUMMARY_NOTIFICATION >= com.fsck.k9.notification.LockScreenNotification.MAX_NUMBER_OF_SENDERS_IN_LOCK_SCREEN_NOTIFICATION); }
https://github.com/shannah/cn1-android-importer.git,LockScreenNotificationTest,createCommaSeparatedListOfSenders_withMoreSendersThanShouldBeDisplayed,{     com.fsck.k9.notification.NotificationContent content1 = createNotificationContent("alice@example.com");     com.fsck.k9.notification.NotificationContent content2 = createNotificationContent("bob@example.com");     com.fsck.k9.notification.NotificationContent content3 = createNotificationContent("cloe@example.com");     com.fsck.k9.notification.NotificationContent content4 = createNotificationContent("dagobert@example.com");     com.fsck.k9.notification.NotificationContent content5 = createNotificationContent("ed@example.com");     com.fsck.k9.notification.NotificationContent content6 = createNotificationContent("fiona@example.com");     java.lang.String result = lockScreenNotification.createCommaSeparatedListOfSenders(java.util.Arrays.asList(content1, content2, content3, content4, content5, content6));     org.junit.Assert.assertEquals("alice@example.com, bob@example.com, cloe@example.com, dagobert@example.com, ed@example.com", result); }
https://github.com/shannah/cn1-android-importer.git,NotificationContentCreatorTest,createFromMessage_withStarredMessage,{     Mockito.when(message.isSet(com.fsck.k9.mail.Flag.FLAGGED)).thenReturn(true);     com.fsck.k9.notification.NotificationContent content = contentCreator.createFromMessage(account, message);     org.junit.Assert.assertEquals(true, content.starred); }
https://github.com/shannah/cn1-android-importer.git,NotificationDataTest,testGetHolderForLatestNotification,{     com.fsck.k9.notification.NotificationContent content = createNotificationContent("1");     com.fsck.k9.notification.AddNotificationResult addResult = notificationData.addNotificationContent(content);     com.fsck.k9.notification.NotificationHolder holder = notificationData.getHolderForLatestNotification();     org.junit.Assert.assertEquals(addResult.getNotificationHolder(), holder); }
https://github.com/shannah/cn1-android-importer.git,NotificationDataTest,testGetAccount,{     org.junit.Assert.assertEquals(account, notificationData.getAccount()); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailSummaryNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailSummaryNotificationId(account);     org.junit.Assert.assertEquals(6, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailStackedNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     org.junit.Assert.assertEquals(7, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailSummaryNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailSummaryNotificationId(account);     org.junit.Assert.assertEquals(21, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailStackedNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationIndex = 7;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     org.junit.Assert.assertEquals(29, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getFetchingMailNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getFetchingMailNotificationId(account);     org.junit.Assert.assertEquals(5, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getFetchingMailNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getFetchingMailNotificationId(account);     org.junit.Assert.assertEquals(20, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getSendFailedNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getSendFailedNotificationId(account);     org.junit.Assert.assertEquals(0, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getSendFailedNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getSendFailedNotificationId(account);     org.junit.Assert.assertEquals(15, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forIncomingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(1, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forIncomingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(16, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forOutgoingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(2, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forOutgoingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(17, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forIncomingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(3, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forIncomingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(18, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forOutgoingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(4, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forOutgoingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(19, notificationId); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_shouldCancelNotification_shouldReturnTrue,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertTrue(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_isUnknownNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertFalse(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_getNotificationHolder_shouldReturnNotificationHolder,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertEquals(notificationHolder, result.getNotificationHolder()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertFalse(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_isUnknownNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertFalse(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,unknownNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.unknownNotification();     org.junit.Assert.assertFalse(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,unknownNotification_isUnknownNotification_shouldReturnTrue,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.unknownNotification();     org.junit.Assert.assertTrue(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotification,{     disableOptionalActions();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent replyPendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createReplyPendingIntent(messageReference, notificationId)).thenReturn(replyPendingIntent);     android.app.PendingIntent markAsReadPendingIntent = createFakePendingIntent(2);     Mockito.when(actionCreator.createMarkMessageAsReadPendingIntent(messageReference, notificationId)).thenReturn(markAsReadPendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_single_message_options_dark, "Reply", replyPendingIntent);     verifyAddAction(R.drawable.ic_action_mark_as_read_dark, "Mark Read", markAsReadPendingIntent);     verifyNumberOfActions(2); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithDeleteActionEnabled,{     enableDeleteAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent deletePendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createDeleteMessagePendingIntent(messageReference, notificationId)).thenReturn(deletePendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_delete_dark, "Delete", deletePendingIntent); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithArchiveActionEnabled,{     enableArchiveAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent archivePendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createArchiveMessagePendingIntent(messageReference, notificationId)).thenReturn(archivePendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_archive_dark, "Archive", archivePendingIntent); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithMarkAsSpamActionEnabled,{     enableSpamAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent markAsSpamPendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createMarkMessageAsSpamPendingIntent(messageReference, notificationId)).thenReturn(markAsSpamPendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_spam_dark, "Spam", markAsSpamPendingIntent); }
https://github.com/translation-cards/translation-cards.git,EnterSourcePhraseActivityTest,shouldNotStartNextActivityWhenThereIsNoSourceText,{     android.app.Activity activity = helper.createActivityToTest();     org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(activity, R.id.activity_enter_source_phrase_next_label);     org.junit.Assert.assertNull(Shadows.shadowOf(activity).getNextStartedActivity()); }
https://github.com/translation-cards/translation-cards.git,EnterSourcePhraseActivityTest,shouldNotHaveNextButtonClickableWhenThereIsNoSourceText,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertFalse(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findLinearLayout(activity, R.id.activity_enter_source_phrase_next_label).isClickable()); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldNotBeNull,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldHaveTranslatedTextPhraseTextViewInIntent,{     // Testing Butter Knife hookup     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findTextView(activity, R.id.translated_phrase_field)); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,RecordAudioActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,SummaryActivityTest,shouldNotBeNull,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity); }
https://github.com/translation-cards/translation-cards.git,SummaryActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveValidDeckNameWhenDeckIsPresent,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.TextView deckNameTextView = ((android.widget.TextView) (view.findViewById(R.id.deck_name)));     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_NAME, deckNameTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveDeckInformationWhenDeckIsPresent,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.TextView deckInformationTextView = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findAnyView(view, R.id.deck_information);     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_INFORMATION, deckInformationTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveTranslationLanguagesTextWhenDeckIsPresent,{     android.widget.TextView translationLanguagesTextView = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findAnyView(view, R.id.translation_languages);     java.lang.String expectedLanguages = (org.mercycorps.translationcards.activity.MyDeckAdapterTest.ALPHABETICALLY_HIGH_LANGUAGE.toUpperCase() + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DELIMITER) + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_TRANSLATION_LANGUAGE.toUpperCase();     org.junit.Assert.assertEquals(expectedLanguages, translationLanguagesTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveAClickListenerWhenCreatingDeckMenuIcon,{     android.view.View deckMenu = view.findViewById(R.id.deck_menu);     org.junit.Assert.assertNotNull(Shadows.shadowOf(deckMenu).getOnClickListener()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowPopupMenuWhenMenuIsClicked,{     android.widget.PopupMenu deckMenu = openDeckPopupMenu();     org.junit.Assert.assertNotNull(deckMenu); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowDeleteButtonWhenMenuIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertEquals("Delete", popupMenu.getMenu().findItem(R.id.delete_deck).toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowShareButtonWhenMenuIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertEquals("Share", popupMenu.getMenu().findItem(R.id.share_deck).toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveClickListenerWhenDeleteDeckMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertNotNull(Shadows.shadowOf(popupMenu).getOnMenuItemClickListener()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldLaunchAlertDialogWhenDeleteButtonClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.delete_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     org.robolectric.shadows.ShadowDialog shadowDialog = Shadows.shadowOf(alertDialog);     org.junit.Assert.assertThat(shadowDialog.getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_ALERT_DIALOG_TITLE)); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldNotDisplayLockIconWhenDeckIsUnlocked,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.FrameLayout frameLayout = ((android.widget.FrameLayout) (view.findViewById(R.id.lock_icon)));     org.junit.Assert.assertEquals(android.view.View.GONE, frameLayout.getVisibility()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldDisplayLockIconWhenDeckIsLocked,{     org.mercycorps.translationcards.model.Deck lockedDeck = new org.mercycorps.translationcards.model.Deck(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_NAME, org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_PUBLISHER, "", 0L, 1135497600000L, true, org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_SOURCE_LANGUAGE_NAME, new org.mercycorps.translationcards.model.Dictionary[0]);     android.view.View view = getAdapterViewForDeck(lockedDeck);     android.widget.FrameLayout frameLayout = ((android.widget.FrameLayout) (view.findViewById(R.id.lock_icon)));     org.junit.Assert.assertEquals(android.view.View.VISIBLE, frameLayout.getVisibility()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowPopupAlertDialogWhenShareMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.share_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     org.robolectric.shadows.ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);     java.lang.String alertDialogTitle = shadowAlertDialog.getTitle().toString();     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.NAME_FOR_SHARED_DECK, alertDialogTitle); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldStartExportTaskWhenShareMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.share_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).performClick();     org.junit.Assert.assertEquals(android.content.Intent.ACTION_SEND, Shadows.shadowOf(activity).getNextStartedActivity().getAction()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldModifyExistingViewIfViewNotNull,{     controller = org.robolectric.Robolectric.buildActivity(android.app.Activity.class);     activity = controller.withIntent(new android.content.Intent()).create().get();     org.mercycorps.translationcards.activity.MyDeckAdapter adapter = new org.mercycorps.translationcards.activity.MyDeckAdapter(activity, myDecksPresenter);     org.mercycorps.translationcards.view.DeckItem view = new org.mercycorps.translationcards.view.DeckItem(activity.getApplicationContext());     adapter.getView(0, view, null);     android.widget.TextView deckName = ((android.widget.TextView) (view.findViewById(R.id.deck_name)));     org.junit.Assert.assertEquals(deck.getTitle(), deckName.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldShowWelcomeTitleWhenNoCardsArePresent,{     android.app.Activity activity = createEmptyTranslationsActivity();     android.widget.TextView welcomeTitle = ((android.widget.TextView) (activity.findViewById(R.id.empty_deck_title)));     org.junit.Assert.assertThat(welcomeTitle.getText().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.EMPTY_DECK_TITLE)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,onCreate_shouldShowDeckNameInToolbar,{     org.junit.Assert.assertThat(translationsActivity.getSupportActionBar().getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.DEFAULT_DECK_NAME)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldShowCollapsedCardIndicatorByDefault,{     android.view.View translationsListItem = firstTranslationCardInListView();     android.widget.ImageView cardIndicator = ((android.widget.ImageView) (translationsListItem.findViewById(R.id.indicator_icon)));     org.junit.Assert.assertThat(Shadows.shadowOf(cardIndicator.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.expand_arrow)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,setDictionary_shouldNotHaveAnyTranslationCardsWhenNoneHaveBeenCreated,{     android.widget.TextView translationCardText = ((android.widget.TextView) (translationsActivity.findViewById(R.id.origin_translation_text)));     org.junit.Assert.assertThat(translationCardText, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.nullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldNotSetEditFlagInContextWhenCreateNewTranslationButtonIsClicked,{     org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(translationsActivity, R.id.add_translation_button);     android.content.Intent nextStartedActivity = Shadows.shadowOf(translationsActivity).getNextStartedActivity();     org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext context = nextStartedActivity.getParcelableExtra(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.CONTEXT_INTENT_KEY);     org.junit.Assert.assertFalse(context.isEdit()); }
https://github.com/translation-cards/translation-cards.git,EnterDeckTitleActivityTest,setDeckTitleText,{     java.lang.String deckTitleText = "Some Text!";     activity.setDeckTitleText(deckTitleText);     android.widget.TextView deckTitleInput = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findTextView(activity, R.id.deck_title_input);     org.junit.Assert.assertEquals(deckTitleText, deckTitleInput.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,LanguageSelectorActivityTest,shouldReturnCancelResultCodeWhenUserClicksCancel,{     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(activity);     activity.onOptionsItemSelected(new org.robolectric.fakes.RoboMenuItem(org.mercycorps.translationcards.addDeck.activity.LanguageSelectorActivity.CANCEL_BUTTON_ID));     junit.framework.Assert.assertEquals(android.app.Activity.RESULT_CANCELED, shadowActivity.getResultCode());     org.junit.Assert.assertTrue(shadowActivity.getResultIntent().getStringExtra(org.mercycorps.translationcards.addDeck.activity.LanguageSelectorActivity.SELECTED_LANGUAGE_KEY).isEmpty()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotBeNull,{     org.junit.Assert.assertNotNull(translationTabsFragment); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldInflateFragmentWithLanguagesTab,{     org.junit.Assert.assertNotNull(getFragmentView()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldContainHorizontalScrollView,{     android.widget.HorizontalScrollView horizontalScrollView = ((android.widget.HorizontalScrollView) (getFragmentView().findViewById(R.id.languages_scroll)));     org.junit.Assert.assertNotNull(horizontalScrollView); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldContainArabicInLanguageTabWhenNewTranslationContextLanguageIsArabic,{     android.widget.LinearLayout linearLayout = ((android.widget.LinearLayout) (getFragmentView().findViewById(R.id.languages_scroll_list)));     org.junit.Assert.assertEquals("ARABIC", ((android.widget.TextView) (linearLayout.getChildAt(0).findViewById(R.id.tab_label_text))).getText()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldSeeTabBorderUnderneathCurrentLanguageTab,{     android.view.View tabBorder = getFragmentView().findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.textColor, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldSetLanguageTextToActiveColor,{     android.widget.TextView languageTextView = ((android.widget.TextView) (getFragmentView().findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(android.support.v4.content.ContextCompat.getColor(languageTextView.getContext(), R.color.textColor), languageTextView.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHaveLanguageTabClickListenerWhenLanguageTabHasBeenCreated,{     android.view.View languageTab = getFragmentView().findViewById(R.id.language_tab);     org.junit.Assert.assertNotNull(Shadows.shadowOf(languageTab).getOnClickListener()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldReturnCurrentTranslationForTab,{     org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = translationTabsFragment.getCurrentTranslation();     org.junit.Assert.assertEquals("arabic", newTranslation.getDictionary().getLanguage()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldReturnTranslationContextForSecondTabAfterSecondTabHasBeenClicked,{     getLanguageTabAtPosition(1).performClick();     org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = translationTabsFragment.getCurrentTranslation();     org.junit.Assert.assertEquals("pashto", newTranslation.getDictionary().getLanguage()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotUnderlineALanguageTabWhenItIsNotSelected,{     android.view.View tabBorder = getLanguageTabAtPosition(1).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.colorPrimary, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabTextWhenItIsNotSelected,{     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(1).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.unselectedLanguageTabText), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHighlightLanguageTabBorderWhenTabIsSelected,{     getLanguageTabAtPosition(1).performClick();     android.view.View tabBorder = getLanguageTabAtPosition(1).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.textColor, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHighlightLanguageTabTextWhenTabIsSelected,{     getLanguageTabAtPosition(1).performClick();     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(1).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.textColor), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabBorderWhenTabIsNoLongerSelected,{     getLanguageTabAtPosition(1).performClick();     android.view.View tabBorder = getLanguageTabAtPosition(0).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.colorPrimary, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabTextWhenTabIsNoLongerSelected,{     getLanguageTabAtPosition(1).performClick();     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(0).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.unselectedLanguageTabText), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,DeckTest,getCreationDate_shouldFormatCreationDate,{     org.junit.Assert.assertThat(deck.getCreationDateString(), org.hamcrest.CoreMatchers.is("02/08/16")); }
https://github.com/translation-cards/translation-cards.git,DeckTest,getDeckInformation_shouldFormatDeckInformation,{     org.junit.Assert.assertThat(deck.getDeckInformation(), org.hamcrest.CoreMatchers.is("author, 02/08/16")); }
https://github.com/translation-cards/translation-cards.git,DictionaryTest,shouldNotReturnTranslationPathsWithNoAudio,{     org.mercycorps.translationcards.model.Translation firstTranslation = new org.mercycorps.translationcards.model.Translation("", false, "/filename1", 1L, "");     org.mercycorps.translationcards.model.Translation secondTranslation = new org.mercycorps.translationcards.model.Translation("", false, "", 1L, "");     org.mercycorps.translationcards.model.Dictionary dictionary = new org.mercycorps.translationcards.model.Dictionary("", new org.mercycorps.translationcards.model.Translation[]{ firstTranslation, secondTranslation }, 1L);     java.util.Map<java.lang.String, java.lang.Boolean> audioPaths = dictionary.getAudioPaths();     junit.framework.Assert.assertEquals(1, audioPaths.size());     org.junit.Assert.assertTrue(audioPaths.containsKey("/filename1")); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldParseFileCorrectly,{     java.util.Map<java.lang.String, java.util.List<java.lang.String>> actualValues = org.mercycorps.translationcards.porting.LanguagesImportUtilityTest.languagesImportUtility.getLanguageMap();     org.junit.Assert.assertEquals(expectedValues, actualValues); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldRemoveCharactersAfterTwoLetterIsoCode,{     java.util.Map<java.lang.String, java.util.List<java.lang.String>> actualValues = org.mercycorps.translationcards.porting.LanguagesImportUtilityTest.languagesImportUtility.getLanguageMap();     org.junit.Assert.assertEquals(expectedValues, actualValues); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldReturnEmptyMapIfInputStreamIsNull,{     org.mercycorps.translationcards.porting.LanguagesImportUtility emptyLanguagesImportUtility = new org.mercycorps.translationcards.porting.LanguagesImportUtility(null);     org.junit.Assert.assertEquals(java.util.Collections.EMPTY_MAP, emptyLanguagesImportUtility.getLanguageMap()); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFarsiLanguageNameForFarsiISOCode,{     org.junit.Assert.assertEquals("Farsi", org.mercycorps.translationcards.porting.TranslationCardsISO.getLanguageDisplayName("fa", "")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchPersianLanguageNameForFAIsoCodeAndPersianLanguageSpecifier,{     org.junit.Assert.assertEquals("Persian", org.mercycorps.translationcards.porting.TranslationCardsISO.getLanguageDisplayName("fa", "persian")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFAIsoCodeForPersianLanguageName,{     org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Persian")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFAIsoCodeForFarsiLanguageName,{     org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Farsi")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldGetYIIsoCodeForYiddishLanguageName,{     org.junit.Assert.assertEquals("yi", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Yiddish")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForArabic,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("Persian")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForFarsi,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("Farsi")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForUncapitalizedLanguageName,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("farsi")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidIsoCodeForEmptyLanguageName,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_ISO_CODE, languageService.getIsoForLanguage("")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidIsoCodeForNullLanguageName,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_ISO_CODE, languageService.getIsoForLanguage(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidLanguageNameForNullIsoCode,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_LANGUAGE_NAME, languageService.getLanguageDisplayName(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnATitleCasedString,{     java.lang.String titleCasedString = org.mercycorps.translationcards.service.LanguageService.getTitleCaseName("A title cased string");     org.junit.Assert.assertEquals("A Title Cased String", titleCasedString); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnEmptyStringIfNullPassedToGetTitleCaseName,{     org.junit.Assert.assertEquals("", org.mercycorps.translationcards.service.LanguageService.getTitleCaseName(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnTitleCasedStringWhenSpaceAtFront,{     java.lang.String titleCasedString = org.mercycorps.translationcards.service.LanguageService.getTitleCaseName(" A title cased string");     org.junit.Assert.assertEquals("A Title Cased String", titleCasedString); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,getCurrentTranslations_shouldReturnAllCardsByDefault,{     java.util.List<org.mercycorps.translationcards.model.Translation> translations = translationService.getCurrentTranslations();     org.junit.Assert.assertEquals(translationsFromRepository, translations); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,allTranslationsShouldBeMinimizedByDefault,{     for (int index = 0; index < translationService.getCurrentTranslations().size(); index++) {         org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(index));     } }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,expandCard_shouldExpandACard,{     translationService.expandCard(1);     org.junit.Assert.assertEquals(true, translationService.cardIsExpanded(1)); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,minimizeCard_shouldMinimizeACard,{     translationService.expandCard(1);     translationService.minimizeCard(1);     org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(1)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldInflateALayoutFile,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.chip_layout)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldHaveATextField,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.chip_text)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldHaveAnImageField,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.delete_chip)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldSetChipText,{     java.lang.String chipText = "Hot Chips!";     chip.setText(chipText);     android.widget.TextView chipTextView = ((android.widget.TextView) (chip.findViewById(R.id.chip_text)));     org.junit.Assert.assertEquals(chipText, chipTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,NextButtonTest,shouldDisableNextButton,{     nextButton.disable();     org.junit.Assert.assertFalse(nextButton.isClickable());     android.widget.TextView nextButtonLabelText = ((android.widget.TextView) (nextButton.findViewById(R.id.next_button_text)));     junit.framework.Assert.assertEquals(getColor(nextButton.getContext(), R.color.textDisabled), nextButtonLabelText.getCurrentTextColor());     android.widget.ImageView nextButtonImage = ((android.widget.ImageView) (nextButton.findViewById(R.id.next_button_image)));     junit.framework.Assert.assertEquals(R.drawable.forward_arrow_disabled, Shadows.shadowOf(nextButtonImage.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveCollapseIconVisibleWhenLoaded,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = getDefaultTranslationCard();     android.widget.ImageView expansionIndicatorIcon = ((android.widget.ImageView) (translationCardItem.findViewById(R.id.indicator_icon)));     org.junit.Assert.assertThat(Shadows.shadowOf(expansionIndicatorIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.collapse_arrow)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldDisplayMuteIconWhenTranslationContainsNoAudio,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = getDefaultTranslationCard();     android.view.View audioIcon = translationCardItem.findViewById(R.id.audio_icon);     org.junit.Assert.assertThat(Shadows.shadowOf(audioIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.no_audio_40)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldDisplayAudioIconWhenTranslationContainsAudio,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = createTranslationCardItemWithAudioAndNoTranslatedText();     android.view.View audioIcon = translationCardItem.findViewById(R.id.audio_icon);     org.junit.Assert.assertThat(Shadows.shadowOf(audioIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.audio)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveEditCardIconWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.ImageView editCardIcon = ((android.widget.ImageView) (tc.findViewById(R.id.edit_card_icon)));     org.junit.Assert.assertThat(editCardIcon, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.notNullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveEditCardLabelWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.TextView editCardLabel = ((android.widget.TextView) (tc.findViewById(R.id.edit_card_label)));     org.junit.Assert.assertThat(editCardLabel.getText().toString(), org.hamcrest.CoreMatchers.is("Edit this flashcard")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveDeleteCardIconWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.ImageView deleteCardIcon = ((android.widget.ImageView) (tc.findViewById(R.id.delete_card_icon)));     org.junit.Assert.assertThat(deleteCardIcon, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.notNullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveDeleteCardLabelWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.TextView deleteCardLabel = ((android.widget.TextView) (tc.findViewById(R.id.delete_card_label)));     org.junit.Assert.assertThat(deleteCardLabel.getText().toString(), org.hamcrest.CoreMatchers.is("Delete this flashcard")); }
https://github.com/jberkel/sms-backup-plus.git,TokenRefresherTest,shouldInvalidateTokenOnRefresh,{     when(authPreferences.getOauth2Token()).thenReturn("token");     when(authPreferences.getOauth2Username()).thenReturn("username");     when(accountManager.getAuthToken(notNull(android.accounts.Account.class), anyString(), isNull(android.os.Bundle.class), anyBoolean(), any(android.accounts.AccountManagerCallback.class), any(android.os.Handler.class))).thenReturn(mock(android.accounts.AccountManagerFuture.class));     try {         refresher.refreshOAuth2Token();         org.junit.Assert.fail("expected error ");     } catch (com.zegoggles.smssync.auth.TokenRefreshException e) {         assertThat(e.getMessage()).isEqualTo("no bundle received from accountmanager");     }     verify(accountManager).invalidateAuthToken(com.zegoggles.smssync.activity.auth.AccountManagerAuthActivity.GOOGLE_TYPE, "token"); }
https://github.com/jberkel/sms-backup-plus.git,TokenRefresherTest,shouldHandleExceptionsThrownByFuture,{     when(authPreferences.getOauth2Token()).thenReturn("token");     when(authPreferences.getOauth2Username()).thenReturn("username");     android.accounts.AccountManagerFuture<android.os.Bundle> future = mock(android.accounts.AccountManagerFuture.class);     when(accountManager.getAuthToken(notNull(android.accounts.Account.class), anyString(), isNull(android.os.Bundle.class), anyBoolean(), any(android.accounts.AccountManagerCallback.class), any(android.os.Handler.class))).thenReturn(future);     android.accounts.AuthenticatorException exception = new android.accounts.AuthenticatorException();     when(future.getResult()).thenThrow(exception);     try {         refresher.refreshOAuth2Token();         org.junit.Assert.fail("expected exception");     } catch (com.zegoggles.smssync.auth.TokenRefreshException e) {         assertThat(e.getCause()).isSameAs(exception);     }     verify(accountManager).invalidateAuthToken(com.zegoggles.smssync.activity.auth.AccountManagerAuthActivity.GOOGLE_TYPE, "token"); }
https://github.com/jberkel/sms-backup-plus.git,BackupCursorsTest,shouldIterateOverAllContainedCursors,{     for (int i = 0; i < cursors.count(); i++) {         assertThat(cursors.hasNext()).isTrue();         com.zegoggles.smssync.service.BackupCursors.CursorAndType cursorAndType = cursors.next();         assertThat(cursorAndType).isNotNull();         assertThat(cursorAndType.cursor).isNotNull();         assertThat(cursorAndType.type).isNotNull();     }     assertThat(cursors.hasNext()).isFalse();     try {         cursors.next();         org.junit.Assert.fail("expected exception");     } catch (java.util.NoSuchElementException e) {     } }
https://github.com/openwebnet/openwebnet-android.git,AutomationModelTest,testAutomationModelAddBuilder_success,{     com.github.openwebnet.model.AutomationModel automation = com.github.openwebnet.model.AutomationModel.addBuilder().environment(AUTOMATION_ENVIRONMENT).gateway(AUTOMATION_GATEWAY).name(AUTOMATION_NAME).where(AUTOMATION_WHERE).type(AUTOMATION_TYPE).bus(AUTOMATION_BUS).favourite(AUTOMATION_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", automation.getUuid());     assertCommonFields(automation); }
https://github.com/openwebnet/openwebnet-android.git,AutomationModelTest,testAutomationModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.AutomationModel automation = com.github.openwebnet.model.AutomationModel.updateBuilder(LIGHT_UUID).environment(AUTOMATION_ENVIRONMENT).gateway(AUTOMATION_GATEWAY).name(AUTOMATION_NAME).where(AUTOMATION_WHERE).type(AUTOMATION_TYPE).bus(AUTOMATION_BUS).favourite(AUTOMATION_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, automation.getUuid());     assertCommonFields(automation); }
https://github.com/openwebnet/openwebnet-android.git,DeviceModelTest,testDeviceModelAddBuilder_success,{     com.github.openwebnet.model.DeviceModel device = com.github.openwebnet.model.DeviceModel.addBuilder().environment(DEVICE_ENVIRONMENT).gateway(DEVICE_GATEWAY).name(DEVICE_NAME).request(DEVICE_REQUEST).response(DEVICE_RESPONSE).favourite(DEVICE_FAVOURITE).runOnLoad(DEVICE_RUN_ON_LOAD).showConfirmation(DEVICE_CONFIRMATION).build();     org.junit.Assert.assertNotNull("invalid uuid", device.getUuid());     assertCommonFields(device); }
https://github.com/openwebnet/openwebnet-android.git,DeviceModelTest,testDeviceModelUpdateBuilder_success,{     java.lang.String DEVICE_UUID = "myUUid";     com.github.openwebnet.model.DeviceModel device = com.github.openwebnet.model.DeviceModel.updateBuilder(DEVICE_UUID).environment(DEVICE_ENVIRONMENT).gateway(DEVICE_GATEWAY).name(DEVICE_NAME).request(DEVICE_REQUEST).response(DEVICE_RESPONSE).favourite(DEVICE_FAVOURITE).runOnLoad(DEVICE_RUN_ON_LOAD).showConfirmation(DEVICE_CONFIRMATION).build();     org.junit.Assert.assertEquals("invalid uuid", DEVICE_UUID, device.getUuid());     assertCommonFields(device); }
https://github.com/openwebnet/openwebnet-android.git,EnergyModelTest,testEnergyModelAddBuilder_success,{     com.github.openwebnet.model.EnergyModel energy = com.github.openwebnet.model.EnergyModel.addBuilder().environment(ENERGY_ENVIRONMENT).gateway(ENERGY_GATEWAY).name(ENERGY_NAME).where(ENERGY_WHERE).version(ENERGY_VERSION).favourite(ENERGY_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", energy.getUuid());     assertCommonFields(energy); }
https://github.com/openwebnet/openwebnet-android.git,EnergyModelTest,testEnergyModelUpdateBuilder_success,{     java.lang.String ENERGY_UUID = "myUUid";     com.github.openwebnet.model.EnergyModel energy = com.github.openwebnet.model.EnergyModel.updateBuilder(ENERGY_UUID).environment(ENERGY_ENVIRONMENT).gateway(ENERGY_GATEWAY).name(ENERGY_NAME).where(ENERGY_WHERE).version(ENERGY_VERSION).favourite(ENERGY_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", ENERGY_UUID, energy.getUuid());     assertCommonFields(energy); }
https://github.com/openwebnet/openwebnet-android.git,IpcamModelTest,testIpcamModelAddBuilder_success,{     com.github.openwebnet.model.IpcamModel ipcam = com.github.openwebnet.model.IpcamModel.addBuilder().environment(IPCAM_ENVIRONMENT).name(IPCAM_NAME).url(IPCAM_URL).streamType(com.github.openwebnet.model.IpcamModel.StreamType.MJPEG).favourite(IPCAM_FAVOURITE).username(IPCAM_USERNAME).password(IPCAM_PASSWORD).build();     org.junit.Assert.assertNotNull("invalid uuid", ipcam.getUuid());     assertCommonFields(ipcam); }
https://github.com/openwebnet/openwebnet-android.git,IpcamModelTest,testIpcamModelUpdateBuilder_success,{     java.lang.String IPCAM_UUID = "myUUid";     com.github.openwebnet.model.IpcamModel ipcam = com.github.openwebnet.model.IpcamModel.updateBuilder(IPCAM_UUID).environment(IPCAM_ENVIRONMENT).name(IPCAM_NAME).url(IPCAM_URL).streamType(com.github.openwebnet.model.IpcamModel.StreamType.MJPEG).favourite(IPCAM_FAVOURITE).username(IPCAM_USERNAME).password(IPCAM_PASSWORD).build();     org.junit.Assert.assertEquals("invalid uuid", IPCAM_UUID, ipcam.getUuid());     assertCommonFields(ipcam); }
https://github.com/openwebnet/openwebnet-android.git,LightModelTest,testLightModelAddBuilder_success,{     com.github.openwebnet.model.LightModel light = com.github.openwebnet.model.LightModel.addBuilder().environment(LIGHT_ENVIRONMENT).gateway(LIGHT_GATEWAY).name(LIGHT_NAME).where(LIGHT_WHERE).type(LIGHT_TYPE).bus(LIGHT_BUS).favourite(LIGHT_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", light.getUuid());     assertCommonFields(light); }
https://github.com/openwebnet/openwebnet-android.git,LightModelTest,testLightModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.LightModel light = com.github.openwebnet.model.LightModel.updateBuilder(LIGHT_UUID).environment(LIGHT_ENVIRONMENT).gateway(LIGHT_GATEWAY).name(LIGHT_NAME).where(LIGHT_WHERE).type(LIGHT_TYPE).bus(LIGHT_BUS).favourite(LIGHT_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, light.getUuid());     assertCommonFields(light); }
https://github.com/openwebnet/openwebnet-android.git,ScenarioModelTest,testScenarioModelAddBuilder_success,{     com.github.openwebnet.model.ScenarioModel scenario = com.github.openwebnet.model.ScenarioModel.addBuilder().environment(SCENARIO_ENVIRONMENT).gateway(SCENARIO_GATEWAY).name(SCENARIO_NAME).where(SCENARIO_WHERE).favourite(SCENARIO_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", scenario.getUuid());     assertCommonFields(scenario); }
https://github.com/openwebnet/openwebnet-android.git,ScenarioModelTest,testScenarioModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.ScenarioModel scenario = com.github.openwebnet.model.ScenarioModel.updateBuilder(LIGHT_UUID).environment(SCENARIO_ENVIRONMENT).gateway(SCENARIO_GATEWAY).name(SCENARIO_NAME).where(SCENARIO_WHERE).favourite(SCENARIO_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, scenario.getUuid());     assertCommonFields(scenario); }
https://github.com/openwebnet/openwebnet-android.git,SoundModelTest,testSoundModelAddBuilder_success,{     com.github.openwebnet.model.SoundModel sound = com.github.openwebnet.model.SoundModel.addBuilder().environment(SOUND_ENVIRONMENT).gateway(SOUND_GATEWAY).name(SOUND_NAME).where(SOUND_WHERE).source(SOUND_SOURCE).type(SOUND_TYPE).favourite(SOUND_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", sound.getUuid());     assertCommonFields(sound); }
https://github.com/openwebnet/openwebnet-android.git,SoundModelTest,testSoundModelUpdateBuilder_success,{     java.lang.String SOUND_UUID = "myUUid";     com.github.openwebnet.model.SoundModel sound = com.github.openwebnet.model.SoundModel.updateBuilder(SOUND_UUID).environment(SOUND_ENVIRONMENT).gateway(SOUND_GATEWAY).name(SOUND_NAME).where(SOUND_WHERE).source(SOUND_SOURCE).type(SOUND_TYPE).favourite(SOUND_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", SOUND_UUID, sound.getUuid());     assertCommonFields(sound); }
https://github.com/openwebnet/openwebnet-android.git,TemperatureModelTest,testTemperatureModelAddBuilder_success,{     com.github.openwebnet.model.TemperatureModel temperature = com.github.openwebnet.model.TemperatureModel.addBuilder().environment(TEMPERATURE_ENVIRONMENT).gateway(TEMPERATURE_GATEWAY).name(TEMPERATURE_NAME).where(TEMPERATURE_WHERE).favourite(TEMPERATURE_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", temperature.getUuid());     assertCommonFields(temperature); }
https://github.com/openwebnet/openwebnet-android.git,TemperatureModelTest,testTemperatureModelUpdateBuilder_success,{     java.lang.String TEMPERATURE_UUID = "myUUid";     com.github.openwebnet.model.TemperatureModel temperature = com.github.openwebnet.model.TemperatureModel.updateBuilder(TEMPERATURE_UUID).environment(TEMPERATURE_ENVIRONMENT).gateway(TEMPERATURE_GATEWAY).name(TEMPERATURE_NAME).where(TEMPERATURE_WHERE).favourite(TEMPERATURE_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", TEMPERATURE_UUID, temperature.getUuid());     assertCommonFields(temperature); }
https://github.com/openwebnet/openwebnet-android.git,UtilityServiceTest,utilityService_getString,{     java.lang.String expected = utilityService.getString(R.string.drawer_menu_example);     org.junit.Assert.assertEquals("invalid string", "Example environment", expected); }
https://github.com/openwebnet/openwebnet-android.git,GatewayEditTextPreferenceTest,testValidHost,{     setupDialog();     android.widget.EditText mEditTextHost = ((android.widget.EditText) (gatewayEditTextPreference.getDialog().findViewById(R.id.editTextDialogGatewayHost)));     org.junit.Assert.assertNotNull("should not be null", mEditTextHost); }
https://github.com/fabienli/DokuwikiAndroid.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.fabienli.dokuwiki", appContext.getPackageName()); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsTextIfOk_returnsResponseBodyOnStatus200,{     java.lang.String result = httpRequestHelper.asTextIfOk(request);     org.junit.Assert.assertThat(result, org.hamcrest.CoreMatchers.is(com.bioid.authenticator.base.network.HttpRequestHelperTest.JSON_AS_STRING)); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsTextIfOk_throwsExceptionOnNon200Status,{     Mockito.when(request.code()).thenReturn(404);     try {         httpRequestHelper.asTextIfOk(request);     } catch (com.bioid.authenticator.base.network.HttpRequestHelper.Non200StatusException e) {         org.junit.Assert.assertThat(e.getStatus(), org.hamcrest.CoreMatchers.is(404));         return;     }     junit.framework.Assert.fail("no Non200StatusException thrown"); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsJsonIfOk_returnsJsonObjectOnStatus200,{     org.json.JSONObject result = httpRequestHelper.asJsonIfOk(request);     org.junit.Assert.assertThat(result, org.hamcrest.CoreMatchers.is(jsonObject)); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsJsonIfOk_throwsExceptionOnNon200Status,{     Mockito.when(request.code()).thenReturn(404);     try {         httpRequestHelper.asJsonIfOk(request);     } catch (com.bioid.authenticator.base.network.HttpRequestHelper.Non200StatusException e) {         org.junit.Assert.assertThat(e.getStatus(), org.hamcrest.CoreMatchers.is(404));         return;     }     junit.framework.Assert.fail("no Non200StatusException thrown"); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,startBiometricOperation_ifTokenRequestFailed_resetBiometricOperation,{     Mockito.doThrow(java.lang.RuntimeException.class).when(tokenProvider).requestEnrollmentToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,startBiometricOperation_ifTokenRequestFailed_warningIsShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("token request failed");     Mockito.doThrow(e).when(tokenProvider).requestEnrollmentToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_counterIsIncremented,{     presenter.setSuccessfulUploads(10);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getSuccessfulUploads(), org.hamcrest.Matchers.is(11)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_resetBiometricOperation,{     presenter.setSuccessfulUploads(7);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_ifEnrollmentWasNotSuccessful_warningWillBeShown,{     presenter.setSuccessfulUploads(7);     java.lang.RuntimeException e = new java.lang.RuntimeException("enrollment not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).enroll(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_ifEnrollmentWasNotSuccessful_failedOperationCounterIsIncremented,{     presenter.setSuccessfulUploads(7);     java.lang.RuntimeException e = new java.lang.RuntimeException("enrollment not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).enroll(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN);     presenter.setFailedOperations(0);     Mockito.when(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN.getMaxTries()).thenReturn(3);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getFailedOperations(), org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_detectFaceIsCalled,{     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.detectFaceCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_ifTokenRequestFailed_resetBiometricOperation,{     Mockito.doThrow(java.lang.RuntimeException.class).when(tokenProvider).requestVerificationToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_ifTokenRequestFailed_warningIsShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("token request failed");     Mockito.doThrow(e).when(tokenProvider).requestVerificationToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onImageWithMotionProcessed_withChallenge_nextPairForChallengeWillSetToNextPair,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.nextPairForChallenge = 1;     presenter.onImageWithMotionProcessed();     org.junit.Assert.assertThat(presenter.nextPairForChallenge, org.hamcrest.Matchers.is(3)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_counterIsIncremented,{     presenter.setSuccessfulUploads(10);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getSuccessfulUploads(), org.hamcrest.Matchers.is(11)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_ifFirstImageOfPairWasUploaded_waitForSecondImageUploadToComplete,{     presenter.setSuccessfulUploads(2);// one pair already uploaded + reference image of second pair      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_verifyWillBeCalled,{     presenter.setSuccessfulUploads(1);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_withChallengeResponse_ifLastImageOfChallengeWasUploaded_verifyWillBeCalled,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.setSuccessfulUploads(3);// mocked challenge: left, right, up      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_withChallengeResponse_ifNotLastImageOfChallengeWasUploaded_verifyNotWillBeCalled,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.setSuccessfulUploads(1);// mocked challenge: left, right, up      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_resetBiometricOperation,{     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_ifVerificationWasNotSuccessful_warningWillBeShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("verification not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).verify(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN);     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_ifVerificationWasNotSuccessful_failedOperationCounterIsIncremented,{     java.lang.RuntimeException e = new java.lang.RuntimeException("verification not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).verify(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN);     presenter.setFailedOperations(0);     Mockito.when(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN.getMaxTries()).thenReturn(3);     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.getFailedOperations(), org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,resetBiometricOperation_doesResetValues,{     presenter.nextPairForChallenge = 42;     presenter.executeReset = true;     presenter.resetBiometricOperation();     org.junit.Assert.assertThat(presenter.nextPairForChallenge, org.hamcrest.Matchers.is(0)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onPause_ifPermissionIsGranted_permissionStateIsResetToUnknown,{     presenter.permissionState = com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED;     presenter.onPause();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.UNKNOWN)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionGranted_permissionStateIsSetToGranted,{     presenter.onCameraPermissionGranted();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionGranted_startBiometricOperationWillBeCalled,{     presenter.onCameraPermissionGranted();     org.junit.Assert.assertThat(presenter.startBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionDenied_permissionStateIsSetToDenied,{     presenter.onCameraPermissionDenied();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_DENIED)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_ifFaceDetectionIsNotOperationalCallNoFaceDetected,{     Mockito.when(faceDetection.isOperational()).thenReturn(false);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.onNoFaceDetectedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_ifFaceDetectionIsNotOperationalNoTimeoutWillBeStarted,{     Mockito.when(faceDetection.isOperational()).thenReturn(false);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.taskIdFaceTimeout, org.hamcrest.Matchers.is(org.hamcrest.core.IsNot.not(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID))); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_stateIsSetToWaitingForImageWithFace,{     Mockito.when(faceDetection.isOperational()).thenReturn(true);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_FACE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForReferenceImage_taskIdForFaceTimeoutWillBeSet,{     Mockito.when(faceDetection.isOperational()).thenReturn(true);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.taskIdFaceTimeout, org.hamcrest.Matchers.is(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,captureImagePair_nowWaitingForReferenceImage,{     presenter.captureImagePair(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.INDEX, com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.CURRENT_DIRECTION, com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.DESTINATION_DIRECTION);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_REFERENCE_IMAGE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithFace_onFaceDetectedWillBeCalled,{     Mockito.when(faceDetection.containsFace(img)).thenReturn(true);     mockStateWaitingForImageWithFace();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.onFaceDetectedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifNoFaceWasDetected_stateIsResetToWaitingForImageWithFace,{     Mockito.when(faceDetection.containsFace(img)).thenReturn(false);     mockStateWaitingForImageWithFace();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_FACE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForReferenceImage_stateIsSetToWaitingForImageWithMotion,{     mockStateWaitingForReferenceImage();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_MOTION)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithMotion_stateIsSetToOther,{     mockStateWaitingForImageWithMotion();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.OTHER)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithMotion_onImageWithMotionProcessedWasCalled,{     mockStateWaitingForImageWithMotion();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.onImageWithMotionProcessedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifImageUploadFailed_failedUploadCounterDoesIncrement,{     presenter.failedUploads = 0;     mockStateWaitingForReferenceImage();     Mockito.doThrow(new com.bioid.authenticator.base.network.bioid.webservice.NotRecognizedException()).when(bioIdWebserviceClient).uploadImage(ArgumentMatchers.any(com.bioid.authenticator.base.image.Yuv420Image.class), ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.token.BwsToken.class), ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.MovementDirection.class), ArgumentMatchers.anyInt());     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.failedUploads, org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,setupMotionTimeout_taskIdForMotionTimeoutWillBeSet,{     presenter.disableMotionTimeout = false;     backgroundHandler.doNothingOnRunWithDelay();     presenter.setupMotionTimeout();     org.junit.Assert.assertThat(presenter.taskIdMotionTimeout, org.hamcrest.Matchers.is(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onUploadFailed_ifThreeOrLessUploadsDidFailAndTheReferenceImageUploadWasSuccessful_decreaseTheCounter,{     presenter.failedOperations = 1;     presenter.successfulUploads = 3;     presenter.onUploadFailed(new com.bioid.authenticator.base.network.bioid.webservice.NotRecognizedException());     org.junit.Assert.assertThat(presenter.successfulUploads, org.hamcrest.Matchers.is(2)); }
https://github.com/Q115/Goalie_Android.git,FriendActivityInstrumentedTest,addContact,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_add_friends)).perform(androidx.test.espresso.action.ViewActions.click());     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).perform(androidx.test.espresso.action.ViewActions.clearText(), androidx.test.espresso.action.ViewActions.typeText("tes"));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withText(mActivityRule.getActivity().getString(R.string.add))).perform(androidx.test.espresso.action.ViewActions.click());     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_friend_status)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withText(mActivityRule.getActivity().getString(R.string.cancel))).perform(androidx.test.espresso.action.ViewActions.click());     // expecting to fail as view doesn't exist     try {         androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     } catch (androidx.test.espresso.NoMatchingViewException e) {         return;     }     org.junit.Assert.assertTrue(false); }
https://github.com/Q115/Goalie_Android.git,MainActivityInstrumentedTest,menuClickProfileGoesToProfile,{     android.app.Instrumentation.ActivityMonitor activityMonitor = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().addMonitor(com.github.q115.goalie_android.ui.profile.ProfileActivity.class.getName(), null, false);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_profile)).perform(androidx.test.espresso.action.ViewActions.click());     com.github.q115.goalie_android.ui.profile.ProfileActivity targetActivity = ((com.github.q115.goalie_android.ui.profile.ProfileActivity) (activityMonitor.waitForActivity()));     org.junit.Assert.assertNotNull("Target Activity is not launched", targetActivity); }
https://github.com/Q115/Goalie_Android.git,MainActivityInstrumentedTest,menuClickFriendsGoesToFriends,{     android.app.Instrumentation.ActivityMonitor activityMonitor = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().addMonitor(com.github.q115.goalie_android.ui.friends.FriendsActivity.class.getName(), null, false);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_friends)).perform(androidx.test.espresso.action.ViewActions.click());     com.github.q115.goalie_android.ui.friends.FriendsActivity targetActivity = ((com.github.q115.goalie_android.ui.friends.FriendsActivity) (activityMonitor.waitForActivity()));     org.junit.Assert.assertNotNull("Target Activity is not launched", targetActivity); }
https://github.com/Q115/Goalie_Android.git,ImageHelperInstrumentedTest,initalization,{     org.junit.Assert.assertNotNull(com.github.q115.goalie_android.utils.ImageHelper.getInstance().getImagePrivateStorageDirectory("")); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setPushID,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setPushID("new pushID");     org.junit.Assert.assertEquals("new pushID", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getPushID()); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setAccountUsername,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setAccountUsername("new AccountUsername");     org.junit.Assert.assertEquals("new AccountUsername", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getAccountUsername()); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setLastSyncedTimeEpoch,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setLastSyncedTimeEpoch(22);     org.junit.Assert.assertEquals(22, com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getLastSyncedTimeEpoch()); }
https://github.com/Q115/Goalie_Android.git,GoalFeedTest,initConstructor,{     com.github.q115.goalie_android.models.GoalFeed goal = new com.github.q115.goalie_android.models.GoalFeed("guid", 50, "createdUsername", 2, com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success);     com.github.q115.goalie_android.models.GoalFeed goalTest = new com.github.q115.goalie_android.models.GoalFeed();     goalTest.guid = "guid";     goalTest.createdUsername = "createdUsername";     goalTest.upvoteCount = 2;     goalTest.wager = 50;     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalFeedEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,GoalTest,initConstructor1,{     com.github.q115.goalie_android.models.Goal goal = new com.github.q115.goalie_android.models.Goal("guid", "createdByUsername", "title", 111, 999, 100, "encouragement", com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success, "referee", java.lang.System.currentTimeMillis());     com.github.q115.goalie_android.models.Goal goalTest = new com.github.q115.goalie_android.models.Goal();     goalTest.guid = "guid";     goalTest.createdByUsername = "createdByUsername";     goalTest.title = "title";     goalTest.startDate = 111;     goalTest.endDate = 999;     goalTest.wager = 100;     goalTest.referee = "referee";     goalTest.encouragement = "encouragement";     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,GoalTest,initConstructor2,{     com.github.q115.goalie_android.models.Goal goal = new com.github.q115.goalie_android.models.Goal("newguid", com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Failed);     com.github.q115.goalie_android.models.Goal goalTest = new com.github.q115.goalie_android.models.Goal();     goalTest.guid = "newguid";     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Failed;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,UserTest,initConstructor2,{     com.github.q115.goalie_android.models.User user = new com.github.q115.goalie_android.models.User("username2", 200);     com.github.q115.goalie_android.models.User userTest = new com.github.q115.goalie_android.models.User();     userTest.username = "username2";     userTest.reputation = 200;     org.junit.Assert.assertTrue(test_util.ModelUtil.isUserEqual(user, userTest)); }
https://github.com/Q115/Goalie_Android.git,UserTest,initConstructor3,{     com.github.q115.goalie_android.models.User user = new com.github.q115.goalie_android.models.User("username3", "bio", 300, 999);     com.github.q115.goalie_android.models.User userTest = new com.github.q115.goalie_android.models.User();     userTest.username = "username3";     userTest.reputation = 300;     userTest.bio = "bio";     userTest.lastPhotoModifiedTime = 999;     org.junit.Assert.assertTrue(test_util.ModelUtil.isUserEqual(user, userTest)); }
https://github.com/Q115/Goalie_Android.git,NewGoalPresenterUnitTest,getOptions,{     org.junit.Assert.assertNotNull(mPresenter.getSublimePickerOptions(0)); }
https://github.com/OpenStack-mobile/summit-app-android.git,DeserializerTest,memberOverwritingTest,{     final java.lang.String json = "{\"id\":13867,\"first_name\":\"Sebastian\",\"last_name\":\"Marcet\",\"gender\":\"Male\",\"bio\":null,\"linked_in\":\"http:\\/\\/www.linkedin.com\\/in\\/smarcet\",\"irc\":null,\"twitter\":null,\"pic\":\"https:\\/\\/devbranch.openstack.org\\/profile_images\\/members\\/13867\",\"attendee\":{\"id\":5720,\"summit_hall_checked_in\":false,\"summit_hall_checked_in_date\":null,\"shared_contact_info\":false,\"member_id\":13867,\"schedule\":[],\"tickets\":[]},\"feedback\":[{\"id\":147,\"rate\":5,\"note\":\"\\\"great presentation! test feedback.  \\\\n\\\"\",\"created_date\":1472161995,\"event_id\":1,\"member_id\":13867,\"attendee_id\":5720}]}";     try {         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer summitAttendeeDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer personDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer feedbackDeserializer = new org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer presentationSpeakerDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(personDeserializer);                 org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer summitEventDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer(new org.openstack.android.summit.common.data_access.deserialization.GenericDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.PresentationLinkDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationVideoDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationSlideDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.SummitGroupEventDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.SummitEventWithFileDeserializer());                 org.openstack.android.summit.common.data_access.deserialization.IMemberDeserializer memberDeserializer = new org.openstack.android.summit.common.data_access.deserialization.MemberDeserializer(personDeserializer, presentationSpeakerDeserializer, summitAttendeeDeserializer, feedbackDeserializer, summitEventDeserializer);                 org.openstack.android.summit.common.entities.Member member = memberDeserializer.deserialize(json);                 member = session.copyToRealmOrUpdate(member);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer summitAttendeeDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer personDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer feedbackDeserializer = new org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer presentationSpeakerDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(personDeserializer);                 org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer summitEventDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer(new org.openstack.android.summit.common.data_access.deserialization.GenericDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.PresentationLinkDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationVideoDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationSlideDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.SummitGroupEventDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.SummitEventWithFileDeserializer());                 org.openstack.android.summit.common.data_access.deserialization.IMemberDeserializer memberDeserializer = new org.openstack.android.summit.common.data_access.deserialization.MemberDeserializer(personDeserializer, presentationSpeakerDeserializer, summitAttendeeDeserializer, feedbackDeserializer, summitEventDeserializer);                 org.openstack.android.summit.common.entities.Member member = memberDeserializer.deserialize(json);                 member = session.copyToRealmOrUpdate(member);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });     } catch (java.lang.Exception ex) {     }     org.openstack.android.summit.common.entities.Member member = org.openstack.android.summit.common.utils.RealmFactory.getSession().where(org.openstack.android.summit.common.entities.Member.class).equalTo("id", 13867).findFirst();     org.junit.Assert.assertTrue(member.getFeedback().size() > 0); }
https://github.com/OpenStack-mobile/summit-app-android.git,ModelTest,memberOverwritingTest,{     try {         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Summit summit = new org.openstack.android.summit.common.entities.Summit();                 summit.setId(1);                 summit.setName("test summit");                 summit = session.copyToRealmOrUpdate(summit);                 org.openstack.android.summit.common.entities.SummitEvent event = new org.openstack.android.summit.common.entities.SummitEvent();                 event.setId(1);                 event.setName("test event");                 event.setSummit(summit);                 event = session.copyToRealmOrUpdate(event);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Member member = new org.openstack.android.summit.common.entities.Member();                 member.setId(1);                 member.setFirstName("Sebastian");                 member.setLastName("Marcet");                 member = session.copyToRealmOrUpdate(member);                 org.openstack.android.summit.common.entities.SummitEvent event = session.where(org.openstack.android.summit.common.entities.SummitEvent.class).equalTo("id", 1).findFirst();                 org.openstack.android.summit.common.entities.Feedback feedback1 = new org.openstack.android.summit.common.entities.Feedback();                 feedback1.setId(1);                 feedback1.setRate(1);                 feedback1.setReview("test");                 feedback1.setOwner(member);                 feedback1.setEvent(event);                 feedback1 = session.copyToRealmOrUpdate(feedback1);                 member.getFeedback().add(feedback1);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Member member = new org.openstack.android.summit.common.entities.Member();                 member.setId(1);                 member.setFirstName("Sebastian");                 member.setLastName("Marcet");                 member = session.copyToRealmOrUpdate(member);                 org.openstack.android.summit.common.entities.SummitEvent event = session.where(org.openstack.android.summit.common.entities.SummitEvent.class).equalTo("id", 1).findFirst();                 org.openstack.android.summit.common.entities.Feedback feedback1 = new org.openstack.android.summit.common.entities.Feedback();                 feedback1.setId(1);                 feedback1.setRate(1);                 feedback1.setReview("test");                 feedback1.setOwner(member);                 feedback1.setEvent(event);                 feedback1 = session.copyToRealmOrUpdate(feedback1);                 member.getFeedback().add(feedback1);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });     } catch (java.lang.Exception ex) {     }     org.openstack.android.summit.common.entities.Member member = org.openstack.android.summit.common.utils.RealmFactory.getSession().where(org.openstack.android.summit.common.entities.Member.class).equalTo("id", 1).findFirst();     org.junit.Assert.assertTrue(member.getFeedback().size() > 0); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_Presentation_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "Presentation";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitEventType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitEventType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.EventType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_PresentationSpeaker_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "PresentationSpeaker";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.PresentationSpeaker.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitTicketType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitTicketType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.TicketType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitVenue_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitVenue";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.Venue.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitVenueRoom_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitVenueRoom";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.VenueRoom.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_PresentationCategory_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "PresentationCategory";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.Track.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_MySchedule_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "MySchedule";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_stringValue_popReturnsCorrectInstance,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     java.lang.String value = "test_value";     // Act     navigationParametersStore.put(key, value);     java.lang.String valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     // Assert     org.junit.Assert.assertEquals(value, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_NamedDTOInstance_popReturnsCorrectInstance,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     org.openstack.android.summit.common.DTOs.NamedDTO value = new org.openstack.android.summit.common.DTOs.NamedDTO();     // Act     navigationParametersStore.put(key, value);     org.openstack.android.summit.common.DTOs.NamedDTO valueFromStore = navigationParametersStore.pop(key, org.openstack.android.summit.common.DTOs.NamedDTO.class);     // Assert     org.junit.Assert.assertEquals(value, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_NamedDTOInstanceAnThenOverrideWithAnotherValue_popReturnsInstancePutOnSecondCall,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     org.openstack.android.summit.common.DTOs.NamedDTO value1 = new org.openstack.android.summit.common.DTOs.NamedDTO();     org.openstack.android.summit.common.DTOs.NamedDTO value2 = new org.openstack.android.summit.common.DTOs.NamedDTO();     // Act     navigationParametersStore.put(key, value1);     navigationParametersStore.put(key, value2);     org.openstack.android.summit.common.DTOs.NamedDTO valueFromStore = navigationParametersStore.pop(key, org.openstack.android.summit.common.DTOs.NamedDTO.class);     // Assert     org.junit.Assert.assertEquals(value2, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,get_stringValue_keyIsRemovedFromStoreAfterPop,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     java.lang.String value = "test_value";     // Act     navigationParametersStore.put(key, value);     java.lang.String valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     // Assert     org.junit.Assert.assertNull(valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,UtilTest,htmlParserTest,{     java.lang.String input = "<p><span>Project Onboarding gives attendees a chance to meet some of the project team and get to know the project. Attendees will learn about the project itself, the code structure/ overall architecture, etc, and places where contribution is needed. Attendees will also get to know some of the core contributors and other established community members. Ideally, attendees will know/ have completed the basics of contribution (i.e. irc, gerrit, Launchpad, StoryBoard, Foundation Membership) BEFORE attending the session. All of this can be done through our Contributor Guide[1]. [1] https://docs.openstack.org/contributors/code-and-documentation/index.html</span></p>";     java.lang.String desiredOutput = "<p><span>Project Onboarding gives attendees a chance to meet some of the project team and get to know the project. Attendees will learn about the project itself, the code structure/ overall architecture, etc, and places where contribution is needed. Attendees will also get to know some of the core contributors and other established community members. Ideally, attendees will know/ have completed the basics of contribution (i.e. irc, gerrit, Launchpad, StoryBoard, Foundation Membership) BEFORE attending the session. All of this can be done through our Contributor Guide[1]. [1] <a href=\"https://docs.openstack.org/contributors/code-and-documentation/index.html\">https://docs.openstack.org/contributors/code-and-documentation/index.html</a></span></p>";     java.lang.String output = org.openstack.android.summit.common.utils.HtmlTextParser.convertLinksToAnchorTags(input);     org.junit.Assert.assertTrue(desiredOutput.contentEquals(output)); }
