https://github.com/onaio/steps-app.git,EditHouseholdActivityTest,ShouldFinishTheActivityOnCancel,{     editHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(editHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditMemberActivityTest,ShouldFinishTheActivityOnCancel,{     editMemberActivity.cancel(null);     org.junit.Assert.assertTrue(editMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityTest,ShouldFinishTheActivityOnCancel,{     editParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(editParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.main_activity_actions, householdListActivityMock.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getMenuHandlers();     org.junit.Assert.assertEquals(6, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> resultHandlers = householdListActivityMock.getResultHandlers();     org.junit.Assert.assertEquals(2, resultHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperMenuPreparer,{     android.view.Menu mock = org.mockito.Mockito.mock(android.view.Menu.class);     java.util.List<com.onaio.steps.handler.interfaces.IMenuPreparer> menuHandlers = householdListActivityMock.getMenuPreparer(mock);     org.junit.Assert.assertEquals(1, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityTest,ShouldGetProperCustomMenuHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IMenuHandler> menuHandlers = householdListActivityMock.getCustomMenuHandler();     org.junit.Assert.assertEquals(2, menuHandlers.size()); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityTest,ShouldFinishActivityOnCancel,{     newHouseholdActivity.cancel(null);     org.junit.Assert.assertTrue(newHouseholdActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewMemberActivityTest,ShouldFinishActivityWhenCanceled,{     newMemberActivity.cancel(null);     org.junit.Assert.assertTrue(newMemberActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityTest,ShouldFinishActivityWhenCanceled,{     newParticipantActivity.cancel(null);     org.junit.Assert.assertTrue(newParticipantActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,ParticipantListActivityTest,ShouldGetMenuViewLayout,{     org.junit.Assert.assertEquals(R.menu.participant_list_actions, participantListActivity.getMenuViewLayout()); }
https://github.com/onaio/steps-app.git,SettingsActivityTest,ShouldFinishActivityOnCancel,{     settingsActivity.cancel(null);     org.junit.Assert.assertTrue(settingsActivity.isFinishing()); }
https://github.com/onaio/steps-app.git,WelcomeActivityTest,ShouldBeAbleToLoadWelcomeLayout,{     org.junit.Assert.assertEquals(R.id.welcome_layout, Shadows.shadowOf(welcomeActivity).getContentView().getId()); }
https://github.com/onaio/steps-app.git,StepsFileDecoratorTest,testGetFormTitleShouldReturnValidFormTitle,{     org.junit.Assert.assertEquals("A", stepsFileDecorator.getFormTitle()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testDialogShouldNotNull,{     org.junit.Assert.assertNotNull(org.robolectric.shadows.ShadowDialog.getLatestDialog()); }
https://github.com/onaio/steps-app.git,HouseholdUploadResultDialogTest,testVerifyUploadResultSequence,{     android.app.Dialog dialog = org.robolectric.shadows.ShadowDialog.getLatestDialog();     androidx.recyclerview.widget.RecyclerView recyclerView = dialog.findViewById(R.id.rv_upload_results);     com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter adapter = ((com.onaio.steps.dialogs.HouseholdUploadResultDialog.UploadResultAdapter) (recyclerView.getAdapter()));     java.util.List<com.onaio.steps.model.UploadResult> uploadResults = adapter.getUploadResults();     org.junit.Assert.assertEquals(6, uploadResults.size());     verifySortedList(uploadResults.get(0), true);     verifySortedList(uploadResults.get(1), true);     verifySortedList(uploadResults.get(2), true);     verifySortedList(uploadResults.get(3), false);     verifySortedList(uploadResults.get(4), false);     verifySortedList(uploadResults.get(5), false); }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testExtractDataPutAllDataInIntent,{     java.lang.String[] row = new java.lang.String[]{ "1-2-1", "Rav", "Ron", "1", "32", "1", "50" };     android.content.Intent resultIntent = new android.content.Intent();     java.util.List<java.lang.String[]> data = new java.util.ArrayList<>();     data.add(row);     dataProviderActivity.extractData(data, resultIntent);     for (com.onaio.steps.external.DataKeys dataKey : com.onaio.steps.external.DataKeys.values()) {         org.junit.Assert.assertEquals(row[dataKey.getIndex()], resultIntent.getStringExtra(dataKey.getKey()));     } }
https://github.com/onaio/steps-app.git,DataProviderActivityTest,testReturnedIntentShouldReturnNonNullIntent,{     org.junit.Assert.assertNotNull(dataProviderActivity.returnedIntent()); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanBeStartedWhenProperIdMatches,{     org.junit.Assert.assertTrue(backHomeHandler.shouldOpen(android.R.id.home)); }
https://github.com/onaio/steps-app.git,BackHomeHandlerTest,ShouldCheckWhetherActivityCanNotBeStartedForOtherId,{     org.junit.Assert.assertFalse(backHomeHandler.shouldOpen(android.R.id.background)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(selectionHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectionHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.CANCEL_SELECTION);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,CancelParticipantSelectionHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectionHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deferredHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deferredHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeferredHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferredHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(deleteMemberHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(deleteMemberHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenMemberIsSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldNotInactivateWhenMemberIsNotSelectedMember,{     Mockito.when(memberMock.getId()).thenReturn(2);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "1", com.onaio.steps.model.InterviewStatus.DEFERRED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertFalse(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,DeleteMemberHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(deleteMemberHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityOpensWhenProperIdMatches,{     org.junit.Assert.assertTrue(exportHandler.shouldOpen(R.id.action_export)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,ShouldCheckActivityShouldNotOpenForOtherId,{     org.junit.Assert.assertFalse(exportHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testSavedFileValues,{     java.lang.String hhName = "testHhName";     java.lang.String phoneNumber = "00000000";     com.onaio.steps.model.InterviewStatus interviewStatus = com.onaio.steps.model.InterviewStatus.NOT_DONE;     java.lang.String createdAt = new java.text.SimpleDateFormat(com.onaio.steps.helper.Constants.DATE_FORMAT, java.util.Locale.ENGLISH).format(new java.util.Date());     java.lang.String comment = "testComment";     java.lang.String deviceIMEI = "123456";     java.lang.String odkJrFormId = "Test_Form";     java.lang.String odkJrFormTitle = "Test Form";     com.onaio.steps.model.Household householdMock = org.mockito.Mockito.mock(com.onaio.steps.model.Household.class);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(interviewStatus);     org.mockito.Mockito.when(householdMock.getName()).thenReturn(hhName);     org.mockito.Mockito.when(householdMock.getPhoneNumber()).thenReturn(phoneNumber);     org.mockito.Mockito.when(householdMock.getCreatedAt()).thenReturn(createdAt);     org.mockito.Mockito.when(householdMock.getComments()).thenReturn(comment);     org.mockito.Mockito.when(householdMock.getOdkJrFormId()).thenReturn(odkJrFormId);     org.mockito.Mockito.when(householdMock.getOdkJrFormTitle()).thenReturn(odkJrFormTitle);     int id = 2;     java.lang.String surname = "testSurname";     java.lang.String firstName = "testFirstName";     com.onaio.steps.model.Gender gender = com.onaio.steps.model.Gender.Female;     int age = 30;     java.lang.String memberId = "testMemberId";     com.onaio.steps.model.Member selectedMember = new com.onaio.steps.model.Member(id, surname, firstName, gender, age, householdMock, memberId, false);     org.mockito.Mockito.when(householdMock.getSelectedMember(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(selectedMember);     android.content.Intent intent = new android.content.Intent();     intent.putExtra(com.onaio.steps.helper.Constants.HH_HOUSEHOLD, householdMock);     android.telephony.TelephonyManager telephonyManager = org.mockito.Mockito.mock(android.telephony.TelephonyManager.class);     org.mockito.Mockito.when(telephonyManager.getDeviceId()).thenReturn(deviceIMEI);     org.mockito.Mockito.when(householdActivityMock.getSystemService(android.content.Context.TELEPHONY_SERVICE)).thenReturn(telephonyManager);     org.mockito.Mockito.when(householdActivityMock.getApplicationContext()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext());     org.mockito.Mockito.when(householdActivityMock.getFilesDir()).thenReturn(androidx.test.core.app.ApplicationProvider.getApplicationContext().getFilesDir());     householdMock.save(db);     selectedMember.save(db);     com.onaio.steps.handler.actions.ExportHandler exportHandler = org.mockito.Mockito.spy(new com.onaio.steps.handler.actions.ExportHandler(householdActivityMock));     org.mockito.Mockito.when(exportHandler.getReElectReasons(org.mockito.Mockito.any(com.onaio.steps.model.Household.class))).thenReturn(new java.util.ArrayList<>());     org.mockito.Mockito.when(exportHandler.getDatabaseHelper()).thenReturn(db);     org.mockito.Mockito.when(exportHandler.getDeviceId()).thenReturn("testdevice");     java.util.List<com.onaio.steps.model.Household> householdList = new java.util.ArrayList<>();     householdList.add(householdMock);     java.util.Queue<com.onaio.steps.decorators.FileDecorator> exportedFiles = exportHandler.with(householdList).saveFiles();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(exportedFiles.remove().getFile().getAbsolutePath());     java.lang.String[] expectedValues = new java.lang.String[]{ phoneNumber, hhName, comment, hhName + "-0", null, null, null, null, null, null, "0", null, null, null, "0", deviceIMEI, createdAt, "0" };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < expectedValues.length; i++) {             if (expectedValues[i] != null) {                 org.junit.Assert.assertEquals(expectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDatabaseHelperShouldReturnNonNull,{     org.junit.Assert.assertNotNull(exportHandler.getDatabaseHelper()); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testReplaceCommasShouldReturnFilterString,{     java.lang.String result = org.robolectric.util.ReflectionHelpers.callInstanceMethod(exportHandler, "replaceCommas", org.robolectric.util.ReflectionHelpers.ClassParameter.from(java.lang.String.class, "\"john,123\""));     org.junit.Assert.assertEquals("john;123", result); }
https://github.com/onaio/steps-app.git,ExportHandlerTest,testGetDeviceIdShouldReturnNonNullDeviceId,{     com.onaio.steps.helper.KeyValueStore keyValueStore = org.mockito.Mockito.mock(com.onaio.steps.helper.KeyValueStore.class);     org.mockito.MockedStatic<com.onaio.steps.helper.KeyValueStoreFactory> keyValueStoreFactoryMockedStatic = org.mockito.Mockito.mockStatic(com.onaio.steps.helper.KeyValueStoreFactory.class);     keyValueStoreFactoryMockedStatic.when(() -> com.onaio.steps.helper.KeyValueStoreFactory.instance(org.mockito.Mockito.any())).thenReturn(keyValueStore);     org.mockito.Mockito.when(keyValueStore.getString(org.mockito.Mockito.eq(com.onaio.steps.helper.Constants.HH_PHONE_ID))).thenReturn("123");     org.junit.Assert.assertEquals("123", exportHandler.getDeviceId());     keyValueStoreFactoryMockedStatic.close(); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(finalisedFormHandler.shouldOpen(R.id.action_saved_form)); }
https://github.com/onaio/steps-app.git,FinalisedFormHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(finalisedFormHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldBeOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(importHandler.shouldOpen(R.id.action_import)); }
https://github.com/onaio/steps-app.git,ImportHandlerTest,ShouldNotBeOpenWhenMenuIdDiffers,{     org.junit.Assert.assertFalse(importHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(notReachableHandler.shouldOpen(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(notReachableHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldInactivateWhenSurveyNotReachable,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_REACHABLE);     org.junit.Assert.assertTrue(notReachableHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NotReachableHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,NotReachableOnEmptyHouseholdHandlerTest,ShouldReturnExpectedViewId,{     org.junit.Assert.assertEquals(com.onaio.steps.handler.actions.NotReachableOnEmptyHouseholdHandlerTest.MENU_ID, notReachableHandler.getViewId()); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(pickImageHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(pickImageHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,PickImageHandlerTest,shouldNotOpenWhenExportActionIsChosen,{     org.junit.Assert.assertFalse(pickImageHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,canHandleResult,{     org.junit.Assert.assertTrue(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.QR_CODE_SCAN.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,cannotHandleResultForPickImageRequestCode,{     org.junit.Assert.assertFalse(qrCodeScanHandler.canHandleResult(com.onaio.steps.model.RequestCode.PICK_IMAGE.getCode())); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(qrCodeScanHandler.shouldOpen(R.id.scanCodeBtn)); }
https://github.com/onaio/steps-app.git,QRCodeScanHandlerTest,shouldNotOpenWhenPickImageActionIsChosen,{     org.junit.Assert.assertFalse(qrCodeScanHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(refusedHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(refusedHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,RefusedHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(refusedHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     int MENU_ID = R.id.action_select_participant;     org.junit.Assert.assertTrue(selectParticipantHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(selectParticipantHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenThereAreNoMembers,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(0);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsDeferred,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsRefused,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldInActivateWhenHouseholdStatusIsNotDone,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectParticipantHandlerTest,ShouldActivateWhenHouseholdStatusIsNotSelected,{     org.mockito.Mockito.when(householdMock.numberOfNonSelectedMembers(org.mockito.Mockito.any(com.onaio.steps.helper.DatabaseHelper.class))).thenReturn(1);     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(selectParticipantHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldNotInactivateWhenSurveyDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldActivateWhenSurveyIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantActionsHandlerTest,ShouldInactivateWhenSurveyRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantActionsHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(shareHandler.shouldOpen(R.id.menu_item_settings_share)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldNotOpen,{     org.junit.Assert.assertFalse(shareHandler.shouldOpen(R.id.importCodeImageBtn)); }
https://github.com/onaio/steps-app.git,ShareHandlerTest,shouldDeactivate,{     org.junit.Assert.assertTrue(shareHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldOpenActivityForProperMenuId,{     org.junit.Assert.assertTrue(takeSurveyHandler.shouldOpen(R.id.action_take_survey)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(takeSurveyHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyDone,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotInactivateWhenSurveyDeferred,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldInactivateWhenSurveyRefused,{     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(takeSurveyHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.SURVEY.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(takeSurveyHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,TakeSurveyHandlerTest,testGetSavedFormsShouldReturnNullWhenExceptionOccur,{     com.onaio.steps.utils.Faker.mockQueryInActivityToFindOdkSavedForm(householdActivitySpy);     android.content.Intent intent = Mockito.mock(android.content.Intent.class);     android.net.Uri uri = Mockito.mock(android.net.Uri.class);     Mockito.when(intent.getData()).thenReturn(uri);     Mockito.when(uri.getLastPathSegment()).thenReturn("");     android.content.ContentResolver contentResolver = householdActivitySpy.getContentResolver();     Mockito.when(contentResolver.acquireContentProviderClient(ArgumentMatchers.any(android.net.Uri.class))).thenReturn(null);     org.junit.Assert.assertNull(takeSurveyHandler.getSavedForms(intent)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToOpenWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.shouldOpen(MENU_ID)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToOpenForDifferentMenuId,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.shouldOpen(R.id.action_refused)); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForEditHouseholdIdentifier,{     org.junit.Assert.assertTrue(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherIdentifier,{     org.junit.Assert.assertFalse(editHouseholdActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.DONE, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     Mockito.when(memberMock.getId()).thenReturn(1);     Mockito.when(memberMock.getHousehold()).thenReturn(new com.onaio.steps.model.Household("12", "name", "321", "", com.onaio.steps.model.InterviewStatus.REFUSED, "12-12-2001", "uniqueDevId", "Dummy comments", null));     org.junit.Assert.assertTrue(editMemberActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldBeAbleToOpenEditParticipantActivityWhenMenuIdMatches,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.shouldOpen(R.id.action_edit)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotBeAbleToOpenEditParticipantActivityForOtherMenuId,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForProperRequestCodeCanBeHandled,{     org.junit.Assert.assertTrue(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldCheckWhetherResultForOtherRequestCodeCanNotBeHandled,{     org.junit.Assert.assertFalse(editParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsDone,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsRefused,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldInactivateWhenParticipantSurveyIsIncomplete,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,EditParticipantActivityHandlerTest,ShouldNotInactivateWhenParticipantIsSelected,{     android.view.Menu menuMock = org.mockito.Mockito.mock(android.view.Menu.class);     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertFalse(editParticipantActivityHandler.withMenu(menuMock).shouldDeactivate()); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,shouldOpen,{     org.junit.Assert.assertTrue(importExportActivityHandler.shouldOpen(R.id.exportSettings)); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,handleResultShouldNotShowToastWhenResultCancelled,{     importExportActivityHandler.handleResult(null, android.app.Activity.RESULT_CANCELED);     android.widget.Toast latestToast = org.robolectric.shadows.ShadowToast.getLatestToast();     org.junit.Assert.assertNull(latestToast); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,canHandleResultForExportImportSettingsPageRequestCode,{     org.junit.Assert.assertTrue(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.IMPORT_EXPORT_SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,ImportExportActivityHandlerTest,cannotHandleResultForOtherRequestCodes,{     org.junit.Assert.assertFalse(importExportActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldOpenWhenProperMenuItemIsClicked,{     org.junit.Assert.assertTrue(handler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotOpenWhenOtherMenuItemIsClicked,{     org.junit.Assert.assertFalse(handler.shouldOpen(R.id.action_settings)); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldBeAbleToHandleResultForNewHouseholdRequestCode,{     org.junit.Assert.assertTrue(handler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewHouseholdActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(handler.canHandleResult(com.onaio.steps.model.RequestCode.EDIT_HOUSEHOLD.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassedAndWhenSurveyIsNotRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotOpenForOtherMenuIdAndForRefusedState,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertFalse(newMemberActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldBeAbleToHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldNotBeAbleToHandleResultForOtherRequestCode,{     org.junit.Assert.assertTrue(newMemberActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdIsSurveyed,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenHouseholdSurveyIsIncomplete,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewMemberActivityHandlerTest,ShouldInactivateWhenSurveyIsRefused,{     Mockito.when(householdMock.getSelectedMemberId()).thenReturn("");     Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(newMemberActivityHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldOpenActivityWhenProperMenuIdIsPassed,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.shouldOpen(R.id.action_add_new_item)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotOpenForOtherMenuId,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.shouldOpen(R.id.action_add_member)); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldBeAbleToHandleRequestForProperRequestCode,{     org.junit.Assert.assertTrue(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_PARTICIPANT.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldNotHandleRequestForImproperRequestCode,{     org.junit.Assert.assertFalse(newParticipantActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,NewParticipantActivityHandlerTest,ShouldStartNewParticipantActivity,{     newParticipantActivityHandler.open();     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(participantListActivity);     android.content.Intent nextStartedActivity = shadowActivity.getNextStartedActivity();     org.junit.Assert.assertEquals(com.onaio.steps.activities.NewParticipantActivity.class.getName(), nextStartedActivity.getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldCheckSettingsActivityShouldNotStartedForOtherId,{     org.junit.Assert.assertFalse(settingActivityHandler.shouldOpen(R.id.action_deferred)); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldHandleResultForProperRequestCode,{     org.junit.Assert.assertTrue(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.SETTINGS.getCode())); }
https://github.com/onaio/steps-app.git,SettingActivityHandlerTest,ShouldNotHandleResultForOtherRequestCode,{     org.junit.Assert.assertFalse(settingActivityHandler.canHandleResult(com.onaio.steps.model.RequestCode.NEW_MEMBER.getCode())); }
https://github.com/onaio/steps-app.git,HouseholdActivityFactoryTest,ShouldHaveMemberActivityHandlerAsMemberItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler itemHandler = com.onaio.steps.handler.factories.HouseholdActivityFactory.getMemberItemHandler(activity, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.MemberActivityHandler.class, itemHandler.getClass()); }
https://github.com/onaio/steps-app.git,HouseholdListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.HouseholdListActivityFactory.getHouseholdItemHandler(householdListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.HouseholdActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,MemberActivityFactoryTest,ShouldGetProperMenuResultHandlers,{     java.util.List<com.onaio.steps.handler.interfaces.IActivityResultHandler> menuHandlers = com.onaio.steps.handler.factories.MemberActivityFactory.getMenuResultHandlers(memberActivity, member);     java.util.ArrayList<java.lang.Class> handlerTypes = getTypes(menuHandlers);     junit.framework.TestCase.assertEquals(1, menuHandlers.size());     org.junit.Assert.assertTrue(handlerTypes.contains(com.onaio.steps.handler.activities.EditMemberActivityHandler.class)); }
https://github.com/onaio/steps-app.git,ParticipantListActivityFactoryTest,ShouldHaveProperHouseholdItemHandler,{     com.onaio.steps.handler.interfaces.IListItemHandler handler = com.onaio.steps.handler.factories.ParticipantListActivityFactory.getParticipantItemHandler(participantListActivityMock, null);     org.junit.Assert.assertEquals(com.onaio.steps.handler.activities.ParticipantActivityHandler.class, handler.getClass()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,DeferSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(deferSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForEmptyHouseholdStrategyTest,ShouldInactivateWhenHouseholdIsNotEmpty,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.EMPTY_HOUSEHOLD);     org.junit.Assert.assertFalse(notReachableSurveyForEmptyHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,NotReachableSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(notReachableSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldNotInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,RefuseSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(mock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(refuseSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(household.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForHouseholdStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForHouseholdStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(household.getName()).thenReturn("123-100");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100", takeSurveyForHouseholdStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldNotInactivateWhenMemberIsSelected,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDone,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DONE);     org.junit.Assert.assertTrue(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldInactivateWhenSurveyIsIncomplete,{     org.mockito.Mockito.when(participant.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(takeSurveyForParticipantStrategy.shouldInactivate()); }
https://github.com/onaio/steps-app.git,TakeSurveyForParticipantStrategyTest,ShouldGetNameFormat,{     java.lang.String formNameFormat = "STEPS_Instrument_V3_1-%s";     org.mockito.Mockito.when(participant.getParticipantID()).thenReturn("123-100-3");     org.junit.Assert.assertEquals("STEPS_Instrument_V3_1-123-100-3", takeSurveyForParticipantStrategy.getFormName(formNameFormat)); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldNotInactivateWhenSurveyNotDone,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.NOT_DONE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldInactivateWhenMemberIsNotSelected,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.SELECTION_NOT_DONE);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenHouseholdStatusIsIncomplete,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.INCOMPLETE);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsDeferred,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.DEFERRED);     org.junit.Assert.assertFalse(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,SelectedParticipantContainerHandlerTest,ShouldActivateWhenSurveyIsRefused,{     org.mockito.Mockito.when(householdMock.getStatus()).thenReturn(com.onaio.steps.model.InterviewStatus.REFUSED);     org.junit.Assert.assertTrue(selectedParticipantContainerHandler.shouldDeactivate()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVisiblePasswordByDefault,{     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     android.widget.EditText passwordEditText = authDialog.findViewById(R.id.passwordEditText);     org.junit.Assert.assertEquals(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, passwordEditText.getInputType()); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfStoredMD5HashMatched,{     java.lang.String text = "test";     java.lang.String storedMd5Hash = "098f6bcd4621d373cade4e832627b4f6";     java.lang.String enteredSha256Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredSha256Hash, storedMd5Hash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnTrueIfHashMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertTrue(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,AuthDialogTest,testVerifyPasswordShouldReturnFalseIfHashNotMatched,{     java.lang.String text = "test";     java.lang.String storedPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     java.lang.String enteredPwdHash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822c";// invalid hash      com.onaio.steps.helper.AuthDialog authDialog = new com.onaio.steps.helper.AuthDialog(settingsActivity, null);     org.junit.Assert.assertFalse(authDialog.verifyPassword(enteredPwdHash, storedPwdHash, text)); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldFailValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "20");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "65");     dataValidator.validateAgeRange("17", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("70", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("3", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(3, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateAgeRangeShouldPassValidation,{     setValue(com.onaio.steps.helper.Constants.HH_MIN_AGE, "18");     setValue(com.onaio.steps.helper.Constants.HH_MAX_AGE, "70");     dataValidator.validateAgeRange("18", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("69", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     dataValidator.validateAgeRange("50", activity.getString(R.string.age_not_in_range) + " %s-%s)", com.onaio.steps.helper.Constants.HH_MIN_AGE, com.onaio.steps.helper.Constants.HH_MAX_AGE);     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldFail,{     dataValidator.validate(com.onaio.steps.model.Gender.NotDefined, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(1, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateGenderShouldPass,{     dataValidator.validate(com.onaio.steps.model.Gender.Male, activity.getString(R.string.member_gender_hint));     dataValidator.validate(com.onaio.steps.model.Gender.Female, activity.getString(R.string.member_gender_hint));     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldFail,{     java.lang.String nullString = null;     dataValidator.validate("", "String error");     dataValidator.validate(nullString, "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(2, errors.size()); }
https://github.com/onaio/steps-app.git,DataValidatorTest,validateStringShouldPass,{     dataValidator.validate("Precious", "String error");     dataValidator.validate("Property", "String error");     java.util.List<java.lang.String> errors = dataValidator.finish();     org.junit.Assert.assertEquals(0, errors.size()); }
https://github.com/onaio/steps-app.git,DeviceTest,testGenerateUniqueDeviceIdShouldReturnNull,{     android.content.Context context = androidx.test.core.app.ApplicationProvider.getApplicationContext();     java.lang.String uniqueDeviceId = com.onaio.steps.helper.Device.generateUniqueDeviceId(context);     org.junit.Assert.assertNull(uniqueDeviceId); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnMD5Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "098f6bcd4621d373cade4e832627b4f6";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.MD5)); }
https://github.com/onaio/steps-app.git,HashGeneratorTest,testGenerateShouldReturnSHA256Hash,{     java.lang.String text = "test";     java.lang.String md5Hash = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08";     org.junit.Assert.assertEquals(md5Hash, com.onaio.steps.helper.HashGenerator.generate(text, com.onaio.steps.helper.HashGenerator.HashStrategy.SHA_256)); }
https://github.com/onaio/steps-app.git,KeyValueStoreTest,testGetPreferenceFileNameShouldReturnMainActivityOrchestratorFileName,{     org.junit.Assert.assertEquals("activities." + com.onaio.steps.activities.MainActivityOrchestrator.class.getSimpleName(), keyValueStore.getPreferenceFileName()); }
https://github.com/onaio/steps-app.git,NetworkConnectivityTest,testIsNetworkAvailableShouldReturnTrue,{     android.content.Context context = org.mockito.Mockito.mock(android.content.Context.class);     android.net.ConnectivityManager connectivityManager = org.mockito.Mockito.mock(android.net.ConnectivityManager.class);     android.net.NetworkInfo networkInfo = org.mockito.Mockito.mock(android.net.NetworkInfo.class);     org.mockito.Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     org.mockito.Mockito.when(connectivityManager.getActiveNetworkInfo()).thenReturn(networkInfo);     org.mockito.Mockito.when(networkInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(com.onaio.steps.helper.NetworkConnectivity.isNetworkAvailable(context)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullOnWhenErrorBodyIsNull,{     org.junit.Assert.assertNull(uploadFileTask.findError(null)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnNullWhenExceptionOccur,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("");     org.junit.Assert.assertNull(uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,UploadFileTaskTest,testFindErrorShouldReturnValidError,{     okhttp3.ResponseBody errorBody = Mockito.mock(okhttp3.ResponseBody.class);     Mockito.when(errorBody.string()).thenReturn("{\"error\": \"invalid username or password\"}");     org.junit.Assert.assertEquals("invalid username or password", uploadFileTask.findError(errorBody)); }
https://github.com/onaio/steps-app.git,HouseholdMemberFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the household member     java.lang.String blankFormMediaPath = householdActivity.getFilesDir().getPath();     java.lang.String householdName = "household name";     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(householdMock.getName()).thenReturn(householdName);     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.HouseholdMemberFormStrategy(householdMock, DEVICE_ID), householdActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(householdActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ MEMBER_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ParticipantFormStrategyTest,testSaveDataFile,{     // mock launch ODK with the participant     java.lang.String blankFormMediaPath = participantActivity.getFilesDir().getPath();     android.net.Uri blankFormURI = android.net.Uri.parse("uri");     org.mockito.Mockito.when(blankFormMock.getUri()).thenReturn(blankFormURI);     com.onaio.steps.model.ODKForm.ODKForm odkForm = new com.onaio.steps.model.ODKForm.ODKForm(blankFormMock, null);     odkForm.open(new com.onaio.steps.model.ODKForm.strategy.ParticipantFormStrategy(participant, DEVICE_ID), participantActivity, com.onaio.steps.model.RequestCode.SURVEY.getCode());     Shadows.shadowOf(participantActivity).getNextStartedActivityForResult();     // see if generated csv file has the required columns     java.io.File formMediaDir = new java.io.File(blankFormMediaPath);     java.lang.String absolutePath = new java.io.File(formMediaDir, com.onaio.steps.helper.Constants.ODK_DATA_FILENAME).getAbsolutePath();     com.onaio.steps.helper.FileUtil fileUtil = new com.onaio.steps.helper.FileUtil();     java.util.List<java.lang.String[]> lines = fileUtil.readFile(absolutePath);     java.lang.String[] csvExpectedValues = new java.lang.String[]{ PARTICIPANT_ID, SURNAME, FIRST_NAME, java.lang.String.valueOf(GENDER.getIntValue()), java.lang.String.valueOf(AGE), null, DEVICE_ID };     for (java.lang.String[] curLine : lines) {         for (int i = 0; i < csvExpectedValues.length; i++) {             if (csvExpectedValues[i] != null) {                 org.junit.Assert.assertEquals(csvExpectedValues[i], curLine[i]);             }         }     } }
https://github.com/onaio/steps-app.git,ODKBlankFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.forms/forms/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ODKSavedFormTest,ShouldGetTheFormURIWithId,{     org.junit.Assert.assertEquals("content://org.odk.collect.android.provider.odk.instances/instances/id", form.getUri().toString()); }
https://github.com/onaio/steps-app.git,ReElectReasonTest,ShouldSaveReasonsToDatabase,{     org.junit.Assert.assertEquals(0, reElectReason.save(db)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldBeAbleHandleHouseholdFlowType,{     org.junit.Assert.assertTrue(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,ShouldNotBeAbleToHandleParticipantFlowType,{     org.junit.Assert.assertFalse(householdFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,validateHouseHoldSettingsShouldPass,{     org.junit.Assert.assertEquals(0, householdFlow.validateHouseHoldSettings("uid", "pwd", "deid", "fid", "56", "89", true).size()); }
https://github.com/onaio/steps-app.git,HouseholdFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.HouseholdListActivity.class.getName(), householdFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldBeAbleHandleParticipantFlowType,{     org.junit.Assert.assertTrue(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Participant)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,ShouldNotBeAbleToHandleHouseholdFlowType,{     org.junit.Assert.assertFalse(participantFlow.canHandle(com.onaio.steps.orchestrators.flows.FlowType.Household)); }
https://github.com/onaio/steps-app.git,ParticipantFlowTest,testGetIntentShouldReturnHouseholdListActivityIntent,{     org.junit.Assert.assertEquals(com.onaio.steps.activities.ParticipantListActivity.class.getName(), participantFlow.getIntent().getComponent().getClassName()); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,compress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.compress(loremIpsumText);     org.junit.Assert.assertEquals(compressedText, resultText); }
https://github.com/onaio/steps-app.git,CompressionUtilsTest,decompress,{     java.lang.String resultText = com.onaio.steps.utils.CompressionUtils.decompress(compressedText);     org.junit.Assert.assertEquals(loremIpsumText, resultText); }
https://github.com/onaio/steps-app.git,QRCodeUtilsTest,exportSettingsToJSON,{     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MAX_AGE, "78");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_MIN_AGE, "17");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_USER_ID, "some user id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_PHONE_ID, "some device id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_HOUSEHOLD_SEED, "1");     keyValueStore.putString(com.onaio.steps.helper.Constants.HH_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.IMPORT_URL, "some import url");     keyValueStore.putString(com.onaio.steps.helper.Constants.ENDPOINT_URL, "some export url");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_FORM_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_PHONE_ID, "some form id here");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MIN_AGE, "12");     keyValueStore.putString(com.onaio.steps.helper.Constants.PA_MAX_AGE, "98");     java.lang.String exportSettingsJSON = com.onaio.steps.utils.QRCodeUtils.exportSettingsToJSON(activity);     org.json.JSONObject resultJSON = new org.json.JSONObject(exportSettingsJSON);     org.json.JSONObject expectedJSON = new org.json.JSONObject(settingsJSONString);     org.junit.Assert.assertEquals(expectedJSON.toString(), resultJSON.toString());     clearSettings(); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetCountShouldReturnOne,{     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/onaio/steps-app.git,HouseholdAdapterTest,testGetItemIdShouldReturnOneAsLong,{     org.junit.Assert.assertEquals(1, adapter.getItemId(0)); }
https://github.com/onaio/steps-app.git,RootDetectionTaskTest,testDoInBackgroundShouldReturnTrue,{     org.junit.Assert.assertTrue(rootDetectionTask.doInBackground(androidx.test.core.app.ApplicationProvider.getApplicationContext())); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshInHead,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshBetweenHeadAndBody,{     java.lang.String html = (("<html>" + "<head></head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshInBody,{     java.lang.String html = (("<html>" + "<head></head>") + "<body><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithUpperCaseAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"REFRESH\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithMixedCaseAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"Refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithoutQuotesAroundAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=refresh content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshWithSpacesInAttributeValue,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh \" content=\"1; URL=http://example.com/\"></head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMultipleMetaRefreshTags,{     java.lang.String html = (("<html>" + "<head><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\"></head>") + "<body><meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head></head><body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,HtmlSanitizerTest,shouldRemoveMetaRefreshButKeepOtherMetaTags,{     java.lang.String html = ((((("<html>" + "<head>") + "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">") + "<meta http-equiv=\"refresh\" content=\"1; URL=http://example.com/\">") + "</head>") + "<body>Message</body>") + "</html>";     org.junit.Assert.assertEquals("<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" /></head>" + "<body>Message</body></html>", com.fsck.k9.helper.HtmlSanitizer.sanitize(html)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority?a=one&b=two&c=three");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("b");     org.junit.Assert.assertThat(java.util.Collections.singletonList("two"), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper_multipleMatchingQueryParameters,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority?xname=one&name=two&Name=Three&NAME=FOUR");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("name");     org.junit.Assert.assertThat(java.util.Arrays.asList("two", "Three", "FOUR"), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MailToTest,testCaseInsensitiveParamWrapper_withoutQueryParameters,{     android.net.Uri uri = android.net.Uri.parse("scheme://authority");     com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper caseInsensitiveParamWrapper = new com.fsck.k9.helper.MailTo.CaseInsensitiveParamWrapper(uri);     java.util.List<java.lang.String> result = caseInsensitiveParamWrapper.getQueryParameters("name");     org.junit.Assert.assertThat(java.util.Collections.<java.lang.String>emptyList(), org.hamcrest.CoreMatchers.is(result)); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,UNKNOWN_getDatabaseName_shouldReturnUnknown,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "unknown", com.fsck.k9.mailstore.LocalFolder.MoreMessages.UNKNOWN.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,TRUE_getDatabaseName_shouldReturnTrue,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "true", com.fsck.k9.mailstore.LocalFolder.MoreMessages.TRUE.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,MoreMessagesTest,FALSE_getDatabaseName_shouldReturnFalse,{     org.junit.Assert.assertEquals(com.fsck.k9.mailstore.MoreMessagesTest.ERROR_MESSAGE, "false", com.fsck.k9.mailstore.LocalFolder.MoreMessages.FALSE.getDatabaseName()); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withImap_shouldReturn_ON_DELETE,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.ON_DELETE, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withPop3_shouldReturn_NEVER,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.POP3);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.NEVER, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultDeletePolicy_withWebDav_shouldReturn_ON_DELETE,{     com.fsck.k9.Account.DeletePolicy result = com.fsck.k9.account.AccountCreator.getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type.WebDAV);     org.junit.Assert.assertEquals(com.fsck.k9.Account.DeletePolicy.ON_DELETE, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withNoConnectionSecurityAndImap_shouldReturnDefaultPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.NONE, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultPort, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withStartTlsAndImap_shouldReturnDefaultPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.STARTTLS_REQUIRED, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultPort, result); }
https://github.com/shannah/cn1-android-importer.git,AccountCreatorTest,getDefaultPort_withTlsAndImap_shouldReturnDefaultTlsPort,{     int result = com.fsck.k9.account.AccountCreator.getDefaultPort(com.fsck.k9.mail.ConnectionSecurity.SSL_TLS_REQUIRED, com.fsck.k9.mail.ServerSettings.Type.IMAP);     org.junit.Assert.assertEquals(Type.IMAP.defaultTlsPort, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoNullArguments_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are null", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withNullArgumentAndMessageWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithNullUidAndNullArgument_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoMessagesWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are a message with a null UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withNullArgumentAndMessageWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithInvalidUidAndNullArgument_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withTwoMessagesWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are a message with an invalid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithNullUidAndMessageWithInvalidUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withMessageWithInvalidUidAndMessageWithNullUid_shouldReturnZero,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertEquals("result must be 0 when both arguments are not a message with valid UID", 0, result); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftNullArgument_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = null;     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is null", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftMessageWithNullUid_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = createMessageWithNullUid();     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is message with null UID", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withLeftMessageWithInvalidUid_shouldReturnPositive,{     com.fsck.k9.mail.Message messageLeft = createMessageWithInvalidUid();     com.fsck.k9.mail.Message messageRight = createMessageWithUid(1);     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be > 0 when left argument is message with invalid UID", result > 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightNullArgument_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = null;     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is null", result < 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightMessageWithNullUid_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = createMessageWithNullUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is message with null UID", result < 0); }
https://github.com/shannah/cn1-android-importer.git,UidReverseComparatorTest,compare_withRightMessageWithInvalidUid_shouldReturnNegative,{     com.fsck.k9.mail.Message messageLeft = createMessageWithUid(1);     com.fsck.k9.mail.Message messageRight = createMessageWithInvalidUid();     int result = comparator.compare(messageLeft, messageRight);     org.junit.Assert.assertTrue("result must be < 0 when right argument is message with invalid UID", result < 0); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withTextPlain_shouldReturnFalse,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", "plain text");     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertFalse(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withMultipartEncrypted_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMultipartMessage("multipart/encrypted", com.fsck.k9.message.MessageCreationHelper.createPart("application/octet-stream"), com.fsck.k9.message.MessageCreationHelper.createPart("application/octet-stream"));     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withSMimePart_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMessage("application/pkcs7-mime");     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withMultipartMixedContainingSMimePart_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createMultipartMessage("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("application/pkcs7-mime"), com.fsck.k9.message.MessageCreationHelper.createPart("text/plain"));     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withInlinePgp_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((("" + "-----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----END PGP MESSAGE-----");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withPlainTextAndInlinePgp_shouldReturnTrue,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((("" + "preamble") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "epilogue");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertTrue(encrypted); }
https://github.com/shannah/cn1-android-importer.git,EncryptionDetectorTest,isEncrypted_withQuotedInlinePgp_shouldReturnFalse,{     com.fsck.k9.mail.Message message = com.fsck.k9.message.MessageCreationHelper.createTextMessage("text/plain", (((((((((((("" + "good talk!") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----BEGIN PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> some encrypted stuff here") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "> -----END PGP MESSAGE-----") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "-- ") + com.fsck.k9.message.extractors.EncryptionDetectorTest.CRLF) + "my signature");     Mockito.when(textPartFinder.findFirstTextPart(message)).thenReturn(message);     boolean encrypted = encryptionDetector.isEncrypted(message);     org.junit.Assert.assertFalse(encrypted); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withSimpleTextPlain,{     java.lang.String text = "The quick brown fox jumps over the lazy dog";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals(text, preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withSimpleTextHtml,{     java.lang.String text = "<b>The quick brown fox jumps over the lazy dog</b>";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("The quick brown fox jumps over the lazy dog", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_withLongTextPlain,{     java.lang.String text = (((((((((("" + "10--------20--------30--------40--------50--------") + "60--------70--------80--------90--------100-------") + "110-------120-------130-------140-------150-------") + "160-------170-------180-------190-------200-------") + "210-------220-------230-------240-------250-------") + "260-------270-------280-------290-------300-------") + "310-------320-------330-------340-------350-------") + "360-------370-------380-------390-------400-------") + "410-------420-------430-------440-------450-------") + "460-------470-------480-------490-------500-------") + "510-------520-------";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals(text.substring(0, 511) + "…", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripSignature,{     java.lang.String text = (("" + "Some text\r\n") + "-- \r\n") + "Signature";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("Some text", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripHorizontalLine,{     java.lang.String text = (("" + "line 1\r\n") + "----\r\n") + "line 2";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("line 1 line 2", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripQuoteHeaderAndQuotedText,{     java.lang.String text = ((("" + "some text\r\n") + "On 01/02/03 someone wrote\r\n") + "> some quoted text\r\n") + "# some other quoted text\r\n";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("some text", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripGenericQuoteHeader,{     java.lang.String text = (("" + "Am 13.12.2015 um 23:42 schrieb Hans:\r\n") + "> hallo\r\n") + "hi there\r\n";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("hi there", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldStripHorizontalRules,{     java.lang.String text = ("line 1" + "------------------------------\r\n") + "line 2";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("line 1 line 2", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldReplaceUrl,{     java.lang.String text = "some url: https://k9mail.org/";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("some url: ...", preview); }
https://github.com/shannah/cn1-android-importer.git,PreviewTextExtractorTest,extractPreview_shouldCollapseAndTrimWhitespace,{     java.lang.String text = " whitespace     is\t\tfun  ";     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain", text);     java.lang.String preview = previewTextExtractor.extractPreview(part);     org.junit.Assert.assertEquals("whitespace is fun", preview); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withTextPlainPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(part, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withTextHtmlPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(part, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withoutTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg");     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternative,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeHtmlPartFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingOnlyTextHtmlPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeNotContainingTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"), com.fsck.k9.message.MessageCreationHelper.createPart("application/pdf"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingMultipartRelatedContainingTextPlain,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/related", expected, com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg")), com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingMultipartRelatedContainingTextHtmlFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/related", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg")), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingTextPlain,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), expected);     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingTextHtmlFirst,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedNotContainingTextPart,{     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), com.fsck.k9.message.MessageCreationHelper.createPart("image/gif"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertNull(result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingMultipartAlternative,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createPart("image/jpeg"), com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html")), com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingMultipartAlternativeWithTextPlainPartLast,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"), expected));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartAlternativeContainingEmptyTextPlainPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createEmptyPart("text/plain");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/alternative", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/html"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,TextPartFinderTest,findFirstTextPart_withMultipartMixedContainingEmptyTextHtmlPart,{     com.fsck.k9.mail.BodyPart expected = com.fsck.k9.message.MessageCreationHelper.createEmptyPart("text/html");     com.fsck.k9.mail.Part part = com.fsck.k9.message.MessageCreationHelper.createMultipart("multipart/mixed", expected, com.fsck.k9.message.MessageCreationHelper.createTextPart("text/plain"));     com.fsck.k9.mail.Part result = textPartFinder.findFirstTextPart(part);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,newNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.newNotification(notificationHolder);     org.junit.Assert.assertFalse(result.shouldCancelNotification()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,replaceNotification_shouldCancelNotification_shouldReturnTrue,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertTrue(result.shouldCancelNotification()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,replaceNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertEquals(com.fsck.k9.notification.AddNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,AddNotificationResultTest,getNotificationHolder_shouldReturnNotificationHolder,{     com.fsck.k9.notification.AddNotificationResult result = com.fsck.k9.notification.AddNotificationResult.replaceNotification(notificationHolder);     org.junit.Assert.assertEquals(notificationHolder, result.getNotificationHolder()); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_ALWAYS,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.ALWAYS);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertTrue(result); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_FOR_SINGLE_MSG,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.FOR_SINGLE_MSG);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertTrue(result); }
https://github.com/shannah/cn1-android-importer.git,BaseNotificationsTest,testIsDeleteActionEnabled_NotificationQuickDelete_NEVER,{     com.fsck.k9.K9.setNotificationQuickDeleteBehaviour(com.fsck.k9.K9.NotificationQuickDelete.NEVER);     boolean result = notifications.isDeleteActionEnabled();     org.junit.Assert.assertFalse(result); }
https://github.com/shannah/cn1-android-importer.git,LockScreenNotificationTest,configureLockScreenNotification_SENDERS_makeSureWeGetEnoughSenderNames,{     org.junit.Assert.assertTrue(com.fsck.k9.notification.NotificationData.MAX_NUMBER_OF_MESSAGES_FOR_SUMMARY_NOTIFICATION >= com.fsck.k9.notification.LockScreenNotification.MAX_NUMBER_OF_SENDERS_IN_LOCK_SCREEN_NOTIFICATION); }
https://github.com/shannah/cn1-android-importer.git,LockScreenNotificationTest,createCommaSeparatedListOfSenders_withMoreSendersThanShouldBeDisplayed,{     com.fsck.k9.notification.NotificationContent content1 = createNotificationContent("alice@example.com");     com.fsck.k9.notification.NotificationContent content2 = createNotificationContent("bob@example.com");     com.fsck.k9.notification.NotificationContent content3 = createNotificationContent("cloe@example.com");     com.fsck.k9.notification.NotificationContent content4 = createNotificationContent("dagobert@example.com");     com.fsck.k9.notification.NotificationContent content5 = createNotificationContent("ed@example.com");     com.fsck.k9.notification.NotificationContent content6 = createNotificationContent("fiona@example.com");     java.lang.String result = lockScreenNotification.createCommaSeparatedListOfSenders(java.util.Arrays.asList(content1, content2, content3, content4, content5, content6));     org.junit.Assert.assertEquals("alice@example.com, bob@example.com, cloe@example.com, dagobert@example.com, ed@example.com", result); }
https://github.com/shannah/cn1-android-importer.git,NotificationContentCreatorTest,createFromMessage_withStarredMessage,{     Mockito.when(message.isSet(com.fsck.k9.mail.Flag.FLAGGED)).thenReturn(true);     com.fsck.k9.notification.NotificationContent content = contentCreator.createFromMessage(account, message);     org.junit.Assert.assertEquals(true, content.starred); }
https://github.com/shannah/cn1-android-importer.git,NotificationDataTest,testGetHolderForLatestNotification,{     com.fsck.k9.notification.NotificationContent content = createNotificationContent("1");     com.fsck.k9.notification.AddNotificationResult addResult = notificationData.addNotificationContent(content);     com.fsck.k9.notification.NotificationHolder holder = notificationData.getHolderForLatestNotification();     org.junit.Assert.assertEquals(addResult.getNotificationHolder(), holder); }
https://github.com/shannah/cn1-android-importer.git,NotificationDataTest,testGetAccount,{     org.junit.Assert.assertEquals(account, notificationData.getAccount()); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailSummaryNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailSummaryNotificationId(account);     org.junit.Assert.assertEquals(6, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailStackedNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     org.junit.Assert.assertEquals(7, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailSummaryNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailSummaryNotificationId(account);     org.junit.Assert.assertEquals(21, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getNewMailStackedNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationIndex = 7;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     org.junit.Assert.assertEquals(29, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getFetchingMailNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getFetchingMailNotificationId(account);     org.junit.Assert.assertEquals(5, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getFetchingMailNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getFetchingMailNotificationId(account);     org.junit.Assert.assertEquals(20, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getSendFailedNotificationId_withDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getSendFailedNotificationId(account);     org.junit.Assert.assertEquals(0, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getSendFailedNotificationId_withSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getSendFailedNotificationId(account);     org.junit.Assert.assertEquals(15, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forIncomingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(1, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forIncomingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(16, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forOutgoingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(2, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getCertificateErrorNotificationId_forOutgoingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getCertificateErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(17, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forIncomingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(3, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forIncomingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.INCOMING);     org.junit.Assert.assertEquals(18, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forOutgoingServerWithDefaultAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(0);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(4, notificationId); }
https://github.com/shannah/cn1-android-importer.git,NotificationIdsTest,getAuthenticationErrorNotificationId_forOutgoingServerWithSecondAccount,{     com.fsck.k9.Account account = createMockAccountWithAccountNumber(1);     int notificationId = com.fsck.k9.notification.NotificationIds.getAuthenticationErrorNotificationId(account, com.fsck.k9.notification.NotificationIdsTest.OUTGOING);     org.junit.Assert.assertEquals(19, notificationId); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_shouldCancelNotification_shouldReturnTrue,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertTrue(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_isUnknownNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertFalse(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,createNotification_getNotificationHolder_shouldReturnNotificationHolder,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.createNotification(notificationHolder);     org.junit.Assert.assertEquals(notificationHolder, result.getNotificationHolder()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertFalse(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_getNotificationId_shouldReturnNotificationId,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertEquals(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID, result.getNotificationId()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,cancelNotification_isUnknownNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.cancelNotification(com.fsck.k9.notification.RemoveNotificationResultTest.NOTIFICATION_ID);     org.junit.Assert.assertFalse(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,unknownNotification_shouldCancelNotification_shouldReturnFalse,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.unknownNotification();     org.junit.Assert.assertFalse(result.shouldCreateNotification()); }
https://github.com/shannah/cn1-android-importer.git,RemoveNotificationResultTest,unknownNotification_isUnknownNotification_shouldReturnTrue,{     com.fsck.k9.notification.RemoveNotificationResult result = com.fsck.k9.notification.RemoveNotificationResult.unknownNotification();     org.junit.Assert.assertTrue(result.isUnknownNotification()); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotification,{     disableOptionalActions();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent replyPendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createReplyPendingIntent(messageReference, notificationId)).thenReturn(replyPendingIntent);     android.app.PendingIntent markAsReadPendingIntent = createFakePendingIntent(2);     Mockito.when(actionCreator.createMarkMessageAsReadPendingIntent(messageReference, notificationId)).thenReturn(markAsReadPendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_single_message_options_dark, "Reply", replyPendingIntent);     verifyAddAction(R.drawable.ic_action_mark_as_read_dark, "Mark Read", markAsReadPendingIntent);     verifyNumberOfActions(2); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithDeleteActionEnabled,{     enableDeleteAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent deletePendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createDeleteMessagePendingIntent(messageReference, notificationId)).thenReturn(deletePendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_delete_dark, "Delete", deletePendingIntent); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithArchiveActionEnabled,{     enableArchiveAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent archivePendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createArchiveMessagePendingIntent(messageReference, notificationId)).thenReturn(archivePendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_archive_dark, "Archive", archivePendingIntent); }
https://github.com/shannah/cn1-android-importer.git,WearNotificationsTest,testBuildStackedNotificationWithMarkAsSpamActionEnabled,{     enableSpamAction();     int notificationIndex = 0;     int notificationId = com.fsck.k9.notification.NotificationIds.getNewMailStackedNotificationId(account, notificationIndex);     com.fsck.k9.activity.MessageReference messageReference = createMessageReference(1);     com.fsck.k9.notification.NotificationContent content = createNotificationContent(messageReference);     com.fsck.k9.notification.NotificationHolder holder = createNotificationHolder(notificationId, content);     android.app.PendingIntent markAsSpamPendingIntent = createFakePendingIntent(1);     Mockito.when(actionCreator.createMarkMessageAsSpamPendingIntent(messageReference, notificationId)).thenReturn(markAsSpamPendingIntent);     android.app.Notification result = wearNotifications.buildStackedNotification(account, holder);     org.junit.Assert.assertEquals(notification, result);     verifyExtendWasOnlyCalledOnce();     verifyAddAction(R.drawable.ic_action_spam_dark, "Spam", markAsSpamPendingIntent); }
https://github.com/translation-cards/translation-cards.git,EnterSourcePhraseActivityTest,shouldNotStartNextActivityWhenThereIsNoSourceText,{     android.app.Activity activity = helper.createActivityToTest();     org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(activity, R.id.activity_enter_source_phrase_next_label);     org.junit.Assert.assertNull(Shadows.shadowOf(activity).getNextStartedActivity()); }
https://github.com/translation-cards/translation-cards.git,EnterSourcePhraseActivityTest,shouldNotHaveNextButtonClickableWhenThereIsNoSourceText,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertFalse(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findLinearLayout(activity, R.id.activity_enter_source_phrase_next_label).isClickable()); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldNotBeNull,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldHaveTranslatedTextPhraseTextViewInIntent,{     // Testing Butter Knife hookup     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findTextView(activity, R.id.translated_phrase_field)); }
https://github.com/translation-cards/translation-cards.git,EnterTranslatedPhraseActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,RecordAudioActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,SummaryActivityTest,shouldNotBeNull,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity); }
https://github.com/translation-cards/translation-cards.git,SummaryActivityTest,shouldDisplayLanguageTabsFragmentWhenActivityIsCreated,{     android.app.Activity activity = helper.createActivityToTest();     org.junit.Assert.assertNotNull(activity.findViewById(R.id.languages_scroll)); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveValidDeckNameWhenDeckIsPresent,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.TextView deckNameTextView = ((android.widget.TextView) (view.findViewById(R.id.deck_name)));     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_NAME, deckNameTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveDeckInformationWhenDeckIsPresent,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.TextView deckInformationTextView = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findAnyView(view, R.id.deck_information);     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_INFORMATION, deckInformationTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveTranslationLanguagesTextWhenDeckIsPresent,{     android.widget.TextView translationLanguagesTextView = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findAnyView(view, R.id.translation_languages);     java.lang.String expectedLanguages = (org.mercycorps.translationcards.activity.MyDeckAdapterTest.ALPHABETICALLY_HIGH_LANGUAGE.toUpperCase() + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DELIMITER) + org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_TRANSLATION_LANGUAGE.toUpperCase();     org.junit.Assert.assertEquals(expectedLanguages, translationLanguagesTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveAClickListenerWhenCreatingDeckMenuIcon,{     android.view.View deckMenu = view.findViewById(R.id.deck_menu);     org.junit.Assert.assertNotNull(Shadows.shadowOf(deckMenu).getOnClickListener()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowPopupMenuWhenMenuIsClicked,{     android.widget.PopupMenu deckMenu = openDeckPopupMenu();     org.junit.Assert.assertNotNull(deckMenu); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowDeleteButtonWhenMenuIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertEquals("Delete", popupMenu.getMenu().findItem(R.id.delete_deck).toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowShareButtonWhenMenuIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertEquals("Share", popupMenu.getMenu().findItem(R.id.share_deck).toString()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldHaveClickListenerWhenDeleteDeckMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     org.junit.Assert.assertNotNull(Shadows.shadowOf(popupMenu).getOnMenuItemClickListener()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldLaunchAlertDialogWhenDeleteButtonClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.delete_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     org.robolectric.shadows.ShadowDialog shadowDialog = Shadows.shadowOf(alertDialog);     org.junit.Assert.assertThat(shadowDialog.getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_ALERT_DIALOG_TITLE)); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldNotDisplayLockIconWhenDeckIsUnlocked,{     android.view.View view = getAdapterViewForDeck(deck);     android.widget.FrameLayout frameLayout = ((android.widget.FrameLayout) (view.findViewById(R.id.lock_icon)));     org.junit.Assert.assertEquals(android.view.View.GONE, frameLayout.getVisibility()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldDisplayLockIconWhenDeckIsLocked,{     org.mercycorps.translationcards.model.Deck lockedDeck = new org.mercycorps.translationcards.model.Deck(org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_DECK_NAME, org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_PUBLISHER, "", 0L, 1135497600000L, true, org.mercycorps.translationcards.activity.MyDeckAdapterTest.DEFAULT_SOURCE_LANGUAGE_NAME, new org.mercycorps.translationcards.model.Dictionary[0]);     android.view.View view = getAdapterViewForDeck(lockedDeck);     android.widget.FrameLayout frameLayout = ((android.widget.FrameLayout) (view.findViewById(R.id.lock_icon)));     org.junit.Assert.assertEquals(android.view.View.VISIBLE, frameLayout.getVisibility()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldShowPopupAlertDialogWhenShareMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.share_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     org.robolectric.shadows.ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);     java.lang.String alertDialogTitle = shadowAlertDialog.getTitle().toString();     org.junit.Assert.assertEquals(org.mercycorps.translationcards.activity.MyDeckAdapterTest.NAME_FOR_SHARED_DECK, alertDialogTitle); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldStartExportTaskWhenShareMenuItemIsClicked,{     android.widget.PopupMenu popupMenu = openDeckPopupMenu();     clickMenuItemWithId(popupMenu, R.id.share_deck);     android.app.AlertDialog alertDialog = ((android.app.AlertDialog) (org.robolectric.shadows.ShadowDialog.getLatestDialog()));     alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).performClick();     org.junit.Assert.assertEquals(android.content.Intent.ACTION_SEND, Shadows.shadowOf(activity).getNextStartedActivity().getAction()); }
https://github.com/translation-cards/translation-cards.git,MyDeckAdapterTest,shouldModifyExistingViewIfViewNotNull,{     controller = org.robolectric.Robolectric.buildActivity(android.app.Activity.class);     activity = controller.withIntent(new android.content.Intent()).create().get();     org.mercycorps.translationcards.activity.MyDeckAdapter adapter = new org.mercycorps.translationcards.activity.MyDeckAdapter(activity, myDecksPresenter);     org.mercycorps.translationcards.view.DeckItem view = new org.mercycorps.translationcards.view.DeckItem(activity.getApplicationContext());     adapter.getView(0, view, null);     android.widget.TextView deckName = ((android.widget.TextView) (view.findViewById(R.id.deck_name)));     org.junit.Assert.assertEquals(deck.getTitle(), deckName.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldShowWelcomeTitleWhenNoCardsArePresent,{     android.app.Activity activity = createEmptyTranslationsActivity();     android.widget.TextView welcomeTitle = ((android.widget.TextView) (activity.findViewById(R.id.empty_deck_title)));     org.junit.Assert.assertThat(welcomeTitle.getText().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.EMPTY_DECK_TITLE)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,onCreate_shouldShowDeckNameInToolbar,{     org.junit.Assert.assertThat(translationsActivity.getSupportActionBar().getTitle().toString(), org.hamcrest.CoreMatchers.is(org.mercycorps.translationcards.activity.TranslationsActivityTest.DEFAULT_DECK_NAME)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldShowCollapsedCardIndicatorByDefault,{     android.view.View translationsListItem = firstTranslationCardInListView();     android.widget.ImageView cardIndicator = ((android.widget.ImageView) (translationsListItem.findViewById(R.id.indicator_icon)));     org.junit.Assert.assertThat(Shadows.shadowOf(cardIndicator.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.expand_arrow)); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,setDictionary_shouldNotHaveAnyTranslationCardsWhenNoneHaveBeenCreated,{     android.widget.TextView translationCardText = ((android.widget.TextView) (translationsActivity.findViewById(R.id.origin_translation_text)));     org.junit.Assert.assertThat(translationCardText, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.nullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationsActivityTest,shouldNotSetEditFlagInContextWhenCreateNewTranslationButtonIsClicked,{     org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.click(translationsActivity, R.id.add_translation_button);     android.content.Intent nextStartedActivity = Shadows.shadowOf(translationsActivity).getNextStartedActivity();     org.mercycorps.translationcards.activity.addTranslation.AddNewTranslationContext context = nextStartedActivity.getParcelableExtra(org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.CONTEXT_INTENT_KEY);     org.junit.Assert.assertFalse(context.isEdit()); }
https://github.com/translation-cards/translation-cards.git,EnterDeckTitleActivityTest,setDeckTitleText,{     java.lang.String deckTitleText = "Some Text!";     activity.setDeckTitleText(deckTitleText);     android.widget.TextView deckTitleInput = org.mercycorps.translationcards.util.TestAddTranslationCardActivityHelper.findTextView(activity, R.id.deck_title_input);     org.junit.Assert.assertEquals(deckTitleText, deckTitleInput.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,LanguageSelectorActivityTest,shouldReturnCancelResultCodeWhenUserClicksCancel,{     org.robolectric.shadows.ShadowActivity shadowActivity = Shadows.shadowOf(activity);     activity.onOptionsItemSelected(new org.robolectric.fakes.RoboMenuItem(org.mercycorps.translationcards.addDeck.activity.LanguageSelectorActivity.CANCEL_BUTTON_ID));     junit.framework.Assert.assertEquals(android.app.Activity.RESULT_CANCELED, shadowActivity.getResultCode());     org.junit.Assert.assertTrue(shadowActivity.getResultIntent().getStringExtra(org.mercycorps.translationcards.addDeck.activity.LanguageSelectorActivity.SELECTED_LANGUAGE_KEY).isEmpty()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotBeNull,{     org.junit.Assert.assertNotNull(translationTabsFragment); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldInflateFragmentWithLanguagesTab,{     org.junit.Assert.assertNotNull(getFragmentView()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldContainHorizontalScrollView,{     android.widget.HorizontalScrollView horizontalScrollView = ((android.widget.HorizontalScrollView) (getFragmentView().findViewById(R.id.languages_scroll)));     org.junit.Assert.assertNotNull(horizontalScrollView); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldContainArabicInLanguageTabWhenNewTranslationContextLanguageIsArabic,{     android.widget.LinearLayout linearLayout = ((android.widget.LinearLayout) (getFragmentView().findViewById(R.id.languages_scroll_list)));     org.junit.Assert.assertEquals("ARABIC", ((android.widget.TextView) (linearLayout.getChildAt(0).findViewById(R.id.tab_label_text))).getText()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldSeeTabBorderUnderneathCurrentLanguageTab,{     android.view.View tabBorder = getFragmentView().findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.textColor, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldSetLanguageTextToActiveColor,{     android.widget.TextView languageTextView = ((android.widget.TextView) (getFragmentView().findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(android.support.v4.content.ContextCompat.getColor(languageTextView.getContext(), R.color.textColor), languageTextView.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHaveLanguageTabClickListenerWhenLanguageTabHasBeenCreated,{     android.view.View languageTab = getFragmentView().findViewById(R.id.language_tab);     org.junit.Assert.assertNotNull(Shadows.shadowOf(languageTab).getOnClickListener()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldReturnCurrentTranslationForTab,{     org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = translationTabsFragment.getCurrentTranslation();     org.junit.Assert.assertEquals("arabic", newTranslation.getDictionary().getLanguage()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldReturnTranslationContextForSecondTabAfterSecondTabHasBeenClicked,{     getLanguageTabAtPosition(1).performClick();     org.mercycorps.translationcards.activity.addTranslation.NewTranslation newTranslation = translationTabsFragment.getCurrentTranslation();     org.junit.Assert.assertEquals("pashto", newTranslation.getDictionary().getLanguage()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotUnderlineALanguageTabWhenItIsNotSelected,{     android.view.View tabBorder = getLanguageTabAtPosition(1).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.colorPrimary, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabTextWhenItIsNotSelected,{     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(1).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.unselectedLanguageTabText), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHighlightLanguageTabBorderWhenTabIsSelected,{     getLanguageTabAtPosition(1).performClick();     android.view.View tabBorder = getLanguageTabAtPosition(1).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.textColor, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldHighlightLanguageTabTextWhenTabIsSelected,{     getLanguageTabAtPosition(1).performClick();     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(1).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.textColor), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabBorderWhenTabIsNoLongerSelected,{     getLanguageTabAtPosition(1).performClick();     android.view.View tabBorder = getLanguageTabAtPosition(0).findViewById(R.id.tab_border);     org.junit.Assert.assertEquals(R.color.colorPrimary, Shadows.shadowOf(tabBorder.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationTabsFragmentTest,shouldNotHighlightLanguageTabTextWhenTabIsNoLongerSelected,{     getLanguageTabAtPosition(1).performClick();     android.widget.TextView tabText = ((android.widget.TextView) (getLanguageTabAtPosition(0).findViewById(R.id.tab_label_text)));     org.junit.Assert.assertEquals(getColor(translationTabsFragment.getActivity(), R.color.unselectedLanguageTabText), tabText.getCurrentTextColor()); }
https://github.com/translation-cards/translation-cards.git,DeckTest,getCreationDate_shouldFormatCreationDate,{     org.junit.Assert.assertThat(deck.getCreationDateString(), org.hamcrest.CoreMatchers.is("02/08/16")); }
https://github.com/translation-cards/translation-cards.git,DeckTest,getDeckInformation_shouldFormatDeckInformation,{     org.junit.Assert.assertThat(deck.getDeckInformation(), org.hamcrest.CoreMatchers.is("author, 02/08/16")); }
https://github.com/translation-cards/translation-cards.git,DictionaryTest,shouldNotReturnTranslationPathsWithNoAudio,{     org.mercycorps.translationcards.model.Translation firstTranslation = new org.mercycorps.translationcards.model.Translation("", false, "/filename1", 1L, "");     org.mercycorps.translationcards.model.Translation secondTranslation = new org.mercycorps.translationcards.model.Translation("", false, "", 1L, "");     org.mercycorps.translationcards.model.Dictionary dictionary = new org.mercycorps.translationcards.model.Dictionary("", new org.mercycorps.translationcards.model.Translation[]{ firstTranslation, secondTranslation }, 1L);     java.util.Map<java.lang.String, java.lang.Boolean> audioPaths = dictionary.getAudioPaths();     junit.framework.Assert.assertEquals(1, audioPaths.size());     org.junit.Assert.assertTrue(audioPaths.containsKey("/filename1")); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldParseFileCorrectly,{     java.util.Map<java.lang.String, java.util.List<java.lang.String>> actualValues = org.mercycorps.translationcards.porting.LanguagesImportUtilityTest.languagesImportUtility.getLanguageMap();     org.junit.Assert.assertEquals(expectedValues, actualValues); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldRemoveCharactersAfterTwoLetterIsoCode,{     java.util.Map<java.lang.String, java.util.List<java.lang.String>> actualValues = org.mercycorps.translationcards.porting.LanguagesImportUtilityTest.languagesImportUtility.getLanguageMap();     org.junit.Assert.assertEquals(expectedValues, actualValues); }
https://github.com/translation-cards/translation-cards.git,LanguagesImportUtilityTest,shouldReturnEmptyMapIfInputStreamIsNull,{     org.mercycorps.translationcards.porting.LanguagesImportUtility emptyLanguagesImportUtility = new org.mercycorps.translationcards.porting.LanguagesImportUtility(null);     org.junit.Assert.assertEquals(java.util.Collections.EMPTY_MAP, emptyLanguagesImportUtility.getLanguageMap()); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFarsiLanguageNameForFarsiISOCode,{     org.junit.Assert.assertEquals("Farsi", org.mercycorps.translationcards.porting.TranslationCardsISO.getLanguageDisplayName("fa", "")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchPersianLanguageNameForFAIsoCodeAndPersianLanguageSpecifier,{     org.junit.Assert.assertEquals("Persian", org.mercycorps.translationcards.porting.TranslationCardsISO.getLanguageDisplayName("fa", "persian")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFAIsoCodeForPersianLanguageName,{     org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Persian")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldFetchFAIsoCodeForFarsiLanguageName,{     org.junit.Assert.assertEquals("fa", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Farsi")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardsISOTest,shouldGetYIIsoCodeForYiddishLanguageName,{     org.junit.Assert.assertEquals("yi", org.mercycorps.translationcards.porting.TranslationCardsISO.getISOCodeForLanguage("Yiddish")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForArabic,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("Persian")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForFarsi,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("Farsi")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnCorrectIsoCodeForUncapitalizedLanguageName,{     org.junit.Assert.assertEquals("fa", languageService.getIsoForLanguage("farsi")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidIsoCodeForEmptyLanguageName,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_ISO_CODE, languageService.getIsoForLanguage("")); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidIsoCodeForNullLanguageName,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_ISO_CODE, languageService.getIsoForLanguage(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnInvalidLanguageNameForNullIsoCode,{     org.junit.Assert.assertEquals(org.mercycorps.translationcards.service.LanguageService.INVALID_LANGUAGE_NAME, languageService.getLanguageDisplayName(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnATitleCasedString,{     java.lang.String titleCasedString = org.mercycorps.translationcards.service.LanguageService.getTitleCaseName("A title cased string");     org.junit.Assert.assertEquals("A Title Cased String", titleCasedString); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnEmptyStringIfNullPassedToGetTitleCaseName,{     org.junit.Assert.assertEquals("", org.mercycorps.translationcards.service.LanguageService.getTitleCaseName(null)); }
https://github.com/translation-cards/translation-cards.git,LanguageServiceTest,shouldReturnTitleCasedStringWhenSpaceAtFront,{     java.lang.String titleCasedString = org.mercycorps.translationcards.service.LanguageService.getTitleCaseName(" A title cased string");     org.junit.Assert.assertEquals("A Title Cased String", titleCasedString); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,getCurrentTranslations_shouldReturnAllCardsByDefault,{     java.util.List<org.mercycorps.translationcards.model.Translation> translations = translationService.getCurrentTranslations();     org.junit.Assert.assertEquals(translationsFromRepository, translations); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,allTranslationsShouldBeMinimizedByDefault,{     for (int index = 0; index < translationService.getCurrentTranslations().size(); index++) {         org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(index));     } }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,expandCard_shouldExpandACard,{     translationService.expandCard(1);     org.junit.Assert.assertEquals(true, translationService.cardIsExpanded(1)); }
https://github.com/translation-cards/translation-cards.git,TranslationServiceTest,minimizeCard_shouldMinimizeACard,{     translationService.expandCard(1);     translationService.minimizeCard(1);     org.junit.Assert.assertEquals(false, translationService.cardIsExpanded(1)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldInflateALayoutFile,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.chip_layout)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldHaveATextField,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.chip_text)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldHaveAnImageField,{     org.junit.Assert.assertNotNull(chip.findViewById(R.id.delete_chip)); }
https://github.com/translation-cards/translation-cards.git,ChipTest,shouldSetChipText,{     java.lang.String chipText = "Hot Chips!";     chip.setText(chipText);     android.widget.TextView chipTextView = ((android.widget.TextView) (chip.findViewById(R.id.chip_text)));     org.junit.Assert.assertEquals(chipText, chipTextView.getText().toString()); }
https://github.com/translation-cards/translation-cards.git,NextButtonTest,shouldDisableNextButton,{     nextButton.disable();     org.junit.Assert.assertFalse(nextButton.isClickable());     android.widget.TextView nextButtonLabelText = ((android.widget.TextView) (nextButton.findViewById(R.id.next_button_text)));     junit.framework.Assert.assertEquals(getColor(nextButton.getContext(), R.color.textDisabled), nextButtonLabelText.getCurrentTextColor());     android.widget.ImageView nextButtonImage = ((android.widget.ImageView) (nextButton.findViewById(R.id.next_button_image)));     junit.framework.Assert.assertEquals(R.drawable.forward_arrow_disabled, Shadows.shadowOf(nextButtonImage.getBackground()).getCreatedFromResId()); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveCollapseIconVisibleWhenLoaded,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = getDefaultTranslationCard();     android.widget.ImageView expansionIndicatorIcon = ((android.widget.ImageView) (translationCardItem.findViewById(R.id.indicator_icon)));     org.junit.Assert.assertThat(Shadows.shadowOf(expansionIndicatorIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.collapse_arrow)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldDisplayMuteIconWhenTranslationContainsNoAudio,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = getDefaultTranslationCard();     android.view.View audioIcon = translationCardItem.findViewById(R.id.audio_icon);     org.junit.Assert.assertThat(Shadows.shadowOf(audioIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.no_audio_40)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldDisplayAudioIconWhenTranslationContainsAudio,{     org.mercycorps.translationcards.view.TranslationCardItem translationCardItem = createTranslationCardItemWithAudioAndNoTranslatedText();     android.view.View audioIcon = translationCardItem.findViewById(R.id.audio_icon);     org.junit.Assert.assertThat(Shadows.shadowOf(audioIcon.getBackground()).getCreatedFromResId(), org.hamcrest.CoreMatchers.is(R.drawable.audio)); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveEditCardIconWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.ImageView editCardIcon = ((android.widget.ImageView) (tc.findViewById(R.id.edit_card_icon)));     org.junit.Assert.assertThat(editCardIcon, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.notNullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveEditCardLabelWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.TextView editCardLabel = ((android.widget.TextView) (tc.findViewById(R.id.edit_card_label)));     org.junit.Assert.assertThat(editCardLabel.getText().toString(), org.hamcrest.CoreMatchers.is("Edit this flashcard")); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveDeleteCardIconWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.ImageView deleteCardIcon = ((android.widget.ImageView) (tc.findViewById(R.id.delete_card_icon)));     org.junit.Assert.assertThat(deleteCardIcon, org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.notNullValue())); }
https://github.com/translation-cards/translation-cards.git,TranslationCardItemTest,shouldHaveDeleteCardLabelWhenAttributeSet,{     org.mercycorps.translationcards.view.TranslationCardItem tc = getTranslationCardItemWithEditAndDeleteButtonsConfiguredToShow();     android.widget.TextView deleteCardLabel = ((android.widget.TextView) (tc.findViewById(R.id.delete_card_label)));     org.junit.Assert.assertThat(deleteCardLabel.getText().toString(), org.hamcrest.CoreMatchers.is("Delete this flashcard")); }
https://github.com/jberkel/sms-backup-plus.git,TokenRefresherTest,shouldInvalidateTokenOnRefresh,{     when(authPreferences.getOauth2Token()).thenReturn("token");     when(authPreferences.getOauth2Username()).thenReturn("username");     when(accountManager.getAuthToken(notNull(android.accounts.Account.class), anyString(), isNull(android.os.Bundle.class), anyBoolean(), any(android.accounts.AccountManagerCallback.class), any(android.os.Handler.class))).thenReturn(mock(android.accounts.AccountManagerFuture.class));     try {         refresher.refreshOAuth2Token();         org.junit.Assert.fail("expected error ");     } catch (com.zegoggles.smssync.auth.TokenRefreshException e) {         assertThat(e.getMessage()).isEqualTo("no bundle received from accountmanager");     }     verify(accountManager).invalidateAuthToken(com.zegoggles.smssync.activity.auth.AccountManagerAuthActivity.GOOGLE_TYPE, "token"); }
https://github.com/jberkel/sms-backup-plus.git,TokenRefresherTest,shouldHandleExceptionsThrownByFuture,{     when(authPreferences.getOauth2Token()).thenReturn("token");     when(authPreferences.getOauth2Username()).thenReturn("username");     android.accounts.AccountManagerFuture<android.os.Bundle> future = mock(android.accounts.AccountManagerFuture.class);     when(accountManager.getAuthToken(notNull(android.accounts.Account.class), anyString(), isNull(android.os.Bundle.class), anyBoolean(), any(android.accounts.AccountManagerCallback.class), any(android.os.Handler.class))).thenReturn(future);     android.accounts.AuthenticatorException exception = new android.accounts.AuthenticatorException();     when(future.getResult()).thenThrow(exception);     try {         refresher.refreshOAuth2Token();         org.junit.Assert.fail("expected exception");     } catch (com.zegoggles.smssync.auth.TokenRefreshException e) {         assertThat(e.getCause()).isSameAs(exception);     }     verify(accountManager).invalidateAuthToken(com.zegoggles.smssync.activity.auth.AccountManagerAuthActivity.GOOGLE_TYPE, "token"); }
https://github.com/jberkel/sms-backup-plus.git,BackupCursorsTest,shouldIterateOverAllContainedCursors,{     for (int i = 0; i < cursors.count(); i++) {         assertThat(cursors.hasNext()).isTrue();         com.zegoggles.smssync.service.BackupCursors.CursorAndType cursorAndType = cursors.next();         assertThat(cursorAndType).isNotNull();         assertThat(cursorAndType.cursor).isNotNull();         assertThat(cursorAndType.type).isNotNull();     }     assertThat(cursors.hasNext()).isFalse();     try {         cursors.next();         org.junit.Assert.fail("expected exception");     } catch (java.util.NoSuchElementException e) {     } }
https://github.com/openwebnet/openwebnet-android.git,AutomationModelTest,testAutomationModelAddBuilder_success,{     com.github.openwebnet.model.AutomationModel automation = com.github.openwebnet.model.AutomationModel.addBuilder().environment(AUTOMATION_ENVIRONMENT).gateway(AUTOMATION_GATEWAY).name(AUTOMATION_NAME).where(AUTOMATION_WHERE).type(AUTOMATION_TYPE).bus(AUTOMATION_BUS).favourite(AUTOMATION_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", automation.getUuid());     assertCommonFields(automation); }
https://github.com/openwebnet/openwebnet-android.git,AutomationModelTest,testAutomationModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.AutomationModel automation = com.github.openwebnet.model.AutomationModel.updateBuilder(LIGHT_UUID).environment(AUTOMATION_ENVIRONMENT).gateway(AUTOMATION_GATEWAY).name(AUTOMATION_NAME).where(AUTOMATION_WHERE).type(AUTOMATION_TYPE).bus(AUTOMATION_BUS).favourite(AUTOMATION_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, automation.getUuid());     assertCommonFields(automation); }
https://github.com/openwebnet/openwebnet-android.git,DeviceModelTest,testDeviceModelAddBuilder_success,{     com.github.openwebnet.model.DeviceModel device = com.github.openwebnet.model.DeviceModel.addBuilder().environment(DEVICE_ENVIRONMENT).gateway(DEVICE_GATEWAY).name(DEVICE_NAME).request(DEVICE_REQUEST).response(DEVICE_RESPONSE).favourite(DEVICE_FAVOURITE).runOnLoad(DEVICE_RUN_ON_LOAD).showConfirmation(DEVICE_CONFIRMATION).build();     org.junit.Assert.assertNotNull("invalid uuid", device.getUuid());     assertCommonFields(device); }
https://github.com/openwebnet/openwebnet-android.git,DeviceModelTest,testDeviceModelUpdateBuilder_success,{     java.lang.String DEVICE_UUID = "myUUid";     com.github.openwebnet.model.DeviceModel device = com.github.openwebnet.model.DeviceModel.updateBuilder(DEVICE_UUID).environment(DEVICE_ENVIRONMENT).gateway(DEVICE_GATEWAY).name(DEVICE_NAME).request(DEVICE_REQUEST).response(DEVICE_RESPONSE).favourite(DEVICE_FAVOURITE).runOnLoad(DEVICE_RUN_ON_LOAD).showConfirmation(DEVICE_CONFIRMATION).build();     org.junit.Assert.assertEquals("invalid uuid", DEVICE_UUID, device.getUuid());     assertCommonFields(device); }
https://github.com/openwebnet/openwebnet-android.git,EnergyModelTest,testEnergyModelAddBuilder_success,{     com.github.openwebnet.model.EnergyModel energy = com.github.openwebnet.model.EnergyModel.addBuilder().environment(ENERGY_ENVIRONMENT).gateway(ENERGY_GATEWAY).name(ENERGY_NAME).where(ENERGY_WHERE).version(ENERGY_VERSION).favourite(ENERGY_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", energy.getUuid());     assertCommonFields(energy); }
https://github.com/openwebnet/openwebnet-android.git,EnergyModelTest,testEnergyModelUpdateBuilder_success,{     java.lang.String ENERGY_UUID = "myUUid";     com.github.openwebnet.model.EnergyModel energy = com.github.openwebnet.model.EnergyModel.updateBuilder(ENERGY_UUID).environment(ENERGY_ENVIRONMENT).gateway(ENERGY_GATEWAY).name(ENERGY_NAME).where(ENERGY_WHERE).version(ENERGY_VERSION).favourite(ENERGY_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", ENERGY_UUID, energy.getUuid());     assertCommonFields(energy); }
https://github.com/openwebnet/openwebnet-android.git,IpcamModelTest,testIpcamModelAddBuilder_success,{     com.github.openwebnet.model.IpcamModel ipcam = com.github.openwebnet.model.IpcamModel.addBuilder().environment(IPCAM_ENVIRONMENT).name(IPCAM_NAME).url(IPCAM_URL).streamType(com.github.openwebnet.model.IpcamModel.StreamType.MJPEG).favourite(IPCAM_FAVOURITE).username(IPCAM_USERNAME).password(IPCAM_PASSWORD).build();     org.junit.Assert.assertNotNull("invalid uuid", ipcam.getUuid());     assertCommonFields(ipcam); }
https://github.com/openwebnet/openwebnet-android.git,IpcamModelTest,testIpcamModelUpdateBuilder_success,{     java.lang.String IPCAM_UUID = "myUUid";     com.github.openwebnet.model.IpcamModel ipcam = com.github.openwebnet.model.IpcamModel.updateBuilder(IPCAM_UUID).environment(IPCAM_ENVIRONMENT).name(IPCAM_NAME).url(IPCAM_URL).streamType(com.github.openwebnet.model.IpcamModel.StreamType.MJPEG).favourite(IPCAM_FAVOURITE).username(IPCAM_USERNAME).password(IPCAM_PASSWORD).build();     org.junit.Assert.assertEquals("invalid uuid", IPCAM_UUID, ipcam.getUuid());     assertCommonFields(ipcam); }
https://github.com/openwebnet/openwebnet-android.git,LightModelTest,testLightModelAddBuilder_success,{     com.github.openwebnet.model.LightModel light = com.github.openwebnet.model.LightModel.addBuilder().environment(LIGHT_ENVIRONMENT).gateway(LIGHT_GATEWAY).name(LIGHT_NAME).where(LIGHT_WHERE).type(LIGHT_TYPE).bus(LIGHT_BUS).favourite(LIGHT_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", light.getUuid());     assertCommonFields(light); }
https://github.com/openwebnet/openwebnet-android.git,LightModelTest,testLightModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.LightModel light = com.github.openwebnet.model.LightModel.updateBuilder(LIGHT_UUID).environment(LIGHT_ENVIRONMENT).gateway(LIGHT_GATEWAY).name(LIGHT_NAME).where(LIGHT_WHERE).type(LIGHT_TYPE).bus(LIGHT_BUS).favourite(LIGHT_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, light.getUuid());     assertCommonFields(light); }
https://github.com/openwebnet/openwebnet-android.git,ScenarioModelTest,testScenarioModelAddBuilder_success,{     com.github.openwebnet.model.ScenarioModel scenario = com.github.openwebnet.model.ScenarioModel.addBuilder().environment(SCENARIO_ENVIRONMENT).gateway(SCENARIO_GATEWAY).name(SCENARIO_NAME).where(SCENARIO_WHERE).favourite(SCENARIO_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", scenario.getUuid());     assertCommonFields(scenario); }
https://github.com/openwebnet/openwebnet-android.git,ScenarioModelTest,testScenarioModelUpdateBuilder_success,{     java.lang.String LIGHT_UUID = "myUUid";     com.github.openwebnet.model.ScenarioModel scenario = com.github.openwebnet.model.ScenarioModel.updateBuilder(LIGHT_UUID).environment(SCENARIO_ENVIRONMENT).gateway(SCENARIO_GATEWAY).name(SCENARIO_NAME).where(SCENARIO_WHERE).favourite(SCENARIO_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", LIGHT_UUID, scenario.getUuid());     assertCommonFields(scenario); }
https://github.com/openwebnet/openwebnet-android.git,SoundModelTest,testSoundModelAddBuilder_success,{     com.github.openwebnet.model.SoundModel sound = com.github.openwebnet.model.SoundModel.addBuilder().environment(SOUND_ENVIRONMENT).gateway(SOUND_GATEWAY).name(SOUND_NAME).where(SOUND_WHERE).source(SOUND_SOURCE).type(SOUND_TYPE).favourite(SOUND_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", sound.getUuid());     assertCommonFields(sound); }
https://github.com/openwebnet/openwebnet-android.git,SoundModelTest,testSoundModelUpdateBuilder_success,{     java.lang.String SOUND_UUID = "myUUid";     com.github.openwebnet.model.SoundModel sound = com.github.openwebnet.model.SoundModel.updateBuilder(SOUND_UUID).environment(SOUND_ENVIRONMENT).gateway(SOUND_GATEWAY).name(SOUND_NAME).where(SOUND_WHERE).source(SOUND_SOURCE).type(SOUND_TYPE).favourite(SOUND_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", SOUND_UUID, sound.getUuid());     assertCommonFields(sound); }
https://github.com/openwebnet/openwebnet-android.git,TemperatureModelTest,testTemperatureModelAddBuilder_success,{     com.github.openwebnet.model.TemperatureModel temperature = com.github.openwebnet.model.TemperatureModel.addBuilder().environment(TEMPERATURE_ENVIRONMENT).gateway(TEMPERATURE_GATEWAY).name(TEMPERATURE_NAME).where(TEMPERATURE_WHERE).favourite(TEMPERATURE_FAVOURITE).build();     org.junit.Assert.assertNotNull("invalid uuid", temperature.getUuid());     assertCommonFields(temperature); }
https://github.com/openwebnet/openwebnet-android.git,TemperatureModelTest,testTemperatureModelUpdateBuilder_success,{     java.lang.String TEMPERATURE_UUID = "myUUid";     com.github.openwebnet.model.TemperatureModel temperature = com.github.openwebnet.model.TemperatureModel.updateBuilder(TEMPERATURE_UUID).environment(TEMPERATURE_ENVIRONMENT).gateway(TEMPERATURE_GATEWAY).name(TEMPERATURE_NAME).where(TEMPERATURE_WHERE).favourite(TEMPERATURE_FAVOURITE).build();     org.junit.Assert.assertEquals("invalid uuid", TEMPERATURE_UUID, temperature.getUuid());     assertCommonFields(temperature); }
https://github.com/openwebnet/openwebnet-android.git,UtilityServiceTest,utilityService_getString,{     java.lang.String expected = utilityService.getString(R.string.drawer_menu_example);     org.junit.Assert.assertEquals("invalid string", "Example environment", expected); }
https://github.com/openwebnet/openwebnet-android.git,GatewayEditTextPreferenceTest,testValidHost,{     setupDialog();     android.widget.EditText mEditTextHost = ((android.widget.EditText) (gatewayEditTextPreference.getDialog().findViewById(R.id.editTextDialogGatewayHost)));     org.junit.Assert.assertNotNull("should not be null", mEditTextHost); }
https://github.com/fabienli/DokuwikiAndroid.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.fabienli.dokuwiki", appContext.getPackageName()); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsTextIfOk_returnsResponseBodyOnStatus200,{     java.lang.String result = httpRequestHelper.asTextIfOk(request);     org.junit.Assert.assertThat(result, org.hamcrest.CoreMatchers.is(com.bioid.authenticator.base.network.HttpRequestHelperTest.JSON_AS_STRING)); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsTextIfOk_throwsExceptionOnNon200Status,{     Mockito.when(request.code()).thenReturn(404);     try {         httpRequestHelper.asTextIfOk(request);     } catch (com.bioid.authenticator.base.network.HttpRequestHelper.Non200StatusException e) {         org.junit.Assert.assertThat(e.getStatus(), org.hamcrest.CoreMatchers.is(404));         return;     }     junit.framework.Assert.fail("no Non200StatusException thrown"); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsJsonIfOk_returnsJsonObjectOnStatus200,{     org.json.JSONObject result = httpRequestHelper.asJsonIfOk(request);     org.junit.Assert.assertThat(result, org.hamcrest.CoreMatchers.is(jsonObject)); }
https://github.com/BioID-GmbH/BWS-Android.git,HttpRequestHelperTest,testAsJsonIfOk_throwsExceptionOnNon200Status,{     Mockito.when(request.code()).thenReturn(404);     try {         httpRequestHelper.asJsonIfOk(request);     } catch (com.bioid.authenticator.base.network.HttpRequestHelper.Non200StatusException e) {         org.junit.Assert.assertThat(e.getStatus(), org.hamcrest.CoreMatchers.is(404));         return;     }     junit.framework.Assert.fail("no Non200StatusException thrown"); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,startBiometricOperation_ifTokenRequestFailed_resetBiometricOperation,{     Mockito.doThrow(java.lang.RuntimeException.class).when(tokenProvider).requestEnrollmentToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,startBiometricOperation_ifTokenRequestFailed_warningIsShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("token request failed");     Mockito.doThrow(e).when(tokenProvider).requestEnrollmentToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_counterIsIncremented,{     presenter.setSuccessfulUploads(10);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getSuccessfulUploads(), org.hamcrest.Matchers.is(11)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_resetBiometricOperation,{     presenter.setSuccessfulUploads(7);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_ifEnrollmentWasNotSuccessful_warningWillBeShown,{     presenter.setSuccessfulUploads(7);     java.lang.RuntimeException e = new java.lang.RuntimeException("enrollment not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).enroll(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,EnrollmentPresenterTest,onUploadSuccessful_ifEnrollmentWasNotSuccessful_failedOperationCounterIsIncremented,{     presenter.setSuccessfulUploads(7);     java.lang.RuntimeException e = new java.lang.RuntimeException("enrollment not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).enroll(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN);     presenter.setFailedOperations(0);     Mockito.when(com.bioid.authenticator.facialrecognition.enrollment.EnrollmentPresenterTest.ENROLLMENT_TOKEN.getMaxTries()).thenReturn(3);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getFailedOperations(), org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_detectFaceIsCalled,{     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.detectFaceCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_ifTokenRequestFailed_resetBiometricOperation,{     Mockito.doThrow(java.lang.RuntimeException.class).when(tokenProvider).requestVerificationToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,startBiometricOperation_ifTokenRequestFailed_warningIsShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("token request failed");     Mockito.doThrow(e).when(tokenProvider).requestVerificationToken(ctx);     presenter.startBiometricOperation();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onImageWithMotionProcessed_withChallenge_nextPairForChallengeWillSetToNextPair,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.nextPairForChallenge = 1;     presenter.onImageWithMotionProcessed();     org.junit.Assert.assertThat(presenter.nextPairForChallenge, org.hamcrest.Matchers.is(3)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_counterIsIncremented,{     presenter.setSuccessfulUploads(10);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.getSuccessfulUploads(), org.hamcrest.Matchers.is(11)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_ifFirstImageOfPairWasUploaded_waitForSecondImageUploadToComplete,{     presenter.setSuccessfulUploads(2);// one pair already uploaded + reference image of second pair      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_verifyWillBeCalled,{     presenter.setSuccessfulUploads(1);     presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_withChallengeResponse_ifLastImageOfChallengeWasUploaded_verifyWillBeCalled,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.setSuccessfulUploads(3);// mocked challenge: left, right, up      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,onUploadSuccessful_withChallengeResponse_ifNotLastImageOfChallengeWasUploaded_verifyNotWillBeCalled,{     presenter.setBwsToken(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN_WITH_CHALLENGE);     presenter.setSuccessfulUploads(1);// mocked challenge: left, right, up      presenter.onUploadSuccessful();     org.junit.Assert.assertThat(presenter.verifyCalled, org.hamcrest.Matchers.is(false)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_resetBiometricOperation,{     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.resetBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_ifVerificationWasNotSuccessful_warningWillBeShown,{     java.lang.RuntimeException e = new java.lang.RuntimeException("verification not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).verify(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN);     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.showWarningCalledWith, org.hamcrest.Matchers.is(e)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,verify_ifVerificationWasNotSuccessful_failedOperationCounterIsIncremented,{     java.lang.RuntimeException e = new java.lang.RuntimeException("verification not successful");     Mockito.doThrow(e).when(bioIdWebserviceClient).verify(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN);     presenter.setFailedOperations(0);     Mockito.when(com.bioid.authenticator.facialrecognition.verification.VerificationPresenterTest.VERIFICATION_TOKEN.getMaxTries()).thenReturn(3);     presenter.executeVerify = true;     presenter.verify();     org.junit.Assert.assertThat(presenter.getFailedOperations(), org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,VerificationPresenterTest,resetBiometricOperation_doesResetValues,{     presenter.nextPairForChallenge = 42;     presenter.executeReset = true;     presenter.resetBiometricOperation();     org.junit.Assert.assertThat(presenter.nextPairForChallenge, org.hamcrest.Matchers.is(0)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onPause_ifPermissionIsGranted_permissionStateIsResetToUnknown,{     presenter.permissionState = com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED;     presenter.onPause();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.UNKNOWN)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionGranted_permissionStateIsSetToGranted,{     presenter.onCameraPermissionGranted();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_GRANTED)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionGranted_startBiometricOperationWillBeCalled,{     presenter.onCameraPermissionGranted();     org.junit.Assert.assertThat(presenter.startBiometricOperationCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onCameraPermissionDenied_permissionStateIsSetToDenied,{     presenter.onCameraPermissionDenied();     org.junit.Assert.assertThat(presenter.permissionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.PermissionState.PERMISSION_DENIED)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_ifFaceDetectionIsNotOperationalCallNoFaceDetected,{     Mockito.when(faceDetection.isOperational()).thenReturn(false);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.onNoFaceDetectedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_ifFaceDetectionIsNotOperationalNoTimeoutWillBeStarted,{     Mockito.when(faceDetection.isOperational()).thenReturn(false);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.taskIdFaceTimeout, org.hamcrest.Matchers.is(org.hamcrest.core.IsNot.not(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID))); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,detectFace_stateIsSetToWaitingForImageWithFace,{     Mockito.when(faceDetection.isOperational()).thenReturn(true);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_FACE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForReferenceImage_taskIdForFaceTimeoutWillBeSet,{     Mockito.when(faceDetection.isOperational()).thenReturn(true);     presenter.detectFace();     org.junit.Assert.assertThat(presenter.taskIdFaceTimeout, org.hamcrest.Matchers.is(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,captureImagePair_nowWaitingForReferenceImage,{     presenter.captureImagePair(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.INDEX, com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.CURRENT_DIRECTION, com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenterTest.DESTINATION_DIRECTION);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_REFERENCE_IMAGE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithFace_onFaceDetectedWillBeCalled,{     Mockito.when(faceDetection.containsFace(img)).thenReturn(true);     mockStateWaitingForImageWithFace();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.onFaceDetectedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifNoFaceWasDetected_stateIsResetToWaitingForImageWithFace,{     Mockito.when(faceDetection.containsFace(img)).thenReturn(false);     mockStateWaitingForImageWithFace();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_FACE)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForReferenceImage_stateIsSetToWaitingForImageWithMotion,{     mockStateWaitingForReferenceImage();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.WAITING_FOR_IMAGE_WITH_MOTION)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithMotion_stateIsSetToOther,{     mockStateWaitingForImageWithMotion();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.imageDetectionState, org.hamcrest.Matchers.is(com.bioid.authenticator.facialrecognition.FacialRecognitionBasePresenter.ImageDetectionState.OTHER)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifWaitingForImageWithMotion_onImageWithMotionProcessedWasCalled,{     mockStateWaitingForImageWithMotion();     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.onImageWithMotionProcessedCalled, org.hamcrest.Matchers.is(true)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onImageCaptured_ifImageUploadFailed_failedUploadCounterDoesIncrement,{     presenter.failedUploads = 0;     mockStateWaitingForReferenceImage();     Mockito.doThrow(new com.bioid.authenticator.base.network.bioid.webservice.NotRecognizedException()).when(bioIdWebserviceClient).uploadImage(ArgumentMatchers.any(com.bioid.authenticator.base.image.Yuv420Image.class), ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.token.BwsToken.class), ArgumentMatchers.any(com.bioid.authenticator.base.network.bioid.webservice.MovementDirection.class), ArgumentMatchers.anyInt());     presenter.onImageCaptured(img);     org.junit.Assert.assertThat(presenter.failedUploads, org.hamcrest.Matchers.is(1)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,setupMotionTimeout_taskIdForMotionTimeoutWillBeSet,{     presenter.disableMotionTimeout = false;     backgroundHandler.doNothingOnRunWithDelay();     presenter.setupMotionTimeout();     org.junit.Assert.assertThat(presenter.taskIdMotionTimeout, org.hamcrest.Matchers.is(com.bioid.authenticator.testutil.SynchronousBackgroundHandler.TASK_ID)); }
https://github.com/BioID-GmbH/BWS-Android.git,FacialRecognitionBasePresenterTest,onUploadFailed_ifThreeOrLessUploadsDidFailAndTheReferenceImageUploadWasSuccessful_decreaseTheCounter,{     presenter.failedOperations = 1;     presenter.successfulUploads = 3;     presenter.onUploadFailed(new com.bioid.authenticator.base.network.bioid.webservice.NotRecognizedException());     org.junit.Assert.assertThat(presenter.successfulUploads, org.hamcrest.Matchers.is(2)); }
https://github.com/Q115/Goalie_Android.git,FriendActivityInstrumentedTest,addContact,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_add_friends)).perform(androidx.test.espresso.action.ViewActions.click());     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).perform(androidx.test.espresso.action.ViewActions.clearText(), androidx.test.espresso.action.ViewActions.typeText("tes"));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withText(mActivityRule.getActivity().getString(R.string.add))).perform(androidx.test.espresso.action.ViewActions.click());     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_friend_status)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withText(mActivityRule.getActivity().getString(R.string.cancel))).perform(androidx.test.espresso.action.ViewActions.click());     // expecting to fail as view doesn't exist     try {         androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.add_username)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed()));     } catch (androidx.test.espresso.NoMatchingViewException e) {         return;     }     org.junit.Assert.assertTrue(false); }
https://github.com/Q115/Goalie_Android.git,MainActivityInstrumentedTest,menuClickProfileGoesToProfile,{     android.app.Instrumentation.ActivityMonitor activityMonitor = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().addMonitor(com.github.q115.goalie_android.ui.profile.ProfileActivity.class.getName(), null, false);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_profile)).perform(androidx.test.espresso.action.ViewActions.click());     com.github.q115.goalie_android.ui.profile.ProfileActivity targetActivity = ((com.github.q115.goalie_android.ui.profile.ProfileActivity) (activityMonitor.waitForActivity()));     org.junit.Assert.assertNotNull("Target Activity is not launched", targetActivity); }
https://github.com/Q115/Goalie_Android.git,MainActivityInstrumentedTest,menuClickFriendsGoesToFriends,{     android.app.Instrumentation.ActivityMonitor activityMonitor = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().addMonitor(com.github.q115.goalie_android.ui.friends.FriendsActivity.class.getName(), null, false);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.action_friends)).perform(androidx.test.espresso.action.ViewActions.click());     com.github.q115.goalie_android.ui.friends.FriendsActivity targetActivity = ((com.github.q115.goalie_android.ui.friends.FriendsActivity) (activityMonitor.waitForActivity()));     org.junit.Assert.assertNotNull("Target Activity is not launched", targetActivity); }
https://github.com/Q115/Goalie_Android.git,ImageHelperInstrumentedTest,initalization,{     org.junit.Assert.assertNotNull(com.github.q115.goalie_android.utils.ImageHelper.getInstance().getImagePrivateStorageDirectory("")); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setPushID,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setPushID("new pushID");     org.junit.Assert.assertEquals("new pushID", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getPushID()); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setAccountUsername,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setAccountUsername("new AccountUsername");     org.junit.Assert.assertEquals("new AccountUsername", com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getAccountUsername()); }
https://github.com/Q115/Goalie_Android.git,PreferenceHelperInstrumentedTest,setLastSyncedTimeEpoch,{     com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().setLastSyncedTimeEpoch(22);     org.junit.Assert.assertEquals(22, com.github.q115.goalie_android.utils.PreferenceHelper.getInstance().getLastSyncedTimeEpoch()); }
https://github.com/Q115/Goalie_Android.git,GoalFeedTest,initConstructor,{     com.github.q115.goalie_android.models.GoalFeed goal = new com.github.q115.goalie_android.models.GoalFeed("guid", 50, "createdUsername", 2, com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success);     com.github.q115.goalie_android.models.GoalFeed goalTest = new com.github.q115.goalie_android.models.GoalFeed();     goalTest.guid = "guid";     goalTest.createdUsername = "createdUsername";     goalTest.upvoteCount = 2;     goalTest.wager = 50;     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalFeedEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,GoalTest,initConstructor1,{     com.github.q115.goalie_android.models.Goal goal = new com.github.q115.goalie_android.models.Goal("guid", "createdByUsername", "title", 111, 999, 100, "encouragement", com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success, "referee", java.lang.System.currentTimeMillis());     com.github.q115.goalie_android.models.Goal goalTest = new com.github.q115.goalie_android.models.Goal();     goalTest.guid = "guid";     goalTest.createdByUsername = "createdByUsername";     goalTest.title = "title";     goalTest.startDate = 111;     goalTest.endDate = 999;     goalTest.wager = 100;     goalTest.referee = "referee";     goalTest.encouragement = "encouragement";     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Success;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,GoalTest,initConstructor2,{     com.github.q115.goalie_android.models.Goal goal = new com.github.q115.goalie_android.models.Goal("newguid", com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Failed);     com.github.q115.goalie_android.models.Goal goalTest = new com.github.q115.goalie_android.models.Goal();     goalTest.guid = "newguid";     goalTest.goalCompleteResult = com.github.q115.goalie_android.models.Goal.GoalCompleteResult.Failed;     org.junit.Assert.assertTrue(test_util.ModelUtil.isGoalEqual(goal, goalTest)); }
https://github.com/Q115/Goalie_Android.git,UserTest,initConstructor2,{     com.github.q115.goalie_android.models.User user = new com.github.q115.goalie_android.models.User("username2", 200);     com.github.q115.goalie_android.models.User userTest = new com.github.q115.goalie_android.models.User();     userTest.username = "username2";     userTest.reputation = 200;     org.junit.Assert.assertTrue(test_util.ModelUtil.isUserEqual(user, userTest)); }
https://github.com/Q115/Goalie_Android.git,UserTest,initConstructor3,{     com.github.q115.goalie_android.models.User user = new com.github.q115.goalie_android.models.User("username3", "bio", 300, 999);     com.github.q115.goalie_android.models.User userTest = new com.github.q115.goalie_android.models.User();     userTest.username = "username3";     userTest.reputation = 300;     userTest.bio = "bio";     userTest.lastPhotoModifiedTime = 999;     org.junit.Assert.assertTrue(test_util.ModelUtil.isUserEqual(user, userTest)); }
https://github.com/Q115/Goalie_Android.git,NewGoalPresenterUnitTest,getOptions,{     org.junit.Assert.assertNotNull(mPresenter.getSublimePickerOptions(0)); }
https://github.com/OpenStack-mobile/summit-app-android.git,DeserializerTest,memberOverwritingTest,{     final java.lang.String json = "{\"id\":13867,\"first_name\":\"Sebastian\",\"last_name\":\"Marcet\",\"gender\":\"Male\",\"bio\":null,\"linked_in\":\"http:\\/\\/www.linkedin.com\\/in\\/smarcet\",\"irc\":null,\"twitter\":null,\"pic\":\"https:\\/\\/devbranch.openstack.org\\/profile_images\\/members\\/13867\",\"attendee\":{\"id\":5720,\"summit_hall_checked_in\":false,\"summit_hall_checked_in_date\":null,\"shared_contact_info\":false,\"member_id\":13867,\"schedule\":[],\"tickets\":[]},\"feedback\":[{\"id\":147,\"rate\":5,\"note\":\"\\\"great presentation! test feedback.  \\\\n\\\"\",\"created_date\":1472161995,\"event_id\":1,\"member_id\":13867,\"attendee_id\":5720}]}";     try {         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer summitAttendeeDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer personDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer feedbackDeserializer = new org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer presentationSpeakerDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(personDeserializer);                 org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer summitEventDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer(new org.openstack.android.summit.common.data_access.deserialization.GenericDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.PresentationLinkDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationVideoDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationSlideDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.SummitGroupEventDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.SummitEventWithFileDeserializer());                 org.openstack.android.summit.common.data_access.deserialization.IMemberDeserializer memberDeserializer = new org.openstack.android.summit.common.data_access.deserialization.MemberDeserializer(personDeserializer, presentationSpeakerDeserializer, summitAttendeeDeserializer, feedbackDeserializer, summitEventDeserializer);                 org.openstack.android.summit.common.entities.Member member = memberDeserializer.deserialize(json);                 member = session.copyToRealmOrUpdate(member);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer summitAttendeeDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitAttendeeDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer personDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer feedbackDeserializer = new org.openstack.android.summit.common.data_access.deserialization.FeedbackDeserializer();                 org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer presentationSpeakerDeserializer = new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(personDeserializer);                 org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer summitEventDeserializer = new org.openstack.android.summit.common.data_access.deserialization.SummitEventDeserializer(new org.openstack.android.summit.common.data_access.deserialization.GenericDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PresentationSpeakerDeserializer(new org.openstack.android.summit.common.data_access.deserialization.PersonDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.PresentationLinkDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationVideoDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.PresentationSlideDeserializer()), new org.openstack.android.summit.common.data_access.deserialization.SummitGroupEventDeserializer(), new org.openstack.android.summit.common.data_access.deserialization.SummitEventWithFileDeserializer());                 org.openstack.android.summit.common.data_access.deserialization.IMemberDeserializer memberDeserializer = new org.openstack.android.summit.common.data_access.deserialization.MemberDeserializer(personDeserializer, presentationSpeakerDeserializer, summitAttendeeDeserializer, feedbackDeserializer, summitEventDeserializer);                 org.openstack.android.summit.common.entities.Member member = memberDeserializer.deserialize(json);                 member = session.copyToRealmOrUpdate(member);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });     } catch (java.lang.Exception ex) {     }     org.openstack.android.summit.common.entities.Member member = org.openstack.android.summit.common.utils.RealmFactory.getSession().where(org.openstack.android.summit.common.entities.Member.class).equalTo("id", 13867).findFirst();     org.junit.Assert.assertTrue(member.getFeedback().size() > 0); }
https://github.com/OpenStack-mobile/summit-app-android.git,ModelTest,memberOverwritingTest,{     try {         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Summit summit = new org.openstack.android.summit.common.entities.Summit();                 summit.setId(1);                 summit.setName("test summit");                 summit = session.copyToRealmOrUpdate(summit);                 org.openstack.android.summit.common.entities.SummitEvent event = new org.openstack.android.summit.common.entities.SummitEvent();                 event.setId(1);                 event.setName("test event");                 event.setSummit(summit);                 event = session.copyToRealmOrUpdate(event);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Member member = new org.openstack.android.summit.common.entities.Member();                 member.setId(1);                 member.setFirstName("Sebastian");                 member.setLastName("Marcet");                 member = session.copyToRealmOrUpdate(member);                 org.openstack.android.summit.common.entities.SummitEvent event = session.where(org.openstack.android.summit.common.entities.SummitEvent.class).equalTo("id", 1).findFirst();                 org.openstack.android.summit.common.entities.Feedback feedback1 = new org.openstack.android.summit.common.entities.Feedback();                 feedback1.setId(1);                 feedback1.setRate(1);                 feedback1.setReview("test");                 feedback1.setOwner(member);                 feedback1.setEvent(event);                 feedback1 = session.copyToRealmOrUpdate(feedback1);                 member.getFeedback().add(feedback1);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });         org.openstack.android.summit.common.utils.RealmFactory.transaction(new org.openstack.android.summit.common.utils.RealmFactory.IRealmCallback<org.openstack.android.summit.common.utils.Void>() {             @java.lang.Override             public org.openstack.android.summit.common.utils.Void callback(io.realm.Realm session) throws java.lang.Exception {                 org.openstack.android.summit.common.entities.Member member = new org.openstack.android.summit.common.entities.Member();                 member.setId(1);                 member.setFirstName("Sebastian");                 member.setLastName("Marcet");                 member = session.copyToRealmOrUpdate(member);                 org.openstack.android.summit.common.entities.SummitEvent event = session.where(org.openstack.android.summit.common.entities.SummitEvent.class).equalTo("id", 1).findFirst();                 org.openstack.android.summit.common.entities.Feedback feedback1 = new org.openstack.android.summit.common.entities.Feedback();                 feedback1.setId(1);                 feedback1.setRate(1);                 feedback1.setReview("test");                 feedback1.setOwner(member);                 feedback1.setEvent(event);                 feedback1 = session.copyToRealmOrUpdate(feedback1);                 member.getFeedback().add(feedback1);                 return org.openstack.android.summit.common.utils.Void.getInstance();             }         });     } catch (java.lang.Exception ex) {     }     org.openstack.android.summit.common.entities.Member member = org.openstack.android.summit.common.utils.RealmFactory.getSession().where(org.openstack.android.summit.common.entities.Member.class).equalTo("id", 1).findFirst();     org.junit.Assert.assertTrue(member.getFeedback().size() > 0); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_Presentation_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "Presentation";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitEventType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitEventType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.EventType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_PresentationSpeaker_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "PresentationSpeaker";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.PresentationSpeaker.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitTicketType_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitTicketType";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.TicketType.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitVenue_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitVenue";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.Venue.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_SummitVenueRoom_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "SummitVenueRoom";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.VenueRoom.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_PresentationCategory_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "PresentationCategory";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.Track.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,ClassResolverTests,fromName_MySchedule_returnsCorrectType,{     // Arrange     org.openstack.android.summit.common.data_access.data_polling.ClassResolver classResolver = new org.openstack.android.summit.common.data_access.data_polling.ClassResolver();     java.lang.String className = "MySchedule";     // Act     java.lang.Class type = classResolver.fromName(className);     // Assert     org.junit.Assert.assertEquals(type, org.openstack.android.summit.common.entities.SummitEvent.class); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_stringValue_popReturnsCorrectInstance,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     java.lang.String value = "test_value";     // Act     navigationParametersStore.put(key, value);     java.lang.String valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     // Assert     org.junit.Assert.assertEquals(value, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_NamedDTOInstance_popReturnsCorrectInstance,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     org.openstack.android.summit.common.DTOs.NamedDTO value = new org.openstack.android.summit.common.DTOs.NamedDTO();     // Act     navigationParametersStore.put(key, value);     org.openstack.android.summit.common.DTOs.NamedDTO valueFromStore = navigationParametersStore.pop(key, org.openstack.android.summit.common.DTOs.NamedDTO.class);     // Assert     org.junit.Assert.assertEquals(value, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,put_NamedDTOInstanceAnThenOverrideWithAnotherValue_popReturnsInstancePutOnSecondCall,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     org.openstack.android.summit.common.DTOs.NamedDTO value1 = new org.openstack.android.summit.common.DTOs.NamedDTO();     org.openstack.android.summit.common.DTOs.NamedDTO value2 = new org.openstack.android.summit.common.DTOs.NamedDTO();     // Act     navigationParametersStore.put(key, value1);     navigationParametersStore.put(key, value2);     org.openstack.android.summit.common.DTOs.NamedDTO valueFromStore = navigationParametersStore.pop(key, org.openstack.android.summit.common.DTOs.NamedDTO.class);     // Assert     org.junit.Assert.assertEquals(value2, valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,NavigationParametersStoreTests,get_stringValue_keyIsRemovedFromStoreAfterPop,{     // Arrange     org.openstack.android.summit.common.NavigationParametersStore navigationParametersStore = new org.openstack.android.summit.common.NavigationParametersStore();     java.lang.String key = "test_key";     java.lang.String value = "test_value";     // Act     navigationParametersStore.put(key, value);     java.lang.String valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     valueFromStore = navigationParametersStore.pop(key, java.lang.String.class);     // Assert     org.junit.Assert.assertNull(valueFromStore); }
https://github.com/OpenStack-mobile/summit-app-android.git,UtilTest,htmlParserTest,{     java.lang.String input = "<p><span>Project Onboarding gives attendees a chance to meet some of the project team and get to know the project. Attendees will learn about the project itself, the code structure/ overall architecture, etc, and places where contribution is needed. Attendees will also get to know some of the core contributors and other established community members. Ideally, attendees will know/ have completed the basics of contribution (i.e. irc, gerrit, Launchpad, StoryBoard, Foundation Membership) BEFORE attending the session. All of this can be done through our Contributor Guide[1]. [1] https://docs.openstack.org/contributors/code-and-documentation/index.html</span></p>";     java.lang.String desiredOutput = "<p><span>Project Onboarding gives attendees a chance to meet some of the project team and get to know the project. Attendees will learn about the project itself, the code structure/ overall architecture, etc, and places where contribution is needed. Attendees will also get to know some of the core contributors and other established community members. Ideally, attendees will know/ have completed the basics of contribution (i.e. irc, gerrit, Launchpad, StoryBoard, Foundation Membership) BEFORE attending the session. All of this can be done through our Contributor Guide[1]. [1] <a href=\"https://docs.openstack.org/contributors/code-and-documentation/index.html\">https://docs.openstack.org/contributors/code-and-documentation/index.html</a></span></p>";     java.lang.String output = org.openstack.android.summit.common.utils.HtmlTextParser.convertLinksToAnchorTags(input);     org.junit.Assert.assertTrue(desiredOutput.contentEquals(output)); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityLayoutTest,shouldHandleClickCorrectly,{     com.forgerock.authenticator.identity.Identity identity = com.forgerock.authenticator.identity.Identity.builder().setIssuer(ISSUER).setAccountName(ACCOUNT_NAME).build(model);     android.app.Activity activity = org.robolectric.Robolectric.setupActivity(android.app.Activity.class);     com.forgerock.authenticator.identity.IdentityLayout layout = ((com.forgerock.authenticator.identity.IdentityLayout) (android.view.LayoutInflater.from(activity).inflate(R.layout.identitycell, null)));     layout.bind(identity);     layout.performClick();     android.content.Intent expectedIntent = new android.content.Intent(activity, com.forgerock.authenticator.MechanismActivity.class);     expectedIntent.putExtra("identityReference", identity.getOpaqueReference());     org.junit.Assert.assertEquals(Shadows.shadowOf(activity).getNextStartedActivity(), expectedIntent); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityLayoutTest,shouldBeAbleToDeleteViaContextualActionBar,{     com.forgerock.authenticator.identity.Identity identity = com.forgerock.authenticator.identity.Identity.builder().setIssuer(ISSUER).setAccountName(ACCOUNT_NAME).build(model);     android.app.Activity activity = org.robolectric.Robolectric.setupActivity(android.app.Activity.class);     // ActionModes can only be created when the View creating it has a parent. Therefore, we     // must create a dummy FrameLayout to contain our test Views whenever we wish to test     // ActionModes or Contextual Action Bars.     android.widget.FrameLayout frameLayout = new android.widget.FrameLayout(activity);     activity.addContentView(frameLayout, new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));     com.forgerock.authenticator.identity.IdentityLayout layout = ((com.forgerock.authenticator.identity.IdentityLayout) (android.view.LayoutInflater.from(activity).inflate(R.layout.identitycell, null)));     layout.bind(identity);     frameLayout.addView(layout);     layout.performLongClick();     android.view.ActionMode actionMode = layout.getActionMode();     actionMode.getMenu().performIdentifierAction(R.id.action_delete, 0);     android.content.Intent expectedIntent = new android.content.Intent(activity, com.forgerock.authenticator.delete.DeleteIdentityActivity.class);     expectedIntent.putExtra("identityReference", identity.getOpaqueReference());     org.junit.Assert.assertEquals(Shadows.shadowOf(activity).getNextStartedActivity(), expectedIntent); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityTest,canAddMechanism,{     BDDMockito.given(identityDatabase.addMechanism(Matchers.any(com.forgerock.authenticator.mechanisms.base.Mechanism.class))).willReturn(1L);     com.forgerock.authenticator.mechanisms.base.Mechanism.PartialMechanismBuilder mechanismBuilder = MINIMUM_OATH_BUILDER;     com.forgerock.authenticator.mechanisms.base.Mechanism mechanism = identity.addMechanism(mechanismBuilder);     org.junit.Assert.assertTrue(identity.getMechanisms().contains(mechanism)); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityTest,shouldGenerateCorrectOpaqueReference,{     java.util.List<java.lang.String> opaqueReference = identity.getOpaqueReference();     org.junit.Assert.assertEquals(opaqueReference.get(0), "ForgeRock:test.user"); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityTest,shouldValidateIfStoredAndMechanismsValidate,{     BDDMockito.given(identityDatabase.addMechanism(Matchers.any(com.forgerock.authenticator.mechanisms.base.Mechanism.class))).willReturn(1L);     com.forgerock.authenticator.mechanisms.base.Mechanism.PartialMechanismBuilder mechanismBuilder = MINIMUM_OATH_BUILDER.setId(1);     com.forgerock.authenticator.identity.Identity identity = com.forgerock.authenticator.identity.Identity.builder().setIssuer("ForgeRock").setAccountName("test.user").setId(1).setMechanisms(java.util.Arrays.asList(mechanismBuilder)).build(model);     org.junit.Assert.assertTrue(identity.validate()); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityTest,shouldNotValidateIfNotStored,{     com.forgerock.authenticator.identity.Identity identity = com.forgerock.authenticator.identity.Identity.builder().setIssuer("ForgeRock").setAccountName("test.user").build(model);     org.junit.Assert.assertFalse(identity.validate()); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityTest,shouldNotValidateIfMechanismsDoNotValidate,{     BDDMockito.given(identityDatabase.addMechanism(Matchers.any(com.forgerock.authenticator.mechanisms.base.Mechanism.class))).willReturn(-1L);     com.forgerock.authenticator.mechanisms.base.Mechanism.PartialMechanismBuilder mechanismBuilder = MINIMUM_OATH_BUILDER;     com.forgerock.authenticator.identity.Identity identity = com.forgerock.authenticator.identity.Identity.builder().setIssuer("ForgeRock").setAccountName("test.user").setId(1).build(model);     identity.addMechanism(mechanismBuilder);     org.junit.Assert.assertFalse(identity.validate()); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,OathTest,shouldProduceMapWithMinimumValuesSet,{     java.util.Map<java.lang.String, java.lang.String> map = com.forgerock.authenticator.mechanisms.oath.Oath.builder().setType("totp").setSecret("JMEZ2W7D462P3JYBDG2HV7PFBM").setMechanismUID("0").build(identity).asMap();     com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(map, null);     org.junit.Assert.assertEquals(map.size(), 6);     for (java.lang.String key : map.keySet()) {         com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(map.get(key), null);     } }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cantSaveDuplicateIdentity,{     com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(database.addIdentity(BASIC_IDENTITY), -1L);     org.junit.Assert.assertEquals(database.addIdentity(BASIC_IDENTITY), -1L); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cannotAddMechanismWithoutFirstAddingIdentity,{     org.junit.Assert.assertEquals(database.addMechanism(BASIC_MECHANISM), -1); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cantAddDuplicateMechanism,{     com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(database.addMechanism(PREREQUISITE_MECHANISM), -1L);     org.junit.Assert.assertEquals(database.addMechanism(PREREQUISITE_MECHANISM), -1L); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cannotDuplicateMechanismUIDs,{     com.forgerock.authenticator.mechanisms.base.Mechanism mechanism = com.forgerock.authenticator.mechanisms.oath.Oath.builder().setMechanismUID("1").setType("hotp").setSecret("JMEZ2W7D462P3JYBDG2HV7PFBM").build(SAVED_IDENTITY);     com.forgerock.authenticator.mechanisms.base.Mechanism otherMechanism = com.forgerock.authenticator.mechanisms.push.Push.builder().setMechanismUID("1").setBase64Secret(base64value).build(SAVED_IDENTITY);     long id = database.addMechanism(mechanism);     long otherId = database.addMechanism(otherMechanism);     com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(id, -1L);     org.junit.Assert.assertEquals(otherId, -1L); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cantUpdateMechanismWithWrongId,{     com.forgerock.authenticator.mechanisms.oath.Oath.OathBuilder builder = com.forgerock.authenticator.mechanisms.oath.Oath.builder().setType("totp").setCounter("0").setMechanismUID("6789").setSecret("JMEZ2W7D462P3JYBDG2HV7PFBM");     com.forgerock.authenticator.mechanisms.base.Mechanism newValue = builder.setCounter("99").build(SAVED_IDENTITY);     org.junit.Assert.assertFalse(database.updateMechanism(345, newValue)); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cannotAddNotificationWithoutFirstAddingMechanism,{     org.junit.Assert.assertEquals(database.addNotification(BASIC_NOTIFICATION), -1); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cantSaveDuplicateNotification,{     com.forgerock.authenticator.storage.IdentityDatabaseTest.assertNotEquals(-1L, database.addNotification(PREREQUISITE_NOTIFICATION));     org.junit.Assert.assertEquals(-1L, database.addNotification(PREREQUISITE_NOTIFICATION)); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityDatabaseTest,cantUpdateNotificationWithWrongId,{     com.forgerock.authenticator.notifications.Notification newValue = com.forgerock.authenticator.notifications.PushNotification.builder().setPending(false).build(SAVED_MECHANISM);     org.junit.Assert.assertFalse(database.updateNotification(345, newValue)); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,IdentityActivityTest,clickingScanShouldStartScanActivity,{     com.forgerock.authenticator.IdentityActivity activity = org.robolectric.Robolectric.setupActivity(com.forgerock.authenticator.IdentityActivity.class);     org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(activity);     shadowActivity.grantPermissions(Manifest.permission.CAMERA);     shadowActivity.clickMenuItem(R.id.action_scan);     android.content.Intent expectedIntent = new android.content.Intent(activity, com.forgerock.authenticator.add.ScanActivity.class);     android.content.Intent actualIntent = Shadows.shadowOf(activity).getNextStartedActivity();     org.junit.Assert.assertEquals(actualIntent, expectedIntent); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,PushAuthActivityTest,approve,{     startActivity();     com.jraska.falcon.FalconSpoon.screenshot(mActivityRule.getActivity(), "approve");     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.slideToConfirm)).perform(swipeConfirmView());     junit.framework.Assert.assertTrue(mActivityRule.getActivity().isFinishing());     org.junit.Assert.assertFalse(notification.isPending());     junit.framework.Assert.assertTrue(notification.wasApproved()); }
https://github.com/WrenSecurity/forgerock-authenticator-android.git,SplashActivityTest,splashDisabled,{     mActivityRule.launchActivity(new android.content.Intent());     org.junit.Assert.assertTrue(mActivityRule.getActivity().isFinishing()); }
https://github.com/jameskbride/grocery-reminder.git,GooglePlacesNearbySearchTaskTest,whenGooglePlacesCausesAnErrorThenReturnAnEmptyListOfPlaces,{     se.walkercrou.places.GooglePlacesInterface googlePlacesMock = Mockito.mock(se.walkercrou.places.GooglePlacesInterface.class);     com.groceryreminder.domain.GroceryStoreManagerInterface groceryStoreManagerMock = Mockito.mock(com.groceryreminder.domain.GroceryStoreManagerInterface.class);     com.groceryreminder.domain.GooglePlacesNearbySearchTask task = new com.groceryreminder.domain.GooglePlacesNearbySearchTask(googlePlacesMock, groceryStoreManagerMock);     Mockito.when(googlePlacesMock.getNearbyPlacesRankedByDistance(Matchers.anyDouble(), Matchers.anyDouble(), Matchers.anyInt(), ((se.walkercrou.places.Param[]) (Matchers.anyVararg())))).thenThrow(se.walkercrou.places.exception.GooglePlacesException.class);     java.util.List<se.walkercrou.places.Place> places = task.doInBackground(new android.location.Location(android.location.LocationManager.GPS_PROVIDER));     org.junit.Assert.assertTrue(places.isEmpty()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationManagerTest,whenNoProvidersAreAvailableTheNoLocationIsFound,{     try {         shadowLocationManager.setLastKnownLocation(android.location.LocationManager.GPS_PROVIDER, null);         shadowLocationManager.setBestProvider(android.location.LocationManager.GPS_PROVIDER, false, new java.util.ArrayList<android.location.Criteria>());     } catch (java.lang.Exception e) {         org.junit.Assert.fail("Unexpected exception");     }     junit.framework.TestCase.assertNull(groceryStoreLocationManager.getLastKnownLocation()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenDistanceIsGreaterThanFiveMilesWhenPlacesAreFilteredByLocationThenPlacesOutsideOfFiveMilesAreNotReturned,{     setCurrentDistanceGreaterThanFiveMiles();     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     java.util.List<se.walkercrou.places.Place> actualPlaces = groceryStoreManager.filterPlacesByDistance(defaultLocation, places, com.groceryreminder.domain.GroceryReminderConstants.LOCATION_SEARCH_RADIUS_METERS);     org.junit.Assert.assertTrue(actualPlaces.isEmpty()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenPlacesWhenTheyArePersistedThenTheyCanBeRetrieved,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.persistGroceryStores(places);     android.database.Cursor cursor = reminderProvider.query(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, com.groceryreminder.data.ReminderContract.Locations.PROJECT_ALL, "", null, null);     org.junit.Assert.assertEquals(1, cursor.getCount()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenTheRadiusIsSetToFiftyFeetInMeters,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS, proximityAlert.getRadius(), 0.001); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenTheExpirationDoesNotExpire,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.PROXIMITY_ALERT_EXPIRATION, proximityAlert.getExpiration()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenThePendingIntentIsSetToBroadcast,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.robolectric.shadows.ShadowPendingIntent shadowPendingIntent = org.robolectric.Shadows.shadowOf(proximityAlert.getPendingIntent());     org.junit.Assert.assertTrue(shadowPendingIntent.isBroadcastIntent()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenTheStorePendingIntentIsSet,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.robolectric.shadows.ShadowPendingIntent shadowPendingIntent = org.robolectric.Shadows.shadowOf(proximityAlert.getPendingIntent());     org.robolectric.shadows.ShadowIntent shadowIntent = org.robolectric.Shadows.shadowOf(shadowPendingIntent.getSavedIntent());     org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryReminderConstants.ACTION_STORE_PROXIMITY_EVENT, shadowIntent.getAction()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenTheStorePendingIntentCancelsTheCurrentRequest,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.robolectric.shadows.ShadowPendingIntent shadowPendingIntent = org.robolectric.Shadows.shadowOf(proximityAlert.getPendingIntent());     org.junit.Assert.assertEquals(android.app.PendingIntent.FLAG_CANCEL_CURRENT, shadowPendingIntent.getFlags()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenProximityAlertIsAddedThenTheStorePendingIntentContainsTheStoreName,{     se.walkercrou.places.Place place = createDefaultGooglePlace();     java.util.List<se.walkercrou.places.Place> places = new java.util.ArrayList<se.walkercrou.places.Place>();     places.add(place);     groceryStoreManager.addProximityAlerts(places);     com.groceryreminder.shadows.ShadowLocationManager.ProximityAlert proximityAlert = shadowLocationManager.getProximityAlert(place.getLatitude(), place.getLongitude());     org.robolectric.shadows.ShadowPendingIntent shadowPendingIntent = org.robolectric.Shadows.shadowOf(proximityAlert.getPendingIntent());     org.junit.Assert.assertEquals(place.getName(), shadowPendingIntent.getSavedIntent().getStringExtra(com.groceryreminder.data.ReminderContract.Locations.NAME)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenLocationUpdatesAreRequestedThenLocationListenersAreAddedToTheLocationManager,{     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertFalse(locationListeners.isEmpty()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenLocationUpdatesAreRequestedThenAGPSListenerIsAddedToTheLocationManager,{     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertFalse(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenLocationUpdatesAreRequestedWithGPSUpdatesThenAGPSListenerIsAddedToTheLocationManager,{     groceryStoreManager.listenForLocationUpdates(true);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenLocationUpdatesAreRequestedThenANetworkListenerIsAddedToTheLocationManager,{     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.NETWORK_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,whenLocationUpdatesAreRequestedThenAPassiveListenerIsAddedToTheLocationManager,{     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertTrue(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.PASSIVE_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenLocationUpdatesHaveAlreadyBeenRequestedWhenUpdatesAreRequestedAgainThenAdditionalListenersAreNotAdded,{     groceryStoreManager.listenForLocationUpdates(false);     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryStoreManagerTest.NETWORK_PROVIDER_COUNT + com.groceryreminder.domain.GroceryStoreManagerTest.PASSIVE_PROVIDER_COUNT, locationListeners.size()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenTheGPSProviderIsNotEnabledWhenLocationUpdatesAreRequestedThenAGPSListenerIsNotAddedToTheLocationManager,{     shadowLocationManager.setProviderEnabled(android.location.LocationManager.GPS_PROVIDER, false);     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertFalse(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.GPS_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenTheNetworkProviderIsNotEnabledWhenLocationUpdatesAreRequestedThenANetworkListenerIsNotAddedToTheLocationManager,{     shadowLocationManager.setProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER, false);     groceryStoreManager.listenForLocationUpdates(false);     java.util.List<android.location.LocationListener> locationListeners = shadowLocationManager.getRequestLocationUpdateListeners();     org.junit.Assert.assertFalse(shadowLocationManager.getProvidersForListener(locationListeners.get(0)).contains(android.location.LocationManager.NETWORK_PROVIDER)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentIsNotSetWhenALocationWithAnAccuracyWorseThanTheMaximumAccuracyTheNewLocationIsNotBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS + 1);     org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(location)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsNotSetWhenALocationWithTheMaximumAccuracyThenTheNewLocationIsBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     org.junit.Assert.assertTrue(groceryStoreManager.isBetterThanCurrentLocation(location)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsNotSetWhenALocationWithLessThanMaximumAccuracyThenTheNewLocationIsBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS - 1);     org.junit.Assert.assertTrue(groceryStoreManager.isBetterThanCurrentLocation(location)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheCurrentLocationIsRequestedThenItIsReturned,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     org.junit.Assert.assertEquals(location, groceryStoreManager.getCurrentLocation()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationNotMoreAccurateThenItIsNotBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(location)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationIsSignificantlyMoreAccurateThenItIsBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS - 1);     groceryStoreManager.setLocation(location);     android.location.Location updatedLocation = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     updatedLocation.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     updatedLocation.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     updatedLocation.setAccuracy(location.getAccuracy() / 2);     org.junit.Assert.assertTrue(groceryStoreManager.isBetterThanCurrentLocation(updatedLocation)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationIsSignificantlyNewerThenItIsBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     android.location.Location updatedLocation = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     updatedLocation.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     updatedLocation.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     updatedLocation.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     updatedLocation.setTime(location.getTime() + com.groceryreminder.services.LocationUpdater.SIGNIFICANT_LOCATION_TIME_DELTA);     org.junit.Assert.assertTrue(groceryStoreManager.isBetterThanCurrentLocation(updatedLocation)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationIsMoreThanSignificantlyNewerThenItIsBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     android.location.Location updatedLocation = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     updatedLocation.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     updatedLocation.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     updatedLocation.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     updatedLocation.setTime((location.getTime() + com.groceryreminder.services.LocationUpdater.SIGNIFICANT_LOCATION_TIME_DELTA) + 1);     org.junit.Assert.assertTrue(groceryStoreManager.isBetterThanCurrentLocation(updatedLocation)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationIsNotSignificantlyNewerThenItIsNotBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     android.location.Location updatedLocation = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     updatedLocation.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     updatedLocation.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     updatedLocation.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     updatedLocation.setTime(location.getTime());     org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(updatedLocation)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreManagerTest,givenCurrentLocationIsSetWhenTheLocationIsNotSignificantlyNewerAndNotSignificantlyMoreAccurateThenItIsNotBetter,{     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     location.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     location.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS);     groceryStoreManager.setLocation(location);     android.location.Location updatedLocation = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     updatedLocation.setLatitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LATITUDE);     updatedLocation.setLongitude(com.groceryreminder.domain.GroceryStoreManagerTest.DEFAULT_LONGITUDE);     updatedLocation.setAccuracy(com.groceryreminder.domain.GroceryReminderConstants.MAXIMUM_ACCURACY_IN_METERS - 1);     updatedLocation.setTime(location.getTime());     org.junit.Assert.assertFalse(groceryStoreManager.isBetterThanCurrentLocation(updatedLocation)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheNotificationShouldBeCreated,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNotNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheSmallIconIsSet,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertEquals(R.drawable.ic_stat_maps_local_grocery_store, notification.icon); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheContentTitleIsSet,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.junit.Assert.assertEquals((org.robolectric.RuntimeEnvironment.application.getString(R.string.app_name) + ": ") + com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, notification.getContentTitle()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheContentTextIsSet,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.junit.Assert.assertEquals(org.robolectric.RuntimeEnvironment.application.getString(R.string.reminder_notification), notification.getContentText()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheVibrationIsSet,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.junit.Assert.assertArrayEquals(com.groceryreminder.domain.GroceryReminderConstants.PROXIMITY_VIBRATION_PATTERN, notification.getRealNotification().vibrate); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheDefaultNotificationSoundPlays,{     android.content.Intent intent = buildIntentToListenFor();     groceryStoreNotificationManager.sendNotification(intent);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.junit.Assert.assertEquals(Settings.System.DEFAULT_NOTIFICATION_URI, notification.getRealNotification().sound); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSavedThenTheStoreNameIsStoredAsTheMostRecentStore,{     groceryStoreNotificationManager.saveNoticeDetails(com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, java.lang.System.currentTimeMillis());     android.content.SharedPreferences sharedPreferences = org.robolectric.RuntimeEnvironment.application.getSharedPreferences(org.robolectric.RuntimeEnvironment.application.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     org.junit.Assert.assertEquals(com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, sharedPreferences.getString(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFIED_STORE_KEY, "")); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheNotificationTimeIsStoredAsTheMostRecentNotificationTime,{     long notificationTime = java.lang.System.currentTimeMillis();     groceryStoreNotificationManager.saveNoticeDetails(com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME, notificationTime);     android.content.SharedPreferences sharedPreferences = org.robolectric.RuntimeEnvironment.application.getSharedPreferences(org.robolectric.RuntimeEnvironment.application.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     org.junit.Assert.assertTrue(sharedPreferences.getLong(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFICATION_TIME, 0) > 0); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenThereAreNoStoresThenTheNotificationIsNotSent,{     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     shadowApplication.getContentResolver().delete(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, null, null);     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenThereIsAStoreNearbyThenTheNotificationIsSent,{     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNotNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentForTheSameStoreThenTheTheLastNotificationTimeForTheSameStoreIsSetAreSaved,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     android.content.SharedPreferences sharedPreferences = shadowApplication.getSharedPreferences(shadowApplication.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     sharedPreferences.edit().putString(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFIED_STORE_KEY, com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME).commit();     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     long currentTime = java.lang.System.currentTimeMillis();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), currentTime);     org.junit.Assert.assertEquals(currentTime, sharedPreferences.getLong(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFICATION_TIME_FOR_SAME_STORE, 0)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenANotificationIsSentThenTheTheNotificationIncludesTheStoreName,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     long currentTime = java.lang.System.currentTimeMillis();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), currentTime);     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.robolectric.shadows.ShadowNotification shadowNotification = ((org.robolectric.shadows.ShadowNotification) (org.robolectric.Shadows.shadowOf(notification)));     org.junit.Assert.assertTrue(((java.lang.String) (shadowNotification.getContentTitle())).contains(com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenThereAreStoresButNotNearbyThenTheNotificationIsNotSent,{     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) + 1 });     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenAStoreNotificationHasBeenStoredWhenARequestToSendANotificationWithTheTheSameStoreIsReceivedBeforeTheMinimumUpdateTimeForTheSameStoreThenTheNotificationIsNotSent,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     android.content.SharedPreferences sharedPreferences = shadowApplication.getSharedPreferences(shadowApplication.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     sharedPreferences.edit().putString(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFIED_STORE_KEY, com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME).putLong(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFICATION_TIME_FOR_SAME_STORE, java.lang.System.currentTimeMillis() - 1).commit();     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenAStoreNotificationHasBeenStoredWhenARequestToSendANotificationWithTheTheSameStoreAfterTheMinimumUpdateTimeForTheSameStoreIsReceivedThenTheNotificationIsSent,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     android.content.SharedPreferences sharedPreferences = shadowApplication.getSharedPreferences(shadowApplication.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     sharedPreferences.edit().putString(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFIED_STORE_KEY, com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME).putLong(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFICATION_TIME_FOR_SAME_STORE, com.groceryreminder.domain.GroceryReminderConstants.MIN_LOCATION_UPDATE_TIME_FOR_SAME_STORE_MILLIS + 1).commit();     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNotNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenAStoreNotificationHasBeenSentWhenARequestToSendANotificationIsReceivedUnderTheMinimumLocationUpdateTimeThenTheNotificationIsNotSent,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     android.content.SharedPreferences sharedPreferences = shadowApplication.getSharedPreferences(shadowApplication.getString(R.string.reminder_pref_key), android.content.Context.MODE_PRIVATE);     sharedPreferences.edit().putString(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFIED_STORE_KEY, com.groceryreminder.domain.GroceryStoreNotificationManagerTest.ARBITRARY_STORE_NAME + 1).putLong(com.groceryreminder.domain.GroceryReminderConstants.LAST_NOTIFICATION_TIME, java.lang.System.currentTimeMillis()).commit();     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenAStoreNotificationHasNotBeenSentWhenARequestToSendANotificationIsReceivedThenTheIsSent,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNotNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenNoRemindersExistThenNoNotificationIsSent,{     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     shadowApplication.getContentResolver().delete(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, null, null);     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     android.app.Notification notification = shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT);     org.junit.Assert.assertNull(notification); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,whenThereAreMultipleStoresNearbyThenOnlyOneNotificationIsSent,{     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowApplication shadowApplication = ((org.robolectric.shadows.ShadowApplication) (org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application)));     insertStoreLocation(shadowApplication);     insertStoreLocation(shadowApplication);     org.robolectric.shadows.ShadowLocation.setDistanceBetween(new float[]{ ((float) (com.groceryreminder.domain.GroceryReminderConstants.LOCATION_GEOFENCE_RADIUS_METERS)) });     groceryStoreNotificationManager.sendPotentialNotification(new android.location.Location(android.location.LocationManager.GPS_PROVIDER), java.lang.System.currentTimeMillis());     java.util.List<android.app.Notification> notifications = shadowNotificationManager.getAllNotifications();     org.junit.Assert.assertEquals(1, notifications.size()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenANotificationIsSentWhenTheNotificationIsActedOnThenTheRemindersActivityIsLaunched,{     groceryStoreNotificationManager.sendNotification(buildIntentToListenFor());     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.robolectric.shadows.ShadowPendingIntent shadowPendingIntent = org.robolectric.Shadows.shadowOf(notification.getRealNotification().contentIntent);     org.robolectric.shadows.ShadowIntent shadowIntent = org.robolectric.Shadows.shadowOf(shadowPendingIntent.getSavedIntent());     org.junit.Assert.assertEquals(com.groceryreminder.views.reminders.RemindersActivity.class.getName(), shadowIntent.getComponent().getClassName()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreNotificationManagerTest,givenANotificationIsSentWhenTheNotificationIsActedOnThenTheTheNotificationIsDismissed,{     groceryStoreNotificationManager.sendNotification(buildIntentToListenFor());     org.robolectric.shadows.ShadowNotificationManager shadowNotificationManager = getShadowNotificationManager();     org.robolectric.shadows.ShadowNotification notification = org.robolectric.Shadows.shadowOf(shadowNotificationManager.getNotification(com.groceryreminder.domain.GroceryReminderConstants.NOTIFICATION_PROXIMITY_ALERT));     org.junit.Assert.assertTrue((notification.getRealNotification().flags & android.app.Notification.FLAG_AUTO_CANCEL) == android.app.Notification.FLAG_AUTO_CANCEL); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationContentProviderTest,whenTheProviderIsCreatedThenItShouldBeInitialized,{     com.groceryreminder.data.GroceryStoreLocationContentProvider provider = new com.groceryreminder.data.GroceryStoreLocationContentProvider();     org.junit.Assert.assertTrue(provider.onCreate()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationContentProviderTest,givenALocationExistsWhenTheLocationIsDeletedThenOneDeletionWillOccur,{     android.content.ContentValues values = createDefaultLocationValues();     android.net.Uri expectedUri = provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);     int count = provider.delete(expectedUri, "", null);     org.junit.Assert.assertEquals(1, count); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationContentProviderTest,givenASelectionIsProvidedWhenALocationIsDeletedThenADeletionWillOccur,{     java.lang.String testName = "test";     android.content.ContentValues values = locationValuesBuilder.createDefaultLocationValues().withName(testName).build();     provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);     java.lang.String selection = com.groceryreminder.data.ReminderContract.Locations.NAME + " = ? ";     java.lang.String[] selectionArgs = new java.lang.String[]{ testName };     int count = provider.delete(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, selection, selectionArgs);     org.junit.Assert.assertEquals(1, count); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationContentProviderTest,whenMultipleLocationsAreDeletedThenMultipleDeletionsShouldHaveOccurred,{     android.content.ContentValues values = createDefaultLocationValues();     android.content.ContentValues secondValues = createDefaultLocationValues();     secondValues.put(com.groceryreminder.data.ReminderContract.Locations.PLACES_ID, values.getAsString(com.groceryreminder.data.ReminderContract.Locations.PLACES_ID + 1));     provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);     provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, secondValues);     int count = provider.delete(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, "", null);     org.junit.Assert.assertEquals(2, count); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreLocationContentProviderTest,whenLocationsAreQueriedThenTheRequestedProjectsShouldBeReturned,{     android.content.ContentValues values = createDefaultLocationValues();     provider.insert(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, values);     android.database.Cursor cursor = provider.query(com.groceryreminder.data.ReminderContract.Locations.CONTENT_URI, new java.lang.String[]{ com.groceryreminder.data.ReminderContract.Locations._ID }, "", null, null);     org.junit.Assert.assertEquals(0, cursor.getColumnIndex(com.groceryreminder.data.ReminderContract.Locations._ID));     cursor.close();     cursor = null; }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,whenTheProviderIsCreatedThenItShouldBeInitialized,{     com.groceryreminder.data.ReminderContentProvider provider = new com.groceryreminder.data.ReminderContentProvider();     org.junit.Assert.assertTrue(provider.onCreate()); }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,whenADuplicateReminderIsInsertedThenItThereIsNoConflict,{     android.content.ContentValues initialValues = createDefaultReminderValues();     provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, initialValues);     android.content.ContentValues duplicateValues = createDefaultReminderValues();     duplicateValues.put(com.groceryreminder.data.ReminderContract.Reminders.DESCRIPTION, initialValues.getAsString(com.groceryreminder.data.ReminderContract.Reminders.DESCRIPTION));     android.net.Uri expectedUri = provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, duplicateValues);     android.database.Cursor cursor = provider.query(expectedUri, com.groceryreminder.data.ReminderContract.Reminders.PROJECT_ALL, "", null, null);     org.junit.Assert.assertEquals(2, cursor.getCount());     cursor.close();     cursor = null; }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,givenAReminderExistsWhenTheReminderIsDeletedThenOneDeletionWillOccur,{     android.content.ContentValues values = createDefaultReminderValues();     android.net.Uri expectedUri = provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);     int count = provider.delete(expectedUri, "", null);     org.junit.Assert.assertEquals(1, count); }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,givenASelectionIsProvidedWhenAReminderIsDeletedThenADeletionWillOccur,{     java.lang.String testDescription = "test";     android.content.ContentValues values = new com.groceryreminder.testUtils.ReminderValuesBuilder().createDefaultReminderValues().withDescription(testDescription).build();     provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);     java.lang.String selection = com.groceryreminder.data.ReminderContract.Reminders.DESCRIPTION + " = ? ";     java.lang.String[] selectionArgs = new java.lang.String[]{ testDescription };     int count = provider.delete(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, selection, selectionArgs);     org.junit.Assert.assertEquals(1, count); }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,whenMultipleRemindersAreDeletedThenMultipleDeletionsShouldHaveOccurred,{     android.content.ContentValues values = createDefaultReminderValues();     android.content.ContentValues secondValues = createDefaultReminderValues();     provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);     provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, secondValues);     int count = provider.delete(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, "", null);     org.junit.Assert.assertEquals(2, count); }
https://github.com/jameskbride/grocery-reminder.git,ReminderContentProviderTest,whenRemindersAreQueriedThenTheRequestedProjectsShouldBeReturned,{     android.content.ContentValues values = createDefaultReminderValues();     provider.insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, values);     android.database.Cursor cursor = provider.query(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, new java.lang.String[]{ com.groceryreminder.data.ReminderContract.Reminders._ID }, "", null, null);     org.junit.Assert.assertEquals(0, cursor.getColumnIndex(com.groceryreminder.data.ReminderContract.Reminders._ID));     cursor.close();     cursor = null; }
https://github.com/jameskbride/grocery-reminder.git,ReminderDBHelperTest,whenTheDBHelperIsCreatedThenTheDatabaseNameShouldBeSet,{     org.junit.Assert.assertEquals(com.groceryreminder.data.ReminderDBHelperTest.REMINDER_DATABASE_NAME, dbHelper.getDatabaseName()); }
https://github.com/jameskbride/grocery-reminder.git,ReminderDBHelperTest,whenTheDBHelperIsUpgradedThenTheLocationsTableIsRecreated,{     android.content.ContentValues values = createDefaultLocationValues();     android.database.sqlite.SQLiteDatabase writableDatabase = insertLocationValues(values);     dbHelper.onUpgrade(writableDatabase, 0, 0);     android.database.sqlite.SQLiteDatabase readableDatabase = dbHelper.getReadableDatabase();     android.database.Cursor cursor = readableDatabase.query(com.groceryreminder.data.DBSchema.LOCATIONS, com.groceryreminder.data.ReminderContract.Locations.PROJECT_ALL, "", null, null, null, com.groceryreminder.data.ReminderContract.Locations.SORT_ORDER_DEFAULT, null);     org.junit.Assert.assertFalse(cursor.moveToNext());     cursor.close();     cursor = null; }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenADistanceThenTheDistanceShouldBeSet,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore("a name", 1.5, 1.0, 2.0);     org.junit.Assert.assertEquals(1.5, store.getDistance(), 0.001); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenALatitudeThenTheLatitudeShouldBeSet,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore("a name", 1.5, 1.0, 2.0);     org.junit.Assert.assertEquals(1.0, store.getLatitude(), 0.001); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenStoreAIsCloserWhenTwoStoresAreComparedThenStoreAIsGreater,{     com.groceryreminder.models.GroceryStore store1 = new com.groceryreminder.models.GroceryStore("test", 1.0, 1.0, 1.0);     com.groceryreminder.models.GroceryStore store2 = new com.groceryreminder.models.GroceryStore("test1", 0.0, 1.0, 1.0);     org.junit.Assert.assertEquals(1, store1.compareTo(store2)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenStoreBIsCloserWhenTwoStoresAreComparedThenStoreAIsLesser,{     com.groceryreminder.models.GroceryStore store1 = new com.groceryreminder.models.GroceryStore("test", 0.0, 1.0, 1.0);     com.groceryreminder.models.GroceryStore store2 = new com.groceryreminder.models.GroceryStore("test1", 1.0, 1.0, 1.0);     org.junit.Assert.assertEquals(-1, store1.compareTo(store2)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenBothStoresAreEquallyCloseWhenTheyAreComparedThenStoreAEqualsStoreB,{     com.groceryreminder.models.GroceryStore store1 = new com.groceryreminder.models.GroceryStore("test", 0.0, 1.0, 1.0);     com.groceryreminder.models.GroceryStore store2 = new com.groceryreminder.models.GroceryStore("test1", 0.0, 1.0, 1.0);     org.junit.Assert.assertEquals(0, store1.compareTo(store2)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreTest,givenTheSecondStoreIsNullWhenTwoStoresAreComparedThenStoreAIsGreater,{     com.groceryreminder.models.GroceryStore store1 = new com.groceryreminder.models.GroceryStore("test", 0.0, 1.0, 1.0);     org.junit.Assert.assertEquals(1, store1.compareTo(null)); }
https://github.com/jameskbride/grocery-reminder.git,ReminderTest,givenAReminderWithTextWhenToStringIsCalledThenTheTextIsReturned,{     com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, "test");     org.junit.Assert.assertEquals("test", reminder.toString()); }
https://github.com/jameskbride/grocery-reminder.git,BootBroadcastReceiverTest,whenTheBootCompletedIntentIsSentThenTheBroadcastReceiverListensForIt,{     android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_BOOT_COMPLETED);     org.robolectric.shadows.ShadowApplication shadowApplication = org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application);     org.junit.Assert.assertTrue(shadowApplication.hasReceiverForIntent(intent)); }
https://github.com/jameskbride/grocery-reminder.git,BootBroadcastReceiverTest,whenTheBootCompletedIntentIsReceivedThenTheGroceryLocatorServiceIsStarted,{     android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_BOOT_COMPLETED);     broadcastReceiver.onReceive(org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application).getApplicationContext(), intent);     android.content.Intent serviceIntent = org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application).peekNextStartedService();     org.junit.Assert.assertEquals(com.groceryreminder.services.GroceryLocatorService.class.getCanonicalName(), serviceIntent.getComponent().getClassName()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreBroadcastReceiverTest,whenAnIntentIsReceivedThenTheGroceryStoreNotificationServiceIsStarted,{     com.groceryreminder.domain.GroceryStoreLocationManagerInterface groceryStoreLocationManagerMock = getTestReminderModule().getGroceryStoreLocationManager();     android.location.Location location = new android.location.Location(android.location.LocationManager.GPS_PROVIDER);     location.setLatitude(1.0);     location.setLongitude(2.0);     Mockito.when(groceryStoreLocationManagerMock.getLastKnownLocation()).thenReturn(location);     broadcastReceiver.onReceive(org.robolectric.RuntimeEnvironment.application, buildIntentToListenFor());     android.content.Intent serviceIntent = org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application).peekNextStartedService();     org.junit.Assert.assertEquals(com.groceryreminder.services.GroceryStoreNotificationService.class.getCanonicalName(), serviceIntent.getComponent().getClassName()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreBroadcastReceiverTest,givenNoLocationIsAvailableWhenAnIntentIsReceivedThenTheGroceryStoreNotificationSerivceIsNotStarted,{     com.groceryreminder.domain.GroceryStoreLocationManagerInterface groceryStoreLocationManagerMock = getTestReminderModule().getGroceryStoreLocationManager();     Mockito.when(groceryStoreLocationManagerMock.getLastKnownLocation()).thenReturn(null);     broadcastReceiver.onReceive(org.robolectric.RuntimeEnvironment.application, buildIntentToListenFor());     android.content.Intent serviceIntent = org.robolectric.Shadows.shadowOf(org.robolectric.RuntimeEnvironment.application).peekNextStartedService();     org.junit.Assert.assertNull(serviceIntent); }
https://github.com/jameskbride/grocery-reminder.git,AddReminderFragmentTest,whenTheReminderTextIsIsEmptyThenTheAddReminderButtonIsDisabled,{     com.groceryreminder.views.reminders.AddReminderFragment reminderListFragment = getAddReminderFragmentFromOnCreateView();     android.widget.Button addReminderButton = getAddReminderButton(reminderListFragment);     org.junit.Assert.assertFalse(addReminderButton.isEnabled()); }
https://github.com/jameskbride/grocery-reminder.git,AddReminderFragmentTest,whenTheReminderTextIsIsSetThenTheAddReminderButtonIsEnabled,{     com.groceryreminder.views.reminders.AddReminderFragment reminderListFragment = getAddReminderFragmentFromOnCreateView();     android.widget.EditText reminderText = getReminderText(reminderListFragment);     reminderText.setText("test");     android.widget.Button addReminderButton = getAddReminderButton(reminderListFragment);     org.junit.Assert.assertTrue(addReminderButton.isEnabled()); }
https://github.com/jameskbride/grocery-reminder.git,AddReminderFragmentTest,givenTheSoftKeyboardIsVisibleWhenTheAddReminderButtonIsPressedThenTheSoftKeyboardIsDismissed,{     com.groceryreminder.views.reminders.AddReminderFragment reminderListFragment = getAddReminderFragmentFromOnCreateView();     android.widget.EditText reminderText = getReminderText(reminderListFragment);     reminderText.setText("test");     org.robolectric.shadows.ShadowInputMethodManager shadowInputMethodManager = org.robolectric.Shadows.shadowOf(((android.view.inputmethod.InputMethodManager) (org.robolectric.RuntimeEnvironment.application.getSystemService(android.content.Context.INPUT_METHOD_SERVICE))));     shadowInputMethodManager.showSoftInput(reminderText, 0);     android.widget.Button addReminderButton = getAddReminderButton(reminderListFragment);     addReminderButton.performClick();     org.junit.Assert.assertFalse(shadowInputMethodManager.isSoftInputVisible()); }
https://github.com/jameskbride/grocery-reminder.git,AddReminderFragmentTest,givenTheReminderTextIsSetWhenTheTextIsClearedThenTheAddReminderButtonIsDisabled,{     com.groceryreminder.views.reminders.AddReminderFragment reminderListFragment = getAddReminderFragmentFromOnCreateView();     android.widget.EditText reminderText = getReminderText(reminderListFragment);     reminderText.setText("test");     reminderText.setText("");     android.widget.Button addReminderButton = getAddReminderButton(reminderListFragment);     org.junit.Assert.assertFalse(addReminderButton.isEnabled()); }
https://github.com/jameskbride/grocery-reminder.git,AddReminderFragmentTest,whenTheReminderTextIsSetToWhitespaceThenTheAddReminderButtonIsDisabled,{     com.groceryreminder.views.reminders.AddReminderFragment reminderListFragment = getAddReminderFragmentFromOnCreateView();     android.widget.EditText reminderText = getReminderText(reminderListFragment);     reminderText.setText(" ");     android.widget.Button addReminderButton = getAddReminderButton(reminderListFragment);     org.junit.Assert.assertFalse(addReminderButton.isEnabled()); }
https://github.com/jameskbride/grocery-reminder.git,ReminderListFragmentTest,givenRemindersWhenTheFragmentIsCreatedThenTheViewShouldBePopulated,{     com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, "test");     java.util.List<com.groceryreminder.models.Reminder> reminders = new java.util.ArrayList<com.groceryreminder.models.Reminder>();     reminders.add(reminder);     com.groceryreminder.views.reminders.ReminderListFragment reminderListFragment = com.groceryreminder.views.reminders.ReminderListFragment.newInstance(reminders);     startFragment(activity, reminderListFragment);     android.support.v7.widget.RecyclerView reminderRecyclerView = getRecyclerView(reminderListFragment, R.id.reminders_recycler_view);     com.groceryreminder.views.reminders.ReminderListViewHolder reminderListViewHolder = ((com.groceryreminder.views.reminders.ReminderListViewHolder) (reminderRecyclerView.findViewHolderForAdapterPosition(0)));     android.widget.TextView reminderText = ((android.widget.TextView) (reminderListViewHolder.itemView.findViewById(R.id.reminders_text_view)));     org.junit.Assert.assertEquals(reminderText.getText(), "test"); }
https://github.com/jameskbride/grocery-reminder.git,ReminderListViewHolderTest,whenAReminderIsBoundThenTheReminderTextIsSet,{     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     android.view.View view = android.view.LayoutInflater.from(recyclerView.getContext()).inflate(R.layout.reminder_viewholder, recyclerView, false);     com.groceryreminder.views.reminders.ReminderListViewHolder viewHolder = new com.groceryreminder.views.reminders.ReminderListViewHolder(view, recyclerViewAdapter);     recyclerViewAdapter.onBindViewHolder(viewHolder, 0);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.reminders_text_view)));     org.junit.Assert.assertEquals("test", reminderText.getText()); }
https://github.com/jameskbride/grocery-reminder.git,ReminderSwipeListenerTest,givenAReminderWhenTheReminderIsSwipedLeftThenItIsDismissed,{     com.groceryreminder.views.reminders.ReminderSwipeListener swipeListener = new com.groceryreminder.views.reminders.ReminderSwipeListener(defaultReminders, adapter);     swipeListener.onDismissedBySwipeLeft(recyclerView, new int[]{ 0 });     org.junit.Assert.assertTrue(defaultReminders.isEmpty()); }
https://github.com/jameskbride/grocery-reminder.git,ReminderSwipeListenerTest,givenAReminderWhenTheReminderIsSwipedRightThenItIsDismissed,{     com.groceryreminder.views.reminders.ReminderSwipeListener swipeListener = new com.groceryreminder.views.reminders.ReminderSwipeListener(defaultReminders, adapter);     swipeListener.onDismissedBySwipeRight(recyclerView, new int[]{ 0 });     org.junit.Assert.assertTrue(defaultReminders.isEmpty()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheActivityIsCreatedThenItShouldBeStarted,{     org.junit.Assert.assertFalse(activity.isFinishing()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheActivityIsCreatedThenTheGroceryStoreServiceShouldBeStarted,{     org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(activity);     android.content.Intent startedIntent = shadowActivity.peekNextStartedService();     org.junit.Assert.assertEquals(com.groceryreminder.services.GroceryLocatorService.class.getName(), startedIntent.getComponent().getClassName()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheActivityIsCreatedThenTheGroceryStoreServiceShouldBeStartedWithTheListenForGPSFlag,{     org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(activity);     android.content.Intent startedIntent = shadowActivity.peekNextStartedService();     org.junit.Assert.assertTrue(startedIntent.getBooleanExtra(com.groceryreminder.domain.GroceryReminderConstants.LISTEN_FOR_GPS_EXTRA, false)); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheActivityIsCreatedThenTheReminderListShouldBeDisplayed,{     com.groceryreminder.views.reminders.ReminderListFragment reminderListFragment = getReminderListFragment();     android.support.v7.widget.RecyclerView listView = ((android.support.v7.widget.RecyclerView) (reminderListFragment.getView().findViewById(R.id.reminders_recycler_view)));     org.junit.Assert.assertEquals(android.view.View.VISIBLE, listView.getVisibility()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheAddReminderRequestButtonIsTappedThenTheAddReminderFragmentShouldBeDisplayed,{     clickAddReminderRequestButton();     com.groceryreminder.views.reminders.AddReminderFragment addReminderFragment = getAddReminderFragment();     android.widget.EditText addReminderEditText = ((android.widget.EditText) (addReminderFragment.getView().findViewById(R.id.add_reminder_edit)));     org.junit.Assert.assertEquals(android.view.View.VISIBLE, addReminderEditText.getVisibility()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheStoresActionBarButtonIsPressedThenTheGroceryStoresActivityIsStarted,{     org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(activity);     shadowActivity.clickMenuItem(R.id.action_find_stores);     android.content.Intent startedIntent = shadowActivity.peekNextStartedActivity();     org.junit.Assert.assertEquals(com.groceryreminder.views.stores.GroceryStoresActivity.class.getName(), startedIntent.getComponent().getClassName()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersActivityTest,whenTheActivityIsCreatedThenTheCursorLoaderShouldBeInitialized,{     org.junit.Assert.assertNotNull(activity.getSupportLoaderManager().getLoader(1)); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,whenTheAdapterIsCreatedWithRemindersThenTheItemCountIsSet,{     com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT);     reminders.add(reminder);     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = createAdapter(reminders);     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,whenTheViewHolderIsCreatedThenTheReminderListViewHolderIsNotNull,{     android.support.v7.widget.RecyclerView viewGroup = getRecyclerView();     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = new com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter(reminders, activity);     com.groceryreminder.views.reminders.ReminderListViewHolder viewHolder = adapter.onCreateViewHolder(viewGroup, -1);     org.junit.Assert.assertNotNull(viewHolder); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,givenAReminderWhenTheViewHolderIsBoundThenTheTextViewIsSet,{     com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT);     reminders.add(reminder);     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = createAdapter(reminders);     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     com.groceryreminder.views.reminders.ReminderListViewHolder viewHolder = adapter.onCreateViewHolder(recyclerView, -1);     adapter.onBindViewHolder(viewHolder, 0);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.reminders_text_view)));     org.junit.Assert.assertEquals(reminderText.getText(), com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,givenMultipleRemindersWhenViewHolderIsBoundWithAnArbitraryPositionThenTheTextViewIsSet,{     com.groceryreminder.models.Reminder reminder = new com.groceryreminder.models.Reminder(0, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT);     reminders.add(reminder);     java.lang.String expectedReminder = com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT + 1;     com.groceryreminder.models.Reminder secondReminder = new com.groceryreminder.models.Reminder(1, expectedReminder);     reminders.add(secondReminder);     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = new com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter(reminders, activity);     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     com.groceryreminder.views.reminders.ReminderListViewHolder viewHolder = adapter.onCreateViewHolder(recyclerView, -1);     adapter.onBindViewHolder(viewHolder, 1);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.reminders_text_view)));     org.junit.Assert.assertEquals(reminderText.getText(), com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT + 1); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,whenTheRemindersAreSetThenTheItemCountIsUpdated,{     com.groceryreminder.models.Reminder store = new com.groceryreminder.models.Reminder(0, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT);     reminders.add(store);     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = createAdapter(reminders);     java.util.List<com.groceryreminder.models.Reminder> updatedReminders = new java.util.ArrayList<com.groceryreminder.models.Reminder>();     com.groceryreminder.models.Reminder updatedReminder1 = new com.groceryreminder.models.Reminder(1, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT + 1);     com.groceryreminder.models.Reminder updatedReminder2 = new com.groceryreminder.models.Reminder(2, com.groceryreminder.views.reminders.RemindersRecyclerViewAdapterTest.ARBITRARY_REMINDER_TEXT + 2);     updatedReminders.add(updatedReminder1);     updatedReminders.add(updatedReminder2);     adapter.setReminders(updatedReminders);     org.junit.Assert.assertEquals(updatedReminders.size(), adapter.getItemCount()); }
https://github.com/jameskbride/grocery-reminder.git,RemindersRecyclerViewAdapterTest,whenAReminderIsRemovedThenItIsRemovedFromTheDatabase,{     java.lang.String description = "test";     android.content.ContentValues reminderValues = new com.groceryreminder.testUtils.ReminderValuesBuilder().createDefaultReminderValues().withDescription(description).build();     android.net.Uri insertUri = activity.getContentResolver().insert(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, reminderValues);     reminders.add(new com.groceryreminder.models.Reminder(java.lang.Long.parseLong(insertUri.getLastPathSegment()), description));     com.groceryreminder.views.reminders.RemindersRecyclerViewAdapter adapter = createAdapter(reminders);     adapter.removeReminders(new int[]{ 0 });     android.database.Cursor cursor = activity.getContentResolver().query(com.groceryreminder.data.ReminderContract.Reminders.CONTENT_URI, com.groceryreminder.data.ReminderContract.Reminders.PROJECT_ALL, "", null, null);     org.junit.Assert.assertEquals(0, cursor.getCount());     cursor.close();     cursor = null; }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreListFragmentTest,givenGroceryStoresWhenTheFragmentIsCreatedThenTheViewShouldBePopulated,{     java.util.List<com.groceryreminder.models.GroceryStore> stores = new java.util.ArrayList<com.groceryreminder.models.GroceryStore>();     com.groceryreminder.models.GroceryStore groceryStore = new com.groceryreminder.models.GroceryStore("test", 0.0, 0.0, 0.0);     stores.add(groceryStore);     com.groceryreminder.views.stores.GroceryStoreListFragment groceryStoreListFragment = com.groceryreminder.views.stores.GroceryStoreListFragment.newInstance(stores);     startFragment(activity, groceryStoreListFragment);     android.support.v7.widget.RecyclerView groceryStoreRecyclerView = getRecyclerView(groceryStoreListFragment, R.id.stores_recycler_view);     com.groceryreminder.views.stores.GroceryStoreListViewHolder groceryStoreListViewHolder = ((com.groceryreminder.views.stores.GroceryStoreListViewHolder) (groceryStoreRecyclerView.findViewHolderForPosition(0)));     android.widget.TextView reminderText = ((android.widget.TextView) (groceryStoreListViewHolder.itemView.findViewById(R.id.stores_text_view)));     org.junit.Assert.assertEquals(groceryStore.getName(), reminderText.getText()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreListViewHolderTest,givenStoresListViewWhenAStoreIsBoundThenTheStoreNameTextIsSet,{     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     android.content.Context context = recyclerView.getContext();     android.view.View view = android.view.LayoutInflater.from(context).inflate(R.layout.store_viewholder, recyclerView, false);     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoreListViewHolderTest.ARBITRARY_STORE_NAME, 0.0, 0.0, 0.0);     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = new com.groceryreminder.views.stores.GroceryStoreListViewHolder(view);     viewHolder.bind(store);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.stores_text_view)));     org.junit.Assert.assertEquals("test", reminderText.getText()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreListViewHolderTest,givenStoresListViewWhenAStoreIsBoundThenTheStoreDistanceTextIsSet,{     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     android.content.Context context = recyclerView.getContext();     android.view.View view = android.view.LayoutInflater.from(context).inflate(R.layout.store_viewholder, recyclerView, false);     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoreListViewHolderTest.ARBITRARY_STORE_NAME, 2414.02, 0.0, 0.0);     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = new com.groceryreminder.views.stores.GroceryStoreListViewHolder(view);     viewHolder.bind(store);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.store_distance)));     org.junit.Assert.assertEquals("1.5 mi", reminderText.getText()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreListViewHolderTest,givenDistanceIsNotAvailableWhenAStoreIsBoundThenTheStoreDistanceTextIsSetToNotAvailable,{     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     android.content.Context context = recyclerView.getContext();     android.view.View view = android.view.LayoutInflater.from(context).inflate(R.layout.store_viewholder, recyclerView, false);     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoreListViewHolderTest.ARBITRARY_STORE_NAME, -1, 0.0, 0.0);     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = new com.groceryreminder.views.stores.GroceryStoreListViewHolder(view);     viewHolder.bind(store);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.store_distance)));     org.junit.Assert.assertEquals("N/A", reminderText.getText()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoreListViewHolderTest,givenAStoreIsBoundWhenTheStoreViewHolderIsClickedThenTheMapApplicationIsLaunched,{     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     android.content.Context context = recyclerView.getContext();     android.view.View view = android.view.LayoutInflater.from(context).inflate(R.layout.store_viewholder, recyclerView, false);     double latitude = 0.0;     double longitude = 1.0;     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoreListViewHolderTest.ARBITRARY_STORE_NAME, 2414.02, latitude, longitude);     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = new com.groceryreminder.views.stores.GroceryStoreListViewHolder(view);     viewHolder.bind(store);     viewHolder.onClick(view);     org.robolectric.shadows.ShadowActivity shadowActivity = org.robolectric.Shadows.shadowOf(activity);     org.robolectric.shadows.ShadowIntent shadowIntent = org.robolectric.Shadows.shadowOf(shadowActivity.peekNextStartedActivity());     org.junit.Assert.assertTrue(shadowIntent.getData().toString().contains((("geo:" + latitude) + ",") + longitude)); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresActivityTest,whenTheActivityIsCreatedThenTheTitleShouldBeSet,{     org.junit.Assert.assertEquals(org.robolectric.RuntimeEnvironment.application.getString(R.string.store_list_title), activity.getTitle()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresActivityTest,whenTheActivityIsCreatedThenTheGroceryStoreListFragmentShouldBeCreated,{     com.groceryreminder.views.stores.GroceryStoreListFragment groceryStoreListFragment = getGroceryStoreListFragment();     org.junit.Assert.assertNotNull(groceryStoreListFragment); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresActivityTest,givenStoresExistWhenTheCursorLoaderIsFinishedThenTheProgressDialogIsDismissed,{     org.robolectric.shadows.ShadowCursorWrapper wrapper = createCursorWithDefaultReminder();     com.groceryreminder.domain.GroceryStoreManagerInterface groceryStoreManagerMock = getTestReminderModule().getGroceryStoreManager();     Mockito.when(groceryStoreManagerMock.getCurrentLocation()).thenReturn(null);     android.support.v4.content.CursorLoader cursorLoader = ((android.support.v4.content.CursorLoader) (activity.onCreateLoader(0, null)));     activity.onLoadFinished(cursorLoader, wrapper);     android.app.ProgressDialog progressDialog = ((android.app.ProgressDialog) (org.robolectric.shadows.ShadowProgressDialog.getLatestDialog()));     org.junit.Assert.assertFalse(progressDialog.isShowing()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresRecyclerViewAdapterTest,whenTheAdapterIsCreatedWithRemindersThenTheItemCountIsSet,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME, 0.0, 0.0, 0.0);     stores.add(store);     com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter adapter = createAdapter(stores);     org.junit.Assert.assertEquals(1, adapter.getItemCount()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresRecyclerViewAdapterTest,whenTheStoresAreSetThenTheItemCountIsUpdated,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME, 0.0, 0.0, 0.0);     stores.add(store);     com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter adapter = createAdapter(stores);     java.util.List<com.groceryreminder.models.GroceryStore> updatedStores = new java.util.ArrayList<com.groceryreminder.models.GroceryStore>();     com.groceryreminder.models.GroceryStore updatedStore1 = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME + 1, 0.0, 0.0, 0.0);     com.groceryreminder.models.GroceryStore updatedStore2 = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME + 2, 0.0, 0.0, 0.0);     updatedStores.add(updatedStore1);     updatedStores.add(updatedStore2);     adapter.setStores(updatedStores);     org.junit.Assert.assertEquals(updatedStores.size(), adapter.getItemCount()); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresRecyclerViewAdapterTest,whenTheViewHolderIsCreatedThenTheGroceryStoreListViewHolderIsNotNull,{     android.support.v7.widget.RecyclerView viewGroup = getRecyclerView();     com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter adapter = new com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter(stores);     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = adapter.onCreateViewHolder(viewGroup, -1);     org.junit.Assert.assertNotNull(viewHolder); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresRecyclerViewAdapterTest,givenAStoreWhenTheViewHolderIsBoundThenTheTextViewIsSet,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME, 0.0, 0.0, 0.0);     stores.add(store);     com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter adapter = createAdapter(stores);     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = adapter.onCreateViewHolder(recyclerView, -1);     adapter.onBindViewHolder(viewHolder, 0);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.stores_text_view)));     org.junit.Assert.assertEquals(reminderText.getText(), com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME); }
https://github.com/jameskbride/grocery-reminder.git,GroceryStoresRecyclerViewAdapterTest,givenMultipleStoresWhenViewHolderIsBoundWithAnArbitraryPositionThenTheTextViewIsSet,{     com.groceryreminder.models.GroceryStore store = new com.groceryreminder.models.GroceryStore(com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME, 0.0, 0.0, 0.0);     stores.add(store);     java.lang.String expectedName = com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME + 1;     com.groceryreminder.models.GroceryStore secondStore = new com.groceryreminder.models.GroceryStore(expectedName, 0.0, 0.0, 0.0);     stores.add(secondStore);     com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter adapter = new com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapter(stores);     android.support.v7.widget.RecyclerView recyclerView = getRecyclerView();     com.groceryreminder.views.stores.GroceryStoreListViewHolder viewHolder = adapter.onCreateViewHolder(recyclerView, -1);     adapter.onBindViewHolder(viewHolder, 1);     android.widget.TextView reminderText = ((android.widget.TextView) (viewHolder.itemView.findViewById(R.id.stores_text_view)));     org.junit.Assert.assertEquals(reminderText.getText(), com.groceryreminder.views.stores.GroceryStoresRecyclerViewAdapterTest.ARBITRARY_STORE_NAME + 1); }
https://github.com/shahzadah/RedMart.git,SplashActivityTest,launchProductListActivity,{     mActivityController.resume();     java.util.Timer timer = new java.util.Timer();     final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);     timer.schedule(new java.util.TimerTask() {         public void run() {             latch.countDown();         }     }, 1000);     latch.await();     android.content.Intent intent = org.robolectric.Shadows.shadowOf(mActivity).peekNextStartedActivity();     junit.framework.Assert.assertEquals(com.redmart.redmart.activities.ProductListActivity.class.getCanonicalName(), intent.getComponent().getClassName());     org.junit.Assert.assertTrue(mActivity.isFinishing()); }
https://github.com/shahzadah/RedMart.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.redmart.redmart", appContext.getPackageName()); }
https://github.com/mezpahlan/oldtimerag.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("uk.co.mezpahlan.oldtimerag", appContext.getPackageName()); }
https://github.com/freeotp/freeotp-android.git,EncryptedKeyTest,test,{     javax.crypto.SecretKey tok = generateKey("HmacSHA512");     javax.crypto.SecretKey key = generateKey("AES");     org.fedorahosted.freeotp.encryptor.EncryptedKey ek = org.fedorahosted.freeotp.encryptor.EncryptedKey.encrypt(key, tok);     javax.crypto.SecretKey res = ek.decrypt(key);     org.junit.Assert.assertArrayEquals(tok.getEncoded(), res.getEncoded());     junit.framework.TestCase.assertEquals(tok.getAlgorithm(), res.getAlgorithm()); }
https://github.com/freeotp/freeotp-android.git,KeyStoreAccessTest,test,{     javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance("AES");     kg.init(256);     javax.crypto.SecretKey sk = kg.generateKey();     java.security.KeyStore ks = java.security.KeyStore.getInstance("AndroidKeyStore");     ks.load(null);     // NOTE: We can't use PURPOSE_WRAP here because there is no wrap-only granularity.     android.security.keystore.KeyProtection kp = new android.security.keystore.KeyProtection.Builder(android.security.keystore.KeyProperties.PURPOSE_ENCRYPT).setEncryptionPaddings(android.security.keystore.KeyProperties.ENCRYPTION_PADDING_NONE).setBlockModes(android.security.keystore.KeyProperties.BLOCK_MODE_GCM).build();     ks.setEntry("master", new java.security.KeyStore.SecretKeyEntry(sk), kp);     try {         javax.crypto.Cipher c = javax.crypto.Cipher.getInstance("AES/GCM/NoPadding");         java.security.Key key = ks.getKey("master", null);         byte[] secret = new byte[32];         new java.security.SecureRandom().nextBytes(secret);         // Encrypt using the KeyStore protected key.         c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);         byte[] ct = c.doFinal(secret);         javax.crypto.spec.GCMParameterSpec gcm = new javax.crypto.spec.GCMParameterSpec(128, c.getIV());         // Decrypt using the in-memory key.         c.init(javax.crypto.Cipher.DECRYPT_MODE, sk, gcm);         byte[] pt = c.doFinal(ct);         org.junit.Assert.assertArrayEquals(pt, secret);         // Try to decrypt using the KeyStore protected key.         // This MUST fail for our security model to work...         c.init(javax.crypto.Cipher.DECRYPT_MODE, key, gcm);         junit.framework.TestCase.fail("Expected an InvalidKeyException to be thrown");     } catch (java.security.InvalidKeyException e) {         // Expected...     } finally {         ks.deleteEntry("master");     } }
https://github.com/freeotp/freeotp-android.git,MasterKeyTest,test,{     java.lang.String pwd = "MyM4sterPassw0rd";     java.lang.String wrongpwd = "Incorrectpwd";     org.fedorahosted.freeotp.encryptor.MasterKey orig = org.fedorahosted.freeotp.encryptor.MasterKey.generate(pwd);     org.fedorahosted.freeotp.encryptor.MasterKey read = new com.google.gson.Gson().fromJson(new com.google.gson.Gson().toJson(orig), org.fedorahosted.freeotp.encryptor.MasterKey.class);     org.junit.Assert.assertArrayEquals(orig.decrypt(pwd).getEncoded(), read.decrypt(pwd).getEncoded());     junit.framework.TestCase.assertEquals(orig.decrypt(pwd).getAlgorithm(), "AES");     junit.framework.TestCase.assertEquals(read.decrypt(pwd).getAlgorithm(), "AES");     try {         orig.decrypt(wrongpwd);     } catch (javax.crypto.AEADBadTagException e) {         // Expected         // javax.crypto.AEADBadTagException:         // error:1e000065:Cipher functions:OPENSSL_internal:BAD_DECRYPT     } }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithEmptyStringParameterReturnsDefaultResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(""), R.drawable.child_boy_infant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithMaleParameterReturnsMaleResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(util.PathConstants.GENDER.MALE), R.drawable.child_boy_infant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithFemaleParameterReturnsFemaleResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(util.PathConstants.GENDER.FEMALE), R.drawable.child_girl_infant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithTransgenderParameterReturnsTransgenderResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(util.PathConstants.GENDER.TRANSGENDER), R.drawable.child_transgender_inflant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderObjectWithMaleGenderParameterReturnsMaleResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(org.opensrp.api.constants.Gender.MALE), R.drawable.child_boy_infant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithFemaleObjectReturnsFemaleResource,{     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(org.opensrp.api.constants.Gender.FEMALE), R.drawable.child_girl_infant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,profileImageResourceByGenderWithNullObjectParameterReturnsTransgenderResource,{     org.opensrp.api.constants.Gender gender = null;     org.junit.Assert.assertEquals(util.ImageUtils.profileImageResourceByGender(gender), R.drawable.child_transgender_inflant); }
https://github.com/Suwie/improvebcs.git,ImageUtilsTest,imageUtilsClassConstructorReturnsNonNullObjectOnInstantiation,{     org.junit.Assert.assertNotNull(new util.ImageUtils()); }
https://github.com/Suwie/improvebcs.git,UtilsTest,callingGetDateFromStringWithInvalidDateReturnsNull,{     java.util.Date date = util.Utils.getDateFromString("wrong date-09-09", "yyyy-MM-dd");     org.junit.Assert.assertNull(date); }
https://github.com/Suwie/improvebcs.git,UtilsTest,callingGetDateFromStringWithInvalidDatePatternThrowsIllegalArgException,{     try {         util.Utils.getDateFromString("2017-09-09", "invalid date format");     } catch (java.lang.Exception e) {         org.junit.Assert.assertTrue(e instanceof java.lang.IllegalArgumentException);     } }
https://github.com/Suwie/improvebcs.git,UtilsTest,callingGetDateFromStringWithCorrectParametersReturnsCorrectDateObject,{     java.util.Calendar calendar = java.util.Calendar.getInstance();     calendar.set(java.util.Calendar.YEAR, 2017);     calendar.set(java.util.Calendar.MONTH, java.util.Calendar.SEPTEMBER);     calendar.set(java.util.Calendar.DAY_OF_MONTH, 9);     calendar.set(java.util.Calendar.HOUR, 9);     calendar.set(java.util.Calendar.HOUR_OF_DAY, 0);     calendar.set(java.util.Calendar.MINUTE, 0);     calendar.set(java.util.Calendar.SECOND, 0);     java.util.Date date = util.Utils.getDateFromString("2017-09-09", "yyyy-MM-dd");     org.junit.Assert.assertEquals(calendar.getTime().toString(), date.toString()); }
https://github.com/blocoio/cardcase.git,DatabaseTest,testGetUserCard,{     io.bloco.cardcase.data.models.Card card = cardFactory.createUserCard();     org.junit.Assert.assertEquals(database.getUserCard().getId(), card.getId()); }
https://github.com/blocoio/cardcase.git,DatabaseTest,testGetUserCardEmpty,{     org.junit.Assert.assertNull(database.getUserCard()); }
https://github.com/blocoio/cardcase.git,DatabaseTest,testGetReceivedCard,{     cardFactory.createUserCard();     cardFactory.createReceivedCard();     cardFactory.createReceivedCard();     org.junit.Assert.assertEquals(database.getReceivedCards().size(), 2); }
https://github.com/anilsarma/NJTSchedule.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/eduardorabanal/donape_android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.edurabroj.donape", appContext.getPackageName()); }
https://github.com/RUGSoftEng/2017-Winter-Summer-School-Android.git,ContentsLabTest,get,{     org.junit.Assert.assertThat(mContentsLab, org.hamcrest.core.Is.is(nl.rug.www.rugsummerschools.model.ContentsLab.get())); }
https://github.com/hidroh/calendar.git,EventEditViewTest,testExistingAllDayEvent,{     long start = createTimeMillis(2016, java.util.Calendar.MARCH, 18, 0, 0);     long end = createTimeMillis(2016, java.util.Calendar.MARCH, 19, 0, 0);     view.setEvent(new io.github.hidroh.calendar.widget.EventEditView.Event.Builder().id(1L).calendarId(1L).title("title").start(start).end(end).allDay(true).build());     assertThat(editTextTitle).hasTextString("title");     org.junit.Assert.assertTrue(switchAllDay.isChecked());     assertHasDateString(textViewStartDate, start);     assertHasTimeString(textViewStartTime, start);     assertHasDateString(textViewEndDate, end);     assertHasTimeString(textViewEndTime, end);     // calendar name to be set independently     assertThat(textViewCalendar).isEmpty(); }
https://github.com/hidroh/calendar.git,EventEditViewTest,testExistingNonAllDayEvent,{     long start = createTimeMillis(2016, java.util.Calendar.MARCH, 18, 10, 30);     long end = createTimeMillis(2016, java.util.Calendar.MARCH, 19, 12, 30);     view.setEvent(new io.github.hidroh.calendar.widget.EventEditView.Event.Builder().id(1L).calendarId(1L).title("title").start(start).end(end).allDay(false).build());     org.junit.Assert.assertFalse(switchAllDay.isChecked()); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,getKeyFromTag,{     java.lang.String tag = this.questionObject.getTag();     java.lang.String expectedValue = this.questionObject.getAnswerYes();     java.lang.String actualValue = com.teester.whatsnearby.data.Answers.getAnswerMap().get(tag);     org.junit.Assert.assertEquals(expectedValue, actualValue); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,checkAnswerListIsCleared,{     com.teester.whatsnearby.data.Answers.clearAnswerList();     java.util.Map<java.lang.String, java.lang.String> actualResult = com.teester.whatsnearby.data.Answers.getAnswerMap();     org.junit.Assert.assertEquals(0, actualResult.size()); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,checkChangesetTagsAreSet,{     java.util.Map<java.lang.String, java.lang.String> actualTags = com.teester.whatsnearby.data.Answers.getChangesetTags();     java.util.Map<java.lang.String, java.lang.String> expectedTags = new java.util.HashMap<>();     expectedTags.put("", "");     org.junit.Assert.assertEquals(expectedTags, actualTags); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,testForCustomResponsesHalal,{     com.teester.whatsnearby.data.Answers.clearAnswerList();     com.teester.whatsnearby.data.questions.QuestionsContract halal = new com.teester.whatsnearby.data.questions.Halal();     java.lang.String answerTag = halal.getAnswer("yes");     java.lang.String questionTag = halal.getTag();     com.teester.whatsnearby.data.Answers.addAnswer(questionTag, answerTag);     java.lang.String expectedValue = halal.getAnswerYes();     java.lang.String actualValue = com.teester.whatsnearby.data.Answers.getAnswerMap().get(halal.getTag());     org.junit.Assert.assertEquals(expectedValue, actualValue); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,testForCustomResponsesKosher,{     com.teester.whatsnearby.data.Answers.clearAnswerList();     com.teester.whatsnearby.data.questions.QuestionsContract kosher = new com.teester.whatsnearby.data.questions.Kosher();     java.lang.String answerTag = kosher.getAnswer("yes");     java.lang.String questionTag = kosher.getTag();     com.teester.whatsnearby.data.Answers.addAnswer(questionTag, answerTag);     java.lang.String expectedValue = kosher.getAnswerYes();     java.lang.String actualValue = com.teester.whatsnearby.data.Answers.getAnswerMap().get(kosher.getTag());     org.junit.Assert.assertEquals(expectedValue, actualValue); }
https://github.com/Teester/Whats-Nearby.git,AnswersTest,testForCustomResponsesWifi,{     com.teester.whatsnearby.data.Answers.clearAnswerList();     com.teester.whatsnearby.data.questions.QuestionsContract wifi = new com.teester.whatsnearby.data.questions.Wifi();     java.lang.String answerTag = wifi.getAnswer("yes");     java.lang.String questionTag = wifi.getTag();     com.teester.whatsnearby.data.Answers.addAnswer(questionTag, answerTag);     java.lang.String expectedValue = wifi.getAnswerYes();     java.lang.String actualValue = com.teester.whatsnearby.data.Answers.getAnswerMap().get(wifi.getTag());     org.junit.Assert.assertEquals(expectedValue, actualValue); }
https://github.com/Teester/Whats-Nearby.git,PoiListTest,checkPoiListIsCleared,{     com.teester.whatsnearby.data.PoiList.getInstance().clearPoiList();     java.util.List<com.teester.whatsnearby.data.OsmObject> actualResult = com.teester.whatsnearby.data.PoiList.getInstance().getPoiList();     org.junit.Assert.assertEquals(0, actualResult.size()); }
https://github.com/Teester/Whats-Nearby.git,PoiListTest,createAlternateList,{     java.util.List<com.teester.whatsnearby.data.OsmObject> alternateList = com.teester.whatsnearby.data.PoiList.getInstance().createAlternateList();     org.junit.Assert.assertEquals(0, alternateList.size()); }
https://github.com/Teester/Whats-Nearby.git,PoiListTest,checkPoiType,{     com.teester.whatsnearby.data.OsmObject osmObject = com.teester.whatsnearby.data.PoiList.getInstance().getPoiList().get(0);     com.teester.whatsnearby.data.pois.PoiContract actualObject = com.teester.whatsnearby.data.PoiTypes.getPoiType(osmObject.getOsmType());     com.teester.whatsnearby.data.pois.PoiContract expectedObject = com.teester.whatsnearby.data.PoiTypes.getPoiType(this.osmObject.getOsmType());     org.junit.Assert.assertEquals(expectedObject, actualObject); }
https://github.com/Teester/Whats-Nearby.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.teester.whatsnearby", appContext.getPackageName()); }
https://github.com/Teester/Whats-Nearby.git,ExampleUnitTest,additionIsCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("xyz.lostalishar.nyaanyaamusicplayer", appContext.getPackageName()); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,MusicServiceTest,testWithBoundService,{     // Create the service Intent.     android.content.Intent serviceIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.class);     // AutoBind the service     android.os.IBinder binder = serviceTestRule.bindService(serviceIntent);     // grab the service stub     xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.NyaaNyaaMusicServiceStub serviceStub = ((xyz.lostalishar.nyaanyaamusicplayer.service.MusicPlaybackService.NyaaNyaaMusicServiceStub) (binder));     // Verify that the service is working correctly.     org.junit.Assert.assertThat(serviceStub.isPlaying(), org.hamcrest.Matchers.is(org.hamcrest.Matchers.any(java.lang.Boolean.class))); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,PreferenceUtilsTest,testLoadCurPlayingSuccess,{     org.mockito.Mockito.when(context.getSharedPreferences(Matchers.anyString(), Matchers.anyInt())).thenReturn(sharedPreferences);     org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_POS, xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_SEEK_POS), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context)); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,PreferenceUtilsTest,testLoadCurPlayingFail,{     org.mockito.Mockito.when(context.getSharedPreferences(Matchers.anyString(), Matchers.anyInt())).thenReturn(sharedBrokenPreferences);     org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context)); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,PreferenceUtilsTest,testSaveCurPlayingSuccess,{     org.mockito.Mockito.when(context.getSharedPreferences(Matchers.anyString(), Matchers.anyInt())).thenReturn(sharedPreferences);     xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState testState = new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_POS, xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_SEEK_POS);     // save and load test position to test they are same     xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.saveCurPlaying(context, testState);     org.junit.Assert.assertEquals(testState, xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context)); }
https://github.com/Nydrani/NyaaNyaaMusicPlayer.git,PreferenceUtilsTest,testSaveCurPlayingFail,{     org.mockito.Mockito.when(context.getSharedPreferences(Matchers.anyString(), Matchers.anyInt())).thenReturn(sharedBrokenPreferences);     // save a test position     xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.saveCurPlaying(context, new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_POS, xyz.lostalishar.nyaanyaamusicplayer.PreferenceUtilsTest.TEST_SEEK_POS));     // test position should have failed so loadCurPlaying returns a default state     org.junit.Assert.assertEquals(new xyz.lostalishar.nyaanyaamusicplayer.model.MusicPlaybackState(), xyz.lostalishar.nyaanyaamusicplayer.util.PreferenceUtils.loadCurPlaying(context)); }
https://github.com/ajitsing/ExpenseManager.git,ExpenseDatabaseHelperTest,shouldReturnCurrentMonthsExpensesForMultipleExpenseTypes,{     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(100L, "Food", "31-09-2015"));     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(200L, "Food", "02-10-2015"));     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(300L, "Travel", "10-10-2015"));     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(200L, "Travel", "02-10-2015"));     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(500L, "Movie", "02-09-2015"));     java.util.List<ajitsingh.com.expensemanager.model.Expense> expenses = database.getExpensesForCurrentMonthGroupByCategory();     org.junit.Assert.assertThat(expenses.size(), org.hamcrest.core.Is.is(2)); }
https://github.com/ajitsing/ExpenseManager.git,ExpenseDatabaseHelperTest,shouldReturnTodaysExpensesForMultipleExpenseTypes,{     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(200L, "Food", "02-10-2015"));     database.addExpense(new ajitsingh.com.expensemanager.model.Expense(300L, "Travel", "02-10-2015"));     java.util.List<ajitsingh.com.expensemanager.model.Expense> expenses = database.getTodaysExpenses();     org.junit.Assert.assertThat(expenses.size(), org.hamcrest.core.Is.is(2)); }
https://github.com/ajitsing/ExpenseManager.git,DateUtilTest,shouldReturnDayForDate,{     java.lang.String dayName = ajitsingh.com.expensemanager.utils.DateUtil.getDayName("01-09-2015");     org.junit.Assert.assertThat(dayName, org.hamcrest.CoreMatchers.is("Tue")); }
https://github.com/ajitsing/ExpenseManager.git,DateUtilTest,shouldReturnCurrentMonthOfYear,{     java.lang.String currentMonthOfYear = ajitsingh.com.expensemanager.utils.DateUtil.currentMonthOfYear();     org.junit.Assert.assertThat(currentMonthOfYear, org.hamcrest.CoreMatchers.is("09-2015")); }
https://github.com/ajitsing/ExpenseManager.git,DateUtilTest,shouldReturnCurrentDate,{     java.lang.String date = ajitsingh.com.expensemanager.utils.DateUtil.getCurrentDate();     org.junit.Assert.assertThat(date, org.hamcrest.CoreMatchers.is("06-09-2015")); }
https://github.com/ajitsing/ExpenseManager.git,ExpenseCollectionTest,shouldReturnTotalExpense,{     org.junit.Assert.assertThat(expenseCollection.getTotalExpense(), org.hamcrest.CoreMatchers.is(350L)); }
https://github.com/stedi-akk/LSPortfolio.git,CachedUiRunnablesTest,afterPostModeOnce,{     cur.postMode();     postWithCallbacks(1);     waitForCallbacks();     org.junit.Assert.assertTrue(cur.getCache().isEmpty()); }
https://github.com/stedi-akk/LSPortfolio.git,CachedUiRunnablesTest,afterPostModeMultiple,{     cur.postMode();     postWithCallbacks(100);     waitForCallbacks();     org.junit.Assert.assertTrue(cur.getCache().isEmpty()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testAllConnected,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(new android.net.NetworkInfo[]{ mobileInfo, wifiInfo });     Mockito.when(wifiInfo.isConnected()).thenReturn(true);     Mockito.when(mobileInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testWifiConnected,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(new android.net.NetworkInfo[]{ mobileInfo, wifiInfo });     Mockito.when(wifiInfo.isConnected()).thenReturn(true);     Mockito.when(mobileInfo.isConnected()).thenReturn(false);     org.junit.Assert.assertTrue(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testMobileConnected,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(new android.net.NetworkInfo[]{ mobileInfo, wifiInfo });     Mockito.when(wifiInfo.isConnected()).thenReturn(false);     Mockito.when(mobileInfo.isConnected()).thenReturn(true);     org.junit.Assert.assertTrue(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testNotConnected,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(new android.net.NetworkInfo[]{ mobileInfo, wifiInfo });     Mockito.when(wifiInfo.isConnected()).thenReturn(false);     Mockito.when(mobileInfo.isConnected()).thenReturn(false);     org.junit.Assert.assertFalse(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testNoNetworkInfo,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(new android.net.NetworkInfo[]{  });     org.junit.Assert.assertFalse(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testNullNetworkInfo,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);     Mockito.when(connectivityManager.getAllNetworkInfo()).thenReturn(null);     org.junit.Assert.assertFalse(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/stedi-akk/LSPortfolio.git,ContextUtilsHasInternetTest,testNoConnectivityManager,{     Mockito.when(context.getSystemService(android.content.Context.CONNECTIVITY_SERVICE)).thenReturn(null);     org.junit.Assert.assertFalse(new com.stedi.lsportfolio.other.ContextUtils(context).hasInternet()); }
https://github.com/reggieray/Random-Quiz.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.matthewregis.randomquiz", appContext.getPackageName()); }
https://github.com/reggieray/Random-Quiz.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/CriticalMaps/criticalmaps-android.git,OwnLocationModelTest,getLocationJson_throwsWhenNoLocation,{     de.stephanlindauer.criticalmaps.model.OwnLocationModel tested = new de.stephanlindauer.criticalmaps.model.OwnLocationModel();     org.junit.Assert.assertThrows(java.lang.NullPointerException.class, tested::getLocationJson); }
https://github.com/KlubJagiellonski/pola-android.git,SessionIdTest,testGetReturnsNotNullWhenCreated,{     final java.lang.String sessionId = pl.pola_app.helpers.SessionId.create(context).get();     org.junit.Assert.assertNotNull(sessionId); }
https://github.com/KlubJagiellonski/pola-android.git,SessionIdTest,testGetReturnsSameValueWhenCalledTwice,{     final java.lang.String id1 = pl.pola_app.helpers.SessionId.create(context).get();     final java.lang.String id2 = pl.pola_app.helpers.SessionId.create(context).get();     org.junit.Assert.assertEquals(id1, id2); }
https://github.com/KlubJagiellonski/pola-android.git,SessionIdTest,testIdIsRefreshedWhenCleared,{     final java.lang.String firstId = pl.pola_app.helpers.SessionId.create(context).get();     android.preference.PreferenceManager.getDefaultSharedPreferences(context).edit().clear().apply();     final java.lang.String afterClearId = pl.pola_app.helpers.SessionId.create(context).get();     org.junit.Assert.assertNotEquals(firstId, afterClearId); }
https://github.com/KlubJagiellonski/pola-android.git,MainPresenterTest,testResponseForUnsupportedBarCodes,{     final pl.pola_app.model.SearchResult searchResult = pl.pola_app.testutil.SearchUtil.createSearchResult(1);     searchResult.product_id = null;     try {         presenter.onResponse(null, retrofit2.Response.success(searchResult));     } catch (java.lang.Exception e) {         org.junit.Assert.fail(android.util.Log.getStackTraceString(e));     } }
https://github.com/KlubJagiellonski/pola-android.git,ProductListTest,testProductAdded,{     pl.pola_app.model.SearchResult searchResult = pl.pola_app.testutil.SearchUtil.createSearchResult(1);     productList.addProduct(searchResult);     org.junit.Assert.assertEquals(searchResult, productList.get(0)); }
https://github.com/KlubJagiellonski/pola-android.git,ProductListTest,testItemDoesNotExistForEmptyList,{     org.junit.Assert.assertFalse(productList.itemExists("code")); }
https://github.com/KlubJagiellonski/pola-android.git,ProductListTest,testItemDoesNotExist,{     productList.addProduct(pl.pola_app.testutil.SearchUtil.createSearchResult(1));     org.junit.Assert.assertFalse(productList.itemExists("code")); }
https://github.com/KlubJagiellonski/pola-android.git,ProductListTest,testItemExists,{     final pl.pola_app.model.SearchResult searchResult = pl.pola_app.testutil.SearchUtil.createSearchResult(1);     final java.lang.String code = searchResult.code;     productList.addProduct(searchResult);     org.junit.Assert.assertTrue(productList.itemExists(code)); }
https://github.com/dobrowol/stylowePlywanie.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("dobrowol.styloweplywanie", appContext.getPackageName()); }
https://github.com/dobrowol/stylowePlywanie.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/UniversityofWarwick/mywarwick-android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,findCpByIdTestSuccess,{     java.lang.String i = "1";     adri.suys.un_mutescan.model.Counterpart cp = event.findCpById(i);     org.junit.Assert.assertEquals(cp1, cp); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,findCpByIdTestFail,{     java.lang.String i = "0";     adri.suys.un_mutescan.model.Counterpart cp = event.findCpById(i);     org.junit.Assert.assertEquals(null, cp); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,isTodayTestFail,{     java.util.Date d = null;     adri.suys.un_mutescan.model.Event event = new adri.suys.un_mutescan.model.Event(1, "Mon événement", 50, 10, 40, 3, d, 1);     boolean isToday = event.isToday();     org.junit.Assert.assertFalse(isToday); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,isPassedTestFail1,{     java.util.Date d = null;     adri.suys.un_mutescan.model.Event e = new adri.suys.un_mutescan.model.Event(1, "Mon événement", 50, 10, 40, 3, d, 1);     org.junit.Assert.assertTrue(e.isPassed()); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,isPassedTestFail2,{     org.junit.Assert.assertFalse(event.isPassed()); }
https://github.com/GroopyMusic/GroopyApp.git,EventTest,isPassedTestSuccess,{     try {         java.lang.String s = "31-Dec-1998 23:37:50";         java.util.Date d = new java.text.SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").parse(s);         adri.suys.un_mutescan.model.Event e = new adri.suys.un_mutescan.model.Event(1, "Mon événement", 50, 10, 40, 3, d, 1);         org.junit.Assert.assertTrue(e.isPassed());     } catch (java.text.ParseException e) {         e.printStackTrace();     } }
https://github.com/GroopyMusic/GroopyApp.git,UserTest,isTokenStillActiveTestFalse,{     try {         java.lang.String s = "31-Dec-1998 23:37:50";         java.util.Date d = new java.text.SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").parse(s);         long time = d.getTime();         user.setLastConnection(time);         org.junit.Assert.assertFalse(user.isTokenStillActive());     } catch (java.text.ParseException e) {         e.printStackTrace();     } }
https://github.com/GroopyMusic/GroopyApp.git,UserTest,isTokenStillActiveTestTrue,{     java.util.Date d = new java.util.Date();     long time = d.getTime();     user.setLastConnection(time);     org.junit.Assert.assertTrue(user.isTokenStillActive()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,checkAudienceAll,{     presenter.getAudience(adri.suys.un_mutescan.presenter.AudiencePresenterTest.ALL);     org.junit.Assert.assertEquals(7, presenter.getItemCount()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,checkAudienceIn,{     presenter.getAudience(adri.suys.un_mutescan.presenter.AudiencePresenterTest.IN);     org.junit.Assert.assertEquals(4, presenter.getItemCount()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,checkAudienceOut,{     presenter.getAudience(adri.suys.un_mutescan.presenter.AudiencePresenterTest.OUT);     org.junit.Assert.assertEquals(3, presenter.getItemCount()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,getNbAllTest,{     int result = 43;     org.junit.Assert.assertEquals(presenter.getNbAll(), result); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,getNbInTest,{     int result = 13;     org.junit.Assert.assertEquals(presenter.getNbIn(), result); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,getNbOutTest,{     int result = 30;     org.junit.Assert.assertEquals(presenter.getNbOut(), result); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterAllFail,{     java.lang.String pattern = "Z";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.ALL);     org.junit.Assert.assertEquals(0, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterAllSuccess,{     java.lang.String pattern = "1";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.ALL);     org.junit.Assert.assertEquals(4, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterOutFail,{     java.lang.String pattern = "4";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.OUT);     org.junit.Assert.assertEquals(0, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterOutSuccess,{     java.lang.String pattern = "2";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.OUT);     org.junit.Assert.assertEquals(1, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterInFail,{     java.lang.String pattern = "11";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.IN);     org.junit.Assert.assertEquals(0, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterInSuccess,{     java.lang.String pattern = "pers";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.IN);     org.junit.Assert.assertEquals(4, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,AudiencePresenterTest,filterCartSuccess,{     java.lang.String pattern = "bc";     java.util.List<adri.suys.un_mutescan.model.Ticket> filtered = presenter.getFilteredResult(pattern, adri.suys.un_mutescan.presenter.AudiencePresenterTest.ALL);     org.junit.Assert.assertEquals(3, filtered.size()); }
https://github.com/GroopyMusic/GroopyApp.git,EventPresenterTest,handleJSONArrayTestFail,{     presenter.handleJSONArray(jsonArrayKO);     org.junit.Assert.assertTrue(presenter.getError() != ""); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation1,{     org.junit.Assert.assertTrue(presenter.validateEmail("mon_email@gmail.com")); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation2,{     org.junit.Assert.assertTrue(presenter.validateEmail("mon_email@gmail.co.uk")); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation3,{     org.junit.Assert.assertFalse(presenter.validateEmail("mon_email.gmail.co.uk")); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation4,{     org.junit.Assert.assertFalse(presenter.validateEmail("mon_email@gmail")); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation5,{     org.junit.Assert.assertFalse(presenter.validateEmail("@gmail.com")); }
https://github.com/GroopyMusic/GroopyApp.git,PayPresenterTest,testEmailValidation6,{     org.junit.Assert.assertFalse(presenter.validateEmail(null)); }
https://github.com/GroopyMusic/GroopyApp.git,TicketInfosPresenterTest,checkNonValidtyScanned,{     org.junit.Assert.assertFalse(presenter.validateBarcode("barcode1")); }
https://github.com/GroopyMusic/GroopyApp.git,UnMuteDataHolderTest,testValidatingTicketSuccess,{     adri.suys.un_mutescan.model.Ticket t1 = new adri.suys.un_mutescan.model.Ticket("Personne 1", "Ticket adulte", "N/A", "barcode1", "", "faux", "");     adri.suys.un_mutescan.model.Ticket t2 = new adri.suys.un_mutescan.model.Ticket("Personne 2", "Ticket adulte", "N/A", "barcode2", "", "faux", "");     adri.suys.un_mutescan.utils.UnMuteDataHolder.getAudience().add(t1);     adri.suys.un_mutescan.utils.UnMuteDataHolder.getAudience().add(t2);     int i = adri.suys.un_mutescan.utils.UnMuteDataHolder.isValidatedTicket("barcode1");     org.junit.Assert.assertTrue(i != (-2)); }
https://github.com/GroopyMusic/GroopyApp.git,UnMuteDataHolderTest,testValidatingTicketFail,{     adri.suys.un_mutescan.model.Ticket t1 = new adri.suys.un_mutescan.model.Ticket("Personne 1", "Ticket adulte", "N/A", "barcode1", "", "faux", "");     adri.suys.un_mutescan.model.Ticket t2 = new adri.suys.un_mutescan.model.Ticket("Personne 2", "Ticket adulte", "N/A", "barcode2", "", "faux", "");     adri.suys.un_mutescan.utils.UnMuteDataHolder.getAudience().add(t1);     adri.suys.un_mutescan.utils.UnMuteDataHolder.getAudience().add(t2);     int i = adri.suys.un_mutescan.utils.UnMuteDataHolder.isValidatedTicket("nejuendenudne");     org.junit.Assert.assertTrue(i == (-2)); }
https://github.com/GroopyMusic/GroopyApp.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("adri.suys.un_mutescan", appContext.getPackageName()); }
https://github.com/GroopyMusic/GroopyApp.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,FileSystemFacadeTest,closeQuietly,{     com.tachibana.downloader.core.system.FakeCloseable c = new com.tachibana.downloader.core.system.FakeCloseable();     fakeFs.closeQuietly(c);     org.junit.Assert.assertTrue(c.closed); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,FileSystemFacadeTest,getDirName,{     fsResolver.existsFileNames = java.util.Arrays.asList("bar");     org.junit.Assert.assertEquals("bar", fakeFs.getDirName(android.net.Uri.parse("file///root/bar")));     fsResolver.existsFileNames = null; }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,FileSystemFacadeTest,getDirPath,{     org.junit.Assert.assertEquals("/bar", fakeFs.getDirPath(android.net.Uri.parse("file://foo/bar"))); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,DownloadUtilsAndroidTest,testGetHttpFileName_withDisposition,{     java.lang.String actual = com.tachibana.downloader.core.utils.DownloadUtils.getHttpFileName(fs, "http://example.org/file.txt", "attachment; filename=\"subdir/real.pdf\"", null, null);     org.junit.Assert.assertEquals("real.pdf", actual); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,DownloadUtilsAndroidTest,testGetHttpFileName_withLocation,{     java.lang.String actual = com.tachibana.downloader.core.utils.DownloadUtils.getHttpFileName(fs, "http://example.org/file.txt", null, "Content-Location: subdir/real.pdf", null);     org.junit.Assert.assertEquals("real.pdf", actual); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,DownloadUtilsAndroidTest,testGetHttpFileName_withDispositionAndLocation,{     java.lang.String actual = com.tachibana.downloader.core.utils.DownloadUtils.getHttpFileName(fs, "http://example.org/file.txt", "attachment; filename=\"subdir/real.pdf\"", "Content-Location: subdir/file.pdf", null);     org.junit.Assert.assertEquals("real.pdf", actual); }
https://github.com/TachibanaGeneralLaboratories/download-navi.git,DownloadUtilsAndroidTest,testGetHttpFileName_dispositionWithEncoding,{     java.lang.String actual = com.tachibana.downloader.core.utils.DownloadUtils.getHttpFileName(fs, "http://example.org/file.pdf", "attachment;filename=\"foo.txt\";filename*=UTF-8''foo.txt", null, null);     org.junit.Assert.assertEquals("foo.txt", actual); }
https://github.com/proninyaroslav/libretorrent.git,FileSystemFacadeTest,getDirName,{     fsResolver.existsFileNames = java.util.Collections.singletonList("bar");     org.junit.Assert.assertEquals("bar", fakeFs.getDirPath(android.net.Uri.parse("file///root/bar")));     fsResolver.existsFileNames = null; }
https://github.com/proninyaroslav/libretorrent.git,FixedRingBufferTest,testIterator,{     org.proninyaroslav.libretorrent.core.collections.FixedRingBuffer<java.lang.Integer> buffer = new org.proninyaroslav.libretorrent.core.collections.FixedRingBuffer<>(10);     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(10);     for (int i = 0; i < buffer.size(); i++) {         buffer.add(i * i);         expected.add(i * i);     }     java.util.ArrayList<java.lang.Integer> actual = new java.util.ArrayList<>(10);     for (int i : buffer) {         actual.add(i);     }     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/proninyaroslav/libretorrent.git,LoggerTest,testGetLogEntry,{     org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(1);     org.proninyaroslav.libretorrent.core.logger.LogEntry entry = new org.proninyaroslav.libretorrent.core.logger.LogEntry(1, "TEST", "1", 1);     logger.send(entry);     org.junit.Assert.assertEquals(entry, logger.getEntry(0)); }
https://github.com/proninyaroslav/libretorrent.git,LoggerTest,testGetLogEntry_outOfBounds,{     org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(1);     org.proninyaroslav.libretorrent.core.logger.LogEntry entry = new org.proninyaroslav.libretorrent.core.logger.LogEntry(1, "TEST", "1", 1);     logger.send(entry);     org.junit.Assert.assertEquals(entry, logger.getEntry(1)); }
https://github.com/proninyaroslav/libretorrent.git,LoggerTest,testGetLogEntries,{     org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(50);     for (int i = 1; i <= 100; i++) {         logger.send(new org.proninyaroslav.libretorrent.core.logger.LogEntry(i, "TEST", "" + i, i));     }     org.proninyaroslav.libretorrent.core.logger.LogEntry[] expected = new org.proninyaroslav.libretorrent.core.logger.LogEntry[]{ new org.proninyaroslav.libretorrent.core.logger.LogEntry(60, "TEST", "60", 60), new org.proninyaroslav.libretorrent.core.logger.LogEntry(61, "TEST", "61", 61), new org.proninyaroslav.libretorrent.core.logger.LogEntry(62, "TEST", "62", 62), new org.proninyaroslav.libretorrent.core.logger.LogEntry(63, "TEST", "63", 63), new org.proninyaroslav.libretorrent.core.logger.LogEntry(64, "TEST", "64", 64), new org.proninyaroslav.libretorrent.core.logger.LogEntry(65, "TEST", "65", 65) };     java.util.List<org.proninyaroslav.libretorrent.core.logger.LogEntry> actual = logger.getEntries(9, 5);     for (int i = 0; i < actual.size(); i++) {         org.junit.Assert.assertEquals(expected[i], actual.get(i));     } }
https://github.com/proninyaroslav/libretorrent.git,LoggerTest,testGetLogEntries_entriesLessThanMaxSize,{     org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(10);     for (int i = 1; i <= 5; i++) {         logger.send(new org.proninyaroslav.libretorrent.core.logger.LogEntry(i, "TEST", "" + i, i));     }     org.proninyaroslav.libretorrent.core.logger.LogEntry[] expected = new org.proninyaroslav.libretorrent.core.logger.LogEntry[]{ new org.proninyaroslav.libretorrent.core.logger.LogEntry(3, "TEST", "3", 3), new org.proninyaroslav.libretorrent.core.logger.LogEntry(4, "TEST", "4", 4), new org.proninyaroslav.libretorrent.core.logger.LogEntry(5, "TEST", "5", 5) };     java.util.List<org.proninyaroslav.libretorrent.core.logger.LogEntry> actual = logger.getEntries(2, 5);     for (int i = 0; i < actual.size(); i++) {         org.junit.Assert.assertEquals(expected[i], actual.get(i));     } }
https://github.com/proninyaroslav/libretorrent.git,LoggerTest,testFilter_alreadyAddedEntries,{     org.proninyaroslav.libretorrent.core.logger.Logger logger = new org.proninyaroslav.libretorrent.core.logger.Logger(20);     for (int i = 1; i <= 20; i++) {         logger.send(new org.proninyaroslav.libretorrent.core.logger.LogEntry(i, "TEST", "" + i, i));     }     logger.addFilter(new org.proninyaroslav.libretorrent.core.logger.Logger.NewFilter("filter1", entry -> (entry.getId() % 2) != 0), new org.proninyaroslav.libretorrent.core.logger.Logger.NewFilter("filter2", entry -> (entry.getId() / 10) == 1));     org.proninyaroslav.libretorrent.core.logger.LogEntry[] expected = new org.proninyaroslav.libretorrent.core.logger.LogEntry[]{ new org.proninyaroslav.libretorrent.core.logger.LogEntry(11, "TEST", "11", 11), new org.proninyaroslav.libretorrent.core.logger.LogEntry(13, "TEST", "13", 13), new org.proninyaroslav.libretorrent.core.logger.LogEntry(15, "TEST", "15", 15), new org.proninyaroslav.libretorrent.core.logger.LogEntry(17, "TEST", "17", 17), new org.proninyaroslav.libretorrent.core.logger.LogEntry(19, "TEST", "19", 19) };     for (int i = 0; i < expected.length; i++) {         org.junit.Assert.assertEquals(expected[i], logger.getEntry(i));     } }
https://github.com/proninyaroslav/libretorrent.git,NormalizeUrlTest,testNormalize_forceHttp_with_forceHttps,{     org.proninyaroslav.libretorrent.core.urlnormalizer.NormalizeUrl.Options options = new org.proninyaroslav.libretorrent.core.urlnormalizer.NormalizeUrl.Options();     options.forceHttp = true;     options.forceHttps = true;     try {         org.proninyaroslav.libretorrent.core.urlnormalizer.NormalizeUrl.normalize("example.org", options);         org.junit.Assert.fail();     } catch (java.lang.Exception e) {         /* Asserts */     } }
https://github.com/KevinJ1008/Fitnessch.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.kevinj1008.fitnessch", appContext.getPackageName()); }
https://github.com/KevinJ1008/Fitnessch.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/rubysun137/Split-It.git,QuickSplitPresenterTest,isSharedListEmpty,{     mQuickSplitPresenter.setListSize(3);     // mQuickSplitPresenter.addSharedMoneyList(0, 1);     // mQuickSplitPresenter.addSharedMoneyList(1, 2);     // mQuickSplitPresenter.addSharedMoneyList(2, 3);     // Assert.assertFalse(mQuickSplitPresenter.isSharedListEmpty());     org.junit.Assert.assertTrue(mQuickSplitPresenter.isSharedListEmpty()); }
https://github.com/rubysun137/Split-It.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.ruby.splitmoney", appContext.getPackageName()); }
https://github.com/rubysun137/Split-It.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsAllStoryComments,{     java.util.Vector<android.content.ContentValues> storyComments = storyCommentsParser.parse();     org.junit.Assert.assertEquals(3, storyComments.size()); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsAllAskStoryComments,{     java.util.Vector<android.content.ContentValues> storyComments = askStoryCommentsParser.parse();     org.junit.Assert.assertEquals(53, storyComments.size()); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsCommentText,{     java.lang.String title = storyCommentsParser.parseText(topRowElement);     org.junit.Assert.assertEquals(com.malmstein.yahnac.comments.CommentsParserTest.TITLE_SAMPLE, title); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsCommentAuthor,{     java.lang.String author = storyCommentsParser.parseAuthor(topRowElement);     org.junit.Assert.assertEquals(com.malmstein.yahnac.comments.CommentsParserTest.AUTHOR_SAMPLE, author); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsCommentTimeAgo,{     java.lang.String timeAgo = storyCommentsParser.parseTimeAgo(topRowElement);     org.junit.Assert.assertEquals(com.malmstein.yahnac.comments.CommentsParserTest.TIME_AGO_SAMPLE, timeAgo); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsCommentLevel,{     int level = storyCommentsParser.parseLevel(secondRowElement);     org.junit.Assert.assertEquals(0, level); }
https://github.com/malmstein/yahnac.git,CommentsParserTest,returnsCommentId,{     java.lang.String commentId = storyCommentsParser.parseCommentId(topRowElement);     org.junit.Assert.assertEquals("12424346", commentId); }
https://github.com/malmstein/yahnac.git,VoteUrlParserTest,fileObjectShouldNotBeNull,{     java.io.File file = new java.io.File(getClass().getResource("/comments_9989667.html").getPath());     org.junit.Assert.assertNotNull(file); }
https://github.com/malmstein/yahnac.git,VoteUrlParserTest,retrieveVoteUrlFromAskStory,{     java.lang.String voteUrl = askStoryVoteUrlParser.parse();     org.junit.Assert.assertEquals(com.malmstein.yahnac.comments.VoteUrlParserTest.VOTE_URL_ASK_STORY_SAMPLE, voteUrl); }
https://github.com/malmstein/yahnac.git,VoteUrlParserTest,retrieveVoteUrlFromNewsStory,{     java.lang.String voteUrl = storyVoteUrlParser.parse();     org.junit.Assert.assertEquals(com.malmstein.yahnac.comments.VoteUrlParserTest.VOTE_URL_STORY_SAMPLE, voteUrl); }
https://github.com/ChuChuYu/LifeAPP.git,AccountEditFragmentTest,getCurrentTime,{     com.sandy.e3646.lifeblabla.account.AccountEditFragment accountEditFragment = new com.sandy.e3646.lifeblabla.account.AccountEditFragment(true, null);     java.lang.String time = accountEditFragment.getCurrentTime();     org.junit.Assert.assertEquals("2018/10/29", time); }
https://github.com/ChuChuYu/LifeAPP.git,MockitoTest,getCurrentTime,{     com.sandy.e3646.lifeblabla.account.AccountEditFragment accountEditFragment = new com.sandy.e3646.lifeblabla.account.AccountEditFragment(true, null);     java.lang.String time = accountEditFragment.getCurrentTime();     org.junit.Assert.assertEquals("2018/10/29", time); }
https://github.com/ChuChuYu/LifeAPP.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.sandy.e3646.lifeblabla", appContext.getPackageName()); }
https://github.com/ChuChuYu/LifeAPP.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }https://github.com/associazione-rousseau/voting-chain-app.git,ExchangeRateTest,queryExchangeRate_shouldBeGetMethod,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/associazione-rousseau/voting-chain-app.git,ExchangeRateTest,queryExchangeRate_shouldHavePairInUrl,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("/328/?convert=EUR", request.getPath()); }
https://github.com/associazione-rousseau/voting-chain-app.git,OpenAliasHelperTest,simple_unterminated,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.m2049r.xmrwallet.util.OpenAliasHelper.parse("oa1:xmr abc=def;ghi=jkl");     org.junit.Assert.assertNull(attrs); }
https://github.com/associazione-rousseau/voting-chain-app.git,OpenAliasHelperTest,unterminatedQuotes,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.m2049r.xmrwallet.util.OpenAliasHelper.parse("oa1:xmr abc=\"def;ghi=jkl;");     org.junit.Assert.assertNull(attrs); }
https://github.com/associazione-rousseau/voting-chain-app.git,OpenAliasHelperTest,quoteMalformedValue,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.m2049r.xmrwallet.util.OpenAliasHelper.parse("oa1:xmr abc=d\"e;f\";ghi=jkl;");     org.junit.Assert.assertNull(attrs); }
https://github.com/associazione-rousseau/voting-chain-app.git,RestoreHeightTest,zero,{     org.junit.Assert.assertTrue(getHeight("2014-04-27") == 0); }
https://github.com/associazione-rousseau/voting-chain-app.git,RestoreHeightTest,notZero,{     org.junit.Assert.assertTrue(getHeight("2014-05-07") > 0); }
https://github.com/associazione-rousseau/voting-chain-app.git,RestoreHeightTest,post201802,{     org.junit.Assert.assertTrue(isInRange(getHeight("2018-02-19"), 1507579, 1511127)); }
https://github.com/associazione-rousseau/voting-chain-app.git,RestoreHeightTest,postFuture,{     long b_20180701 = 1606715L;     long b_20190108 = b_20180701 + (720 * ((((((31 + 31) + 30) + 31) + 30) + 31) + 7));     org.junit.Assert.assertTrue(isInRange(getHeight("2019-01-08"), b_20190108 - (720 * 5), b_20190108)); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiCreateOrderTest,createOrder_shouldBePostMethod,{     xmrToApi.createOrder(0.5, "btcsomething", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiCreateOrderTest,createOrder_shouldBeContentTypeJson,{     xmrToApi.createOrder(0.5, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiCreateOrderTest,createOrder_shouldContainValidBody,{     final java.lang.String validBody = "{\"btc_amount\":0.1,\"btc_dest_address\":\"19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW\"}";     xmrToApi.createOrder(0.1, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiOrderParameterTest,orderParameter_shouldBeGetMethod,{     xmrToApi.queryOrderParameters(mockParametersXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiQueryOrderTest,orderStatus_shouldBePostMethod,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiQueryOrderTest,orderStatus_shouldBeContentTypeJson,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/associazione-rousseau/voting-chain-app.git,XmrToApiQueryOrderTest,orderStatus_shouldContainValidBody,{     final java.lang.String validBody = "{\"uuid\":\"xmrto - efMsiU\"}";     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/QuantumLeaper/android-wallet.git,ExchangeRateTest,queryExchangeRate_shouldBeGetMethod,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/QuantumLeaper/android-wallet.git,ExchangeRateTest,queryExchangeRate_shouldHavePairInUrl,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("/328/?convert=EUR", request.getPath()); }
https://github.com/QuantumLeaper/android-wallet.git,OpenAliasHelperTest,simple_unterminated,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.uplexa.upxwallet.util.OpenAliasHelper.parse("oa1:upx abc=def;ghi=jkl");     org.junit.Assert.assertNull(attrs); }
https://github.com/QuantumLeaper/android-wallet.git,OpenAliasHelperTest,unterminatedQuotes,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.uplexa.upxwallet.util.OpenAliasHelper.parse("oa1:upx abc=\"def;ghi=jkl;");     org.junit.Assert.assertNull(attrs); }
https://github.com/QuantumLeaper/android-wallet.git,OpenAliasHelperTest,quoteMalformedValue,{     java.util.Map<java.lang.String, java.lang.String> attrs;     attrs = com.uplexa.upxwallet.util.OpenAliasHelper.parse("oa1:upx abc=d\"e;f\";ghi=jkl;");     org.junit.Assert.assertNull(attrs); }
https://github.com/QuantumLeaper/android-wallet.git,RestoreHeightTest,zero,{     org.junit.Assert.assertTrue(getHeight("2014-04-27") == 0); }
https://github.com/QuantumLeaper/android-wallet.git,RestoreHeightTest,notZero,{     org.junit.Assert.assertTrue(getHeight("2018-10-23") > 1); }
https://github.com/QuantumLeaper/android-wallet.git,RestoreHeightTest,post201802,{     org.junit.Assert.assertTrue(isInRange(getHeight("2018-02-19"), 1507579, 1511127)); }
https://github.com/QuantumLeaper/android-wallet.git,RestoreHeightTest,postFuture,{     long b_20180701 = 1606715L;     long b_20190108 = b_20180701 + (720 * ((((((31 + 31) + 30) + 31) + 30) + 31) + 7));     org.junit.Assert.assertTrue(isInRange(getHeight("2019-01-08"), b_20190108 - (720 * 5), b_20190108)); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiCreateOrderTest,createOrder_shouldBePostMethod,{     xmrToApi.createOrder(0.5, "btcsomething", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiCreateOrderTest,createOrder_shouldBeContentTypeJson,{     xmrToApi.createOrder(0.5, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiCreateOrderTest,createOrder_shouldContainValidBody,{     final java.lang.String validBody = "{\"btc_amount\":0.1,\"btc_dest_address\":\"19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW\"}";     xmrToApi.createOrder(0.1, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiOrderParameterTest,orderParameter_shouldBeGetMethod,{     xmrToApi.queryOrderParameters(mockParametersXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiQueryOrderTest,orderStatus_shouldBePostMethod,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiQueryOrderTest,orderStatus_shouldBeContentTypeJson,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/QuantumLeaper/android-wallet.git,XmrToApiQueryOrderTest,orderStatus_shouldContainValidBody,{     final java.lang.String validBody = "{\"uuid\":\"xmrto - efMsiU\"}";     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/MicGun/LeLeLe.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.hugh.lelele", appContext.getPackageName()); }
https://github.com/MicGun/LeLeLe.git,ElectricityLandlordUnitTest,testMonthBeUpdated,{     org.junit.Assert.assertEquals("12", mElectricityLandlordPresenter.getMonthBeUpdated(0)); }
https://github.com/MicGun/LeLeLe.git,ElectricityLandlordUnitTest,testYearBeUpdated,{     org.junit.Assert.assertEquals("2019", mElectricityLandlordPresenter.getYearBeUpdated(0, 2020)); }
https://github.com/MicGun/LeLeLe.git,ElectricityLandlordUnitTest,testMonthBeUpdatedNext,{     org.junit.Assert.assertEquals("01", mElectricityLandlordPresenter.getMonthBeUpdatedNext(0)); }
https://github.com/MicGun/LeLeLe.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(2, fibonacci(2)); }
https://github.com/MicGun/LeLeLe.git,ExampleUnitTest,fibonacciTest,{     org.junit.Assert.assertEquals(2, fibonacciArraySolving(9)); }
https://github.com/MicGun/LeLeLe.git,MainPresenterUnitTest,testUnreadNotificationsAmount,{     org.junit.Assert.assertEquals(2, mMainPresenter.countUnreadNotification(mNotifications)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testAuthSubscription,{     org.junit.Assert.assertFalse("Synchronized didn't subscribe on authentication", authListeners.isEmpty()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testAuthUnsubscription,{     firebaseSynchronizer.stop();     org.junit.Assert.assertTrue("Synchronized didn't Unsubscribe from authentication", authListeners.isEmpty()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testUnsubscribedWithoutAuth,{     final net.buggy.shoplist.sharing.FirebaseSynchronizer.State state = firebaseSynchronizer.getState();     org.junit.Assert.assertEquals(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, state); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSubscribedAfterAuthentication,{     authenticate();     final net.buggy.shoplist.sharing.FirebaseSynchronizer.State state = firebaseSynchronizer.waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.SUBSCRIBED, 2000);     org.junit.Assert.assertEquals(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.SUBSCRIBED, state); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testUnsubscribedAfterLogout,{     authenticate();     firebaseSynchronizer.waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.SUBSCRIBED, 2000);     disconnect();     final net.buggy.shoplist.sharing.FirebaseSynchronizer.State state = firebaseSynchronizer.waitState(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, 2000);     org.junit.Assert.assertEquals(net.buggy.shoplist.sharing.FirebaseSynchronizer.State.UNSUBSCRIBED, state); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleClientCategories,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 12345);     final net.buggy.shoplist.model.Category category2 = addCategory("category2", null);     final net.buggy.shoplist.model.Category category3 = addCategory("category3", 100);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(3, categoriesList.getChildrenCount());     assertCategoryEquals(category1, findServerEntity(category1));     assertCategoryEquals(category2, findServerEntity(category2));     assertCategoryEquals(category3, findServerEntity(category3)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleClientProducts,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     final net.buggy.shoplist.model.Product product2 = addProduct("product2", net.buggy.shoplist.model.UnitOfMeasure.GRAM, 6, net.buggy.shoplist.model.PeriodType.YEARS);     final net.buggy.shoplist.model.Product product3 = addProduct("product3", null, null, null);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(3, productsList.getChildrenCount());     assertProductEquals(product1, findServerEntity(product1));     assertProductEquals(product2, findServerEntity(product2));     assertProductEquals(product3, findServerEntity(product3)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleClientProductsWithCategories,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 100);     final net.buggy.shoplist.model.Category category2 = addCategory("category2", 5);     final net.buggy.shoplist.model.Product product1 = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     product1.setCategories(java.util.Arrays.asList(category1, category2));     dao.saveProduct(product1);     final net.buggy.shoplist.model.Product product2 = addProduct("product2", net.buggy.shoplist.model.UnitOfMeasure.GRAM, 6, net.buggy.shoplist.model.PeriodType.YEARS);     product2.setCategories(java.util.Collections.singletonList(category1));     dao.saveProduct(product2);     final net.buggy.shoplist.model.Product product3 = addProduct("product3", null, null, null);     product3.setCategories(java.util.Collections.singletonList(category2));     dao.saveProduct(product3);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(3, productsList.getChildrenCount());     assertProductEquals(product1, findServerEntity(product1));     assertProductEquals(product2, findServerEntity(product2));     assertProductEquals(product3, findServerEntity(product3)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleClientShopItems,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     final net.buggy.shoplist.model.Product product3 = addProduct("product3", net.buggy.shoplist.model.UnitOfMeasure.PACK, 1, net.buggy.shoplist.model.PeriodType.MONTHS);     final net.buggy.shoplist.model.ShopItem shopItem1 = addShopItem(product1, java.math.BigDecimal.ONE, "test comment", net.buggy.shoplist.model.UnitOfMeasure.LITER);     final net.buggy.shoplist.model.ShopItem shopItem2 = addShopItem(product2, null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem3 = addShopItem(product3, new java.math.BigDecimal(0.5), "123", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot shopItemsList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(3, shopItemsList.getChildrenCount());     assertShopItemEquals(shopItem1, findServerEntity(shopItem1));     assertShopItemEquals(shopItem2, findServerEntity(shopItem2));     assertShopItemEquals(shopItem3, findServerEntity(shopItem3)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleServerCategories,{     final com.google.firebase.database.DataSnapshot serverCategory1 = addServerCategory("category1", 12345);     final com.google.firebase.database.DataSnapshot serverCategory2 = addServerCategory("category2", null);     final com.google.firebase.database.DataSnapshot serverCategory3 = addServerCategory("category3", 100);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.Category> categories = dao.getCategories();     org.junit.Assert.assertEquals(3, categories.size());     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(serverCategory1))), serverCategory1);     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(serverCategory2))), serverCategory2);     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(serverCategory3))), serverCategory3); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleServerProducts,{     final com.google.firebase.database.DataSnapshot serverProduct1 = addServerProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     final com.google.firebase.database.DataSnapshot serverProduct2 = addServerProduct("product2", null, null, null);     final com.google.firebase.database.DataSnapshot serverProduct3 = addServerProduct("product3", net.buggy.shoplist.model.UnitOfMeasure.LITER, 1, net.buggy.shoplist.model.PeriodType.WEEKS);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.Product> products = dao.getProducts();     org.junit.Assert.assertEquals(3, products.size());     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct1))), serverProduct1);     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct2))), serverProduct2);     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct3))), serverProduct3); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleServerProductsWithCategories,{     final com.google.firebase.database.DataSnapshot serverCategory1 = addServerCategory("category1", 100);     final com.google.firebase.database.DataSnapshot serverCategory2 = addServerCategory("category2", null);     final com.google.firebase.database.DataSnapshot serverProduct1 = addServerProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS, serverCategory1.getKey(), serverCategory2.getKey());     final com.google.firebase.database.DataSnapshot serverProduct2 = addServerProduct("product2", null, null, null, serverCategory1.getKey());     final com.google.firebase.database.DataSnapshot serverProduct3 = addServerProduct("product3", net.buggy.shoplist.model.UnitOfMeasure.LITER, 1, net.buggy.shoplist.model.PeriodType.WEEKS, serverCategory2.getKey());     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.Product> products = dao.getProducts();     org.junit.Assert.assertEquals(3, products.size());     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct1))), serverProduct1);     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct2))), serverProduct2);     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct3))), serverProduct3); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testBulkSyncAddMultipleServerShopItems,{     final com.google.firebase.database.DataSnapshot serverProduct1 = addServerProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     final com.google.firebase.database.DataSnapshot serverProduct2 = addServerProduct("product2", null, null, null);     final com.google.firebase.database.DataSnapshot serverProduct3 = addServerProduct("product3", net.buggy.shoplist.model.UnitOfMeasure.PACK, 1, net.buggy.shoplist.model.PeriodType.MONTHS);     final com.google.firebase.database.DataSnapshot serverShopItem1 = addServerShopItem(serverProduct1, java.math.BigDecimal.ONE, "test", net.buggy.shoplist.model.UnitOfMeasure.PACK);     final com.google.firebase.database.DataSnapshot serverShopItem2 = addServerShopItem(serverProduct2, null, null, null);     final com.google.firebase.database.DataSnapshot serverShopItem3 = addServerShopItem(serverProduct3, new java.math.BigDecimal("1.5"), "some comment", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.ShopItem> shopItems = dao.getShopItems();     org.junit.Assert.assertEquals(3, shopItems.size());     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(serverShopItem1))), serverShopItem1);     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(serverShopItem2))), serverShopItem2);     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(serverShopItem3))), serverShopItem3); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddClientCategory,{     addCategory("category1", 255);     authenticateAndWaitSynchronizer();     final net.buggy.shoplist.model.Category category2 = addCategory("category2", 100);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(2, categoriesList.getChildrenCount());     assertCategoryEquals(category2, findServerEntity(category2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddClientProduct,{     addProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(2, productsList.getChildrenCount());     assertProductEquals(product2, findServerEntity(product2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddClientShopItem,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", null, null, null);     addShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem2 = addShopItem(product2, null, null, null);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot shopItemList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(2, shopItemList.getChildrenCount());     assertShopItemEquals(shopItem2, findServerEntity(shopItem2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeClientCategory,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     authenticateAndWaitSynchronizer();     category1.setName("changedName");     category1.setColor(100);     dao.saveCategory(category1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(1, categoriesList.getChildrenCount());     assertCategoryEquals(category1, findServerEntity(category1)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeClientProduct,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.PACK, 1, net.buggy.shoplist.model.PeriodType.DAYS);     authenticateAndWaitSynchronizer();     final net.buggy.shoplist.model.Category category = addCategory("categoryX", 100);     product1.setCategories(java.util.Collections.singletonList(category));     product1.setName("changedName");     product1.setPeriodCount(100);     product1.setDefaultUnits(net.buggy.shoplist.model.UnitOfMeasure.GRAM);     product1.setLastBuyDate(net.buggy.shoplist.utils.DateUtils.date(2017, 5, 5));     product1.setPeriodType(net.buggy.shoplist.model.PeriodType.WEEKS);     dao.saveProduct(product1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(1, productsList.getChildrenCount());     assertProductEquals(product1, findServerEntity(product1)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeClientShopItem,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product1, java.math.BigDecimal.TEN, "test", net.buggy.shoplist.model.UnitOfMeasure.KILOGRAM);     authenticateAndWaitSynchronizer();     shopItem.setChecked(true);     shopItem.setUnitOfMeasure(net.buggy.shoplist.model.UnitOfMeasure.GRAM);     shopItem.setQuantity(java.math.BigDecimal.ONE);     shopItem.setComment("new comment");     dao.saveShopItem(shopItem);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot shopItemList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(1, shopItemList.getChildrenCount());     assertShopItemEquals(shopItem, findServerEntity(shopItem)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddServerCategory,{     addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot category2 = addServerCategory("category2", 100);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.Category> clientCategories = dao.getCategories();     org.junit.Assert.assertEquals(2, clientCategories.size());     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(category2))), category2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddServerProduct,{     addServerProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.Product> clientProducts = dao.getProducts();     org.junit.Assert.assertEquals(2, clientProducts.size());     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(product2))), product2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddServerShopItem,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     addServerShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     final com.google.firebase.database.DataSnapshot shopItem2 = addServerShopItem(product2, null, null, null);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.ShopItem> shopItems = dao.getShopItems();     org.junit.Assert.assertEquals(2, shopItems.size());     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(shopItem2))), shopItem2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeServerCategory,{     final com.google.firebase.database.DataSnapshot serverCategory = addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     final java.util.LinkedHashMap<java.lang.String, java.lang.Object> newValues = new java.util.LinkedHashMap<>();     newValues.put("name", "changedName");     newValues.put("naturalId", "changedName".toLowerCase());     newValues.put("color", 1);     final java.util.Date changeDate = new java.util.Date();     newValues.put("lastChangeDate", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseDate(changeDate));     serverCategory.getRef().updateChildren(newValues);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot updatedCategory = getUpdatedSnapshot(serverCategory);     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(serverCategory))), updatedCategory);     org.junit.Assert.assertEquals(getDate(updatedCategory, "lastChangeDate"), changeDate); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeServerProduct,{     final com.google.firebase.database.DataSnapshot category1 = addServerCategory("category1", 1);     final com.google.firebase.database.DataSnapshot category2 = addServerCategory("category2", 1);     final com.google.firebase.database.DataSnapshot category3 = addServerCategory("category3", 1);     final com.google.firebase.database.DataSnapshot serverProduct = addServerProduct("product", net.buggy.shoplist.model.UnitOfMeasure.GRAM, 1, net.buggy.shoplist.model.PeriodType.WEEKS, category1.getKey());     authenticateAndWaitSynchronizer();     final java.util.LinkedHashMap<java.lang.String, java.lang.Object> newValues = new java.util.LinkedHashMap<>();     newValues.put("name", "changedName");     newValues.put("naturalId", "changedName".toLowerCase());     newValues.put("defaultUnits", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseEnum(net.buggy.shoplist.model.UnitOfMeasure.BOTTLE));     newValues.put("periodCount", 3);     newValues.put("periodType", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseEnum(net.buggy.shoplist.model.PeriodType.MONTHS));     newValues.put("lastBuyDate", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseDate(net.buggy.shoplist.utils.DateUtils.date(2017, 5, 5)));     newValues.put("categories", java.util.Arrays.asList(category2.getKey(), category3.getKey()));     final java.util.Date changeDate = new java.util.Date();     newValues.put("lastChangeDate", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseDate(changeDate));     serverProduct.getRef().updateChildren(newValues);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot updatedSnapshot = getUpdatedSnapshot(serverProduct);     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(serverProduct))), updatedSnapshot);     org.junit.Assert.assertEquals(getDate(updatedSnapshot, "lastChangeDate"), changeDate); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncChangeServerShopItem,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     final com.google.firebase.database.DataSnapshot serverShopItem = addServerShopItem(product1, new java.math.BigDecimal(3), "test comment", net.buggy.shoplist.model.UnitOfMeasure.GRAM);     authenticateAndWaitSynchronizer();     final java.util.LinkedHashMap<java.lang.String, java.lang.Object> newValues = new java.util.LinkedHashMap<>();     newValues.put("quantity", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseBigDecimal(5));     newValues.put("checked", true);     newValues.put("product", product2.getKey());     newValues.put("naturalId", getString(product2, "naturalId"));     newValues.put("comment", "new c");     newValues.put("unitOfMeasure", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseEnum(net.buggy.shoplist.model.UnitOfMeasure.LITER));     final java.util.Date changeDate = new java.util.Date();     newValues.put("lastChangeDate", net.buggy.shoplist.sharing.FirebaseSynchronizerTest.toFirebaseDate(changeDate));     serverShopItem.getRef().updateChildren(newValues);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot updatedSnapshot = getUpdatedSnapshot(serverShopItem);     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(serverShopItem))), updatedSnapshot);     org.junit.Assert.assertEquals(getDate(updatedSnapshot, "lastChangeDate"), changeDate); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddClientCategoryAfterDisconnect,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     addCategory("category2", 100);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(1, categoriesList.getChildrenCount());     assertCategoryEquals(category1, categoriesList.getChildren().iterator().next()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddClientProductAfterDisconnect,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     addProduct("product2", null, null, null);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(1, productsList.getChildrenCount());     assertProductEquals(product1, productsList.getChildren().iterator().next()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddClientShopItemAfterDisconnect,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem1 = addShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     addShopItem(product2, null, null, null);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot shopItemList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(1, shopItemList.getChildrenCount());     assertShopItemEquals(shopItem1, shopItemList.getChildren().iterator().next()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncChangeClientCategoryAfterDisconnect,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     category1.setName("newName");     dao.saveCategory(category1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverCategory = findServerEntity(category1);     org.junit.Assert.assertNotEquals(category1.getName(), getString(serverCategory, "name")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncChangeClientProductAfterDisconnect,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     product.setName("newName");     dao.saveProduct(product);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverProduct = findServerEntity(product);     org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncChangeClientShopItemAfterDisconnect,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     shopItem.setChecked(true);     dao.saveShopItem(shopItem);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverShopItem = findServerEntity(shopItem);     org.junit.Assert.assertNotEquals(shopItem.isChecked(), getBoolean(serverShopItem, "checked")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteClientCategoryAfterDisconnect,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     dao.removeCategory(category1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(1, categoriesList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteClientProductAfterDisconnect,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     dao.removeProduct(product);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(1, productsList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteClientShopItemAfterDisconnect,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     dao.removeShopItem(shopItem);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot shopItemsList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(1, shopItemsList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddServerCategoryAfterDisconnect,{     final com.google.firebase.database.DataSnapshot category1 = addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     addServerCategory("category2", 100);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.Category> categories = dao.getCategories();     org.junit.Assert.assertEquals(1, categories.size());     assertCategoryEquals(categories.get(0), category1); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddServerProductAfterDisconnect,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     addServerProduct("product2", null, null, null);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.Product> products = dao.getProducts();     org.junit.Assert.assertEquals(1, products.size());     assertProductEquals(products.get(0), product1); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAddServerShopItemAfterDisconnect,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     final com.google.firebase.database.DataSnapshot shopItem1 = addServerShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     addServerShopItem(product2, null, null, null);     waitBackgroundTasks();     final java.util.List<net.buggy.shoplist.model.ShopItem> shopItems = dao.getShopItems();     org.junit.Assert.assertEquals(1, shopItems.size());     assertShopItemEquals(shopItems.get(0), shopItem1); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteServerCategoryAfterDisconnect,{     final com.google.firebase.database.DataSnapshot category1 = addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     category1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.Category clientCategory = findClientEntity(category1);     org.junit.Assert.assertNotNull(clientCategory); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteServerProductAfterDisconnect,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     product1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.Product clientProduct = findClientEntity(product1);     org.junit.Assert.assertNotNull(clientProduct); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteServerShopItemAfterDisconnect,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     final com.google.firebase.database.DataSnapshot shopItem1 = addServerShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     shopItem1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.ShopItem clientShopItem = findClientEntity(shopItem1);     org.junit.Assert.assertNotNull(clientShopItem); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddClientCategory,{     addCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     final net.buggy.shoplist.model.Category category2 = addCategory("category2", 100);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(2, categoriesList.getChildrenCount());     assertCategoryEquals(category2, findServerEntity(category2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddClientProduct,{     addProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(2, productsList.getChildrenCount());     assertProductEquals(product2, findServerEntity(product2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddClientShopItem,{     final net.buggy.shoplist.model.Product product1 = addProduct("product1", null, null, null);     addShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final net.buggy.shoplist.model.Product product2 = addProduct("product2", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem2 = addShopItem(product2, null, null, null);     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot shopItemList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(2, shopItemList.getChildrenCount());     assertShopItemEquals(shopItem2, findServerEntity(shopItem2)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddServerCategory,{     addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     disconnect();     final com.google.firebase.database.DataSnapshot category2 = addServerCategory("category2", 100);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.Category> categories = dao.getCategories();     org.junit.Assert.assertEquals(2, categories.size());     assertCategoryEquals(((net.buggy.shoplist.model.Category) (findClientEntity(category2))), category2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddServerProduct,{     addServerProduct("product1", null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.Product> products = dao.getProducts();     org.junit.Assert.assertEquals(2, products.size());     assertProductEquals(((net.buggy.shoplist.model.Product) (findClientEntity(product2))), product2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testReconnectBulkSyncAddServerShopItem,{     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     addServerShopItem(product1, null, null, null);     authenticateAndWaitSynchronizer();     disconnect();     final com.google.firebase.database.DataSnapshot product2 = addServerProduct("product2", null, null, null);     final com.google.firebase.database.DataSnapshot shopItem2 = addServerShopItem(product2, null, null, null);     authenticateAndWaitSynchronizer();     final java.util.List<net.buggy.shoplist.model.ShopItem> shopItems = dao.getShopItems();     org.junit.Assert.assertEquals(2, shopItems.size());     assertShopItemEquals(((net.buggy.shoplist.model.ShopItem) (findClientEntity(shopItem2))), shopItem2); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserChangeClientCategory,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     category1.setName("newName");     dao.saveCategory(category1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverCategory = findServerEntity(category1);     org.junit.Assert.assertNotEquals(category1.getName(), getString(serverCategory, "name")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserChangeClientProduct,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     product.setName("newName");     dao.saveProduct(product);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverProduct = findServerEntity(product);     org.junit.Assert.assertNotEquals(product.getName(), getString(serverProduct, "name")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserChangeClientShopItem,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product, null, null, null);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     shopItem.setChecked(true);     dao.saveShopItem(shopItem);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot serverShopItem = findServerEntity(shopItem);     org.junit.Assert.assertNotEquals(shopItem.isChecked(), getBoolean(serverShopItem, "checked")); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoAnotherUserSyncDeleteClientCategory,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 255);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     dao.removeCategory(category1);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(1, categoriesList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoAnotherUserSyncDeleteClientProduct,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     dao.removeProduct(product);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(1, productsList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserDeleteClientShopItem,{     final net.buggy.shoplist.model.Product product = addProduct("product", null, null, null);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product, null, null, null);     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     dao.removeShopItem(shopItem);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot shopItemsList = getEntityListSnapshot("shopItems");     org.junit.Assert.assertEquals(1, shopItemsList.getChildrenCount()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserDeleteServerCategory,{     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot category1 = addServerCategory("category1", 255);     waitBackgroundTasks();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     category1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.Category clientCategory = findClientEntity(category1);     org.junit.Assert.assertNotNull(clientCategory); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncAnotherUserDeleteServerProduct,{     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     waitBackgroundTasks();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     product1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.Product clientProduct = findClientEntity(product1);     org.junit.Assert.assertNotNull(clientProduct); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testNoSyncDeleteAnotherUserServerShopItem,{     setUnitTestFirebaseUser("AnotherUser");     authenticateAndWaitSynchronizer();     final com.google.firebase.database.DataSnapshot product1 = addServerProduct("product1", null, null, null);     final com.google.firebase.database.DataSnapshot shopItem1 = addServerShopItem(product1, null, null, null);     waitBackgroundTasks();     disconnect();     setUnitTestFirebaseUser(net.buggy.shoplist.sharing.FirebaseSynchronizerTest.MAIN_USER);     authenticateAndWaitSynchronizer();     setUnitTestFirebaseUser("AnotherUser");     shopItem1.getRef().removeValue();     waitBackgroundTasks();     final net.buggy.shoplist.model.ShopItem clientShopItem = findClientEntity(shopItem1);     org.junit.Assert.assertNotNull(clientShopItem); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddClientCategoryMatchByNaturalId,{     com.google.firebase.database.DataSnapshot serverCategory = addServerCategory("category1", 255);     authenticateAndWaitSynchronizer();     net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Entity> syncRecord = findSyncRecord(serverCategory);     dao.removeSynchronizationRecord(syncRecord);     net.buggy.shoplist.model.Category category = dao.findCategory(syncRecord.getInternalId());     dao.removeCategory(category);     net.buggy.shoplist.model.Category newClientCategory = addCategory("category1", 100);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot categoriesList = getEntityListSnapshot("categories");     org.junit.Assert.assertEquals(1, categoriesList.getChildrenCount());     assertCategoryEquals(newClientCategory, categoriesList.getChildren().iterator().next()); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testSyncAddClientProductMatchByNaturalId,{     com.google.firebase.database.DataSnapshot serverProduct = addServerProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.LITER, 2, net.buggy.shoplist.model.PeriodType.WEEKS);     authenticateAndWaitSynchronizer();     net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Entity> syncRecord = findSyncRecord(serverProduct);     dao.removeSynchronizationRecord(syncRecord);     net.buggy.shoplist.model.Product product = dao.findProduct(syncRecord.getInternalId());     dao.removeProduct(product);     final net.buggy.shoplist.model.Product newClientProduct = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.PACK, 3, net.buggy.shoplist.model.PeriodType.DAYS);     waitBackgroundTasks();     final com.google.firebase.database.DataSnapshot productsList = getEntityListSnapshot("products");     org.junit.Assert.assertEquals(1, productsList.getChildrenCount());     final com.google.firebase.database.DataSnapshot currentServerProduct = productsList.getChildren().iterator().next();     assertProductEquals(newClientProduct, currentServerProduct); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testChangeListBulkSyncAddClientCategory,{     final net.buggy.shoplist.model.Category category1 = addCategory("category1", 12345);     authenticateAndWaitSynchronizer();     getUserReference().child("listId").setValue("newList");     waitBackgroundTasks();     final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Category> syncRecord = findSyncRecord(category1);     org.junit.Assert.assertEquals("newList", syncRecord.getListId());     assertCategoryEquals(category1, findServerEntity(category1)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testChangeListBulkSyncAddClientProduct,{     final net.buggy.shoplist.model.Product product = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     authenticateAndWaitSynchronizer();     getUserReference().child("listId").setValue("newList");     waitBackgroundTasks();     final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.Product> syncRecord = findSyncRecord(product);     org.junit.Assert.assertEquals("newList", syncRecord.getListId());     assertProductEquals(product, findServerEntity(product)); }
https://github.com/bugy/SheLi.git,FirebaseSynchronizerTest,testChangeListBulkSyncAddClientShopItem,{     final net.buggy.shoplist.model.Product product = addProduct("product1", net.buggy.shoplist.model.UnitOfMeasure.BOTTLE, 3, net.buggy.shoplist.model.PeriodType.DAYS);     final net.buggy.shoplist.model.ShopItem shopItem = addShopItem(product, java.math.BigDecimal.ONE, "test comment", net.buggy.shoplist.model.UnitOfMeasure.LITER);     authenticateAndWaitSynchronizer();     getUserReference().child("listId").setValue("newList");     waitBackgroundTasks();     final net.buggy.shoplist.model.EntitySynchronizationRecord<net.buggy.shoplist.model.ShopItem> syncRecord = findSyncRecord(shopItem);     org.junit.Assert.assertEquals("newList", syncRecord.getListId());     assertShopItemEquals(shopItem, findServerEntity(shopItem)); }
https://github.com/pekebyte/somosoco.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.pekebyte.somosoco", appContext.getPackageName()); }
https://github.com/pekebyte/somosoco.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,Erc20UtilsTest,testGetErc20Balance,{     final java.math.BigInteger erc20Balance = co.coinfinity.infineonandroidapp.ethereum.utils.Erc20Utils.getErc20Balance(co.coinfinity.infineonandroidapp.ethereum.utils.Erc20UtilsTest.ERC_CONTRACT, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getAddress(), co.coinfinity.AppConstants.ROPSTEN_URI);     java.lang.System.out.printf("Token Balance: %s%n", erc20Balance);     org.junit.Assert.assertThat(erc20Balance.intValue(), org.hamcrest.Matchers.comparesEqualTo(0)); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,EthereumUtilsTest,testSendTransaction,{     org.powermock.api.mockito.PowerMockito.mockStatic(co.coinfinity.infineonandroidapp.infineon.NfcUtils.class);     Mockito.when(co.coinfinity.infineonandroidapp.infineon.NfcUtils.generateSignature(ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.any(), ArgumentMatchers.any())).thenAnswer(((org.mockito.stubbing.Answer) (invocation -> {         java.lang.Object[] args = invocation.getArguments();         return TransactionSigner.signTransaction(((byte[]) (args[2])));     })));     final android.util.Pair<org.web3j.protocol.core.methods.response.EthSendTransaction, co.coinfinity.infineonandroidapp.infineon.apdu.response.GenerateSignatureResponseApdu> ethSendTransaction = co.coinfinity.infineonandroidapp.ethereum.utils.EthereumUtils.sendTransaction(co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_PRICE, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_LIMIT, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getAddress(), "0xa8e5590D3E1377BAfac30d3D3AB5779A62e0FF28", org.web3j.utils.Convert.toWei("0.002", Convert.Unit.ETHER).toBigInteger(), isoDep, org.web3j.utils.Numeric.toHexStringNoPrefixZeroPadded(co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getEcKeyPair().getPublicKey(), 128), "", co.coinfinity.AppConstants.ROPSTEN_URI, org.web3j.tx.ChainId.ROPSTEN, 1, null);     org.junit.Assert.assertNull(ethSendTransaction.first.getError());     java.lang.System.out.println(ethSendTransaction.first.getTransactionHash());     org.hamcrest.MatcherAssert.assertThat(ethSendTransaction.first.getResult(), org.hamcrest.CoreMatchers.containsString("0x")); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,EthereumUtilsTest,testGetNextNonce,{     org.web3j.protocol.Web3j web3 = org.web3j.protocol.Web3jFactory.build(new org.web3j.protocol.http.HttpService(co.coinfinity.AppConstants.ROPSTEN_URI));     final java.math.BigInteger nextNonce = co.coinfinity.infineonandroidapp.ethereum.utils.EthereumUtils.getNextNonce(web3, "0xfd37944e59fB227043F1F53Ca6Aef1C953684f46");     org.junit.Assert.assertTrue(nextNonce.intValue() > 0); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,UriUtilsTest,extractEtherAddressWithChecksum,{     final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("6e670c473A2AD5894aE354b832aD4BADF1d919bf");     org.junit.Assert.assertEquals("0x6e670c473A2AD5894aE354b832aD4BADF1d919bf", result); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,UriUtilsTest,extractEtherAddressWithoutChecksum,{     final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("0x6e670c473a2ad5894ae354b832ad4badf1d919bf");     org.junit.Assert.assertEquals("0x6e670c473a2ad5894ae354b832ad4badf1d919bf", result); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,UriUtilsTest,extractEtherAddressWithSchema,{     final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("ethereum:6e670c473A2AD5894aE354b832aD4BADF1d919bf");     org.junit.Assert.assertEquals("0x6e670c473A2AD5894aE354b832aD4BADF1d919bf", result); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,UriUtilsTest,extractEtherAddressWithUppercaseLetters,{     final java.lang.String result = co.coinfinity.infineonandroidapp.ethereum.utils.UriUtils.extractEtherAddressFromUri("0x6E670C473A2AD5894AE354B832AD4BADF1D919BF");     org.junit.Assert.assertEquals("0x6E670C473A2AD5894AE354B832AD4BADF1D919BF", result); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,VotingUtilsTest,testWhitelistedSenderAddresses,{     final org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.Address> addresses = co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtils.whitelistedSenderAddresses(co.coinfinity.infineonandroidapp.ethereum.utils.VotingUtilsTest.CONTRACT_ADDRESS, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.credentials.getAddress(), co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_PRICE, co.coinfinity.infineonandroidapp.ethereum.utils.TransactionSigner.GAS_LIMIT, co.coinfinity.AppConstants.ROPSTEN_URI);     org.junit.Assert.assertEquals(4, addresses.getValue().size()); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,NfcUtilsTest,testGenerateKeyFromSeed,{     when(nfcTranceiver.transceive(ArgumentMatchers.any())).thenReturn(new byte[]{ ((byte) (0x90)), 0x0 });     byte[] seed = new byte[]{  };     final boolean responseApdu = co.coinfinity.infineonandroidapp.infineon.NfcUtils.generateKeyFromSeed(nfcTranceiver, seed, null);     org.junit.Assert.assertTrue(responseApdu); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,NfcUtilsTest,testInitializePinAndReturnPuk,{     when(nfcTranceiver.transceive(ArgumentMatchers.any())).thenReturn(new byte[]{ 0x4, 0x3, 0x2, 0x1, ((byte) (0x90)), 0x0 });     final java.lang.String responseApdu = co.coinfinity.infineonandroidapp.utils.ByteUtils.bytesToHex(co.coinfinity.infineonandroidapp.infineon.NfcUtils.initializePinAndReturnPuk(nfcTranceiver, "1234".getBytes(java.nio.charset.StandardCharsets.UTF_8)));     org.junit.Assert.assertEquals("04030201", responseApdu); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,NfcUtilsTest,testChangePin,{     when(nfcTranceiver.transceive(ArgumentMatchers.any())).thenReturn(new byte[]{ 0x4, 0x3, 0x2, 0x1, ((byte) (0x90)), 0x0 });     final java.lang.String responseApdu = co.coinfinity.infineonandroidapp.utils.ByteUtils.bytesToHex(co.coinfinity.infineonandroidapp.infineon.NfcUtils.changePin(nfcTranceiver, "1234".getBytes(java.nio.charset.StandardCharsets.UTF_8), "1337".getBytes(java.nio.charset.StandardCharsets.UTF_8)));     org.junit.Assert.assertEquals("04030201", responseApdu); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,NfcUtilsTest,testUnlockPin,{     when(nfcTranceiver.transceive(ArgumentMatchers.any())).thenReturn(new byte[]{ ((byte) (0x90)), 0x0 });     final boolean responseApdu = co.coinfinity.infineonandroidapp.infineon.NfcUtils.unlockPin(nfcTranceiver, "1234".getBytes(java.nio.charset.StandardCharsets.UTF_8));     org.junit.Assert.assertTrue(responseApdu); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,NfcUtilsTest,testVerifyPin,{     when(nfcTranceiver.transceive(ArgumentMatchers.any())).thenReturn(new byte[]{ ((byte) (0x90)), 0x0 });     final boolean responseApdu = co.coinfinity.infineonandroidapp.infineon.NfcUtils.verifyPin(nfcTranceiver, "1234".getBytes(java.nio.charset.StandardCharsets.UTF_8));     org.junit.Assert.assertTrue(responseApdu); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,ByteUtilsTest,testBytesToHex,{     final java.lang.String hex = co.coinfinity.infineonandroidapp.utils.ByteUtils.bytesToHex("coinfinity".getBytes());     org.junit.Assert.assertEquals("636F696E66696E697479", hex); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,ByteUtilsTest,testCombineByteArrays,{     final byte[] combineByteArrays = co.coinfinity.infineonandroidapp.utils.ByteUtils.combineByteArrays("coinfinity".getBytes(), "infineon".getBytes());     org.junit.Assert.assertEquals("coinfinityinfineon", new java.lang.String(combineByteArrays)); }
https://github.com/Infineon/BlockchainSecurity2Go-Android.git,ByteUtilsTest,testFromHexString,{     final byte[] bytes = co.coinfinity.infineonandroidapp.utils.ByteUtils.fromHexString("636F696E66696E697479");     org.junit.Assert.assertEquals("coinfinity", new java.lang.String(bytes)); }
https://github.com/wownero/wownerujo.git,ExchangeRateTest,queryExchangeRate_shouldBeGetMethod,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/wownero/wownerujo.git,ExchangeRateTest,queryExchangeRate_shouldHavePairInUrl,{     exchangeApi.queryExchangeRate("XMR", "EUR", mockExchangeCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("/328/?convert=EUR", request.getPath()); }
https://github.com/wownero/wownerujo.git,RestoreHeightTest,zero,{     org.junit.Assert.assertTrue(getHeight("2014-04-27") == 0); }
https://github.com/wownero/wownerujo.git,RestoreHeightTest,notZero,{     org.junit.Assert.assertTrue(getHeight("2014-05-07") > 0); }
https://github.com/wownero/wownerujo.git,RestoreHeightTest,post201802,{     org.junit.Assert.assertTrue(isInRange(getHeight("2018-02-19"), 1507579, 1511127)); }
https://github.com/wownero/wownerujo.git,RestoreHeightTest,postFuture,{     long b_20180701 = 1606715L;     long b_20190108 = b_20180701 + (720 * ((((((31 + 31) + 30) + 31) + 30) + 31) + 7));     org.junit.Assert.assertTrue(isInRange(getHeight("2019-01-08"), b_20190108 - (720 * 5), b_20190108)); }
https://github.com/wownero/wownerujo.git,XmrToApiCreateOrderTest,createOrder_shouldBePostMethod,{     xmrToApi.createOrder(0.5, "btcsomething", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/wownero/wownerujo.git,XmrToApiCreateOrderTest,createOrder_shouldBeContentTypeJson,{     xmrToApi.createOrder(0.5, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/wownero/wownerujo.git,XmrToApiCreateOrderTest,createOrder_shouldContainValidBody,{     final java.lang.String validBody = "{\"btc_amount\":0.1,\"btc_dest_address\":\"19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW\"}";     xmrToApi.createOrder(0.1, "19y91nJyzXsLEuR7Nj9pc3o5SeHNc8A9RW", mockOrderXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/wownero/wownerujo.git,XmrToApiOrderParameterTest,orderParameter_shouldBeGetMethod,{     xmrToApi.queryOrderParameters(mockParametersXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("GET", request.getMethod()); }
https://github.com/wownero/wownerujo.git,XmrToApiQueryOrderTest,orderStatus_shouldBePostMethod,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("POST", request.getMethod()); }
https://github.com/wownero/wownerujo.git,XmrToApiQueryOrderTest,orderStatus_shouldBeContentTypeJson,{     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     org.junit.Assert.assertEquals("application/json; charset=utf-8", request.getHeader("Content-Type")); }
https://github.com/wownero/wownerujo.git,XmrToApiQueryOrderTest,orderStatus_shouldContainValidBody,{     final java.lang.String validBody = "{\"uuid\":\"xmrto - efMsiU\"}";     xmrToApi.queryOrderStatus("xmrto - efMsiU", mockQueryXmrToCallback);     okhttp3.mockwebserver.RecordedRequest request = mockWebServer.takeRequest();     java.lang.String body = request.getBody().readUtf8();     org.junit.Assert.assertEquals(validBody, body); }
https://github.com/niteshpatel/ministocks.git,FxChangeRepositoryTests,testRetrieveChangesAsJson,{     // Arrange     org.json.JSONObject json = null;     // Act     try {         json = this.fxRepository.retrieveChangesAsJson(new nitezh.ministock.mocks.MockCache());     } catch (org.json.JSONException ignored) {     }     // Assert     org.junit.Assert.assertNotNull(json); }
https://github.com/niteshpatel/ministocks.git,AndroidWidgetTests,testShouldUpdateOnRightTouchReturnsFalseByDefault,{     // Act and Assert     org.junit.Assert.assertFalse(widget.shouldUpdateOnRightTouch()); }
https://github.com/niteshpatel/ministocks.git,AndroidWidgetTests,testShouldUpdateOnRightTouchReturnsTrueIfSet,{     // Arrange     nitezh.ministock.Storage storage = widget.getStorage();     storage.putBoolean("update_from_widget", true);     storage.apply();     // Act and Assert     org.junit.Assert.assertTrue(widget.shouldUpdateOnRightTouch()); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan10AndScale1,{     // Arrange     java.lang.String expected = "9.1";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("9.1", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan10AndScale2,{     // Arrange     java.lang.String expected = "8.99";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("8.99", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan10AndScale4,{     // Arrange     java.lang.String expected = "2.5900";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("2.5900", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan10AndScale5,{     // Arrange     java.lang.String expected = "9.3451";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("9.34512", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan100AndScale1,{     // Arrange     java.lang.String expected = "12.30";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("12.3", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan100AndScale2,{     // Arrange     java.lang.String expected = "21.23";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("21.23", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan100AndScale4,{     // Arrange     java.lang.String expected = "43.26";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("43.2572", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,NumberToolsTests,trimWithNumberLessThan100AndScale5,{     // Arrange     java.lang.String expected = "98.33";     // Act     java.lang.String result = nitezh.ministock.utils.NumberTools.trim("98.33442", java.util.Locale.US);     // Assert     org.junit.Assert.assertEquals(expected, result); }
https://github.com/niteshpatel/ministocks.git,UrlDataToolsTests,testDataRetrievalFromIex,{     // Skipif     org.junit.Assume.assumeTrue(java.lang.System.getenv("TRAVIS_CI") == null);     // Arrange     java.lang.String url = "https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl&types=quote";     // Act     java.lang.String result = nitezh.ministock.utils.UrlDataTools.urlToString(url).substring(0, 33);     // Assert     java.lang.String expected = "{\"AAPL\":{\"quote\":{\"symbol\":\"AAPL\"";     org.junit.Assert.assertEquals(expected, result); }
https://github.com/hi77er/mosy.Android.git,AzureBlobStorageIntegrationTests,blobContainer_referenceCreated,{     // Retrieve storage account from connection-string.     com.microsoft.azure.storage.CloudStorageAccount storageAccount = com.microsoft.azure.storage.CloudStorageAccount.parse(com.mosy.kalin.mosy.Base.AzureIntegrationTest.storageConnectionString);     // Create the blob client.     com.microsoft.azure.storage.blob.CloudBlobClient blobClient = storageAccount.createCloudBlobClient();     // Get a reference to a container.     // The container Name must be lower case     com.microsoft.azure.storage.blob.CloudBlobContainer container = blobClient.getContainerReference("userimages");     org.junit.Assert.assertNotNull("Didn't make it to get the Azure Blob Storage Container", container); }
https://github.com/hi77er/mosy.Android.git,AzureBlobStorageIntegrationTests,blob_referenceCreated,{     // Retrieve storage account from connection-string.     com.microsoft.azure.storage.CloudStorageAccount storageAccount = com.microsoft.azure.storage.CloudStorageAccount.parse(com.mosy.kalin.mosy.Base.AzureIntegrationTest.storageConnectionString);     // Create the blob client.     com.microsoft.azure.storage.blob.CloudBlobClient blobClient = storageAccount.createCloudBlobClient();     // Retrieve reference to a previously created container.     com.microsoft.azure.storage.blob.CloudBlobContainer container = blobClient.getContainerReference("userimages\\profile\\100x100");     // Retrieve reference to a blob.     com.microsoft.azure.storage.blob.CloudBlob blob = container.getBlockBlobReference("276b76c5-4464-406a-8fcb-9f8c54fcf0c4");     org.junit.Assert.assertNotNull("Didn't manage to get Blob reference", blob); }
https://github.com/hi77er/mosy.Android.git,AzureBlobStorageIntegrationTests,blob_contentDownloaded,{     // Retrieve storage account from connection-string.     com.microsoft.azure.storage.CloudStorageAccount storageAccount = com.microsoft.azure.storage.CloudStorageAccount.parse(com.mosy.kalin.mosy.Base.AzureIntegrationTest.storageConnectionString);     // Create the blob client.     com.microsoft.azure.storage.blob.CloudBlobClient blobClient = storageAccount.createCloudBlobClient();     // Retrieve reference to a previously created container.     com.microsoft.azure.storage.blob.CloudBlobContainer container = blobClient.getContainerReference("userimages\\profile\\100x100");     // Retrieve reference to a blob.     com.microsoft.azure.storage.blob.CloudBlob blob = container.getBlockBlobReference("276b76c5-4464-406a-8fcb-9f8c54fcf0c4");     int blobSize = blob.getStreamWriteSizeInBytes();     byte[] bufferArr = new byte[blobSize];     int downloadedSize = blob.downloadToByteArray(bufferArr, 0);     org.junit.Assert.assertTrue("Didn't manage to get bytes!", bufferArr.length > 0); }
https://github.com/SUPLA/supla-android.git,DefaultChannelRepositoryTest,shouldGetAllChannelsForProfile,{     // given     long profileId = 123L;     android.database.Cursor cursor = Mockito.mock(android.database.Cursor.class);     Mockito.when(channelDao.getAllChannels(("func <> 0  AND (C.profileid = " + profileId) + ") ")).thenReturn(cursor);     // when     android.database.Cursor returned = defaultChannelRepository.getAllProfileChannels(profileId);     // then     org.junit.Assert.assertSame(cursor, returned); }
https://github.com/SUPLA/supla-android.git,DefaultChannelRepositoryTest,shouldGetAllGroupsForProfile,{     // given     long profileId = 123L;     android.database.Cursor cursor = Mockito.mock(android.database.Cursor.class);     Mockito.when(channelDao.getAllChannelGroupsForProfileId(profileId)).thenReturn(cursor);     // when     android.database.Cursor returned = defaultChannelRepository.getAllProfileChannelGroups(profileId);     // then     org.junit.Assert.assertSame(cursor, returned); }
https://github.com/Pozzoooo/JavascriptAutomator.git,EntryBusinessTest,testParseCommands,{     final java.lang.String COMMAND_STRING = "\tfirst\n\nsecond   \nthird";     final int EXPECTED_LENGTH = 3;     pozzo.apps.javascriptautomator.business.EntryBusiness entryBusiness = new pozzo.apps.javascriptautomator.business.EntryBusiness();     pozzo.apps.javascriptautomator.model.Entry entry = org.mockito.Mockito.mock(pozzo.apps.javascriptautomator.model.Entry.class);     org.mockito.Mockito.when(entry.getCommands()).thenCallRealMethod();     org.mockito.Mockito.doCallRealMethod().when(entry).setCommands(org.mockito.Mockito.anyString());     entry.setCommands(COMMAND_STRING);     java.lang.String[] parsedCommands = entryBusiness.parseCommands(entry);     org.junit.Assert.assertEquals(EXPECTED_LENGTH, parsedCommands.length); }
https://github.com/Pozzoooo/JavascriptAutomator.git,EntryTest,testIsEmpty,{     pozzo.apps.javascriptautomator.model.Entry entry = org.mockito.Mockito.mock(pozzo.apps.javascriptautomator.model.Entry.class);     org.mockito.Mockito.doCallRealMethod().when(entry).isEmpty();     org.junit.Assert.assertTrue(entry.isEmpty()); }
https://github.com/Pozzoooo/JavascriptAutomator.git,EntryTest,testIsNotEmpty,{     pozzo.apps.javascriptautomator.model.Entry entry = org.mockito.Mockito.mock(pozzo.apps.javascriptautomator.model.Entry.class);     org.mockito.Mockito.doCallRealMethod().when(entry).setName(org.mockito.Mockito.anyString());     org.mockito.Mockito.doCallRealMethod().when(entry).isEmpty();     entry.setName("Nome");     org.junit.Assert.assertFalse(entry.isEmpty()); }
https://github.com/Artenes/speedbro.git,ContractTest,appendPathToAuthority,{     org.junit.Assert.assertEquals("https://www.speedrun.com/mypath", io.github.artenes.speedbro.speedrun.com.Contract.asAbsolutePath("mypath")); }
https://github.com/Artenes/speedbro.git,ContractTest,returnEmptyAbsoluteStringIfEmptyPathIsGiven,{     org.junit.Assert.assertEquals("", io.github.artenes.speedbro.speedrun.com.Contract.asAbsolutePath("")); }
https://github.com/Artenes/speedbro.git,ContractTest,appendRunnerToAuthority,{     org.junit.Assert.assertEquals("https://www.speedrun.com/themes/user/runner/image.png", io.github.artenes.speedbro.speedrun.com.Contract.runnerAvatar("runner")); }
https://github.com/Artenes/speedbro.git,ContractTest,returnEmptyRunnerAvatarIfNoRunnerIsGiven,{     org.junit.Assert.assertEquals("", io.github.artenes.speedbro.speedrun.com.Contract.runnerAvatar("")); }
https://github.com/Artenes/speedbro.git,RunHtmlParserTest,extractNothingFromEmptyDocument,{     io.github.artenes.speedbro.speedrun.com.models.Run run = parser.parse(org.jsoup.Jsoup.parse(""));     org.junit.Assert.assertEquals("", run.getCategory()); }
https://github.com/Artenes/speedbro.git,RunHtmlParserTest,extractNoRunnerFromRunWithoutRunners,{     io.github.artenes.speedbro.speedrun.com.models.Run run = parser.parse(org.jsoup.Jsoup.parse(io.github.artenes.speedbro.TestUtils.getFile(this, "run_without_runners.html"), "UTF-8"));     org.junit.Assert.assertEquals(0, run.getRunners().size()); }
https://github.com/Artenes/speedbro.git,RunHtmlParserTest,extractGameCoverRegardlessOfImageClassName,{     io.github.artenes.speedbro.speedrun.com.models.Run run = parser.parse(org.jsoup.Jsoup.parse(io.github.artenes.speedbro.TestUtils.getFile(this, "run_with_wide_game_cover.html"), "UTF-8"));     org.junit.Assert.assertEquals("https://www.speedrun.com/themes/To_The_Top/cover-256.png", run.getGame().getCover()); }
https://github.com/Artenes/speedbro.git,RunnerHtmlParserTest,doNotExtractRunnerNameFromRunsList,{     io.github.artenes.speedbro.speedrun.com.models.Run run = runner.getRuns().get(0);     org.junit.Assert.assertEquals("", run.getFirstRunner().getName()); }
https://github.com/Artenes/speedbro.git,RunsHtmlParserTest,ignoreHtmlTableThatDoesNotFollowStructure,{     org.jsoup.nodes.Document document = org.jsoup.Jsoup.parse("<html><body><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></body></html>");     java.util.List<io.github.artenes.speedbro.speedrun.com.models.Run> latestRuns = parser.parse(document);     org.junit.Assert.assertTrue(latestRuns.isEmpty()); }
https://github.com/Artenes/speedbro.git,RunsHtmlParserTest,extractNothingFromEmptyTable,{     org.jsoup.nodes.Document document = org.jsoup.Jsoup.parse("<html><body><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></body></html>");     java.util.List<io.github.artenes.speedbro.speedrun.com.models.Run> runs = categoryParser.parse(document);     org.junit.Assert.assertEquals(0, runs.size()); }
https://github.com/Artenes/speedbro.git,RunsHtmlParserTest,extractTheDateOfTheRunIfItDoesNotHavePlatform,{     org.jsoup.nodes.Document document = io.github.artenes.speedbro.TestUtils.getDocument(this, "run_from_category_with_date_bug.html");     java.util.List<io.github.artenes.speedbro.speedrun.com.models.Run> runs = categoryParser.parse(document);     io.github.artenes.speedbro.speedrun.com.models.Run firstRun = runs.get(0);     org.junit.Assert.assertEquals("6 Jul 2017", firstRun.getDate()); }
https://github.com/Artenes/speedbro.git,UtilsTest,returnSameValueAsSegmentWhenItIsNotAnUri,{     org.junit.Assert.assertEquals("no_uri", io.github.artenes.speedbro.speedrun.com.Utils.lastSegmentOfUri("no_uri")); }
https://github.com/Artenes/speedbro.git,UtilsTest,returnPathWithoutFirstSlash,{     org.junit.Assert.assertEquals("my/uri", io.github.artenes.speedbro.speedrun.com.Utils.withoutStartingSlash("/my/uri")); }
https://github.com/Artenes/speedbro.git,UtilsTest,returnEmptyPathWhenTryToRemoveFirstSlashFromEmptyString,{     org.junit.Assert.assertEquals("", io.github.artenes.speedbro.speedrun.com.Utils.withoutStartingSlash("")); }
https://github.com/Artenes/speedbro.git,UtilsTest,doNotRemoveSlashIfStringDoesNotStartsWithSlash,{     org.junit.Assert.assertEquals("my/uri", io.github.artenes.speedbro.speedrun.com.Utils.withoutStartingSlash("my/uri")); }
https://github.com/Artenes/speedbro.git,UtilsTest,parsePrimaryTime,{     org.junit.Assert.assertEquals("0h7m21s", io.github.artenes.speedbro.speedrun.com.Utils.parseTime("PT0H7M21S")); }
https://github.com/Bernie-2016/fieldthebern-android.git,ConfigImplTest,testUserAgent,{     android.content.Context context = Mockito.mock(android.test.mock.MockContext.class);     android.content.pm.PackageManager manager = Mockito.mock(android.content.pm.PackageManager.class);     android.content.pm.PackageInfo info = Mockito.mock(android.content.pm.PackageInfo.class);     info.versionName = "1.0.0";     info.versionCode = 7;     Mockito.when(manager.getPackageInfo("packageName", 0)).thenReturn(info);     Mockito.when(context.getString(R.string.baseUrl)).thenReturn("baseUrl");     Mockito.when(context.getString(R.string.canvassUrl)).thenReturn("canvassUrl");     Mockito.when(context.getString(R.string.oauth2ClientId)).thenReturn("client");     Mockito.when(context.getString(R.string.oauth2ClientSecret)).thenReturn("secret");     Mockito.when(context.getPackageName()).thenReturn("packageName");     Mockito.when(context.getPackageManager()).thenReturn(manager);     com.berniesanders.fieldthebern.config.Config config = new com.berniesanders.fieldthebern.config.ConfigImpl(context);     org.junit.Assert.assertEquals(config.getUserAgent(), "FieldTheBern/1.0.0-b7"); }
https://github.com/Bernie-2016/fieldthebern-android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/nishaSTM/Logistic-Demo-App.git,DeliveryItemTest,getImageAssertValue,{     java.lang.String imageUrl = deliveryItem.getImageUrl();     org.junit.Assert.assertEquals(this.imageUrl, imageUrl); }
https://github.com/nishaSTM/Logistic-Demo-App.git,DeliveryItemTest,getDescriptionAssertValue,{     java.lang.String description = deliveryItem.getDescription();     org.junit.Assert.assertEquals(this.description, description); }
https://github.com/nishaSTM/Logistic-Demo-App.git,DeliveryItemTest,getIdAssertValue,{     java.lang.String id = deliveryItem.getId();     org.junit.Assert.assertEquals(this.id, id); }
https://github.com/nishaSTM/Logistic-Demo-App.git,DeliveryItemTest,getLocationAssertValue,{     com.delivery.model.LocationCoordinates location = deliveryItem.getLocation();     org.junit.Assert.assertEquals(this.locationCoordinates, location); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationCoordinatesTest,getLatAssertValue,{     float lat = locationCoordinates.getLat();     org.junit.Assert.assertEquals(this.lat, lat, 1.2F); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationCoordinatesTest,getLngAssertValue,{     float lng = locationCoordinates.getLng();     org.junit.Assert.assertEquals(this.lng, lng, 1.2F); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationCoordinatesTest,getAddressAssertValue,{     java.lang.String address = locationCoordinates.getAddress();     org.junit.Assert.assertEquals(this.address, address); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getDeliveryItemAssertValue,{     com.delivery.model.DeliveryItem actualDeliveryItem = locationViewModel.getDeliveryItem();     org.junit.Assert.assertEquals(deliveryItem, actualDeliveryItem); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getDeliveryItemAssertNotNullValue,{     com.delivery.model.DeliveryItem actualDeliveryItem = locationViewModel.getDeliveryItem();     org.junit.Assert.assertNotNull(actualDeliveryItem); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getImageAssertValue,{     java.lang.String actualImageValue = locationViewModel.imageUrl.getValue();     org.junit.Assert.assertEquals(deliveryItem.getImage(), actualImageValue); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getImageAssertNotNullValue,{     java.lang.String actualImageValue = locationViewModel.imageUrl.getValue();     org.junit.Assert.assertNotNull(actualImageValue); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getDescriptionAssertValue,{     java.lang.String actualDescriptionValue = locationViewModel.description.getValue();     org.junit.Assert.assertEquals(deliveryItem.getDescription(), actualDescriptionValue); }
https://github.com/nishaSTM/Logistic-Demo-App.git,LocationViewModelTest,getDescriptionAssertNotNullValue,{     java.lang.String actualDescriptionValue = locationViewModel.description.getValue();     org.junit.Assert.assertNotNull(actualDescriptionValue); }
https://github.com/nishaSTM/Logistic-Demo-App.git,ResultTest,getDeliveryItemListAssertValue,{     java.util.List<com.delivery.model.DeliveryItem> deliveryItemList = result.getDeliveryItemList();     org.junit.Assert.assertEquals(this.deliveryItemList, deliveryItemList); }
https://github.com/nishaSTM/Logistic-Demo-App.git,ResultTest,getErrorAssertValue,{     java.lang.String error = result.getError();     org.junit.Assert.assertEquals(this.error, error); }
https://github.com/nishaSTM/Logistic-Demo-App.git,ResultTest,getStatusAssertValue,{     com.delivery.model.Result.Status status = result.getStatus();     org.junit.Assert.assertEquals(this.status, status); }
https://github.com/kids-cademy/quiz.instruments.git,GameEngineTest,wasNextLevelUnlocked,{     org.junit.Assert.assertFalse(engine.wasNextLevelUnlocked()); }
https://github.com/kids-cademy/quiz.instruments.git,GameEngineTest,getLevelIndex,{     org.junit.Assert.assertEquals(0, engine.getLevelIndex()); }
https://github.com/kids-cademy/quiz.instruments.git,GameEngineTest,getLevelChallengesCount,{     org.junit.Assert.assertEquals(2, engine.getLevelChallengesCount()); }
https://github.com/kids-cademy/quiz.instruments.git,GameEngineTest,getLevelSolvedChallengesCount,{     org.junit.Assert.assertEquals(0, engine.getLevelSolvedChallengesCount()); }
https://github.com/liamo7/Tally-Android.git,ProfanityCheckerUnitTest,test_with_profanity,{     java.lang.String actual = profanityChecker.replace(com.loh.tally.ProfanityCheckerUnitTest.TEST_STRING_WITH_PROFANITY);     org.junit.Assert.assertEquals(com.loh.tally.ProfanityCheckerUnitTest.TEST_STRING_EXPECTED, actual); }
https://github.com/liamo7/Tally-Android.git,ProfanityCheckerUnitTest,test_replaced_words_equal_3,{     java.lang.String testcase = "Fuck";     java.lang.String expected = "F***";     java.lang.String actual = profanityChecker.replace(testcase);     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/liamo7/Tally-Android.git,ProfanityCheckerUnitTest,test_with_symbols_after,{     java.lang.String testcase = "Fuck!!**£";     java.lang.String expected = "F***!!**£";     java.lang.String actual = profanityChecker.replace(testcase);     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/liamo7/Tally-Android.git,ProfanityCheckerUnitTest,test_with_symbols_before,{     java.lang.String testcase = "Fuck!!**£";     java.lang.String expected = "F***!!**£";     java.lang.String actual = profanityChecker.replace(testcase);     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/jmodrako/TrainingAppRecipes.git,MainActivityTest,checkIfTestApplicationIsInitialized,{     org.junit.Assert.assertTrue(sut.getApplication() instanceof com.recipes.RecipeApplicationTest); }
https://github.com/jmodrako/TrainingAppRecipes.git,MainActivityTest,checkLayout,{     android.widget.ProgressBar progressBar = ((android.widget.ProgressBar) (sut.findViewById(R.id.activity_main_pb_load_recipes_list)));     org.junit.Assert.assertNotNull(progressBar); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipesListAdapterTest,testGetCount,{     sut.setData(prepareRecipesList());     org.junit.Assert.assertEquals(prepareRecipesList().size(), sut.getCount()); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipesListAdapterTest,testGetItemId,{     android.widget.ListView mockListView = Mockito.mock(android.widget.ListView.class);     mockListView.setAdapter(sut);     mockListView.performItemClick(mockListView, 0, 0);     org.junit.Assert.assertEquals(mockListView.getItemIdAtPosition(0), sut.getItemId(0)); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipesListAdapterTest,testGetItem,{     android.widget.ListView mockListView = Mockito.mock(android.widget.ListView.class);     mockListView.setAdapter(sut);     mockListView.performItemClick(mockListView, 0, 0);     com.recipes.data.model.Recipe expectedRecipeAtPosition = sut.getItem(0);     com.recipes.data.model.Recipe actualRecipeAtPosition = ((com.recipes.data.model.Recipe) (mockListView.getItemAtPosition(0)));     org.junit.Assert.assertEquals(expectedRecipeAtPosition, actualRecipeAtPosition); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipeDaoImplTest,checkIfTestApplicationIsInitialized,{     org.junit.Assert.assertTrue(activity.getApplication() instanceof com.recipes.RecipeApplicationTest); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipeDaoImplTest,testDatabase_insertRecipe,{     dao.insertRecipe(com.recipes.TestUtils.getRecipeExample2());     org.junit.Assert.assertEquals(com.recipes.TestUtils.EXAMPLE_2_TITLE, dao.getRecipe(com.recipes.TestUtils.EXAMPLE_2_ID).getRecipeTitle()); }
https://github.com/jmodrako/TrainingAppRecipes.git,RecipeDaoImplTest,testDatabase_deleteRecipe,{     org.junit.Assert.assertEquals(com.recipes.TestUtils.EXAMPLE_2_TITLE, dao.getRecipe(com.recipes.TestUtils.EXAMPLE_2_ID).getRecipeTitle());     dao.deleteRecipe(com.recipes.TestUtils.EXAMPLE_2_ID);     // Should throw exception.     dao.getRecipe(com.recipes.TestUtils.EXAMPLE_2_ID); }
https://github.com/HaojieZheng/BadmintonScoreCounter.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.haojie.badmintonscorecounter", appContext.getPackageName()); }
https://github.com/HaojieZheng/BadmintonScoreCounter.git,DatabaseTest,Database_GetPlayers_ReturnsAllPlayers,{     com.haojie.badmintonscorecounter.Database database = new com.haojie.badmintonscorecounter.Database();     database.addPlayer(new com.haojie.badmintonscorecounter.Player("Player 1"));     database.addPlayer(new com.haojie.badmintonscorecounter.Player("Player 2"));     database.addPlayer(new com.haojie.badmintonscorecounter.Player("Player 3"));     database.addPlayer(new com.haojie.badmintonscorecounter.Player("Player 4"));     org.junit.Assert.assertEquals(4, database.getPlayers().size()); }
https://github.com/HaojieZheng/BadmintonScoreCounter.git,GameStatisticsPresenterTest,getTopNPlayers_empty_database,{     com.haojie.badmintonscorecounter.IDatabase IDatabase = new com.haojie.badmintonscorecounter.Database();     com.haojie.badmintonscorecounter.GameStatisticsPresenter presenter = new com.haojie.badmintonscorecounter.GameStatisticsPresenter(IDatabase);     presenter.calculate();     java.util.List<com.haojie.badmintonscorecounter.GameStatisticsPresenter.PlayerWinEntry> result = presenter.getTopNPlayersByTotalWins(1);     org.junit.Assert.assertTrue(result.isEmpty()); }
https://github.com/HaojieZheng/BadmintonScoreCounter.git,GameStatisticsPresenterTest,getTopNPlayers_get_zero,{     java.util.ArrayList<com.haojie.badmintonscorecounter.Game> games = new java.util.ArrayList<>();     games.add(mockGamePlayer1Wins);     Mockito.when(mockDatabase.getGames()).thenReturn(games);     com.haojie.badmintonscorecounter.GameStatisticsPresenter presenter = new com.haojie.badmintonscorecounter.GameStatisticsPresenter(mockDatabase);     presenter.calculate();     java.util.List<com.haojie.badmintonscorecounter.GameStatisticsPresenter.PlayerWinEntry> result = presenter.getTopNPlayersByTotalWins(0);     org.junit.Assert.assertTrue(result.isEmpty()); }
https://github.com/apachucy/MTGDraftParingApp.git,AutomaticAlgorithmTest,verifyThatPlayerShouldNotBeReturnedWhenNullWereProvided,{     // given     java.util.List<java.lang.String> playerNames = new java.util.ArrayList<>(java.util.Arrays.asList("Arek", "Tomek", "Mirek", "Sirek"));     // hacks for 'when' without mock's     objectUnderTest.setDraftStartedPlayersList(populatePlayersList(playerNames));     objectUnderTest.setCurrentRound(0);     // when     unii.draft.mtg.parings.logic.pojo.Player selectedPlayer = objectUnderTest.getPlayer(null);     // then     org.junit.Assert.assertNull(selectedPlayer); }
https://github.com/apachucy/MTGDraftParingApp.git,AutomaticAlgorithmTest,verifyThatPlayerShouldNotBeReturnedWhenNameNotOnListWereProvided,{     // given     java.util.List<java.lang.String> playerNames = new java.util.ArrayList<>(java.util.Arrays.asList("Arek", "Tomek", "Mirek", "Sirek"));     // hacks for 'when' without mock's     objectUnderTest.setDraftStartedPlayersList(populatePlayersList(playerNames));     objectUnderTest.setCurrentRound(0);     // when     unii.draft.mtg.parings.logic.pojo.Player selectedPlayer = objectUnderTest.getPlayer("Zbyszek");     // then     org.junit.Assert.assertNull(selectedPlayer); }
https://github.com/apachucy/MTGDraftParingApp.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withNullNewPassword_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, null, "1213");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withNullConfirmPassword_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "1223", null);     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withEmptyNewPassword_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "", "121212");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withEmptyConfirmPassword_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "12122", "");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withNewPasswordHavingCharLessThanEight_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "12122", "12122");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withNonMatchingNewAndConfirmPassword_willReturnFalse,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "11111111", "11111112");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(false, response.isValid); }
https://github.com/receme/SafetyCharger.git,PasswordChangerTest,isValid_withValidNewAndConfirmPassword_willReturnTrue,{     Mockito.when(baseView.getResourceString(R.string.newpassword_notnull)).thenReturn("");     passwordChanger = new com.rcmapps.safetycharger.models.PasswordChanger(baseView, "11111111", "11111111");     com.rcmapps.safetycharger.models.PasswordChanger.Response response = passwordChanger.isValid();     org.junit.Assert.assertEquals(true, response.isValid); }
https://github.com/abhijitvalluri/fitnotifications.git,TranslitUtilTest,testEmojiTransliteration,{     java.lang.String replacements = ((("U+263A      :-)\n" + "U+1F641     :-(\n") + "U+1F632     o_O\n") + "U+1F918     \\m/\n") + // skin tone modifier     "U+1F3FD\n";     com.abhijitvalluri.android.fitnotifications.utils.TranslitUtil tu = new com.abhijitvalluri.android.fitnotifications.utils.TranslitUtil(new java.io.ByteArrayInputStream(replacements.getBytes(java.nio.charset.StandardCharsets.UTF_8)));     org.junit.Assert.assertEquals(":-) o_O \\m/ 👍", tu.transliterate("☺ 😲 🤘 👍🏽")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateRussian,{     org.junit.Assert.assertEquals("alfavit", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("алфавит")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateJapanese,{     org.junit.Assert.assertEquals("arufabetto", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("アルファベット")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateGreek,{     org.junit.Assert.assertEquals("Alphabētikós", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("Αλφαβητικός")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateThai,{     org.junit.Assert.assertEquals("tạw xạks̄ʹr", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("ตัวอักษร")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateArabic,{     org.junit.Assert.assertEquals("ạlạ̉bjdyẗ", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("الأبجدية")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateKorean,{     org.junit.Assert.assertEquals("alpabes", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("알파벳")); }
https://github.com/abhijitvalluri/fitnotifications.git,TransliterationTest,transliterateChinese,{     org.junit.Assert.assertEquals("zì mǔ", com.ibm.icu.text.Transliterator.getInstance("Any-Latin").transform("字母")); }
https://github.com/romanchekashov/currency-and-stock-widget.git,DbBackendAdapterTest,addSettingsRec_shouldSaveSettings,{     dbBackendAdapter.addSettingsRec(ru.besttuts.stockwidget.provider.db.DbBackendAdapterTest.WIDGET_IDS[0], 1, ru.besttuts.stockwidget.model.QuoteType.CURRENCY, new java.lang.String[]{ "EURUSD", "USDRUB", "EURRUB" });     dbBackendAdapter.addSettingsRec(ru.besttuts.stockwidget.provider.db.DbBackendAdapterTest.WIDGET_IDS[0], 4, ru.besttuts.stockwidget.model.QuoteType.GOODS, ru.besttuts.stockwidget.provider.db.DbBackendAdapterTest.DEFAULT_COMMODITIES);     java.util.List<ru.besttuts.stockwidget.model.Setting> settings = dbBackendAdapter.getSettingsByWidgetId(ru.besttuts.stockwidget.provider.db.DbBackendAdapterTest.WIDGET_IDS[0]);     org.junit.Assert.assertEquals(6, settings.size()); }
https://github.com/jonatantierno/huggingNepal.git,TownSummaryTest,shouldTurnTownToString,{     com.katmandu.katmandu.TownSummary summaryUnderTest = com.katmandu.katmandu.TownSummary.buildUpToDate("Town Name", com.katmandu.katmandu.TownStatus.BLACK, 12345);     java.lang.String serialized = summaryUnderTest.toString();     com.katmandu.katmandu.TownSummary deserialized = com.katmandu.katmandu.TownSummary.deserialize(serialized);     org.junit.Assert.assertEquals(deserialized, summaryUnderTest); }
https://github.com/jonatantierno/huggingNepal.git,TownSummaryTest,shouldTurnDraftToString,{     com.katmandu.katmandu.TownSummary summaryUnderTest = com.katmandu.katmandu.TownSummary.buildDraft("Town Name", com.katmandu.katmandu.TownStatus.BLACK, "12345");     java.lang.String serialized = summaryUnderTest.toString();     com.katmandu.katmandu.TownSummary deserialized = com.katmandu.katmandu.TownSummary.deserialize(serialized);     org.junit.Assert.assertEquals(deserialized, summaryUnderTest); }
https://github.com/zoromatic/ZoromaticWidgets.git,JavaUnitTest,testUnitTest,{     float actual = 200;     // expected value is 212     float expected = 212;     // use this method because float is not precise     org.junit.Assert.assertEquals("Valued are different", expected, actual, 0.001); }
https://github.com/mikeschen/HangBoardRepeatersAndroid.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,angleFromCoordinate_straightUp,{     org.junit.Assert.assertEquals(0, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 90, 0), 0); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,angleFromCoordinate_east,{     org.junit.Assert.assertEquals(90, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 0, 0, 45), 0); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,angleFromCoordinate_west,{     org.junit.Assert.assertEquals(270, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(0, 90, 0, 45), 0); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,angleFromCoordinate_diagonal,{     org.junit.Assert.assertEquals(225, com.ds.avare.adsb.AudibleTrafficAlerts.angleFromCoordinate(43.5439, -96.73, 42.57, -98.0421), 0.5); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_east,{     org.junit.Assert.assertEquals(3, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(0, 0, 0, 45, 0)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_nearEnoughToEastRounded,{     org.junit.Assert.assertEquals(3, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(0, 0, 0, 45, 5)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_straightBehindFromAnAngle,{     org.junit.Assert.assertEquals(6, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(43.5439, -96.73, 42.57, -98.0421, 44.999)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_oneMinuteToMidnightRounded,{     org.junit.Assert.assertEquals(12, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(43.5439, -96.73, 44.8402, -96.7621, 0)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_oneMinutePastMidnightRounded,{     org.junit.Assert.assertEquals(12, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(43.5439, -96.73, 48.034, -96.654, 0)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,nearestClockHourFromHeadingAndLocations_nearlySouthAndIFacingSouth,{     org.junit.Assert.assertEquals(12, com.ds.avare.adsb.AudibleTrafficAlerts.nearestClockHourFromHeadingAndLocations(43.5439, -96.73, 39.5718, -96.735, 180)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,closestApproachTime_eastWestHeadOn,{     final double lat1 = 45;     final double lat2 = 45;     final double lon1 = -95;     final double lon2 = -94;     final int velocity1 = 60;     final int velocity2 = 60;     final float heading1 = 270;     final float heading2 = 90;     final double caTime = com.ds.avare.adsb.AudibleTrafficAlerts.closestApproachTime(lat1, lon1, lat2, lon2, heading1, heading2, velocity1, velocity2);     org.junit.Assert.assertEquals("Closest approach seconds", 0.35, java.lang.Math.abs(caTime), 0.1); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,closestApproachTime_northSouthHeadOn,{     final double lat1 = 45;     final double lat2 = 46;     final double lon1 = -95;     final double lon2 = -95;     final int velocity1 = 60;     final int velocity2 = 60;     final float heading1 = 180;     final float heading2 = 0;     final double caTime = com.ds.avare.adsb.AudibleTrafficAlerts.closestApproachTime(lat1, lon1, lat2, lon2, heading1, heading2, velocity1, velocity2);     org.junit.Assert.assertEquals("Closest approach seconds", 0.5, java.lang.Math.abs(caTime), 0.1); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,buildAlertSoundIdSequence_numericListPrefSet_closingEventLessThanHalfSecond_PicksFirstMedia,{     com.ds.avare.adsb.AudibleTrafficAlerts ata = getTestAudibleTrafficAlerts(10);     ata.distanceCalloutOption = com.ds.avare.adsb.AudibleTrafficAlerts.DistanceCalloutOption.DECIMAL;     android.location.Location mockLoc = getMockLocation(41.3, -95.4, 200.0F);     com.ds.avare.adsb.AudibleTrafficAlerts.Alert alert = new com.ds.avare.adsb.AudibleTrafficAlerts.Alert("abc123", 2, 75, new com.ds.avare.adsb.AudibleTrafficAlerts.Alert.ClosingEvent(0.15, 1.0, false), 99.9F, 10);     java.util.List<java.lang.Integer> media = ata.buildAlertSoundIdSequence(alert, 1.0F);     final int firstMedia = ata.numberSoundIds[0];     org.junit.Assert.assertTrue((("First media [" + firstMedia) + "] used: ") + media, media.contains(firstMedia)); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,handleAudibleAlerts_handleTrafficRunnableIsGarbageCollected,{     com.ds.avare.adsb.AudibleTrafficAlerts spyAta = spy(getTestAudibleTrafficAlerts(10));     com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor capEx = new com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor();     doReturn(capEx).when(spyAta).getTrafficAlertProducerExecutor();     spyAta.handleAudibleAlerts(getMockLocation(45, 46, 270), new java.util.LinkedList<com.ds.avare.adsb.Traffic>(), mock(com.ds.avare.storage.Preferences.class), 2200, true, 20);     java.lang.ref.WeakReference<java.lang.Runnable> runnableRef = new java.lang.ref.WeakReference<>(capEx.runnables.get(0));     capEx.runnables.clear();     forceGc();     org.junit.Assert.assertNull("Reference to runnable after GC", runnableRef.get()); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,handleAudibleAlerts_nullLocationDoesNotCauseRunnableExecutionOrError,{     com.ds.avare.adsb.AudibleTrafficAlerts spyAta = spy(getTestAudibleTrafficAlerts(10));     com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor capEx = new com.ds.avare.adsb.AudibleTrafficAlertsTest.CapturingSingleThreadExecutor();     doReturn(capEx).when(spyAta).getTrafficAlertProducerExecutor();     java.util.LinkedList<com.ds.avare.adsb.Traffic> someTraffic = new java.util.LinkedList<>();     com.ds.avare.adsb.Traffic t = new com.ds.avare.adsb.Traffic();     t.mIsAirborne = true;     someTraffic.add(t);     spyAta.handleAudibleAlerts(null, someTraffic, mock(com.ds.avare.storage.Preferences.class), 2200, true, 20);     org.junit.Assert.assertEquals("Executed runnables", 0, capEx.runnables.size()); }
https://github.com/apps4av/avare.git,AudibleTrafficAlertsTest,addNumericalAlertAudioSequence_numericListPrefSet_largeNumberWithDecimal,{     final com.ds.avare.adsb.AudibleTrafficAlerts ata = getTestAudibleTrafficAlerts(10);     ata.numberFormatOption = com.ds.avare.adsb.AudibleTrafficAlerts.NumberFormatOption.INDIVIDUAL_DIGIT;     ata.distanceCalloutOption = com.ds.avare.adsb.AudibleTrafficAlerts.DistanceCalloutOption.DECIMAL;     final java.util.ArrayList<java.lang.Integer> soundIds = new java.util.ArrayList<>();     ata.addNumericalAlertAudio(soundIds, 1049.99, true);     org.junit.Assert.assertEquals("SoundIds from number", java.util.Arrays.asList(ata.numberSoundIds[1], ata.numberSoundIds[0], ata.numberSoundIds[4], ata.numberSoundIds[9], ata.pointSoundId, ata.numberSoundIds[9]), soundIds); }
https://github.com/thuryn/your-local-weather.git,ForecastUtilTest,createForecastFor5DaysAtTheEndOfYear,{     // given     createDetailedWeatherForecastForDay();     // when     java.util.Set<org.thosp.yourlocalweather.utils.ForecastUtil.WeatherForecastPerDay> result = org.thosp.yourlocalweather.utils.ForecastUtil.calculateWeatherForDays(weatherForecastRecord);     // then     org.junit.Assert.assertEquals(5, result.size()); }
https://github.com/zlodag/aRMOur.git,ConsecutiveWeekendsTest,consecutiveWeekends,{     for (int i = 0; i < 20; i++) {         org.junit.Assert.assertTrue(shiftSpecs.add(new com.skepticalone.armour.data.model.ShiftSpec((i * 7) + 5, 8, 0, 16, 0)));     }     consecutiveWeekends(false, 2);     consecutiveWeekends(true, 3);     consecutiveWeekendsSaferRosters(false, false, 6);     consecutiveWeekendsSaferRosters(false, true, 5);     consecutiveWeekendsSaferRosters(true, false, 9);     consecutiveWeekendsSaferRosters(true, true, 8); }
https://github.com/andstatus/todoagenda.git,DateFormatterTest,customPatterns,{     ensureNonEmptyResults();     org.andstatus.todoagenda.prefs.InstanceSettings settings = getSettings();     org.joda.time.DateTime now = settings.clock().now().withTimeAtStartOfDay().plusHours(1);     provider.setExecutedAt(now);     java.lang.CharSequence todayText = provider.getContext().getText(R.string.today);     java.lang.String tomorrowText = provider.getContext().getText(R.string.tomorrow).toString();     java.lang.String inTwoDaysText = java.lang.String.format(provider.getContext().getText(R.string.in_N_days).toString(), 2);     java.lang.String javaPattern = "yyyy-MM-dd";     java.lang.String javaFormatted = java.lang.String.format("%04d-%02d-%02d", now.yearOfEra().get(), now.monthOfYear().get(), now.dayOfMonth().get());     org.junit.Assert.assertEquals(javaFormatted, org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now));     assertPattern(now, javaPattern, javaFormatted);     assertPattern(now, javaPattern + " b", javaFormatted + " 0");     assertPattern(now, ("BBB " + javaPattern) + " b", (todayText + " ") + javaFormatted);     assertPattern(now.plusDays(1), ("BBB " + javaPattern) + " b", (tomorrowText + " ") + org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(1)));     assertPattern(now.plusDays(1), ("BBB, " + javaPattern) + " b", (tomorrowText + ", ") + org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(1)));     assertPattern(now.plusDays(2), ("BBB " + javaPattern) + " b", org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(2)) + " 2");     assertPattern(now.plusDays(2), ("BBB, " + javaPattern) + " b", org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(2)) + " 2");     assertPattern(now, ("BBB " + javaPattern) + " BBBB", (todayText + " ") + javaFormatted);     assertPattern(now, ("BBB " + javaPattern) + ", BBBB", (todayText + " ") + javaFormatted);     assertPattern(now.plusDays(1), ("BBB " + javaPattern) + " BBBB", (tomorrowText + " ") + org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(1)));     assertPattern(now.plusDays(1), ("BBB " + javaPattern) + ", BBBB", (tomorrowText + " ") + org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(1)));     assertPattern(now.plusDays(2), ("BBB " + javaPattern) + " BBBB", (org.andstatus.todoagenda.prefs.DateFormatterTest.javaFormatted(javaPattern, now.plusDays(2)) + " ") + inTwoDaysText);     assertPattern(now, "b", "0");     assertPattern(now, "MM-dd bb", java.lang.String.format("%02d-%02d", now.monthOfYear().get(), now.dayOfMonth().get()) + " 00");     assertPattern(now.plusDays(1), "", ("(not implemented: " + org.andstatus.todoagenda.prefs.dateformat.DateFormatValue.of(org.andstatus.todoagenda.prefs.dateformat.DateFormatType.CUSTOM, "").getSummary(provider.getContext())) + ")");     assertPattern(now.plusDays(1), "b", "1");     assertPattern(now.plusDays(1), "bbb", "001");     assertPattern(now.plusDays(1), "bbbb", tomorrowText);     assertPattern(now.plusDays(1), "BBB", tomorrowText);     assertPattern(now.plusDays(1), "BBBB", tomorrowText);     assertPattern(now.plusDays(-2), "BBB", "");     assertPattern(now.plusDays(-2), "BBBB", java.lang.String.format(provider.getContext().getText(R.string.N_days_ago).toString(), 2));     assertPattern(now.plusDays(2), "BBB", "");     assertPattern(now.plusDays(2), "BBBB", inTwoDaysText);     assertPattern(now.plusDays(5), "b", "5");     assertPattern(now.plusDays(5), "bbb", "005");     assertPattern(now.plusDays(5), "bbbb", "5");     assertPattern(now.plusDays(1), "'begin' b", "begin 1");     assertPattern(now.minusDays(5), "bbb", "-05");     assertPattern(now.minusDays(5), "bbbb", "-5"); }
https://github.com/andstatus/todoagenda.git,FakeCalendarContentProviderTest,testTestMode,{     org.junit.Assert.assertTrue("isTestMode should be true", org.andstatus.todoagenda.util.PermissionsUtil.isTestMode()); }
https://github.com/andstatus/todoagenda.git,FakeCalendarContentProviderTest,testJsonToAndFrom,{     org.andstatus.todoagenda.provider.QueryResultsStorage inputs1 = provider.loadResultsAndSettings(org.andstatus.todoagenda.tests.R.raw.birthday);     org.json.JSONObject jsonOutput = inputs1.toJson(provider.getContext(), provider.getWidgetId(), true);     org.andstatus.todoagenda.provider.QueryResultsStorage inputs2 = org.andstatus.todoagenda.provider.QueryResultsStorage.fromJson(provider.getWidgetId(), jsonOutput);     org.junit.Assert.assertEquals(inputs1, inputs2); }
https://github.com/andstatus/todoagenda.git,DuplicateEventsTest,testIssue354,{     final java.lang.String method = "testIssue354";     org.andstatus.todoagenda.provider.QueryResultsStorage inputs = provider.loadResultsAndSettings(org.andstatus.todoagenda.tests.R.raw.duplicates);     provider.addResults(inputs);     playResults(method);     org.junit.Assert.assertEquals("Number of entries", 40, getFactory().getWidgetEntries().size()); }
https://github.com/andstatus/todoagenda.git,TodaysColorsEventsTest,testIssue327,{     final java.lang.String method = "testIssue327";     org.andstatus.todoagenda.provider.QueryResultsStorage inputs = provider.loadResultsAndSettings(org.andstatus.todoagenda.tests.R.raw.todays_colors);     provider.addResults(inputs);     playResults(method);     org.junit.Assert.assertEquals("Number of entries", 43, getFactory().getWidgetEntries().size()); }
https://github.com/mathisdt/sdbviewer.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("org.zephyrsoft.sdbviewer", appContext.getPackageName()); }
https://github.com/farmasek/Audio_Manager.git,AlarmControlTest,testNextDayStringFromTimetoReceive,{     long receiverTime = 1451495100000L;     java.lang.String exp = "Další změna v St 18:05";     java.lang.String actual = baranek.vojtech.audiomanager.alarmTimingUtil.AlarmControl.getStringForNextDayFromReceiveTime(receiverTime);     org.junit.Assert.assertEquals(exp, actual); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetFormatedStartTime,{     baranek.vojtech.audiomanager.model.TimerProfile timerProfile = new baranek.vojtech.audiomanager.model.TimerProfile();     timerProfile.setZacCas(baranek.vojtech.audiomanager.model.TimerProfileHelper.getCasFromHodMin(15, 2));     java.lang.String actualString = baranek.vojtech.audiomanager.model.TimerProfileHelper.getFormatedStartTime(timerProfile);     java.lang.String expectedString = "15:02";     org.junit.Assert.assertThat(actualString, org.hamcrest.core.IsEqual.equalTo(expectedString)); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetFormatedEndTime,{     baranek.vojtech.audiomanager.model.TimerProfile timerProfile = new baranek.vojtech.audiomanager.model.TimerProfile();     timerProfile.setZacCas(baranek.vojtech.audiomanager.model.TimerProfileHelper.getCasFromHodMin(15, 2));     timerProfile.setCasDoKonce(120);     java.lang.String actualString = baranek.vojtech.audiomanager.model.TimerProfileHelper.getFormatedEndTime(timerProfile);     java.lang.String expectedString = "17:02";     org.junit.Assert.assertThat(actualString, org.hamcrest.core.IsEqual.equalTo(expectedString)); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetFormatedEndTimeNextDay,{     baranek.vojtech.audiomanager.model.TimerProfile timerProfile = new baranek.vojtech.audiomanager.model.TimerProfile();     timerProfile.setZacCas(baranek.vojtech.audiomanager.model.TimerProfileHelper.getCasFromHodMin(15, 2));     timerProfile.setCasDoKonce(1439);     java.lang.String actualString = baranek.vojtech.audiomanager.model.TimerProfileHelper.getFormatedEndTime(timerProfile);     java.lang.String expectedString = "Další den 15:01";     org.junit.Assert.assertThat(actualString, org.hamcrest.core.IsEqual.equalTo(expectedString)); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetZeroBeforMinute,{     java.lang.String aa = "05";     int min = 5;     org.junit.Assert.assertThat(aa, org.hamcrest.CoreMatchers.is(org.hamcrest.core.IsEqual.equalTo(baranek.vojtech.audiomanager.model.TimerProfileHelper.getZeroBeforMinute(min)))); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetZeroBeforMinuteArrays,{     java.lang.String[] expectedValues = new java.lang.String[]{ "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10" };     int[] inputValues = new int[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };     java.lang.String[] actualValues = new java.lang.String[expectedValues.length];     for (int i = 0; i < expectedValues.length; i++) {         actualValues[i] = baranek.vojtech.audiomanager.model.TimerProfileHelper.getZeroBeforMinute(inputValues[i]);     }     org.junit.Assert.assertArrayEquals(expectedValues, actualValues); }
https://github.com/farmasek/Audio_Manager.git,TimerProfileHelperTest,testGetCasFromHodMin,{     int expectedValue = 80;     int actualValue = baranek.vojtech.audiomanager.model.TimerProfileHelper.getCasFromHodMin(1, 20);     org.junit.Assert.assertEquals(expectedValue, actualValue); }
https://github.com/michael830713/ProjectBoxScore.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.mike.projectboxscore", appContext.getPackageName()); }
https://github.com/michael830713/ProjectBoxScore.git,MainActivityTest,testFibonacci,{     long result = mFibonacci.getFibonacci(10);     org.junit.Assert.assertEquals(55, result); }
https://github.com/michael830713/ProjectBoxScore.git,MainActivityTest,testFibonacciZero,{     long result = mFibonacci.getFibonacci(0);     org.junit.Assert.assertEquals(0, result); }
https://github.com/michael830713/ProjectBoxScore.git,MainActivityTest,testFibonacciOne,{     long result = mFibonacci.getFibonacci(2);     org.junit.Assert.assertEquals(1, result); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,playerMadeTenShot,{     // five two points shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     // five three points shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     org.junit.Assert.assertEquals(10, mConsolePresenter.getSelectedPlayer().getShotMade()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkTwoPointsPercentage,{     // one made shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     // two missed shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     org.junit.Assert.assertEquals(33.3, mConsolePresenter.getSelectedPlayer().getShotPercentage(), 0); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkTwoPointsPercentageReturned,{     // made three shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.TWO_POINT);     // missed four shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.TWO_POINT);     // return two missed shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.RETURN_TWO_POINTS);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.RETURN_TWO_POINTS);     // return two made shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.RETURN_TWO_POINTS);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.RETURN_TWO_POINTS);     org.junit.Assert.assertEquals(33.3, mConsolePresenter.getSelectedPlayer().getShotPercentage(), 0); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkThreePointsPercentage,{     // one made shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     // two missed shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     org.junit.Assert.assertEquals(33.3, mConsolePresenter.getSelectedPlayer().getShotPercentage(), 0); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkThreePointsPercentageReturned,{     // made three shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.THREE_POINT);     // missed four shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.THREE_POINT);     // return two missed shot     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.RETURN_THREE_POINTS);     mConsolePresenter.updatePlayerMisses(com.mike.projectboxscore.Constants.RETURN_THREE_POINTS);     // return two made shot     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.RETURN_THREE_POINTS);     mConsolePresenter.updatePlayerScores(com.mike.projectboxscore.Constants.RETURN_THREE_POINTS);     org.junit.Assert.assertEquals(33.3, mConsolePresenter.getSelectedPlayer().getShotPercentage(), 0); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkTenRebound,{     mConsolePresenter.playerOffensiveRebounded(5);     mConsolePresenter.playerDefensiveRebounded(5);     org.junit.Assert.assertEquals(10, mConsolePresenter.getSelectedPlayer().getRebounds()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkSteal,{     // made six steals     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     org.junit.Assert.assertEquals(6, mConsolePresenter.getSelectedPlayer().getSteals()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkStealReturn,{     // made six steals     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.ONE);     // returned two steals     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     mConsolePresenter.playerStealed(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     org.junit.Assert.assertEquals(4, mConsolePresenter.getSelectedPlayer().getSteals()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkAssist,{     // made six steals     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     org.junit.Assert.assertEquals(6, mConsolePresenter.getSelectedPlayer().getAssists()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkAssistReturn,{     // made six steals     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.ONE);     // returned two steals     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     mConsolePresenter.playerAssisted(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     org.junit.Assert.assertEquals(4, mConsolePresenter.getSelectedPlayer().getAssists()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkBlock,{     // made six steals     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     org.junit.Assert.assertEquals(6, mConsolePresenter.getSelectedPlayer().getBlocks()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkBlockReturn,{     // made six steals     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.ONE);     // returned two steals     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     mConsolePresenter.playerBlocked(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     org.junit.Assert.assertEquals(4, mConsolePresenter.getSelectedPlayer().getBlocks()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkTurnOver,{     // made six steals     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     org.junit.Assert.assertEquals(6, mConsolePresenter.getSelectedPlayer().getTurnOvers()); }
https://github.com/michael830713/ProjectBoxScore.git,ConsoleActionTest,checkTurnOverReturn,{     // made six steals     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.ONE);     // returned two steals     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     mConsolePresenter.playerTurnedOver(com.mike.projectboxscore.Constants.RETURN_ONE_STAT);     org.junit.Assert.assertEquals(4, mConsolePresenter.getSelectedPlayer().getTurnOvers()); }
https://github.com/michael830713/ProjectBoxScore.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/rmm01/CycleBattleDemo.git,GameManagerTest,testHeightGreaterThanWidth,{     mGameManager1 = new com.yckir.cyclebattledemo.views.gameSurfaceView.GameManager(new com.yckir.cyclebattledemo.views.gameSurfaceView.Grid(5, 5, 10), 500, 500, mMockPaint);     org.junit.Assert.assertTrue(mGameManager1.getFrameWidth() <= mGameManager1.getFrameHeight()); }
https://github.com/pjwelcome/WeatherAppDemo.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/pjwelcome/WeatherAppDemo.git,WeatherUtilsTest,testCreateModelFromJson_Test,{     org.junit.Assert.assertEquals(com.demo.android_development.pjwelcome.weatherappdemo.Utils.WeatherRequestUtil.getInstance().createModelFromJson(jsonObject).getName(), "Shuzenji"); }
https://github.com/pjwelcome/WeatherAppDemo.git,WeatherUtilsTest,DayNameTodayTest,{     java.lang.String today = com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.getInstance().getDayName(context, 0);     org.junit.Assert.assertEquals(today, context.getString(R.string.today)); }
https://github.com/pjwelcome/WeatherAppDemo.git,WeatherUtilsTest,DayNameTomorrowTest,{     java.lang.String tomorrow = com.demo.android_development.pjwelcome.weatherappdemo.Utils.Utilities.getInstance().getDayName(context, 1);     org.junit.Assert.assertEquals(tomorrow, context.getString(R.string.tomorrow)); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasSin,{     org.junit.Assert.assertEquals(java.lang.Math.sin(args1.get(0)), evaluator.evaluateFunction("sin", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasCos,{     org.junit.Assert.assertEquals(java.lang.Math.cos(args1.get(0)), evaluator.evaluateFunction("cos", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasTan,{     org.junit.Assert.assertEquals(java.lang.Math.tan(args1.get(0)), evaluator.evaluateFunction("tan", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasCot,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.cot(args1.get(0)), evaluator.evaluateFunction("cot", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasAsin,{     org.junit.Assert.assertEquals(java.lang.Math.asin(args1.get(0)), evaluator.evaluateFunction("asin", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasAcos,{     org.junit.Assert.assertEquals(java.lang.Math.acos(args1.get(0)), evaluator.evaluateFunction("acos", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasAtan,{     org.junit.Assert.assertEquals(java.lang.Math.atan(args1.get(0)), evaluator.evaluateFunction("atan", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasAcot,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.acot(args1.get(0)), evaluator.evaluateFunction("acot", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasSinh,{     org.junit.Assert.assertEquals(java.lang.Math.sinh(args1.get(0)), evaluator.evaluateFunction("sinh", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasCosh,{     org.junit.Assert.assertEquals(java.lang.Math.cosh(args1.get(0)), evaluator.evaluateFunction("cosh", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasTanh,{     org.junit.Assert.assertEquals(java.lang.Math.tanh(args1.get(0)), evaluator.evaluateFunction("tanh", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasCoth,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.coth(args1.get(0)), evaluator.evaluateFunction("coth", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasPow,{     org.junit.Assert.assertEquals(java.lang.Math.pow(args2.get(0), args2.get(1)), evaluator.evaluateFunction("pow", args2), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasSqrt,{     org.junit.Assert.assertEquals(java.lang.Math.sqrt(args1.get(0)), evaluator.evaluateFunction("sqrt", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasExp,{     org.junit.Assert.assertEquals(java.lang.Math.exp(args1.get(0)), evaluator.evaluateFunction("exp", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasLn,{     org.junit.Assert.assertEquals(java.lang.Math.log(args1.get(0)), evaluator.evaluateFunction("ln", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasLog,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.logarithm(args2.get(0), args2.get(1)), evaluator.evaluateFunction("log", args2), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasLog10,{     org.junit.Assert.assertEquals(java.lang.Math.log10(args1.get(0)), evaluator.evaluateFunction("log10", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasAbs,{     org.junit.Assert.assertEquals(java.lang.Math.abs(args1.get(0)), evaluator.evaluateFunction("abs", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasFloor,{     org.junit.Assert.assertEquals(java.lang.Math.floor(args1.get(0)), evaluator.evaluateFunction("floor", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasCeil,{     org.junit.Assert.assertEquals(java.lang.Math.ceil(args1.get(0)), evaluator.evaluateFunction("ceil", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasMin,{     org.junit.Assert.assertEquals(java.lang.Math.min(args2.get(0), args2.get(1)), evaluator.evaluateFunction("min", args2), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasMax,{     org.junit.Assert.assertEquals(java.lang.Math.max(args2.get(0), args2.get(1)), evaluator.evaluateFunction("max", args2), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasRound,{     org.junit.Assert.assertEquals(java.lang.Math.round(args1.get(0)), evaluator.evaluateFunction("round", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasSignum,{     org.junit.Assert.assertEquals(java.lang.Math.signum(args1.get(0)), evaluator.evaluateFunction("sgn", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasFact,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(args1.get(0)), evaluator.evaluateFunction("fact", args1), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,JavaEvaluatorTester,evaluatorHasMod,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.mod(args2.get(0), args2.get(1)), evaluator.evaluateFunction("mod", args2), com.guliash.parser.evaluator.BaseEvaluatorTester.EPS); }
https://github.com/guliash/Calculator.git,AngleTester,angleTest1,{     org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("cos(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,AngleTester,angleTest2,{     org.junit.Assert.assertEquals(java.lang.Math.sqrt(2), calculate("cos(45) + sin(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,AngleTester,angleTest3,{     org.junit.Assert.assertEquals(-1, calculate("cos(pi)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,AngleTester,angleTest4,{     org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(40.5, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD)), calculate("cos(40.5)", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,additionTest1,{     org.junit.Assert.assertEquals(6, calculate("1+2+3"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,additionTest2,{     org.junit.Assert.assertEquals(((1.0E9 + 1) + 20) + 1.0E-9, calculate("1e9 + 1 + 20 + 1e-9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,additionTest3,{     org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,additionTest4,{     org.junit.Assert.assertEquals(1.0E9 + 1.0E-9, calculate("1e+9 + 1e-9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,goodBracket1,{     org.junit.Assert.assertEquals(1, calculate("(((((((((1)))))))))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,goodBracket2,{     org.junit.Assert.assertEquals(1.0 + (((2.0 * (3.0 + 4.0)) * (2.0 + 2.0)) / 2.0), calculate("(((((((((1)+2*(3+4)*(2+2)/2))))))))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,goodBracket3,{     org.junit.Assert.assertEquals((((1.0 * 2.0) * (4.0 + ((5.0 + 2.0) * 3.0))) * (4.0 - (2.0 / 3.0))) * (5.0 - (3.4 / 2.5)), calculate("(1)*(2)*(4+(5+2)*3)*(4-2/3)*(5-3.4/2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,goodBracket4,{     org.junit.Assert.assertEquals((((((((((1.0 * 2.0) * 3.0) / 4.0) / 5.0) / 6.0) / 7.0) / 8.0) / 10.0) * 2.0) + ((((3.0 / 4.0) * 2.0) + 3.0) * ((4.0 / 5.0) * (2.0 / 3.0))), calculate("(1*2*3/4/5/6/7/8/10*2+(3/4*2+3)*(4/5*(2/3)))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,goodBracket5,{     org.junit.Assert.assertEquals(((((2.0 * (3.0 + 4.0)) / (3.0 + 2.0)) * (2.0 / 2.0)) + (3.0 * 2.0)) / (3.0 + (2.0 * (3.0 / 2.0))), calculate("(2*(3+4)/(3+2)*(2/2)+3*2)/(3+2*(3/2))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,spacesTest1,{     org.junit.Assert.assertEquals((1 + 2) + ((3 * 4) * (2 + 3)), calculate("1 +         2 + 3 *    4 *  (  2  + 3)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,operatorsTest1,{     org.junit.Assert.assertEquals(3, calculate("1------2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,operatorsTest2,{     org.junit.Assert.assertEquals(-1, calculate("1+-+2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,operatorsTest5,{     org.junit.Assert.assertEquals(-2, calculate("1*-2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,operatorsTest6,{     org.junit.Assert.assertEquals(2, calculate("1*--2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,javaCornerCases1,{     org.junit.Assert.assertEquals(java.lang.Double.NaN, calculate("0/0"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,javaCornerCases2,{     org.junit.Assert.assertEquals(java.lang.Double.NaN, calculate("log(2,-1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,BasicTester,sequentMulAndSub,{     org.junit.Assert.assertEquals(2 * (-2), calculate("2*-2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,FunctionsTest,functionsTest1,{     org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.log(2) * java.lang.Math.cos(3)), calculate("sin(ln(2) * cos(3))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,FunctionsTest,functionsTest2,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(3 * java.lang.Math.ceil(5.5)), calculate("fact(3 * ceil(5.5))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,FunctionsTest,functionsTest3,{     org.junit.Assert.assertEquals(java.lang.Math.atan(((3 * java.lang.Math.sinh(3)) * java.lang.Math.cosh(5)) * com.guliash.parser.Functions.mod(-3, 1)), calculate("atan(3 * sinh(3) * cosh(5) * mod(-3, 1))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,FunctionsTest,functionCanHaveSpacesBetweenNameAndArgs,{     org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.cos(55)), calculate("sin  (cos (  55 ))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,FunctionsTest,functionWithMultipleArgsParsedCorrectly,{     org.junit.Assert.assertEquals(java.lang.Math.pow(43, 534), calculate("pow  ( 43 , 534 ) "), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest1,{     org.junit.Assert.assertEquals(java.lang.Math.log(java.lang.Math.E), calculate("ln(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest2,{     org.junit.Assert.assertEquals(log(2, 3), calculate("log(   2  ,   3)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest3,{     org.junit.Assert.assertEquals(log(1, 1), calculate("log(1, 1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest4,{     org.junit.Assert.assertEquals(log(java.lang.Math.E, (java.lang.Math.E * java.lang.Math.E) * java.lang.Math.E), calculate("ln(pow(e, 3))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest5,{     org.junit.Assert.assertEquals(log(java.lang.Math.E, (java.lang.Math.E * java.lang.Math.E) * java.lang.Math.E), calculate("log(e,  pow(e  ,   3))"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,LogTester,logTest6,{     org.junit.Assert.assertEquals(4, calculate("log10(10*10*10*10)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,absTest1,{     org.junit.Assert.assertEquals(java.lang.Math.abs(-1), calculate("abs(-1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,absTest2,{     org.junit.Assert.assertEquals(java.lang.Math.abs(1), calculate("abs(1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,absTest3,{     org.junit.Assert.assertEquals(java.lang.Math.abs(0), calculate("abs(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,ceilTest1,{     org.junit.Assert.assertEquals(java.lang.Math.ceil(-2.5), calculate("ceil(-2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,ceilTest2,{     org.junit.Assert.assertEquals(java.lang.Math.ceil(2.5), calculate("ceil(2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,ceilTest3,{     org.junit.Assert.assertEquals(java.lang.Math.ceil(0), calculate("ceil(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,floorTest1,{     org.junit.Assert.assertEquals(java.lang.Math.floor(-2.5), calculate("floor(-2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,floorTest2,{     org.junit.Assert.assertEquals(java.lang.Math.floor(2.5), calculate("floor(2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,floorTest3,{     org.junit.Assert.assertEquals(java.lang.Math.floor(0), calculate("floor(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,roundTest1,{     org.junit.Assert.assertEquals(java.lang.Math.round(-2.5), calculate("round(-2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,roundTest2,{     org.junit.Assert.assertEquals(java.lang.Math.round(2.5), calculate("round(2.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,roundTest3,{     org.junit.Assert.assertEquals(java.lang.Math.round(0), calculate("round(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,roundTest4,{     org.junit.Assert.assertEquals(java.lang.Math.round(-1.4), calculate("round(-1.4)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,minTest1,{     org.junit.Assert.assertEquals(java.lang.Math.min(-1, 1), calculate("min(-1,1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,minTest2,{     org.junit.Assert.assertEquals(java.lang.Math.min(2, 5), calculate("min(2,5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,minTest3,{     org.junit.Assert.assertEquals(java.lang.Math.min(0, 0), calculate("min(0, 0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,maxTest1,{     org.junit.Assert.assertEquals(java.lang.Math.max(-1, 1), calculate("max(-1,1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,maxTest2,{     org.junit.Assert.assertEquals(java.lang.Math.max(2, 5), calculate("max(2,5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,maxTest3,{     org.junit.Assert.assertEquals(java.lang.Math.max(0, 0), calculate("max(0, 0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,signumTest1,{     org.junit.Assert.assertEquals(java.lang.Math.signum(-0.5), calculate("sgn(-0.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,signumTest2,{     org.junit.Assert.assertEquals(java.lang.Math.signum(0.5), calculate("sgn(0.5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,signumTest3,{     org.junit.Assert.assertEquals(java.lang.Math.signum(0), calculate("sgn(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,factTest1,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(10), calculate("fact(10)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,factTest2,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(0), calculate("fact(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,factTest3,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(20), calculate("fact(20)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,factTest4,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.factorial(30), calculate("fact(30)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,modTest1,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.mod(5, -2), calculate("mod(5, -2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,modTest2,{     org.junit.Assert.assertEquals(2, calculate("mod(-7, 3)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,modTest3,{     org.junit.Assert.assertEquals(3, calculate("mod(13, 5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,modTest4,{     org.junit.Assert.assertEquals(2, calculate("mod(-13,5)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,MathTester,modTest5,{     org.junit.Assert.assertEquals((-1.0) % 0.0, calculate("mod(-1, 0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest1,{     org.junit.Assert.assertEquals(1.0E9, calculate("1e+9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest2,{     org.junit.Assert.assertEquals(1.0E-9, calculate("1e-9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest3,{     org.junit.Assert.assertEquals(1.0E9, calculate("1e9"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest6,{     org.junit.Assert.assertEquals(1.0E10, calculate("1e10"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest8,{     org.junit.Assert.assertEquals(0.02, calculate("2e-2"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest11,{     org.junit.Assert.assertEquals(0.02, calculate("2e-002"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,numberTest12,{     org.junit.Assert.assertEquals(2.0E-11, calculate("2e-0011"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,eCaseDoesNotMatter,{     org.junit.Assert.assertEquals(0.2, calculate("2E-1"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,parserAbleToDiffExpAndE,{     org.junit.Assert.assertEquals(java.lang.Math.E * 0.2, calculate("e*2e-1"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,exponentCalculatedCorrectly,{     org.junit.Assert.assertEquals(2.0E-10, calculate("2e-10"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,NumberTester,zeroExponentHandledCorrectly,{     org.junit.Assert.assertEquals(435.0, calculate("435E0"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,powTest1,{     org.junit.Assert.assertEquals(java.lang.Math.pow(1, 2), calculate("pow(1,2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,powTest2,{     org.junit.Assert.assertEquals(java.lang.Math.pow(-2.0, 2.0), calculate("pow(-2,2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,powTest3,{     org.junit.Assert.assertEquals(java.lang.Math.pow(-2.0, 2.999), calculate("pow(-2,2.999)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,powTest4,{     org.junit.Assert.assertEquals(java.lang.Math.pow(1000, 0), calculate("pow(1000, 0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,sqrtTest1,{     org.junit.Assert.assertEquals(java.lang.Math.sqrt(25), calculate("sqrt(25)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,sqrtTest2,{     org.junit.Assert.assertEquals(java.lang.Math.sqrt(0), calculate("sqrt(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,sqrtTest3,{     org.junit.Assert.assertEquals(java.lang.Math.sqrt(-1), calculate("sqrt(-1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,expTest1,{     org.junit.Assert.assertEquals(java.lang.Math.exp(3), calculate("exp(3)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,expTest2,{     org.junit.Assert.assertEquals(java.lang.Math.exp(java.lang.Math.E), calculate("exp(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,expTest3,{     org.junit.Assert.assertEquals(java.lang.Math.exp(0), calculate("exp(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,PowTester,expTest4,{     org.junit.Assert.assertEquals(java.lang.Math.exp(-3), calculate("exp(-3)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterUnderscoreIsOk,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('_'), true); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterDollarIsOk,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('$'), true); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterLetterIsOk1,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('b'), true); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterLetterIsOk2,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('ш'), true); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterSpaceIsBad,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter(' '), false); }
https://github.com/guliash/Calculator.git,StemmerTester,checkWordCharacterDigitIsBad,{     org.junit.Assert.assertEquals(com.guliash.parser.stemmer.Stemmer.isWordOnlyCharacter('9'), false); }
https://github.com/guliash/Calculator.git,TrigonometricTester,trigonometricTest1,{     org.junit.Assert.assertEquals(java.lang.Math.sin(3.14 / 2) + java.lang.Math.cos(2 - (6 / 3)), calculate("sin(3.14/2)+cos(2-6/3)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinTest1,{     org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.PI / 2), calculate("sin(pi / 2)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinTest2,{     org.junit.Assert.assertEquals(java.lang.Math.sin(java.lang.Math.PI / 4), calculate("sin(pi / 4)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinTest3,{     org.junit.Assert.assertEquals(java.lang.Math.sin(0), calculate("sin(0)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinTest4,{     org.junit.Assert.assertEquals(java.lang.Math.sin(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("sin(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinTest5,{     org.junit.Assert.assertEquals(java.lang.Math.sin(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD)), calculate("sin(45)", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cosTest1,{     org.junit.Assert.assertEquals(java.lang.Math.cos(java.lang.Math.PI / 2), calculate("cos(pi/2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cosTest2,{     org.junit.Assert.assertEquals(java.lang.Math.cos(java.lang.Math.PI / 4), calculate("cos(pi/4)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cosTest3,{     org.junit.Assert.assertEquals(java.lang.Math.cos(0), calculate("cos(0)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cosTest4,{     org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("cos(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cosTest5,{     org.junit.Assert.assertEquals(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD)), calculate("cos(45)", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanTest1,{     org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 2), calculate("tan(pi/2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanTest2,{     org.junit.Assert.assertEquals(java.lang.Math.tan(java.lang.Math.PI / 4), calculate("tan(pi/4)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanTest3,{     org.junit.Assert.assertEquals(java.lang.Math.tan(0), calculate("tan(0)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanTest4,{     org.junit.Assert.assertEquals(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("tan(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanTest5,{     org.junit.Assert.assertEquals(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD)), calculate("tan(45)", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cotTest1,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tan(java.lang.Math.PI / 2), calculate("cot(pi/2)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cotTest2,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tan(java.lang.Math.PI / 4), calculate("cot(pi/4)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cotTest3,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tan(0), calculate("cot(0)", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cotTest4,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD)), calculate("cot(45)", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cotTest5,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD)), calculate("cot(45)", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,asinTest1,{     org.junit.Assert.assertEquals(java.lang.Math.asin(java.lang.Math.sin(java.lang.Math.PI / 2)), calculate("asin(sin(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,asinTest2,{     org.junit.Assert.assertEquals(java.lang.Math.asin(java.lang.Math.sin(java.lang.Math.PI / 4)), calculate("asin(sin(pi / 4))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,asinTest3,{     org.junit.Assert.assertEquals(java.lang.Math.asin(java.lang.Math.sin(0)), calculate("asin(sin(0))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,asinTest4,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.asin(java.lang.Math.sin(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("asin(sin(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,asinTest5,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.asin(java.lang.Math.sin(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.GRAD), calculate("asin(sin(45))", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acosTest1,{     org.junit.Assert.assertEquals(java.lang.Math.acos(java.lang.Math.cos(java.lang.Math.PI / 2)), calculate("acos(cos(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acosTest2,{     org.junit.Assert.assertEquals(java.lang.Math.acos(java.lang.Math.cos(java.lang.Math.PI / 4)), calculate("acos(cos(pi / 4))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acosTest3,{     org.junit.Assert.assertEquals(java.lang.Math.acos(java.lang.Math.cos(0)), calculate("acos(cos(0))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acosTest4,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.acos(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("acos(cos(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acosTest5,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.acos(java.lang.Math.cos(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.GRAD), calculate("acos(cos(45))", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,atanTest1,{     org.junit.Assert.assertEquals(java.lang.Math.atan(java.lang.Math.tan(java.lang.Math.PI / 2)), calculate("atan(tan(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,atanTest2,{     org.junit.Assert.assertEquals(java.lang.Math.atan(java.lang.Math.tan(java.lang.Math.PI / 4)), calculate("atan(tan(pi / 4))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,atanTest3,{     org.junit.Assert.assertEquals(java.lang.Math.atan(java.lang.Math.tan(0)), calculate("atan(tan(0))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,atanTest4,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.atan(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("atan(tan(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,atanTest5,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(java.lang.Math.atan(java.lang.Math.tan(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.GRAD), calculate("atan(tan(45))", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acotTest1,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.acot(com.guliash.parser.Functions.cot(java.lang.Math.PI / 2)), calculate("acot(cot(pi/2))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acotTest2,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.acot(com.guliash.parser.Functions.cot(java.lang.Math.PI / 4)), calculate("acot(cot(pi / 4))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acotTest3,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.acot(com.guliash.parser.Functions.cot(0)), calculate("acot(cot(0))", com.guliash.parser.AngleUnits.RAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acotTest4,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(com.guliash.parser.Functions.acot(com.guliash.parser.Functions.cot(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.DEG, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.DEG), calculate("acot(cot(45))", com.guliash.parser.AngleUnits.DEG), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,acotTest5,{     org.junit.Assert.assertEquals(com.guliash.parser.Functions.convertAngles(com.guliash.parser.Functions.acot(com.guliash.parser.Functions.cot(com.guliash.parser.Functions.convertAngles(45, com.guliash.parser.AngleUnits.GRAD, com.guliash.parser.AngleUnits.RAD))), com.guliash.parser.AngleUnits.RAD, com.guliash.parser.AngleUnits.GRAD), calculate("acot(cot(45))", com.guliash.parser.AngleUnits.GRAD), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinhTest1,{     org.junit.Assert.assertEquals(java.lang.Math.sinh(1), calculate("sinh(1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinhTest2,{     org.junit.Assert.assertEquals(java.lang.Math.sinh(java.lang.Math.E), calculate("sinh(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,sinhTest3,{     org.junit.Assert.assertEquals(java.lang.Math.sinh(java.lang.Math.PI), calculate("sinh(pi)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,coshTest1,{     org.junit.Assert.assertEquals(java.lang.Math.cosh(1), calculate("cosh(1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,coshTest2,{     org.junit.Assert.assertEquals(java.lang.Math.cosh(java.lang.Math.E), calculate("cosh(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,coshTest3,{     org.junit.Assert.assertEquals(java.lang.Math.cosh(java.lang.Math.PI), calculate("cosh(pi)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanhTest1,{     org.junit.Assert.assertEquals(java.lang.Math.tanh(1), calculate("tanh(1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanhTest2,{     org.junit.Assert.assertEquals(java.lang.Math.tanh(java.lang.Math.E), calculate("tanh(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,tanhTest3,{     org.junit.Assert.assertEquals(java.lang.Math.tanh(java.lang.Math.PI), calculate("tanh(pi)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cothTest1,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tanh(1), calculate("coth(1)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cothTest2,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tanh(java.lang.Math.E), calculate("coth(e)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cothTest3,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tanh(java.lang.Math.PI), calculate("coth(pi)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,cothTest4,{     org.junit.Assert.assertEquals(1 / java.lang.Math.tanh(0), calculate("coth(0)"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,TrigonometricTester,piTest1,{     org.junit.Assert.assertEquals(java.lang.Math.PI, calculate("pi"), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesResolverTester,canFindDependencyForVariable,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     com.guliash.parser.evaluator.Evaluator evaluator = new com.guliash.parser.evaluator.JavaEvaluator(com.guliash.parser.AngleUnits.RAD);     com.guliash.parser.StringVariable x = new com.guliash.parser.StringVariable("x", "x + y + z + d + w");     com.guliash.parser.StringVariable y = new com.guliash.parser.StringVariable("y", "1");     com.guliash.parser.StringVariable z = new com.guliash.parser.StringVariable("z", "1");     com.guliash.parser.StringVariable d = new com.guliash.parser.StringVariable("d", "1");     com.guliash.parser.StringVariable w = new com.guliash.parser.StringVariable("w", "1");     variables.add(x);     variables.add(y);     variables.add(z);     variables.add(d);     variables.add(w);     java.util.Set<com.guliash.parser.StringVariable> need = new java.util.HashSet<>();     need.add(x);     need.add(y);     need.add(z);     need.add(d);     need.add(w);     com.guliash.parser.VariablesResolver resolver = new com.guliash.parser.VariablesResolver(variables, evaluator);     org.junit.Assert.assertEquals(need, resolver.findDependencies(x)); }
https://github.com/guliash/Calculator.git,VariablesResolverTester,willNotTakeFunctionAsDependency,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     com.guliash.parser.evaluator.Evaluator evaluator = new com.guliash.parser.evaluator.JavaEvaluator(com.guliash.parser.AngleUnits.RAD);     com.guliash.parser.StringVariable x = new com.guliash.parser.StringVariable("x", "y + sin(y)");     com.guliash.parser.StringVariable y = new com.guliash.parser.StringVariable("y", "1");     variables.add(x);     variables.add(y);     java.util.Set<com.guliash.parser.StringVariable> need = new java.util.HashSet<>();     need.add(y);     com.guliash.parser.VariablesResolver resolver = new com.guliash.parser.VariablesResolver(variables, evaluator);     org.junit.Assert.assertEquals(need, resolver.findDependencies(x)); }
https://github.com/guliash/Calculator.git,VariablesResolverTester,willNotTakeConstant,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     com.guliash.parser.evaluator.Evaluator evaluator = new com.guliash.parser.evaluator.JavaEvaluator(com.guliash.parser.AngleUnits.RAD);     com.guliash.parser.StringVariable x = new com.guliash.parser.StringVariable("x", "y + pi");     com.guliash.parser.StringVariable y = new com.guliash.parser.StringVariable("y", "1");     variables.add(x);     variables.add(y);     java.util.Set<com.guliash.parser.StringVariable> need = new java.util.HashSet<>();     need.add(y);     com.guliash.parser.VariablesResolver resolver = new com.guliash.parser.VariablesResolver(variables, evaluator);     org.junit.Assert.assertEquals(need, resolver.findDependencies(x)); }
https://github.com/guliash/Calculator.git,VariablesTester,variablesReadCorrectly1,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("x", java.lang.Double.toString(-1.0)));     variables.add(new com.guliash.parser.StringVariable("y", java.lang.Double.toString(2.0)));     org.junit.Assert.assertEquals(java.lang.Math.exp(-1.0) * java.lang.Math.sin(2.0), calculate("exp(x)*sin(y)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variablesReadCorrectly2,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("x", java.lang.Double.toString(-1.0)));     variables.add(new com.guliash.parser.StringVariable("y", java.lang.Double.toString(2.0)));     org.junit.Assert.assertEquals(java.lang.Math.min(-1.0, 2.0), calculate("min(x, y)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,sameVariablesButDifferentCaseTest,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("x", java.lang.Double.toString(2.0)));     variables.add(new com.guliash.parser.StringVariable("X", java.lang.Double.toString(3.0)));     org.junit.Assert.assertEquals(5.0, calculate("x + X", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,throwExceptionWhenVariableAndConstantHaveSameName,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("e", java.lang.Double.toString(2.0)));     org.junit.Assert.assertEquals(java.lang.Math.E, calculate("e", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableNameCanBeginWithDollar,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("$23", java.lang.Double.toString(2.0)));     variables.add(new com.guliash.parser.StringVariable("ab", java.lang.Double.toString(10.0)));     org.junit.Assert.assertEquals(12.0, calculate("$23 + ab", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableNameCanBeginWithUnderscore,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("_23", java.lang.Double.toString(2.0)));     variables.add(new com.guliash.parser.StringVariable("$ab", java.lang.Double.toString(10.0)));     org.junit.Assert.assertEquals(12.0, calculate("_23 + $ab", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,testVariableNameConvention,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double _$12_3$ = 35.0;     double J2eV = 45.0;     double masse = 10043.0;     variables.add(new com.guliash.parser.StringVariable("_$12_3$", java.lang.Double.toString(_$12_3$)));     variables.add(new com.guliash.parser.StringVariable("J2eV", java.lang.Double.toString(J2eV)));     variables.add(new com.guliash.parser.StringVariable("masse", java.lang.Double.toString(masse)));     org.junit.Assert.assertEquals((_$12_3$ / J2eV) * masse, calculate("_$12_3$ / J2eV * masse", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,testVariablesCaseSensitiveness,{     double j2ev = 45.0;     double J2eV = 53534;     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("j2ev", java.lang.Double.toString(j2ev)));     variables.add(new com.guliash.parser.StringVariable("J2eV", java.lang.Double.toString(J2eV)));     org.junit.Assert.assertEquals(j2ev / J2eV, calculate("j2ev / J2eV", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableNameCanMatchFunctionName,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     variables.add(new com.guliash.parser.StringVariable("exp", java.lang.Double.toString(3.0)));     variables.add(new com.guliash.parser.StringVariable("y", java.lang.Double.toString(2.0)));     org.junit.Assert.assertEquals(3.0, calculate("exp", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableNameCanMatchFunctionName2,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double sin = 433;     double cos = 433;     variables.add(new com.guliash.parser.StringVariable("sin", java.lang.Double.toString(sin)));     variables.add(new com.guliash.parser.StringVariable("cos", java.lang.Double.toString(cos)));     org.junit.Assert.assertEquals(java.lang.Math.cos(cos) * java.lang.Math.sin(sin), calculate("cos(cos) * sin(sin)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableNameCanMatchFunctionName3,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double sin = 433;     double cos = 433;     variables.add(new com.guliash.parser.StringVariable("sin", java.lang.Double.toString(sin)));     variables.add(new com.guliash.parser.StringVariable("cos", java.lang.Double.toString(cos)));     org.junit.Assert.assertEquals(java.lang.Math.cos(java.lang.Math.cos(sin)) * java.lang.Math.sin(java.lang.Math.cos(sin)), calculate("cos(cos(sin)) * sin(cos(sin))", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableCanContainExpressions,{     java.util.ArrayList<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     java.lang.Double a = java.lang.Math.sin(2 * java.lang.Math.cos(3));     variables.add(new com.guliash.parser.StringVariable("a", "sin(2*cos(3))"));     org.junit.Assert.assertEquals(java.lang.Math.tan(a), calculate("tan(a)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variablesCanContainExpressions,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double a = java.lang.Math.abs(java.lang.Math.cos(3));     double b = java.lang.Math.tan(java.lang.Math.cos(45));     double c = java.lang.Math.acos(0.5);     variables.add(new com.guliash.parser.StringVariable("a", "abs(cos(3))"));     variables.add(new com.guliash.parser.StringVariable("b", "tan(cos(45))"));     variables.add(new com.guliash.parser.StringVariable("c", "acos(0.5)"));     org.junit.Assert.assertEquals(java.lang.Math.exp(a + (b * c)), calculate("exp(a + b * c)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variableExpressionCanContainAnotherVariable,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double a = java.lang.Math.pow(2, 3);     double b = java.lang.Math.exp(a);     variables.add(new com.guliash.parser.StringVariable("a", "pow(2, 3)"));     variables.add(new com.guliash.parser.StringVariable("b", "exp(a)"));     org.junit.Assert.assertEquals(java.lang.Math.cos(b), calculate("cos(b)", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variablesCannotContainIncorrectExpression,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double a = java.lang.Math.cos((25 * java.lang.Math.pow(3, 3)) * java.lang.Math.exp(3)) * 25;     double b = java.lang.Math.cos((java.lang.Math.sin(25) * java.lang.Math.exp(3)) * com.guliash.parser.Functions.logarithm(2, 3));     variables.add(new com.guliash.parser.StringVariable("a", "cos(25*pow(3, 3)*exp(   3 ))*25"));     variables.add(new com.guliash.parser.StringVariable("b", "cos(sin(25)*exp(3)*log(,2, 3))"));     org.junit.Assert.assertEquals(a + b, calculate("a + b", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,variablesCanDependOnAnotherVariables,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     double a = java.lang.Math.pow(33, 3);     double b = java.lang.Math.ceil(a) * a;     double c = java.lang.Math.abs(b + a);     double d = java.lang.Math.floor((a * b) * c);     variables.add(new com.guliash.parser.StringVariable("a", "pow(33, 3)"));     variables.add(new com.guliash.parser.StringVariable("b", "ceil(a) * a"));     variables.add(new com.guliash.parser.StringVariable("c", "abs(b + a)"));     variables.add(new com.guliash.parser.StringVariable("d", "floor(a * b * c)"));     org.junit.Assert.assertEquals((a + (b / c)) + d, calculate("a + b / c + d", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/guliash/Calculator.git,VariablesTester,willCorrectlyCalcVariablesWithNonOrientedCycle,{     java.util.List<com.guliash.parser.StringVariable> variables = new java.util.ArrayList<>();     com.guliash.parser.StringVariable vx = new com.guliash.parser.StringVariable("x", "sin(y) + abs(z)");     com.guliash.parser.StringVariable vy = new com.guliash.parser.StringVariable("y", "cos(f) * floor(g)");     com.guliash.parser.StringVariable vz = new com.guliash.parser.StringVariable("z", "asin(1) * ln(p) + sin(d)");     com.guliash.parser.StringVariable vf = new com.guliash.parser.StringVariable("f", "atan(2)");     com.guliash.parser.StringVariable vg = new com.guliash.parser.StringVariable("g", "pi * pow(1, z) + sin(d)");     com.guliash.parser.StringVariable vp = new com.guliash.parser.StringVariable("p", "e");     com.guliash.parser.StringVariable vd = new com.guliash.parser.StringVariable("d", "pi");     variables.add(vx);     variables.add(vy);     variables.add(vz);     variables.add(vf);     variables.add(vg);     variables.add(vp);     variables.add(vd);     double d = java.lang.Math.PI;     double p = java.lang.Math.E;     double z = (java.lang.Math.asin(1) * java.lang.Math.log(p)) + java.lang.Math.sin(d);     double g = (java.lang.Math.PI * java.lang.Math.pow(1, z)) + java.lang.Math.sin(d);     double f = java.lang.Math.atan(2);     double y = java.lang.Math.cos(f) * java.lang.Math.floor(g);     double x = java.lang.Math.sin(y) + java.lang.Math.abs(z);     org.junit.Assert.assertEquals(((((d + p) + z) - g) + y) + ((x * 2) * f), calculate("d + p + z - g + y + x * 2 * f", variables), com.guliash.parser.BaseParserTester.EPS); }
https://github.com/jamie084/DPW.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("project.deepwateroiltools_001", appContext.getPackageName()); }
https://github.com/jamie084/DPW.git,LoginScreenTest,testLoginBtn,{     // perform onclick event     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.btn_login)).perform(android.support.test.espresso.action.ViewActions.click());     // starts second activity     android.app.Activity secondactivty = android.support.test.InstrumentationRegistry.getInstrumentation().waitForMonitorWithTimeout(monitorHome, 3000);     org.junit.Assert.assertNotNull(secondactivty);     secondactivty.finish(); }
https://github.com/jamie084/DPW.git,LoginScreenTest,testRegBtn,{     // perform onclick event     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.btn_register)).perform(android.support.test.espresso.action.ViewActions.click());     // starts second activity     android.app.Activity secondactivty = android.support.test.InstrumentationRegistry.getInstrumentation().waitForMonitorWithTimeout(monitorRegistration, 3000);     org.junit.Assert.assertNotNull(secondactivty);     secondactivty.finish(); }
https://github.com/jamie084/DPW.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/jamie084/DPW.git,HTTPDataHandlerTest,testHTTPConnection,{     java.net.URL url = new java.net.URL(urlString);     java.net.HttpURLConnection urlConnection = ((java.net.HttpURLConnection) (url.openConnection()));     urlConnection.setConnectTimeout(10 * 1000);     urlConnection.setReadTimeout(10 * 1000);     urlConnection.connect();     org.junit.Assert.assertEquals(200, urlConnection.getResponseCode()); }
https://github.com/davidshen84/ResetWiFi.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Tenacle/FifthElement.git,CustomizeTests,playSongWithSongPlayedCheck,{     checkStatsPage();     int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.core.AllOf.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.CoreMatchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.core.AllOf.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.CoreMatchers.anything()).inAdapterView(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.CoreMatchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     frameLayout.perform(click());     checkStatsPage();     int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     org.junit.Assert.assertTrue((oldMostPlayed + 2) == newMostPlayed); }
https://github.com/Tenacle/FifthElement.git,CustomizeTests,skipSongWithSongPlayedCheck,{     checkStatsPage();     int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.core.AllOf.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.CoreMatchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.core.AllOf.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.CoreMatchers.anything()).inAdapterView(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.CoreMatchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     android.support.test.espresso.ViewInteraction appCompatImageButton2 = onView(org.hamcrest.core.AllOf.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.CoreMatchers.is("android.support.constraint.ConstraintLayout")), 0), 2), isDisplayed()));     appCompatImageButton2.perform(click());     appCompatImageButton2.perform(click());     checkStatsPage();     int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     org.junit.Assert.assertTrue((oldMostPlayed + 1) == newMostPlayed); }
https://github.com/Tenacle/FifthElement.git,PlayMusicTests,seekTest,{     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     org.junit.Assert.assertTrue("Music Service Cannot Be Null", mActivityTestRule.getActivity().getMusicService() != null);     mActivityTestRule.getActivity().getMusicService().seekTo(1000);     android.os.SystemClock.sleep(500);     mActivityTestRule.getActivity().getMusicService().seekTo(50000);     android.os.SystemClock.sleep(500);     mActivityTestRule.getActivity().getMusicService().seekTo(100000);     android.os.SystemClock.sleep(500); }
https://github.com/Tenacle/FifthElement.git,SettingsTest,playSongWithSongPlayedCheck,{     checkStatsPage();     int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     frameLayout.perform(click());     checkStatsPage();     int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     org.junit.Assert.assertTrue((oldMostPlayed + 2) == newMostPlayed); }
https://github.com/Tenacle/FifthElement.git,SettingsTest,skipSongWithSongPlayedCheck,{     checkStatsPage();     int oldMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     android.support.test.espresso.ViewInteraction appCompatImageButton2 = onView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.support.constraint.ConstraintLayout")), 0), 2), isDisplayed()));     appCompatImageButton2.perform(click());     appCompatImageButton2.perform(click());     checkStatsPage();     int newMostPlayed = mActivityTestRule.getActivity().getSongService().getTotalSongPlays();     org.junit.Assert.assertTrue((oldMostPlayed + 1) == newMostPlayed); }
https://github.com/Tenacle/FifthElement.git,SongInformationTests,mainActivityTest,{     android.support.test.espresso.ViewInteraction appCompatImageButton = onView(org.hamcrest.Matchers.allOf(withContentDescription("Navigate up"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 0)), 1), isDisplayed()));     appCompatImageButton.perform(click());     android.support.test.espresso.ViewInteraction navigationMenuItemView = onView(org.hamcrest.Matchers.allOf(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withId(fifthelement.theelement.R.id), 0)), 2), isDisplayed()));     navigationMenuItemView.perform(click());     android.support.test.espresso.DataInteraction frameLayout = onData(org.hamcrest.Matchers.anything()).inAdapterView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.widget.LinearLayout")), 1))).atPosition(0);     frameLayout.perform(click());     android.support.test.espresso.ViewInteraction appCompatImageButton2 = onView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withParent(withId(fifthelement.theelement.R.id)), 2), isDisplayed()));     appCompatImageButton2.perform(click());     android.support.test.espresso.ViewInteraction appCompatTextView = onView(org.hamcrest.Matchers.allOf(withId(fifthelement.theelement.R.id), withText("Song Information"), fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(fifthelement.theelement.presentation.activities.TestHelpers.AndroidTestHelpers.childAtPosition(withClassName(org.hamcrest.Matchers.is("android.support.v7.view.menu.ListMenuItemView")), 0), 0), isDisplayed()));     appCompatTextView.perform(click());     org.junit.Assert.assertTrue("Music Service Cannot Be Null", mActivityTestRule.getActivity().getMusicService().getCurrentSongPlaying().getRating() != 0); }
https://github.com/Tenacle/FifthElement.git,AlbumServiceIT,getAllAlbumsTest,{     java.util.List<fifthelement.theelement.objects.Album> albums = albumService.getAlbums();// Database has 1      org.junit.Assert.assertTrue("getAllAlbumsTest: album size != 1", albums.size() == 1); }
https://github.com/Tenacle/FifthElement.git,AlbumServiceIT,insertAlbumValidTest,{     fifthelement.theelement.objects.Album album = new fifthelement.theelement.objects.Album("Bad");     albumService.insertAlbum(album);     org.junit.Assert.assertTrue("insertAuthorValidTest: album size != 2", albumService.getAlbums().size() == 2); }
https://github.com/Tenacle/FifthElement.git,AlbumServiceTest,getAllAlbumsTest,{     java.util.List<fifthelement.theelement.objects.Album> albums = classUnderTest.getAlbums();// Stub creates 3      org.junit.Assert.assertTrue("getAllAlbumsTest: album size != 3", albums.size() == 3); }
https://github.com/Tenacle/FifthElement.git,AlbumServiceTest,insertAlbumValidTest,{     fifthelement.theelement.objects.Album album = new fifthelement.theelement.objects.Album("Bad");     classUnderTest.insertAlbum(album);     org.junit.Assert.assertTrue("insertAuthorValidTest: album size != 4", classUnderTest.getAlbums().size() == 4); }
https://github.com/Tenacle/FifthElement.git,AlbumServiceTest,albumStatsTest_SetterGetterTest,{     // initializing them     java.util.List<fifthelement.theelement.objects.Album> albumList = classUnderTest.getAlbums();     int i = 0;     for (fifthelement.theelement.objects.Album album : albumList) {         album.setNumPlayed(i);         org.junit.Assert.assertEquals(album.getNumPlayed(), i);         i++;     } }
https://github.com/Tenacle/FifthElement.git,AlbumServiceTest,albumStatsTest_getTotalAlbumPlays,{     java.util.List<fifthelement.theelement.objects.Album> albumList = classUnderTest.getAlbums();     int i = 0;     int expected = 0;     for (fifthelement.theelement.objects.Album album : albumList) {         album.setNumPlayed(i);         expected += i++;     }     int actual = classUnderTest.getTotalAlbumPlays();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/Tenacle/FifthElement.git,AuthorServiceIT,getAllAuthorsTest,{     java.util.List<fifthelement.theelement.objects.Author> authors = authorService.getAuthors();// Database has 2      org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 2", authors.size() == 2); }
https://github.com/Tenacle/FifthElement.git,AuthorServiceIT,insertAuthorValidTest,{     fifthelement.theelement.objects.Author author = new fifthelement.theelement.objects.Author("Jim Bob");     authorService.insertAuthor(author);     org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 3", authorService.getAuthors().size() == 3); }
https://github.com/Tenacle/FifthElement.git,AuthorServiceTest,getAllAuthorsTest,{     java.util.List<fifthelement.theelement.objects.Author> authors = classUnderTest.getAuthors();// Stub creates 3      org.junit.Assert.assertTrue("getAllAuthorsTest: author size != 3", authors.size() == 3); }
https://github.com/Tenacle/FifthElement.git,AuthorServiceTest,insertAuthorValidTest,{     fifthelement.theelement.objects.Author author = new fifthelement.theelement.objects.Author("Jim Bob");     classUnderTest.insertAuthor(author);     org.junit.Assert.assertTrue("insertAuthorValidTest: author size != 4", classUnderTest.getAuthors().size() == 4); }
https://github.com/Tenacle/FifthElement.git,AuthorServiceTest,authorStatsTest_SetterGetterTest,{     // initializing them     java.util.List<fifthelement.theelement.objects.Author> authorList = classUnderTest.getAuthors();     int i = 0;     for (fifthelement.theelement.objects.Author author : authorList) {         author.setNumPlayed(i);         org.junit.Assert.assertEquals(author.getNumPlayed(), i);         i++;     } }
https://github.com/Tenacle/FifthElement.git,AuthorServiceTest,authorStatsTest_getTotalAuthorPlays,{     java.util.List<fifthelement.theelement.objects.Author> authorList = classUnderTest.getAuthors();     int i = 0;     int expected = 0;     for (fifthelement.theelement.objects.Author author : authorList) {         author.setNumPlayed(i);         expected += i++;     }     int actual = classUnderTest.getTotalAuthorPlays();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/Tenacle/FifthElement.git,PlaylistServiceIT,getAllPlaylistsTest,{     java.util.List<fifthelement.theelement.objects.Playlist> playlists = playlistService.getAllPlaylists();// Database has 3      org.junit.Assert.assertTrue("getAllPlaylistsTest: playlist size != 3", playlists.size() == 3); }
https://github.com/Tenacle/FifthElement.git,PlaylistServiceIT,insertPlaylistValidTest,{     fifthelement.theelement.objects.Playlist playlist = new fifthelement.theelement.objects.Playlist("Bad");     playlistService.insertPlaylist(playlist);     org.junit.Assert.assertTrue("insertAuthorValidTest: playlist size != 4", playlistService.getAllPlaylists().size() == 4); }
https://github.com/Tenacle/FifthElement.git,PlaylistServiceTest,getAllPlaylistsTest,{     java.util.List<fifthelement.theelement.objects.Playlist> playlists = classUnderTest.getAllPlaylists();// Stub creates 3      org.junit.Assert.assertTrue("getAllPlaylistsTest: playlist size != 3", playlists.size() == 3); }
https://github.com/Tenacle/FifthElement.git,PlaylistServiceTest,insertPlaylistValidTest,{     fifthelement.theelement.objects.Playlist playlist = new fifthelement.theelement.objects.Playlist("Bad");     classUnderTest.insertPlaylist(playlist);     org.junit.Assert.assertTrue("insertAuthorValidTest: playlist size != 4", classUnderTest.getAllPlaylists().size() == 4); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,sortSongListSize,{     // sort list     classUnderTest.sortSongs(songsList);     org.junit.Assert.assertTrue("Size of list after sorting != 5", songsList.size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,skipSongTest,{     classUnderTest.getSongAtIndex(0);     fifthelement.theelement.objects.Song nextSong = classUnderTest.skipToNextSong();     org.junit.Assert.assertTrue("Skip function did not retrieve the 'next' song in list", nextSong.getName().equals("This is America")); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,prevSongTest,{     classUnderTest.getSongAtIndex(1);     fifthelement.theelement.objects.Song prevSong = classUnderTest.goToPrevSong();     org.junit.Assert.assertTrue("Prev function did not retrieve the 'prev' song in list", prevSong.getName().equals("Pristine")); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,skipSongAtListEndTest,{     classUnderTest.getSongAtIndex(4);     fifthelement.theelement.objects.Song nextSong = classUnderTest.skipToNextSong();     org.junit.Assert.assertTrue("Skip function did not wrap around to starting song in list", nextSong.getName().equals("Pristine")); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,prevSongAtListStartTest,{     classUnderTest.getSongAtIndex(0);     fifthelement.theelement.objects.Song prevSong = classUnderTest.goToPrevSong();     org.junit.Assert.assertTrue("Prev function did not wrap around to ending song in list", prevSong.getName().equals("Purity")); }
https://github.com/Tenacle/FifthElement.git,SongListServiceTest,removeSongFromListTest,{     fifthelement.theelement.objects.Song toRemove = classUnderTest.getSongAtIndex(0);     classUnderTest.removeSongFromList(toRemove);     fifthelement.theelement.objects.Song shouldNotEqual = classUnderTest.getSongAtIndex(0);     org.junit.Assert.assertFalse("Remove function did not remove the song from the list", shouldNotEqual.getName().equals("Pristine")); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,getAllSongsTest,{     java.util.List<fifthelement.theelement.objects.Song> albums = songService.getSongs();// Should start with 4 songs in db      org.junit.Assert.assertTrue("getAllSongsTest: song size != 4", albums.size() == 4); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,insertSongValidTest,{     fifthelement.theelement.objects.Song song = new fifthelement.theelement.objects.Song("Some song", "Path");     songService.insertSong(song);     org.junit.Assert.assertTrue("insertSongValidTest: song size != 5", songService.getSongs().size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,updateSongWithRatingValidTest,{     fifthelement.theelement.objects.Song songOne = new fifthelement.theelement.objects.Song("A song", "Path");     songOne.setRating(1.0);     songOne.setUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     songService.insertSong(songOne);     fifthelement.theelement.objects.Song songTwo = new fifthelement.theelement.objects.Song("Other song", "Path");     songTwo.setUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     songService.updateSongWithRating(songTwo, 4.5);     fifthelement.theelement.objects.Song song = songService.getSongByUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     org.junit.Assert.assertTrue("Song rating not updated", song.getRating() == 4.5); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,createSongValidTest,{     java.lang.String path = "google.com";     java.lang.String name = "TestSong";     java.lang.String artist = "Test";     java.lang.String album = "Test Album";     java.lang.String genre = "Test Genere";     songService.createSong(path, name, artist, album, genre);     org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 5", songService.getSongs().size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,createSongInvalidTest,{     java.lang.String path = null;     java.lang.String name = null;     java.lang.String artist = null;     java.lang.String album = null;     java.lang.String genre = null;     songService.createSong(path, name, artist, album, genre);     org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 5", songService.getSongs().size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,searchTest_normalQuery,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "i";     searchResults = songService.search(regex);     org.junit.Assert.assertTrue("Normal search, should find 3 songs", searchResults.size() == 3); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,searchTest_emptyQuery,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "";     searchResults = songService.search(regex);     org.junit.Assert.assertTrue("Empty search, should be 4 | Actual size = " + searchResults.size(), searchResults.size() == 4); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,searchTest_specialCharactersRegex,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "[!@#$%&*()_+=|<>?{}\\[\\]~-]";     searchResults = songService.search(regex);     org.junit.Assert.assertTrue("Invalid Regex string,", searchResults.size() == 0); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,searchTest_invalidRegex,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "[";     searchResults = songService.search(regex);     org.junit.Assert.assertTrue("Invalid Regex single special character", searchResults.size() == 0); }
https://github.com/Tenacle/FifthElement.git,SongServiceIT,clearAllSongsTest,{     java.util.List<fifthelement.theelement.objects.Song> allSongs;     songService.clearAllSongs();     allSongs = songService.getSongs();     org.junit.Assert.assertTrue("Not all songs were deleted from library!", allSongs.isEmpty()); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,getAllSongsTest,{     java.util.List<fifthelement.theelement.objects.Song> albums = classUnderTest.getSongs();// Stub creates 3      org.junit.Assert.assertTrue("getAllSongsTest: song size != 5", albums.size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,insertSongValidTest,{     fifthelement.theelement.objects.Song song = new fifthelement.theelement.objects.Song("Some song", "Path");     classUnderTest.insertSong(song);     org.junit.Assert.assertTrue("insertSongValidTest: song size != 6", classUnderTest.getSongs().size() == 6); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,updateSongWithRatingValidTest,{     fifthelement.theelement.objects.Song songOne = new fifthelement.theelement.objects.Song("A song", "Path");     songOne.setRating(1.0);     songOne.setUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     classUnderTest.insertSong(songOne);     fifthelement.theelement.objects.Song songTwo = new fifthelement.theelement.objects.Song("Other song", "Path");     songTwo.setUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     classUnderTest.updateSongWithRating(songTwo, 4.5);     fifthelement.theelement.objects.Song song = classUnderTest.getSongByUUID(java.util.UUID.fromString("493410b3-dd0b-4b78-97bf-289f50f6e74f"));     org.junit.Assert.assertTrue("Song rating not updated", song.getRating() == 4.5); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,createSongValidTest,{     java.lang.String path = "google.com";     java.lang.String name = "TestSong";     java.lang.String artist = "Test";     java.lang.String album = "Test Album";     java.lang.String genre = "Test Genere";     classUnderTest.createSong(path, name, artist, album, genre);     org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 6", classUnderTest.getSongs().size() == 6); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,createSongInvalidTest,{     java.lang.String path = null;     java.lang.String name = null;     java.lang.String artist = null;     java.lang.String album = null;     java.lang.String genre = null;     classUnderTest.createSong(path, name, artist, album, genre);     org.junit.Assert.assertTrue("updateSongNotExistTest: song size != 6", classUnderTest.getSongs().size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,searchTest_normalQuery,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "i";     searchResults = classUnderTest.search(regex);     org.junit.Assert.assertTrue("Normal search, should find 4 songs", searchResults.size() == 4); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,searchTest_emptyQuery,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "";     searchResults = classUnderTest.search(regex);     org.junit.Assert.assertTrue("Empty search, should be 5 | Actual size = " + searchResults.size(), searchResults.size() == 5); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,searchTest_specialCharactersRegex,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "[!@#$%&*()_+=|<>?{}\\[\\]~-]";     searchResults = classUnderTest.search(regex);     org.junit.Assert.assertTrue("Invalid Regex string,", searchResults.size() == 0); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,searchTest_invalidRegex,{     java.util.List<fifthelement.theelement.objects.Song> searchResults;     java.lang.String regex = "[";     searchResults = classUnderTest.search(regex);     org.junit.Assert.assertTrue("Invalid Regex single special character", searchResults.size() == 0); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,songStatsTest_SetterGetterTest,{     // initializing them     java.util.List<fifthelement.theelement.objects.Song> songList = classUnderTest.getSongs();     int i = 0;     for (fifthelement.theelement.objects.Song song : songList) {         song.setNumPlayed(i);         org.junit.Assert.assertEquals(song.getNumPlayed(), i);         i++;     } }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,songStatsTest_getMostPlayedSong,{     java.util.List<fifthelement.theelement.objects.Song> songList = classUnderTest.getSongs();     for (fifthelement.theelement.objects.Song song : songList) {         song.setNumPlayed(0);     }     fifthelement.theelement.objects.Song mostPlayedExpected = songList.get(2);     mostPlayedExpected.setNumPlayed(10);     fifthelement.theelement.objects.Song mostPlayedActual = classUnderTest.getMostPlayedSong();     org.junit.Assert.assertEquals(mostPlayedExpected, mostPlayedActual); }
https://github.com/Tenacle/FifthElement.git,SongServiceTest,songStatsTest_getTotalSongPlays,{     java.util.List<fifthelement.theelement.objects.Song> songList = classUnderTest.getSongs();     int i = 0;     int expected = 0;     for (fifthelement.theelement.objects.Song song : songList) {         song.setNumPlayed(i);         expected += i++;     }     int actual = classUnderTest.getTotalSongPlays();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/Tenacle/FifthElement.git,AlbumPersistenceTest,testGetAllAlbums,{     java.util.List<fifthelement.theelement.objects.Album> albums = classUnderTest.getAllAlbums();     org.junit.Assert.assertTrue("testGetAllAlbums: album size == 4, actual size: " + albums.size(), albums.size() == 4); }
https://github.com/Tenacle/FifthElement.git,AlbumPersistenceTest,testInvalidGetAlbumById,{     java.util.UUID genUuid = java.util.UUID.randomUUID();     fifthelement.theelement.objects.Album album = classUnderTest.getAlbumByUUID(genUuid);     org.junit.Assert.assertTrue("testInvalidGetAlbumById: album != null", album == null); }
https://github.com/Tenacle/FifthElement.git,AuthorPersistenceTest,testGetAllAuthors,{     java.util.List<fifthelement.theelement.objects.Author> authors = classUnderTest.getAllAuthors();     org.junit.Assert.assertTrue("testGetAllAuthors: author size == 4, actual size: " + authors.size(), authors.size() == 4); }
https://github.com/Tenacle/FifthElement.git,AuthorPersistenceTest,testInvalidGetAuthorById,{     java.util.UUID genUuid = java.util.UUID.randomUUID();     fifthelement.theelement.objects.Author author = classUnderTest.getAuthorByUUID(genUuid);     org.junit.Assert.assertTrue("testInvalidGetAuthorById: author != null", author == null); }
https://github.com/Tenacle/FifthElement.git,PlaylistPersistenceTest,testGetAllPlaylists,{     java.util.List<fifthelement.theelement.objects.Playlist> playlists = classUnderTest.getAllPlaylists();     org.junit.Assert.assertTrue("testGetAllPlaylists: playlist size == 4, actual size: " + playlists.size(), playlists.size() == 4); }
https://github.com/Tenacle/FifthElement.git,PlaylistPersistenceTest,testInvalidGetPlaylistById,{     java.util.UUID genUuid = java.util.UUID.randomUUID();     fifthelement.theelement.objects.Playlist playlist = classUnderTest.getPlaylistByUUID(genUuid);     org.junit.Assert.assertTrue("testInvalidGetPlaylistById: playlist != null", playlist == null); }
https://github.com/Tenacle/FifthElement.git,SongPersistenceTest,testGetAllSongs,{     java.util.List<fifthelement.theelement.objects.Song> songs = classUnderTest.getAllSongs();     org.junit.Assert.assertTrue("testGetAllSongs: song size != 3", songs.size() == 3); }
https://github.com/Tenacle/FifthElement.git,SongPersistenceTest,testInvalidGetSongById,{     fifthelement.theelement.objects.Song song = classUnderTest.getSongByUUID(fifthelement.theelement.persistence.stubs.SongPersistenceTest.uuidFour);     org.junit.Assert.assertTrue("testInvalidGetSongById: song != null", song == null); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getVibrantSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_vibrant)); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getLightVibrantSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_light_vibrant)); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getDarkVibrantSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_dark_vibrant)); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getMutedSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_muted)); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getLightMutedSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_light_muted)); }
https://github.com/fasteque/rgb-tool.git,PaletteUtilsTest,paletteUtils_getDarkMutedSwatchDescription,{     java.lang.String description = com.fastebro.androidrgbtool.utils.PaletteUtils.getSwatchDescription(com.fastebro.androidrgbtool.palette.PaletteSwatch.SwatchType);     org.junit.Assert.assertEquals(description, mockContext.getString(R.string.swatch_dark_muted)); }
https://github.com/fasteque/rgb-tool.git,ApplicationTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.fastebro.androidrgbtool", appContext.getPackageName()); }
https://github.com/richsmith/sexytopo.git,ConnectedSurveysTest,testNoConnectedSurveysReturnNoUpdatedSurveys,{     org.hwyl.sexytopo.model.survey.Survey currentSurvey = org.hwyl.sexytopo.control.graph.ConnectedSurveysTest.getBasicSurvey("current");     java.util.Map<org.hwyl.sexytopo.model.survey.Survey, org.hwyl.sexytopo.model.graph.Space<org.hwyl.sexytopo.model.graph.Coord2D>> translated = org.hwyl.sexytopo.control.graph.ConnectedSurveys.getTranslatedConnectedSurveys(org.hwyl.sexytopo.model.graph.Projection2D.PLAN, currentSurvey, new org.hwyl.sexytopo.model.graph.Space<>());     org.junit.Assert.assertEquals(translated.size(), 0); }
https://github.com/richsmith/sexytopo.git,MetadataTranslaterTest,testActiveStationIsTranslatedToJson,{     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     java.lang.String translated = org.hwyl.sexytopo.control.io.basic.MetadataTranslater.translate(survey);     java.lang.String expected = "{\"active-station\":\"1\",\"connections\":{}}";     org.junit.Assert.assertEquals(expected, translated.replaceAll("\\s", "")); }
https://github.com/richsmith/sexytopo.git,MetadataTranslaterTest,testActiveStationIsTParsed,{     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     java.lang.String text = "{\"active-station\":\"1\",\"connections\":{}}";     org.hwyl.sexytopo.control.io.basic.MetadataTranslater.translateAndUpdate(null, survey, text);     org.junit.Assert.assertEquals(survey.getActiveStation().getName(), "1"); }
https://github.com/richsmith/sexytopo.git,MetadataTranslaterTest,testConnectedSurveyIsTranslatedToJson,{     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.mockSurveyUri(survey, "basic");     org.hwyl.sexytopo.model.survey.Survey connectedSurvey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.mockSurveyUri(connectedSurvey, "connected");     org.hwyl.sexytopo.control.io.basic.MetadataTranslaterTest.connectTwoSurveys(survey, survey.getOrigin(), connectedSurvey, connectedSurvey.getOrigin());     java.lang.String translated = org.hwyl.sexytopo.control.io.basic.MetadataTranslater.translate(survey);     org.junit.Assert.assertEquals("{\"active-station\":\"1\",\"connections\":{\"1\":[[\"connected\",\"1\"]]}}", translated.replaceAll("\\s", "")); }
https://github.com/richsmith/sexytopo.git,MetadataTranslaterTest,testConnectedSurveyJsonIsTranslatedToConnectedSurvey,{     java.lang.String json = "{\"active-station\":\"1\",\"connections\":{\"1\":[[\"connected\",\"1\"]]}}";     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.model.survey.Survey connected = new org.hwyl.sexytopo.model.survey.Survey();     try (org.mockito.MockedStatic<org.hwyl.sexytopo.control.io.basic.Loader> mockLoader = org.mockito.Mockito.mockStatic(org.hwyl.sexytopo.control.io.basic.Loader.class)) {         mockLoader.when(() -> org.hwyl.sexytopo.control.io.basic.Loader.loadSurvey(any(), any(), anySet(), anyBoolean())).thenReturn(connected);     }     org.hwyl.sexytopo.control.io.basic.MetadataTranslater.translateAndUpdate(null, survey, json);     org.junit.Assert.assertEquals(1, survey.getConnectedSurveys().size()); }
https://github.com/richsmith/sexytopo.git,PocketTopoTxtImporterTest,testGetSection,{     java.lang.String section = org.hwyl.sexytopo.control.io.thirdparty.pockettopo.PocketTopoTxtImporter.getSection(org.hwyl.sexytopo.control.io.thirdparty.pockettopo.PocketTopoTxtImporterTest.FAKE_TEXT, "DATA");     org.junit.Assert.assertEquals("1.0\t\t193.78\t0.41\t9.118\t>\n1.0\t\t328.51\t14.60\t4.709\t>", section); }
https://github.com/richsmith/sexytopo.git,PocketTopoTxtImporterTest,testGetNamedSubSection,{     java.lang.String section = org.hwyl.sexytopo.control.io.thirdparty.pockettopo.PocketTopoTxtImporter.getSection(org.hwyl.sexytopo.control.io.thirdparty.pockettopo.PocketTopoTxtImporterTest.FAKE_TEXT, "ELEVATION");     java.lang.String stationsSubSection = org.hwyl.sexytopo.control.io.thirdparty.pockettopo.PocketTopoTxtImporter.getNamedSubSection(section, "STATIONS");     org.junit.Assert.assertEquals("0.000\t0.000\t1.0\n10.335\t0.789\t1.1", stationsSubSection); }
https://github.com/richsmith/sexytopo.git,SurvexExporterTest,testCommentsAreIncluded,{     org.hwyl.sexytopo.control.io.thirdparty.survex.SurvexExporter survexExporter = new org.hwyl.sexytopo.control.io.thirdparty.survex.SurvexExporter();     org.hwyl.sexytopo.model.survey.Survey oneNorth = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorthThroughRepeats();     org.hwyl.sexytopo.model.survey.Station latest = oneNorth.getActiveStation();     java.lang.String testComment = "Comment McComment Face";     latest.setComment(testComment);     java.lang.String content = survexExporter.getContent(oneNorth);     org.junit.Assert.assertTrue(content.contains(testComment)); }
https://github.com/richsmith/sexytopo.git,SurvexImporterTest,testBasicImport,{     final java.lang.String testContent = "1\t2\t5.0\t0.0\t0.0";     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.control.io.thirdparty.survex.SurvexImporter.parse(testContent, survey);     org.junit.Assert.assertEquals(survey.getAllStations().size(), 2); }
https://github.com/richsmith/sexytopo.git,SurvexImporterTest,testBasicImportRecordsPromotions,{     final java.lang.String testContent = "1\t2\t5.0\t0.0\t0.0\t; {from: 5.0 0.0 0.0, 5.0 0.0 0.0, 5.0 0.0 0.0}";     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.control.io.thirdparty.survex.SurvexImporter.parse(testContent, survey);     org.hwyl.sexytopo.model.survey.Leg leg = survey.getOrigin().getConnectedOnwardLegs().get(0);     org.junit.Assert.assertEquals(3, leg.getPromotedFrom().length); }
https://github.com/richsmith/sexytopo.git,SurvexImporterTest,testBasicImportHandlesComments,{     final java.lang.String testContent = "1\t2\t5.0\t0.0\t0.0\t; {from: 5.0 0.0 0.0, 5.0 0.0 0.0, 5.0 0.0 0.0} testComment";     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.control.io.thirdparty.survex.SurvexImporter.parse(testContent, survey);     org.hwyl.sexytopo.model.survey.Station created = survey.getStationByName("2");     org.junit.Assert.assertEquals(created.getComment(), "testComment"); }
https://github.com/richsmith/sexytopo.git,XviExporterTest,testLineIsPassedThroughToXvi,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.testhelpers.BasicTestSketchCreator.drawOneHorizontalLine(testSurvey.getPlanSketch());     java.lang.String xvi = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviExporter.getContent(testSurvey.getPlanSketch(), org.hwyl.sexytopo.model.graph.Projection2D.PLAN.project(testSurvey), 1.0F);     org.junit.Assert.assertTrue(xvi.contains("{BLACK 5.00 0.00 10.00 0.00}")); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testGetEmptyBlockContents,{     java.lang.String simpleText = "set Command{}";     java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");     org.junit.Assert.assertEquals("", contents); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testGetEmptyBlockContentsWithWhitespace,{     java.lang.String simpleText = "set Command {}";     java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");     org.junit.Assert.assertEquals("", contents); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testGetSimpleBlockContents,{     java.lang.String simpleText = "set Command {foo}";     java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");     org.junit.Assert.assertEquals("foo", contents); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testGetNestedBlockContents,{     java.lang.String simpleText = "set Command {{foo}}";     java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");     org.junit.Assert.assertEquals("{foo}", contents); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testBadlyNestedBlockContentsRaiseError,{     java.lang.String simpleText = "set Command {{foo}";     java.lang.String contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.getBlockContents(simpleText, "set Command");     org.junit.Assert.assertEquals("{foo}", contents); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testParseBlockEntriesSingle,{     java.lang.String simpleText = "{foo}";     java.util.List<java.lang.String> contents = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.parseBlockEntries(simpleText);     org.junit.Assert.assertEquals("foo", contents.get(0)); }
https://github.com/richsmith/sexytopo.git,XviImporterTest,testParseSketchEntryGetsRightColour,{     java.lang.String simpleText = "red 0 0";     org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = org.hwyl.sexytopo.control.io.thirdparty.xvi.XviImporter.parseSketchEntry(1, simpleText);     org.junit.Assert.assertEquals(org.hwyl.sexytopo.model.sketch.Colour.RED, pathDetail.getColour()); }
https://github.com/richsmith/sexytopo.git,CrossSectionerTest,testStraightNorthCrossSection,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s2 = testSurvey.getStationByName("2");     double angle = org.hwyl.sexytopo.control.util.CrossSectioner.getAngleOfSection(testSurvey, s2);     org.junit.Assert.assertEquals(0.0, angle, org.hwyl.sexytopo.SexyTopoConstants.ALLOWED_DOUBLE_DELTA); }
https://github.com/richsmith/sexytopo.git,CrossSectionerTest,testStraightSouthCrossSection,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightSouth();     org.hwyl.sexytopo.model.survey.Station s2 = testSurvey.getStationByName("2");     double angle = org.hwyl.sexytopo.control.util.CrossSectioner.getAngleOfSection(testSurvey, s2);     org.junit.Assert.assertEquals(180.0, angle, org.hwyl.sexytopo.SexyTopoConstants.ALLOWED_DOUBLE_DELTA); }
https://github.com/richsmith/sexytopo.git,ExtendedElevationProjectionTest,testProject5MNorth,{     org.hwyl.sexytopo.model.survey.Survey survey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.graph.Space<org.hwyl.sexytopo.model.graph.Coord2D> space = org.hwyl.sexytopo.model.graph.Projection2D.EXTENDED_ELEVATION.project(survey);     java.util.Map<org.hwyl.sexytopo.model.survey.Station, org.hwyl.sexytopo.model.graph.Coord2D> stationMap = space.getStationMap();     org.hwyl.sexytopo.model.survey.Station two = survey.getStationByName("2");     org.hwyl.sexytopo.model.graph.Coord2D twoCoord = stationMap.get(two);     org.hwyl.sexytopo.model.graph.Coord2D expected = new org.hwyl.sexytopo.model.graph.Coord2D(5, 0);     org.junit.Assert.assertEquals(expected, twoCoord); }
https://github.com/richsmith/sexytopo.git,ExtendedElevationProjectionTest,testProject5MNorthReversed,{     org.hwyl.sexytopo.model.survey.Survey survey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     survey.getStationByName("2").switchDirection();     org.hwyl.sexytopo.model.graph.Space<org.hwyl.sexytopo.model.graph.Coord2D> space = org.hwyl.sexytopo.model.graph.Projection2D.EXTENDED_ELEVATION.project(survey);     java.util.Map<org.hwyl.sexytopo.model.survey.Station, org.hwyl.sexytopo.model.graph.Coord2D> stationMap = space.getStationMap();     org.hwyl.sexytopo.model.survey.Station two = survey.getStationByName("2");     org.hwyl.sexytopo.model.graph.Coord2D twoCoord = stationMap.get(two);     org.hwyl.sexytopo.model.graph.Coord2D expected = new org.hwyl.sexytopo.model.graph.Coord2D(-5, 0);     org.junit.Assert.assertEquals(expected, twoCoord); }
https://github.com/richsmith/sexytopo.git,ExtendedElevationProjectionTest,testProject5MDown,{     org.hwyl.sexytopo.model.survey.Survey survey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.create5MDown();     org.hwyl.sexytopo.model.graph.Space<org.hwyl.sexytopo.model.graph.Coord2D> space = org.hwyl.sexytopo.model.graph.Projection2D.EXTENDED_ELEVATION.project(survey);     java.util.Map<org.hwyl.sexytopo.model.survey.Station, org.hwyl.sexytopo.model.graph.Coord2D> stationMap = space.getStationMap();     org.hwyl.sexytopo.model.survey.Station two = survey.getStationByName("2");     org.hwyl.sexytopo.model.graph.Coord2D twoCoord = stationMap.get(two);     org.hwyl.sexytopo.model.graph.Coord2D expected = new org.hwyl.sexytopo.model.graph.Coord2D(0, 5);     org.junit.Assert.assertEquals(expected, twoCoord); }
https://github.com/richsmith/sexytopo.git,GraphToListTranslatorTest,testChronoListGeneration,{     org.hwyl.sexytopo.control.util.GraphToListTranslator translator = new org.hwyl.sexytopo.control.util.GraphToListTranslator();     org.hwyl.sexytopo.model.survey.Survey baseSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     baseSurvey.setActiveStation(baseSurvey.getStationByName("1"));     org.hwyl.sexytopo.control.util.SurveyUpdater.updateWithNewStation(baseSurvey, new org.hwyl.sexytopo.model.survey.Leg(5, 270, 0));     java.util.List<org.hwyl.sexytopo.control.util.GraphToListTranslator.SurveyListEntry> chronoList = translator.toChronoListOfSurveyListEntries(baseSurvey);     org.hwyl.sexytopo.control.util.GraphToListTranslator.SurveyListEntry last = chronoList.get(chronoList.size() - 1);     org.junit.Assert.assertEquals("5", last.getLeg().getDestination().getName()); }
https://github.com/richsmith/sexytopo.git,Space2DUtilsTest,testSimplifyEmpty,{     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> path = new java.util.ArrayList<>();     java.util.List<org.hwyl.sexytopo.model.graph.Coord2D> simplifiedPath = org.hwyl.sexytopo.control.util.Space2DUtils.simplify(path, 1);     org.junit.Assert.assertEquals(path, simplifiedPath); }
https://github.com/richsmith/sexytopo.git,Space2DUtilsTest,testSimplifyPoint,{     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> path = new java.util.ArrayList<>();     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     java.util.List<org.hwyl.sexytopo.model.graph.Coord2D> simplifiedPath = org.hwyl.sexytopo.control.util.Space2DUtils.simplify(path, 1);     // a single point gets converted to a line with coincident points     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> expectedPath = new java.util.ArrayList<>();     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     org.junit.Assert.assertEquals(expectedPath, simplifiedPath); }
https://github.com/richsmith/sexytopo.git,Space2DUtilsTest,testSimplifyLine,{     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> path = new java.util.ArrayList<>();     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 0));     java.util.List<org.hwyl.sexytopo.model.graph.Coord2D> simplifiedPath = org.hwyl.sexytopo.control.util.Space2DUtils.simplify(path, 0.01F);     org.junit.Assert.assertEquals(path, simplifiedPath); }
https://github.com/richsmith/sexytopo.git,Space2DUtilsTest,testSimplifyStraightPath,{     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> path = new java.util.ArrayList<>();     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(20, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(30, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(40, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(50, 0));     float epsilon = org.hwyl.sexytopo.control.util.Space2DUtils.simplificationEpsilon(50, 50);     java.util.List<org.hwyl.sexytopo.model.graph.Coord2D> simplifiedPath = org.hwyl.sexytopo.control.util.Space2DUtils.simplify(path, epsilon);     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> expectedPath = new java.util.ArrayList<>();     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(50, 0));     org.junit.Assert.assertEquals(expectedPath, simplifiedPath); }
https://github.com/richsmith/sexytopo.git,Space2DUtilsTest,testSimplifyRightAngledPath,{     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> path = new java.util.ArrayList<>();     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(5, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 0));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 5));     path.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 10));     float epsilon = org.hwyl.sexytopo.control.util.Space2DUtils.simplificationEpsilon(10, 10);     java.util.List<org.hwyl.sexytopo.model.graph.Coord2D> simplifiedPath = org.hwyl.sexytopo.control.util.Space2DUtils.simplify(path, epsilon);     java.util.ArrayList<org.hwyl.sexytopo.model.graph.Coord2D> expectedPath = new java.util.ArrayList<>();     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0));     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 0));     expectedPath.add(new org.hwyl.sexytopo.model.graph.Coord2D(10, 10));     org.junit.Assert.assertEquals(expectedPath, simplifiedPath); }
https://github.com/richsmith/sexytopo.git,StationNamerTest,testNameAdvancesDigitInStraightLine,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     java.lang.String newName = org.hwyl.sexytopo.control.util.StationNamer.generateNextStationName(testSurvey, testSurvey.getActiveStation());     int numberOfStations = testSurvey.getAllStations().size();     org.junit.Assert.assertEquals(java.lang.Integer.toString(numberOfStations + 1), newName); }
https://github.com/richsmith/sexytopo.git,StationNamerTest,testNameAdvancesNumberOnPotentialBranch,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     java.lang.String newName = org.hwyl.sexytopo.control.util.StationNamer.generateNextStationName(testSurvey, testSurvey.getStationByName("1"));     int numberOfStations = testSurvey.getAllStations().size();     org.junit.Assert.assertEquals(java.lang.Integer.toString(numberOfStations + 1), newName); }
https://github.com/richsmith/sexytopo.git,StationNamerTest,testNameAdvancesNumberOnEstablishedBranch,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorthWith1EBranch();     java.lang.String newName = org.hwyl.sexytopo.control.util.StationNamer.generateNextStationName(testSurvey, testSurvey.getStationByName("5"));     int numberOfStations = testSurvey.getAllStations().size();     org.junit.Assert.assertEquals(java.lang.Integer.toString(numberOfStations + 1), newName); }
https://github.com/richsmith/sexytopo.git,StationNamerTest,testNameAdvancesNumberFromMiddleOfBranch,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorthWith2EBranch();     java.lang.String newName = org.hwyl.sexytopo.control.util.StationNamer.generateNextStationName(testSurvey, testSurvey.getStationByName("5"));     int numberOfStations = testSurvey.getAllStations().size();     org.junit.Assert.assertEquals(java.lang.Integer.toString(numberOfStations + 1), newName); }
https://github.com/richsmith/sexytopo.git,StationRenameTest,testGetStationByNameGetsExistingStation,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s1 = testSurvey.getStationByName("1");     org.junit.Assert.assertEquals("1", s1.getName()); }
https://github.com/richsmith/sexytopo.git,StationRenameTest,testGetStationByNameCanFail,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station shouldBeNull = testSurvey.getStationByName("I DO NOT EXIST :P");     org.junit.Assert.assertNull(shouldBeNull); }
https://github.com/richsmith/sexytopo.git,StationRenameTest,testRenameOriginStation,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s1 = testSurvey.getStationByName("1");     org.hwyl.sexytopo.control.util.SurveyUpdater.renameStation(testSurvey, s1, "ShinyNewNameOrigin");     org.hwyl.sexytopo.model.survey.Station shinyNewStation = testSurvey.getStationByName("ShinyNewNameOrigin");     org.junit.Assert.assertEquals("ShinyNewNameOrigin", shinyNewStation.getName()); }
https://github.com/richsmith/sexytopo.git,StationRenameTest,testRenameStation,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s2 = testSurvey.getStationByName("2");     org.hwyl.sexytopo.control.util.SurveyUpdater.renameStation(testSurvey, s2, "ShinyNewName");     org.hwyl.sexytopo.model.survey.Station shinyNewStation = testSurvey.getStationByName("ShinyNewName");     org.junit.Assert.assertEquals("ShinyNewName", shinyNewStation.getName()); }
https://github.com/richsmith/sexytopo.git,SurveyUpdaterTest,testUpdateWithOneLegAddsOneLegToSurvey,{     org.hwyl.sexytopo.model.survey.Leg leg = new org.hwyl.sexytopo.model.survey.Leg(5, 0, 0);     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.control.util.SurveyUpdater.update(survey, leg);     org.junit.Assert.assertEquals(survey.getAllLegs().size(), 1); }
https://github.com/richsmith/sexytopo.git,SurveyUpdaterTest,testUpdateWithThreeSimilarLegsLeadsToNewStation,{     org.hwyl.sexytopo.model.survey.Leg leg = new org.hwyl.sexytopo.model.survey.Leg(5, 0, 0);     org.hwyl.sexytopo.model.survey.Leg similarLeg = new org.hwyl.sexytopo.model.survey.Leg(5, 0.001F, 0);     org.hwyl.sexytopo.model.survey.Leg anotherSimilarLeg = new org.hwyl.sexytopo.model.survey.Leg(5, 0, 0.001F);     org.hwyl.sexytopo.model.survey.Survey survey = new org.hwyl.sexytopo.model.survey.Survey();     org.hwyl.sexytopo.control.util.SurveyUpdater.update(survey, leg);     org.hwyl.sexytopo.control.util.SurveyUpdater.update(survey, similarLeg);     org.hwyl.sexytopo.control.util.SurveyUpdater.update(survey, anotherSimilarLeg);     org.junit.Assert.assertEquals(survey.getAllStations().size(), 2); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumber,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("S1");     org.junit.Assert.assertEquals("S2", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumber2,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("S2-1.1");     org.junit.Assert.assertEquals("S2-1.2", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumber3,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("1");     org.junit.Assert.assertEquals("2", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumber4,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("foo");     org.junit.Assert.assertEquals("foo1", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumber5,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("a99f");     org.junit.Assert.assertEquals("a100f", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumberWithZeroPadding1,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("a01f");     org.junit.Assert.assertEquals("a02f", advanced); }
https://github.com/richsmith/sexytopo.git,TextToolsTest,testAdvanceLastNumberWithZeroPadding2,{     java.lang.String advanced = org.hwyl.sexytopo.control.util.TextTools.advanceLastNumber("a09f");     org.junit.Assert.assertEquals("a10f", advanced); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteGx,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_ACCELERATION_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GX_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GX_HIGH_BYTE);     org.junit.Assert.assertEquals(-79, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteGy,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_ACCELERATION_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GY_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GY_HIGH_BYTE);     org.junit.Assert.assertEquals(-603, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteGz,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_ACCELERATION_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.ACCELERATION_GZ_HIGH_BYTE);     org.junit.Assert.assertEquals(24785, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteMx,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_MAGNETIC_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MX_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MX_HIGH_BYTE);     org.junit.Assert.assertEquals(7978, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteMy,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_MAGNETIC_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MY_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MY_HIGH_BYTE);     org.junit.Assert.assertEquals(-1607, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,CalibrationProtocolTest,testReadDoubleByteMz,{     double result = org.hwyl.sexytopo.comms.distox.CalibrationProtocol.readDoubleByte(TEST_MAGNETIC_PACKET, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_LOW_BYTE, org.hwyl.sexytopo.comms.distox.CalibrationProtocol.MAGNETIC_MZ_HIGH_BYTE);     org.junit.Assert.assertEquals(16090, result, org.hwyl.sexytopo.comms.CalibrationProtocolTest.ALLOWED_DELTA); }
https://github.com/richsmith/sexytopo.git,DistoXBleManagerTest,testCreateWritePacket,{     java.lang.Byte command = 0x30;     java.lang.Byte[] packet = org.hwyl.sexytopo.comms.distoxble.DistoXBleManager.createWriteCommandPacket(command);     org.junit.Assert.assertEquals(9, packet.length); }
https://github.com/richsmith/sexytopo.git,DistoXProtocolTest,testAcknowledgePacketMatchesByteEndingIn1,{     byte control = 0b1;     byte[] packet = new byte[]{ control, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i };     byte actual = org.hwyl.sexytopo.comms.distox.DistoXProtocol.createAcknowledgementPacket(packet)[0];     org.junit.Assert.assertEquals(((byte) (0b1010101)), actual); }
https://github.com/richsmith/sexytopo.git,DistoXProtocolTest,testAcknowledgePacketMatchesByteEndingIn0,{     byte control = 0b10;     byte[] packet = new byte[]{ control, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i, org.hwyl.sexytopo.comms.DistoXProtocolTest.i };     byte actual = org.hwyl.sexytopo.comms.distox.DistoXProtocol.createAcknowledgementPacket(packet)[0];     org.junit.Assert.assertEquals(((byte) (0b1010101)), actual); }
https://github.com/richsmith/sexytopo.git,MeasurementProtocolTest,testFlatMeasurementGetsParsedCorrectly,{     byte[] packet = new byte[]{ 1, -31, 7, -94, 50, 58, 3, -5 };     org.junit.Assert.assertTrue(org.hwyl.sexytopo.comms.distox.MeasurementProtocol.isDataPacket(packet));     org.hwyl.sexytopo.model.survey.Leg actual = org.hwyl.sexytopo.comms.distox.MeasurementProtocol.parseDataPacket(packet);     org.hwyl.sexytopo.model.survey.Leg expected = new org.hwyl.sexytopo.model.survey.Leg(2.017F, 71.2F, 4.5F);     org.hwyl.sexytopo.comms.MeasurementProtocolTest.assertLegEquality(expected, actual); }
https://github.com/richsmith/sexytopo.git,MeasurementProtocolTest,testDownMeasurementGetsParsedCorrectly,{     byte[] packet = new byte[]{ 1, 84, 3, 113, -87, -83, -54, -13 };     org.junit.Assert.assertTrue(org.hwyl.sexytopo.comms.distox.MeasurementProtocol.isDataPacket(packet));     org.hwyl.sexytopo.model.survey.Leg actual = org.hwyl.sexytopo.comms.distox.MeasurementProtocol.parseDataPacket(packet);     org.hwyl.sexytopo.model.survey.Leg expected = new org.hwyl.sexytopo.model.survey.Leg(0.852F, 238.3F, -75.0F);     org.hwyl.sexytopo.comms.MeasurementProtocolTest.assertLegEquality(expected, actual); }
https://github.com/richsmith/sexytopo.git,TestSurveyCreatorTest,testCreateDoesNotThrowException,{     org.hwyl.sexytopo.demo.TestSurveyCreator.create(10, 10);     org.junit.Assert.assertTrue(true); }
https://github.com/richsmith/sexytopo.git,Coord2DTest,testBasicEquality,{     org.hwyl.sexytopo.model.graph.Coord2D origin = org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN;     org.hwyl.sexytopo.model.graph.Coord2D zeroes = new org.hwyl.sexytopo.model.graph.Coord2D(0, 0);     org.junit.Assert.assertEquals(origin, zeroes); }
https://github.com/richsmith/sexytopo.git,Coord3DTest,testBasicEquality,{     org.hwyl.sexytopo.model.graph.Coord3D origin = org.hwyl.sexytopo.model.graph.Coord3D.ORIGIN;     org.hwyl.sexytopo.model.graph.Coord3D zeroes = new org.hwyl.sexytopo.model.graph.Coord3D(0, 0, 0);     org.junit.Assert.assertEquals(origin, zeroes); }
https://github.com/richsmith/sexytopo.git,PathDetailTest,testIntersectsRectangleReturnsTrueForIntersectingRectangle,{     org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);     org.junit.Assert.assertTrue(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(0, 0), new org.hwyl.sexytopo.model.graph.Coord2D(1, 1))); }
https://github.com/richsmith/sexytopo.git,PathDetailTest,testIntersectsRectangleReturnsFalseForNonIntersectingRectangle,{     org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);     org.junit.Assert.assertFalse(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2))); }
https://github.com/richsmith/sexytopo.git,PathDetailTest,testIntersectsRectangleReturnsTrueForRectangleThatEntersBoundingBox,{     org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);     pathDetail.lineTo(new org.hwyl.sexytopo.model.graph.Coord2D(1.5F, 1.5F));     org.junit.Assert.assertTrue(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(1, 1), new org.hwyl.sexytopo.model.graph.Coord2D(2, 2))); }
https://github.com/richsmith/sexytopo.git,PathDetailTest,testIntersectsRectangleReturnsFalseForRectangleOutsideBoundingBox,{     org.hwyl.sexytopo.model.sketch.PathDetail pathDetail = new org.hwyl.sexytopo.model.sketch.PathDetail(org.hwyl.sexytopo.model.graph.Coord2D.ORIGIN, org.hwyl.sexytopo.model.sketch.Colour.BLACK);     pathDetail.lineTo(new org.hwyl.sexytopo.model.graph.Coord2D(1.5F, 1.5F));     org.junit.Assert.assertFalse(pathDetail.intersectsRectangle(new org.hwyl.sexytopo.model.graph.Coord2D(2, 2), new org.hwyl.sexytopo.model.graph.Coord2D(3, 3))); }
https://github.com/richsmith/sexytopo.git,StationTest,testSetNameSanitisesName,{     org.hwyl.sexytopo.model.survey.Station station = new org.hwyl.sexytopo.model.survey.Station("1");     station.setName("8\n");     org.junit.Assert.assertEquals("8", station.getName()); }
https://github.com/richsmith/sexytopo.git,SurveyTest,testAddedLegCanBeUndone,{     org.hwyl.sexytopo.model.survey.Survey baseSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     baseSurvey.undoAddLeg();     org.junit.Assert.assertEquals(2, baseSurvey.getAllLegs().size()); }
https://github.com/richsmith/sexytopo.git,SurveyTest,testAddedSplayCanBeUndone,{     org.hwyl.sexytopo.model.survey.Survey baseSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.control.util.SurveyUpdater.update(baseSurvey, new org.hwyl.sexytopo.model.survey.Leg(5, 0, 0));     baseSurvey.undoAddLeg();     org.junit.Assert.assertEquals(3, baseSurvey.getAllLegs().size()); }
https://github.com/richsmith/sexytopo.git,LrudTest,testStraightNorthCrossSectionLeftSplay,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s2 = testSurvey.getStationByName("2");     double angle = org.hwyl.sexytopo.control.util.CrossSectioner.getAngleOfSection(testSurvey, s2);     org.hwyl.sexytopo.model.survey.Leg splay = org.hwyl.sexytopo.model.table.LRUD.LEFT.createSplay(testSurvey, s2, 5);     org.junit.Assert.assertEquals(270.0, splay.getAzimuth(), org.hwyl.sexytopo.SexyTopoConstants.ALLOWED_DOUBLE_DELTA); }
https://github.com/richsmith/sexytopo.git,LrudTest,testStraightNorthCrossSectionRightSplay,{     org.hwyl.sexytopo.model.survey.Survey testSurvey = org.hwyl.sexytopo.testhelpers.BasicTestSurveyCreator.createStraightNorth();     org.hwyl.sexytopo.model.survey.Station s2 = testSurvey.getStationByName("2");     double angle = org.hwyl.sexytopo.control.util.CrossSectioner.getAngleOfSection(testSurvey, s2);     org.hwyl.sexytopo.model.survey.Leg splay = org.hwyl.sexytopo.model.table.LRUD.RIGHT.createSplay(testSurvey, s2, 5);     org.junit.Assert.assertEquals(90.0, splay.getAzimuth(), org.hwyl.sexytopo.SexyTopoConstants.ALLOWED_DOUBLE_DELTA); }
https://github.com/koelleChristian/trickytripper.git,ApiResponseTest,testJSONShitTest,{     java.lang.String JSON_STRING = "{\"EUR_USD\":{\"val\":1.174549}}";     org.json.JSONObject object = new org.json.JSONObject(JSON_STRING.replace("\"", "'"));     java.lang.System.out.println(object.get("EUR_USD"));     org.junit.Assert.assertEquals("1.174549", new org.json.JSONObject(object.get(object.keys().next()).toString()).getString("val")); }
https://github.com/koelleChristian/trickytripper.git,DeleteTripTest,testDeleteTrip,{     de.koelle.christian.trickytripper.dataaccess.impl.DataManagerImpl dataManager = new de.koelle.christian.trickytripper.dataaccess.impl.DataManagerImpl(androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().getTargetContext());     dataManager.removeAll();     long tripId = dataManager.persistTrip(de.koelle.christian.trickytripper.factories.ModelFactory.createNewTrip("MyTrip", java.util.Currency.getInstance("USD"))).getId();     de.koelle.christian.trickytripper.model.Participant p1 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Tony", true));     de.koelle.christian.trickytripper.model.Participant p2 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Steve", false));     de.koelle.christian.trickytripper.model.Participant p3 = dataManager.persistParticipantInTrip(tripId, de.koelle.christian.trickytripper.factories.ModelFactory.createNewParticipant("Bruce", false));     /* Payment 01 */     de.koelle.christian.trickytripper.model.Payment payment01In = de.koelle.christian.trickytripper.factories.ModelFactory.createNewPayment("MyDescription01", de.koelle.christian.trickytripper.model.PaymentCategory.BEVERAGES);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 33.2, "EUR", true, p1);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 10.1, "EUR", false, p1);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 11.1, "EUR", false, p2);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment01In, 12.0, "EUR", false, p3);     dataManager.persistPaymentInTrip(tripId, payment01In);     /* Payment 02 */     de.koelle.christian.trickytripper.model.Payment payment02In = de.koelle.christian.trickytripper.factories.ModelFactory.createNewPayment("MyDescription02", de.koelle.christian.trickytripper.model.PaymentCategory.GAS);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment02In, 10.0, "USD", true, p1);     de.koelle.christian.trickytripper.dataaccess.suite.util.ModelSetupUtil.addAmountToPayment(payment02In, 10.0, "USD", false, p2);     dataManager.persistPaymentInTrip(tripId, payment02In);     de.koelle.christian.trickytripper.model.TripSummary tripSummary = new de.koelle.christian.trickytripper.model.TripSummary();     tripSummary.setId(tripId);     dataManager.deleteTrip(tripSummary);     org.junit.Assert.assertEquals(null, dataManager.loadTripById(tripId)); }
https://github.com/lexica/lexica.git,FullTrieTest,testEnUsDictionary,{     com.serwylo.lexica.lang.Language language = new com.serwylo.lexica.lang.EnglishUS();     java.lang.String[] words = com.serwylo.lexica.trie.tests.FullTrieTest.readDictionary(language);     org.junit.Assert.assertEquals(77517, words.length);     net.healeys.trie.Trie trie = new net.healeys.trie.StringTrie(language);     com.serwylo.lexica.trie.tests.TrieTest.addWords(trie, words);     com.serwylo.lexica.trie.tests.TrieTest.assertTrieMatches("After adding entire US dictionary to a new Trie", trie, words, new com.serwylo.lexica.lang.EnglishUS()); }
https://github.com/lexica/lexica.git,FullTrieTest,testEnGbDictionary,{     com.serwylo.lexica.lang.Language language = new com.serwylo.lexica.lang.EnglishGB();     java.lang.String[] words = com.serwylo.lexica.trie.tests.FullTrieTest.readDictionary(language);     org.junit.Assert.assertEquals(77097, words.length);     net.healeys.trie.Trie trie = new net.healeys.trie.StringTrie(language);     com.serwylo.lexica.trie.tests.TrieTest.addWords(trie, words);     com.serwylo.lexica.trie.tests.TrieTest.assertTrieMatches("After adding entire UK dictionary to a new Trie", trie, words, new com.serwylo.lexica.lang.EnglishGB()); }
https://github.com/lexica/lexica.git,FullTrieTest,testFrenchDictionary,{     com.serwylo.lexica.lang.Language language = new com.serwylo.lexica.lang.French();     java.lang.String[] words = com.serwylo.lexica.trie.tests.FullTrieTest.readDictionary(language);     org.junit.Assert.assertEquals(144582, words.length);     net.healeys.trie.Trie trie = new net.healeys.trie.StringTrie(language);     com.serwylo.lexica.trie.tests.TrieTest.addWords(trie, words);     com.serwylo.lexica.trie.tests.TrieTest.assertTrieMatches("After adding entire French dictionary to a new Trie", trie, words, new com.serwylo.lexica.lang.French()); }
https://github.com/lexica/lexica.git,FullTrieTest,testPersianDictionary,{     com.serwylo.lexica.lang.Language language = new com.serwylo.lexica.lang.Persian();     java.lang.String[] words = com.serwylo.lexica.trie.tests.FullTrieTest.readDictionary(language);     org.junit.Assert.assertEquals(166715, words.length);     net.healeys.trie.Trie trie = new net.healeys.trie.StringTrie(language);     com.serwylo.lexica.trie.tests.TrieTest.addWords(trie, words);     com.serwylo.lexica.trie.tests.TrieTest.assertTrieMatches("After adding entire Persian dictionary to a new Trie", trie, words, new com.serwylo.lexica.lang.Persian()); }
https://github.com/lexica/lexica.git,LetterFrequencyTest,countUnicodeLetters,{     com.serwylo.lexica.trie.util.LetterFrequency letters = new com.serwylo.lexica.trie.util.LetterFrequency(new com.serwylo.lexica.lang.Persian());     letters.addWord("ﻒﻗﺮﻫ");     org.junit.Assert.assertEquals(4, letters.getLetters().size());     com.serwylo.lexica.trie.tests.LetterFrequencyTest.assertCounts(letters.getCountsForLetter("ﻒ"), 1);     com.serwylo.lexica.trie.tests.LetterFrequencyTest.assertCounts(letters.getCountsForLetter("ﻗ"), 1);     com.serwylo.lexica.trie.tests.LetterFrequencyTest.assertCounts(letters.getCountsForLetter("ﻫ"), 1);     com.serwylo.lexica.trie.tests.LetterFrequencyTest.assertCounts(letters.getCountsForLetter("ﺮ"), 1); }
https://github.com/lexica/lexica.git,BoardTransitionTest,persianBoard,{     java.lang.String[] board = new java.lang.String[]{ "و", "ﻗ", "ن", "ﻫ", "ﻒ", "ز", "ﺮ", "ا", "ﻒ", "غ", "ا", "م", "ﻒ", "ه", "ﺮ", "ی" };     net.healeys.trie.StringTrie trie = new net.healeys.trie.StringTrie(new com.serwylo.lexica.lang.Persian());     trie.addWord("وزغهایمان");     com.serwylo.lexica.TrieTest.assertTrieMatches("Contains Persian word وزغهایمان", trie, new java.lang.String[]{ "وزغهایمان" }, new java.lang.String[]{ "non Persian word" });     java.util.Map<java.lang.String, java.util.List<net.healeys.trie.Solution>> solutions = trie.solver(new com.serwylo.lexica.game.FourByFourBoard(board), new net.healeys.trie.WordFilter.MinLength(3));     org.junit.Assert.assertEquals(1, solutions.size()); }
https://github.com/dsolonenko/financisto.git,LegacyDatabaseRestoreTest,should_restore_account_totals,{     // given     java.lang.String backupFileContent = ru.orangesoftware.financisto.utils.FileUtils.testFileAsString("20180116_125426_694.backup");     // when     restoreDatabase(backupFileContent);     // then     ru.orangesoftware.financisto.model.Account account = getAccount();     org.junit.Assert.assertThat(account.totalAmount, org.hamcrest.Matchers.is(375L)); }
https://github.com/dsolonenko/financisto.git,AccountTotalTest,should_update_account_total_when_regular_split_is_updated,{     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(1000).create();     assertAccountTotal(a1, 1000);     ru.orangesoftware.financisto.model.Transaction t = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(500).withSplit(categoriesMap.get("A1"), 400).withSplit(categoriesMap.get("A2"), 100).create();     assertAccountTotal(a1, 1500);     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t.id);     org.junit.Assert.assertEquals(2, splits.size());     t.fromAmount = 800;     splits.get(0).fromAmount = 500;     splits.get(1).fromAmount = 300;     t.splits = splits;     db.insertOrUpdate(t);     assertAccountTotal(a1, 1800);     db.recalculateAccountsBalances();     assertAccountTotal(a1, 1800); }
https://github.com/dsolonenko/financisto.git,DatabaseAdapterTest,should_remember_last_used_transaction_for_the_payee,{     // when     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(1000).payee("Payee1").category(categoriesMap.get("A1")).create();     // then     ru.orangesoftware.financisto.model.Payee p = db.findEntityByTitle(ru.orangesoftware.financisto.model.Payee.class, "Payee1");     org.junit.Assert.assertEquals(categoriesMap.get("A1").id, p.lastCategoryId); }
https://github.com/dsolonenko/financisto.git,DatabaseAdapterTest,should_not_return_split_category_as_parent_when_editing_a_category,{     java.util.List<ru.orangesoftware.financisto.model.Category> list = db.getCategoriesWithoutSubtreeAsList(categoriesMap.get("A").id);     for (ru.orangesoftware.financisto.model.Category category : list) {         org.junit.Assert.assertFalse("Should not be split", category.isSplit());     } }
https://github.com/dsolonenko/financisto.git,MyDatabaseTest,should_set_split_status_when_inserting_new_transaction,{     // when     ru.orangesoftware.financisto.model.Transaction t = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(1000).withSplit(categoriesMap.get("A1"), 100).withSplit(categoriesMap.get("A2"), 900).withStatus(ru.orangesoftware.financisto.model.TransactionStatus.CL).create();     // then     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t.id);     for (ru.orangesoftware.financisto.model.Transaction split : splits) {         org.junit.Assert.assertEquals(t.status, split.status);     } }
https://github.com/dsolonenko/financisto.git,MyDatabaseTest,should_update_split_status_when_changing_status_of_the_parent_transaction,{     // given     ru.orangesoftware.financisto.model.Transaction t = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(1000).withSplit(categoriesMap.get("A1"), 100).withSplit(categoriesMap.get("A2"), 900).create();     // when     t.status = ru.orangesoftware.financisto.model.TransactionStatus.CL;     db.insertOrUpdate(t);     // then     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t.id);     for (ru.orangesoftware.financisto.model.Transaction split : splits) {         org.junit.Assert.assertEquals(t.status, split.status);     } }
https://github.com/dsolonenko/financisto.git,RunningBalanceTest,should_update_running_balance_for_two_accounts_with_transfer_split,{     ru.orangesoftware.financisto.model.Transaction t1 = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(1000).create();     ru.orangesoftware.financisto.model.Transaction t2 = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a2).amount(2000).create();     db.rebuildRunningBalances();     ru.orangesoftware.financisto.model.Transaction t3 = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(-100).withTransferSplit(a2, -100, 50).create();     assertAccountBalanceForTransaction(t1, a1, 1000);     assertAccountBalanceForTransaction(t2, a2, 2000);     assertAccountBalanceForTransaction(t3, a1, 900);     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t3.id);     org.junit.Assert.assertEquals(1, splits.size());     // running balance is attach to the split, not to the parent transaction!     assertAccountBalanceForTransaction(splits.get(0), a2, 2050);     assertFinalBalanceForAccount(a1, 900);     assertFinalBalanceForAccount(a2, 2050);     db.rebuildRunningBalances();     assertAccountBalanceForTransaction(splits.get(0), a2, 2050);     assertFinalBalanceForAccount(a1, 900);     assertFinalBalanceForAccount(a2, 2050); }
https://github.com/dsolonenko/financisto.git,RunningBalanceTest,should_update_running_balance_for_two_accounts_with_transfer_split_with_multiple_transfers,{     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(2000).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a2).amount(3000).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a3).amount(4000).create();     db.rebuildRunningBalances();     ru.orangesoftware.financisto.model.Transaction t4 = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(-1000).withTransferSplit(a2, -100, 50).withTransferSplit(a2, -200, 60).withTransferSplit(a2, -300, 70).withTransferSplit(a3, -100, 80).withTransferSplit(a3, -300, 90).create();     assertFinalBalanceForAccount(a1, 1000);     assertFinalBalanceForAccount(a2, 3180);     assertFinalBalanceForAccount(a3, 4170);     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t4.id);     org.junit.Assert.assertEquals(5, splits.size());     assertAccountBalanceForTransaction(splits.get(0), a2, 3050);     assertAccountBalanceForTransaction(splits.get(1), a2, 3110);     assertAccountBalanceForTransaction(splits.get(2), a2, 3180);     assertAccountBalanceForTransaction(splits.get(3), a3, 4080);     assertAccountBalanceForTransaction(splits.get(4), a3, 4170);     db.rebuildRunningBalances();     assertFinalBalanceForAccount(a1, 1000);     assertFinalBalanceForAccount(a2, 3180);     assertFinalBalanceForAccount(a3, 4170);     db.deleteTransaction(t4.id);     assertFinalBalanceForAccount(a1, 2000);     assertFinalBalanceForAccount(a2, 3000);     assertFinalBalanceForAccount(a3, 4000); }
https://github.com/dsolonenko/financisto.git,TransactionsTotalCalculatorTest,should_calculate_account_total_in_home_currency_with_big_amounts,{     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2012, 1, 10)).amount(45000000000L).create();     // no conversion     org.junit.Assert.assertEquals(45000000000L + ((long) ((((((-100.0F) + 100.0F) - 50.0F) - 450.0F) - 50.0F) - 150.0F)), c.getAccountBalance(c1, a1.id).balance); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_include_header,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(ru.orangesoftware.financisto.model.Currency.EMPTY, ',', true, false, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     org.junit.Assert.assertEquals("date,time,account,amount,currency,original amount,original currency,category,parent,payee,location,project,note\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_export_regular_transaction,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(createExportCurrency(), ',', false, false, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 3).at(22, 34, 55, 10)).account(a1).amount(-123456).category(categoriesMap.get("AA1")).payee("P1").location("Home").project("P1").note("My note").create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 4).at(23, 34, 55, 10)).account(a1).amount(-789).originalAmount(a2.currency, -888).category(categoriesMap.get("AA1")).payee("P1").location("Home").project("P1").note("My note").create();     org.junit.Assert.assertEquals("2011-08-04,23:34:55,My Cash Account,-7.89,SGD,-8.88,CZK,AA1,A:A1,P1,Home,P1,My note\n" + "2011-08-03,22:34:55,My Cash Account,-1234.56,SGD,\"\",\"\",AA1,A:A1,P1,Home,P1,My note\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_export_regular_transfer,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(createExportCurrency(), ',', false, false, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     ru.orangesoftware.financisto.test.TransferBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 3).at(22, 46, 0, 0)).fromAccount(a1).fromAmount(-450000).toAccount(a2).toAmount(25600).create();     org.junit.Assert.assertEquals("2011-08-03,22:46:00,My Cash Account,-4500.00,SGD,\"\",\"\",\"\",\"\",\"\",Transfer Out,<NO_PROJECT>,\n" + "2011-08-03,22:46:00,My Bank Account,256.00,CZK,\"\",\"\",\"\",\"\",\"\",Transfer In,<NO_PROJECT>,\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_export_split_transaction,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(createExportCurrency(), ',', false, true, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 3).at(22, 34, 55, 10)).account(a1).amount(-2000).payee("P1").location("Home").project("R1").note("My note").withSplit(categoriesMap.get("A1"), -500).withSplit(categoriesMap.get("A2"), -1500).create();     org.junit.Assert.assertEquals(("2011-08-03,22:34:55,My Cash Account,-20.00,SGD,\"\",\"\",SPLIT,\"\",P1,Home,R1,My note\n" + "~,\"\",My Cash Account,-5.00,SGD,\"\",\"\",A1,A,P1,\"\",<NO_PROJECT>,\n") + "~,\"\",My Cash Account,-15.00,SGD,\"\",\"\",A2,A,P1,\"\",<NO_PROJECT>,\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_export_split_transfer,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(createExportCurrency(), ',', false, true, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 3).at(22, 34, 55, 10)).account(a1).amount(-500).payee("P1").location("Home").project("R1").note("My note").withTransferSplit(a2, -500, +100).create();     org.junit.Assert.assertEquals(("2011-08-03,22:34:55,My Cash Account,-5.00,SGD,\"\",\"\",SPLIT,\"\",P1,Home,R1,My note\n" + "~,\"\",My Cash Account,-5.00,SGD,\"\",\"\",\"\",\"\",\"\",Transfer Out,<NO_PROJECT>,\n") + "~,\"\",My Bank Account,1.00,CZK,\"\",\"\",\"\",\"\",\"\",Transfer In,<NO_PROJECT>,\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvExportTest,should_not_export_split_transactions_if_not_set_in_options,{     ru.orangesoftware.financisto.export.csv.CsvExportOptions options = new ru.orangesoftware.financisto.export.csv.CsvExportOptions(createExportCurrency(), ',', false, false, false, ru.orangesoftware.financisto.filter.WhereFilter.empty(), false);     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 8, 3).at(22, 34, 55, 10)).account(a1).amount(-2000).payee("P1").location("Home").project("R1").note("My note").withSplit(categoriesMap.get("A1"), -500).withSplit(categoriesMap.get("A2"), -1500).create();     org.junit.Assert.assertEquals("2011-08-03,22:34:55,My Cash Account,-20.00,SGD,\"\",\"\",SPLIT,\"\",P1,Home,R1,My note\n", exportAsString(options)); }
https://github.com/dsolonenko/financisto.git,CsvImportTest,should_collect_all_categories_from_transactions,{     // given     csvImport = new ru.orangesoftware.financisto.export.csv.CsvImport(db, defaultOptions);     java.util.List<ru.orangesoftware.financisto.export.csv.CsvTransaction> transactions = new java.util.LinkedList<ru.orangesoftware.financisto.export.csv.CsvTransaction>();     transactions.add(newCsvTransactionWithCategory(null, "A"));     transactions.add(newCsvTransactionWithCategory("", "A"));     transactions.add(newCsvTransactionWithCategory("A", "A1"));     transactions.add(newCsvTransactionWithCategory("A", "A2"));     transactions.add(newCsvTransactionWithCategory("A:A1", "AA1"));     transactions.add(newCsvTransactionWithCategory("B:B1", "BB1"));     transactions.add(newCsvTransactionWithCategory("B", "B2"));     // when     java.util.Set<ru.orangesoftware.financisto.export.CategoryInfo> categories = csvImport.collectCategories(transactions);     // then     org.junit.Assert.assertEquals(asCategoryInfoSet("A", "A:A1", "A:A2", "A:A1:AA1", "B:B1:BB1", "B:B2"), categories); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_empty_account,{     createFirstAccount();     org.junit.Assert.assertEquals((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_transaction_amount_according_to_the_config,{     ru.orangesoftware.financisto.model.Account a = createFirstAccount();     ru.orangesoftware.financisto.model.Currency c = new ru.orangesoftware.financisto.model.Currency();     c.decimals = 1;     c.decimalSeparator = "','";     c.groupSeparator = "''";     c.symbol = "";     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a).amount(-210056).payee("Payee 1").dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 2, 7)).create();     org.junit.Assert.assertEquals(((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D07/02/2011\n") + "T-2100,6\n") + "PPayee 1\n") + "^\n", exportAsString(c)); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_account_with_a_couple_of_transactions,{     ru.orangesoftware.financisto.model.Account a = createFirstAccount();     ru.orangesoftware.financisto.model.Category p1 = createExpenseCategory("P1");     ru.orangesoftware.financisto.model.Category c1 = createCategory(p1, "c1");     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a).amount(1000).category(p1).project("PP1").dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 2, 8)).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a).amount(-2056).category(c1).payee("Payee 1").project("PP2").note("Some note here...").dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 2, 7)).create();     org.junit.Assert.assertEquals((((((((((((((((((((("!Type:Cat\n" + "NP1\n") + "E\n") + "^\n") + "NP1:c1\n") + "E\n") + "^\n") + "!Account\n") + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D08/02/2011\n") + "T10.00\n") + "LP1/PP1\n") + "^\n") + "D07/02/2011\n") + "T-20.56\n") + "LP1:c1/PP2\n") + "PPayee 1\n") + "MSome note here...\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_multiple_accounts,{     createSampleData();     org.junit.Assert.assertEquals(((((((((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D08/02/2011\n") + "T10.00\n") + "^\n") + "D07/02/2011\n") + "T-23.45\n") + "^\n") + "D01/01/2011\n") + "T-67.80\n") + "^\n") + "!Account\n") + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "^\n") + "D02/01/2011\n") + "T54.00\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_only_selected_accounts,{     createSampleData();     org.junit.Assert.assertEquals(((((((((("!Account\n" + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "^\n") + "D02/01/2011\n") + "T54.00\n") + "^\n", exportAsString(new long[]{ a2.id })); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_only_transactions_in_the_specified_range,{     createSampleData();     ru.orangesoftware.financisto.filter.WhereFilter filter = createFebruaryOnlyFilter();     org.junit.Assert.assertEquals(((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D08/02/2011\n") + "T10.00\n") + "^\n") + "D07/02/2011\n") + "T-23.45\n") + "^\n") + "!Account\n") + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "^\n", exportAsString(filter)); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_transfers,{     ru.orangesoftware.financisto.model.Account a1 = createFirstAccount();     ru.orangesoftware.financisto.model.Account a2 = createSecondAccount();     ru.orangesoftware.financisto.test.TransferBuilder.withDb(db).fromAccount(a2).fromAmount(-2000).toAccount(a1).toAmount(2000).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 2, 8)).create();     org.junit.Assert.assertEquals((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D08/02/2011\n") + "T20.00\n") + "L[My Bank Account]\n") + "^\n") + "!Account\n") + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D08/02/2011\n") + "T-20.00\n") + "L[My Cash Account]\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_splits,{     a1 = createFirstAccount();     java.util.Map<java.lang.String, ru.orangesoftware.financisto.model.Category> categoriesMap = ru.orangesoftware.financisto.test.CategoryBuilder.createDefaultHierarchy(db);     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(-260066).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 7, 12)).category(ru.orangesoftware.financisto.test.CategoryBuilder.split(db)).withSplit(categoriesMap.get("A1"), -110056, "Note on first split").withSplit(categoriesMap.get("A2"), -100000).withSplit(ru.orangesoftware.financisto.test.CategoryBuilder.noCategory(db), -50010, "Note on third split").create();     org.junit.Assert.assertEquals(((((((((((((((("!Type:Cat\nNA\nE\n^\nNA:A1\nE\n^\nNA:A1:AA1\nE\n^\nNA:A2\nE\n^\nNB\nI\n^\n" + "!Account\n") + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D12/07/2011\n") + "T-2,600.66\n") + "SA:A1\n") + "$-1,100.56\n") + "ENote on first split\n") + "SA:A2\n") + "$-1,000.00\n") + "S<NO_CATEGORY>\n") + "$-500.10\n") + "ENote on third split\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_transfer_splits,{     a1 = createFirstAccount();     a2 = createSecondAccount();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(-260066).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 7, 12)).category(ru.orangesoftware.financisto.test.CategoryBuilder.split(db)).withTransferSplit(a2, -110056, 50025).create();     org.junit.Assert.assertEquals(((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D12/07/2011\n") + "T-2,600.66\n") + "S[My Bank Account]\n") + "$-1,100.56\n") + "^\n") + "!Account\n") + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D12/07/2011\n") + "T500.25\n") + "L[My Cash Account]\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_multiple_transfer_splits,{     a1 = createFirstAccount();     a2 = createSecondAccount();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).amount(-260066).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 7, 12)).category(ru.orangesoftware.financisto.test.CategoryBuilder.split(db)).withTransferSplit(a2, -110056, 50025).withTransferSplit(a2, -150010, 62000).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a2).amount(-420012).dateTime(ru.orangesoftware.financisto.test.DateTime.date(2011, 7, 13)).category(ru.orangesoftware.financisto.test.CategoryBuilder.split(db)).withTransferSplit(a1, -420012, 123456).create();     org.junit.Assert.assertEquals((((((((((((((((((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D13/07/2011\n") + "T1,234.56\n") + "L[My Bank Account]\n") + "^\n") + "D12/07/2011\n") + "T-2,600.66\n") + "S[My Bank Account]\n") + "$-1,100.56\n") + "S[My Bank Account]\n") + "$-1,500.10\n") + "^\n") + "!Account\n") + "NMy Bank Account\n") + "TBank\n") + "^\n") + "!Type:Bank\n") + "D13/07/2011\n") + "T-4,200.12\n") + "S[My Cash Account]\n") + "$-4,200.12\n") + "^\n") + "D12/07/2011\n") + "T620.00\n") + "L[My Cash Account]\n") + "^\n") + "D12/07/2011\n") + "T500.25\n") + "L[My Cash Account]\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifExportTest,should_export_categories,{     createCategories();     org.junit.Assert.assertEquals((((((((((((((("!Type:Cat\n" + "NA1\n") + "I\n") + "^\n") + "NA1:aa1\n") + "I\n") + "^\n") + "NA1:aa2\n") + "I\n") + "^\n") + "NB2\n") + "E\n") + "^\n") + "NB2:bb1\n") + "E\n") + "^\n", exportAsString()); }
https://github.com/dsolonenko/financisto.git,QifParserTest,should_parse_categories_directly_from_transactions,{     parseQif(((((((((((((((((((((((((((((((("!Account\n" + "NMy Cash Account\n") + "TCash\n") + "^\n") + "!Type:Cash\n") + "D08/02/2011\n") + "T10.00\n") + "LP1:к1\n") + "^\n") + "D07/02/2011\n") + "T11.00\n") + "LP1\n") + "^\n") + "D06/02/2011\n") + "T12.00\n") + "LP1:к1\n") + "^\n") + "D05/02/2011\n") + "T-13.80\n") + "LP1:c2\n") + "^\n") + "D04/02/2011\n") + "T-14.80\n") + "LP2:c1\n") + "^\n") + "D03/02/2011\n") + "T-15.80\n") + "LP2:c1\n") + "^\n") + "D02/02/2011\n") + "T-16.80\n") + "LP2\n") + "^\n");     java.util.Set<ru.orangesoftware.financisto.export.qif.QifCategory> categories = p.categories;     org.junit.Assert.assertEquals(5, categories.size()); }
https://github.com/dsolonenko/financisto.git,ExchangeRateTest,should_reset_time_to_midnight,{     ru.orangesoftware.financisto.test.RateBuilder.withDb(db).from(c1).to(c2).at(ru.orangesoftware.financisto.test.DateTime.date(2012, 1, 17).at(12, 23, 45, 456)).rate(0.78592F).create();     org.junit.Assert.assertEquals(ru.orangesoftware.financisto.test.DateTime.date(2012, 1, 17).atMidnight().asLong(), db.findRate(c1, c2, ru.orangesoftware.financisto.test.DateTime.date(2012, 1, 17).asLong()).date); }
https://github.com/dsolonenko/financisto.git,LatestExchangeRatesTest,should_return_error_if_rate_is_not_found,{     ru.orangesoftware.financisto.rates.ExchangeRateProvider m = db.getLatestRates();     ru.orangesoftware.financisto.rates.ExchangeRate rate = m.getRate(c1, c2);     org.junit.Assert.assertTrue(ru.orangesoftware.financisto.rates.ExchangeRate.NA == rate); }
https://github.com/dsolonenko/financisto.git,LatestExchangeRatesTest,should_calculate_accounts_total_correctly_with_big_amounts,{     ru.orangesoftware.financisto.test.AccountBuilder.withDb(db).title("Cash").currency(c1).total(36487931200L).create();     org.junit.Assert.assertEquals(36487931200L, db.getAccountsTotal(c1).balance); }
https://github.com/dsolonenko/financisto.git,CategoryTreeNavigatorTest,should_select_startup_category,{     long selectedCategoryId = categories.get("AA1").id;     navigator.selectCategory(selectedCategoryId);     org.junit.Assert.assertEquals(selectedCategoryId, navigator.selectedCategoryId);     assertSelected(selectedCategoryId, "A1", "AA1"); }
https://github.com/dsolonenko/financisto.git,CurrencyTest,should_format_amount_according_to_the_selected_currency,{     ru.orangesoftware.financisto.model.Currency c = new ru.orangesoftware.financisto.model.Currency();     c.decimals = 1;     c.decimalSeparator = "','";     c.groupSeparator = "''";     c.symbol = "$";     java.lang.String actualString = ru.orangesoftware.financisto.utils.Utils.amountToString(c, 100000);     org.junit.Assert.assertEquals("1000,0 $", actualString); }
https://github.com/dsolonenko/financisto.git,CurrencyTest,should_return_home_currency,{     ru.orangesoftware.financisto.test.CurrencyBuilder.withDb(db).name("USD").title("Dollar").symbol("$").makeDefault().create();     ru.orangesoftware.financisto.test.CurrencyBuilder.withDb(db).name("SGD").title("Singapore Dollar").symbol("S$").makeDefault().create();     org.junit.Assert.assertEquals("SGD", db.getHomeCurrency().name); }
https://github.com/dsolonenko/financisto.git,CurrencyTest,should_return_empty_currency_if_home_is_not_set,{     ru.orangesoftware.financisto.test.CurrencyBuilder.withDb(db).name("USD").title("Dollar").symbol("$").create();     org.junit.Assert.assertEquals("", db.getHomeCurrency().name); }
https://github.com/dsolonenko/financisto.git,CurrencyTest,should_return_empty_currency_if_there_are_no_currencies,{     org.junit.Assert.assertEquals("", db.getHomeCurrency().name); }
https://github.com/dsolonenko/financisto.git,TransactionTest,should_update_original_amount_for_splits,{     ru.orangesoftware.financisto.model.Transaction t = ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(ru.orangesoftware.financisto.test.CategoryBuilder.split(db)).amount(120).originalAmount(a2.currency, 100).withSplit(categories.get("A1"), 60).withSplit(categories.get("A2"), 40).create();     java.util.List<ru.orangesoftware.financisto.model.Transaction> splits = db.getSplitsForTransaction(t.id);     org.junit.Assert.assertEquals(2, splits.size());     assertSplit(splits.get(0), t.originalCurrencyId, 60, 72);     assertSplit(splits.get(1), t.originalCurrencyId, 40, 48); }
https://github.com/dsolonenko/financisto.git,OpenExchangeRatesDownloaderTest,should_download_multiple_rates,{     // given     givenResponseFromWebService(ru.orangesoftware.financisto.rates.AbstractRatesDownloaderTest.anyUrl(), "open_exchange_normal_response.json");     // when     java.util.List<ru.orangesoftware.financisto.rates.ExchangeRate> rates = openRates.getRates(currencies("USD", "SGD", "RUB"));     // then     org.junit.Assert.assertEquals(3, rates.size());     assertRate(rates.get(0), "USD", "SGD", 1.236699, 1361034009000L);     assertRate(rates.get(1), "USD", "RUB", 30.117065, 1361034009000L);     assertRate(rates.get(2), "SGD", "RUB", 24.352785, 1361034009000L); }
https://github.com/dsolonenko/financisto.git,OpenExchangeRatesDownloaderTest,should_skip_unknown_currency,{     // given     givenResponseFromWebService(ru.orangesoftware.financisto.rates.AbstractRatesDownloaderTest.anyUrl(), "open_exchange_normal_response.json");     // when     ru.orangesoftware.financisto.rates.ExchangeRate rate = downloadRate("USD", "AAA");     // then     org.junit.Assert.assertFalse(rate.isOk());     assertRate(rate, "USD", "AAA"); }
https://github.com/dsolonenko/financisto.git,WebserviceXConversionRateDownloaderTest,should_download_single_rate_cur_to_cur,{     // given     givenResponseFromWebService("USD", "SGD", 1.2387);     // when     ru.orangesoftware.financisto.rates.ExchangeRate exchangeRate = downloadRate("USD", "SGD");     // then     org.junit.Assert.assertEquals(1.2387, exchangeRate.rate, 1.0E-4); }
https://github.com/dsolonenko/financisto.git,WebserviceXConversionRateDownloaderTest,should_download_multiple_rates,{     // given     givenResponseFromWebService("USD", "SGD", 1.2);     givenResponseFromWebService("USD", "RUB", 30);     givenResponseFromWebService("SGD", "RUB", 25);     // when     java.util.List<ru.orangesoftware.financisto.rates.ExchangeRate> rates = webserviceX.getRates(currencies("USD", "SGD", "RUB"));     // then     org.junit.Assert.assertEquals(3, rates.size());     assertRate(rates.get(0), "USD", "SGD", 1.2, dateTime);     assertRate(rates.get(1), "USD", "RUB", 30, dateTime);     assertRate(rates.get(2), "SGD", "RUB", 25, dateTime); }
https://github.com/dsolonenko/financisto.git,WebserviceXConversionRateDownloaderTest,should_skip_unknown_currency,{     // given     givenResponseFromWebService(ru.orangesoftware.financisto.rates.AbstractRatesDownloaderTest.anyUrl(), "Exception: Unable to convert ToCurrency to Currency\r\nStacktrace...");     // when     ru.orangesoftware.financisto.rates.ExchangeRate rate = downloadRate("USD", "AAA");     // then     org.junit.Assert.assertFalse(rate.isOk());     assertRate(rate, "USD", "AAA"); }
https://github.com/dsolonenko/financisto.git,SubCategoryReportTest,should_calculate_correct_report_with_multiple_currencies_2,{     ru.orangesoftware.financisto.test.RateBuilder.withDb(db).at(ru.orangesoftware.financisto.test.DateTime.today()).from(c2).to(c1).rate(0.1F).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("A")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-100).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("A1")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-100).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a3).category(categories.get("A2")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(250).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a1).category(categories.get("B")).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(500).create();     ru.orangesoftware.financisto.test.TransactionBuilder.withDb(db).account(a3).dateTime(ru.orangesoftware.financisto.test.DateTime.today()).amount(-5000).withSplit(categories.get("A1"), -1000).withSplit(categories.get("A2"), -2200).withSplit(categories.get("B"), -1800).create();     java.util.List<ru.orangesoftware.financisto.graph.GraphUnit> units = assertReportReturnsData();     org.junit.Assert.assertEquals(3, units.size());     assertUnit(units.get(0), "A", -520, 25);     assertUnit(units.get(1), "A2", -220, 25);     assertUnit(units.get(2), "A1", -200, 0); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,MultilineSms,{     java.lang.String template = "*{{a}}. Summa {{p}} RUB. NOVYY PROEKT, MOSCOW. {{d}}. Dostupno {{b}}{{*}}";     java.lang.String sms = "Pokupka. Karta *5631. Summa 1250,77 RUB. NOVYY PROEKT, MOSCOW. 02.10.2017 14:19. Dostupno 34 202.82 RUB.\nTinkoff\n.ru";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(template, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, "5631", "34 202.82 ", "02.10.2017 14:19", "1250,77", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,TemplateWithWrongSpaces,{     java.lang.String smsTpl = "ECMC{{a}}<:D:>покупка{{P}}р TEREMOK METROPOLIS Баланс:{{b}}р";     java.lang.String sms = "ECMC5431 01.10.17 19:50 покупка 550р TEREMOK METROPOLIS Баланс: 49820.45р";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, "5431", "49820.45", "01.10.17 19:50", "550", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,TemplateWithAnyMatch,{     java.lang.String smsTpl = "ECMC{{A}}{{d}}покупка<:P:>р TEREMOK <::>Баланс:<:B:>р";     java.lang.String sms = "ECMC5431 01.10.17 19:50 покупка 550р TEREMOK METROPOLIS Баланс: 49820.45р";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, "5431", "49820.45", "01.10.17 19:50", "550", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,TemplateWithMultipleAnyMatch,{     java.lang.String smsTpl = "ECMC<:A:> <:D:> {{*}} <:P:>р TEREMOK<::><:B:>р";     java.lang.String sms = "ECMC5431 01.10.17 19:50 покупка 550р TEREMOK METROPOLIS Баланс: 49820.45р";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, "5431", "49820.45", "01.10.17 19:50", "550", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,TemplateWithMultipleAnyMatchWithoutAccount,{     java.lang.String smsTpl = "<::> <:D:> {{*}} <:P:>р TEREMOK<::><:B:>р";     java.lang.String sms = "ECMC5431 01.10.17 19:50 покупка 550р TEREMOK METROPOLIS Баланс: 49820.45р";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, null, "49820.45", "01.10.17 19:50", "550", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,TemplateWithSpecialChars,{     java.lang.String smsTpl = "{{*}} {{d}} {{*}} {{p}}р TE{{R}}E{{MOK ME}TROP<:P:OL?$()[]/\\.*IS{{*}}{{b}}р";     java.lang.String sms = "ECMC5431 01.10.17 19:50 покупка 555р TE{{R}}E{{MOK ME}TROP<:P:OL?$()[]/\\.*IS Баланс: 49820.45р";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, null, "49820.45", "01.10.17 19:50", "555", null }, matches); }
https://github.com/dsolonenko/financisto.git,SmsTransactionProcessorTest,MultipleAnyMatchWithoutAccountAndDate,{     java.lang.String smsTpl = "Pokupka{{*}}Summa {{p}} RUB. NOVYY PROEKT, MOSCOW{{*}}Dostupno {{b}} RUB.{{*}}";     java.lang.String sms = "Pokupka. Karta *5631. Summa 250.00 RUB. NOVYY PROEKT, MOSCOW. 02.10.2017 14:19. Dostupno 34202.82 RUB. Tinkoff.ru";     java.lang.String[] matches = ru.orangesoftware.financisto.service.SmsTransactionProcessor.findTemplateMatches(smsTpl, sms);     org.junit.Assert.assertArrayEquals(new java.lang.String[]{ null, null, "34202.82", null, "250.00", null }, matches); }
https://github.com/etp404/frenchverbinator.git,FeedbackFormPresenterTest,testThatFeedbackSenderIsInvokedWhenButtonIsPressed,{     uk.co.mould.matt.FeedbackFormPresenterTest.FakeFeedbackLauncher fakeFeedbackLauncher = new uk.co.mould.matt.FeedbackFormPresenterTest.FakeFeedbackLauncher();     uk.co.mould.matt.FeedbackFormPresenterTest.FakeFeedbackView fakeFeedbackView = new uk.co.mould.matt.FeedbackFormPresenterTest.FakeFeedbackView();     new uk.co.mould.matt.frenchverbinator.feedback.FeedbackFormPresenter(fakeFeedbackView, fakeFeedbackLauncher);     fakeFeedbackView.sendFeedbackListener.sendFeedback();     org.junit.Assert.assertTrue(fakeFeedbackLauncher.launched); }
https://github.com/etp404/frenchverbinator.git,QuestionPresenterTest,testThatQuestionIsShownInResponseToNextQuestion,{     questionView.nextQuestionListener.requestNextQuestion();     org.junit.Assert.assertEquals(questionView.setQuestionCalledWithQuestion, question); }
https://github.com/etp404/frenchverbinator.git,QuestionPresenterTest,testThatNoTensesSelectedWarningIsShownIfNoTensesAreSelected,{     uk.co.mould.matt.frenchverbinator.QuestionPresenter questionPresenter = new uk.co.mould.matt.frenchverbinator.QuestionPresenter(questionView, new uk.co.mould.matt.QuestionPresenterTest.FakeQuestionGenerator(null), null);     questionPresenter.showQuestion();     org.junit.Assert.assertTrue(questionView.noTensesSelectedIsShown); }
https://github.com/etp404/frenchverbinator.git,QuestionPresenterTest,testThatScoreIsSetToTwoOfTwoIfTwoCorrectAnswersGiven,{     questionView.submitListener.submitAnswer(correctAnswer.toString());     questionView.submitListener.submitAnswer(correctAnswer.toString());     uk.co.mould.matt.marking.Score expectedScore = new uk.co.mould.matt.marking.Score();     expectedScore.addCorrect();     expectedScore.addCorrect();     org.junit.Assert.assertThat(questionView.updatedScore, org.hamcrest.core.Is.is(expectedScore)); }
https://github.com/etp404/frenchverbinator.git,QuestionPresenterTest,testThatScoreIsSetToOneOfTwoIfOneCorrectAndTwoIncorrectAnswersGiven,{     questionView.submitListener.submitAnswer("wrong answer");     questionView.submitListener.submitAnswer("wrong answer");     questionView.submitListener.submitAnswer(correctAnswer.toString());     uk.co.mould.matt.marking.Score expectedScore = new uk.co.mould.matt.marking.Score();     expectedScore.addCorrect();     expectedScore.addIncorrect();     expectedScore.addIncorrect();     org.junit.Assert.assertThat(questionView.updatedScore, org.hamcrest.core.Is.is(expectedScore)); }
https://github.com/etp404/frenchverbinator.git,AnswerCheckerTest,testThatAnswerCheckerReportsCorrectAnswerForCorrectAnswer,{     answerChecking.check(question, correctAnswer.toString(), capturingCallback);     org.junit.Assert.assertTrue(capturingCallback.correctCalled); }
https://github.com/etp404/frenchverbinator.git,AnswerCheckerTest,testThatAnswerCheckerReportsWrongAnswerForWrongAnswer,{     answerChecking.check(question, "wrong answer", capturingCallback);     org.junit.Assert.assertEquals(capturingCallback.incorrectCalledWithCorrection, correctAnswer); }
https://github.com/etp404/frenchverbinator.git,AnswerCheckerTest,testThatAnswerCheckerRecordsAWrongAnswer,{     answerChecking.check(question, "wrong answer", capturingCallback);     org.junit.Assert.assertEquals(fakeFailedQuestionStore.question, question); }
https://github.com/etp404/frenchverbinator.git,AnswerCheckerTest,testThatAnswerCheckerReportsCorrectAnswerForCorrectAnswerWithTrailingSpace,{     answerChecking.check(question, correctAnswer.toString() + " ", capturingCallback);     org.junit.Assert.assertTrue(capturingCallback.correctCalled); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_FirstPersonSingularIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("J'aime"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_SecondPersonSingularIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Tu aimes"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.SECOND_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_ThirdPersonSingularIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Il aime"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_FirstPersonPluralIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Nous aimons"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.FIRST_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_SecondPersonPluralIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Vous aimez"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.SECOND_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aimer_Present_ThirdPersonPluralIsConjugatedAsExpected,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aimer", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Ils aiment"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Perdre_Present_FirstPersonPluralIsConjugatedAsExpected,{     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Je perds"), conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("perdre", null, "avoir"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentIndicative())); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThat_Aller_Present_ThirdPersonPluralIsConjugatedAsExpected,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aller", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Il va"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatImperfectTenseCanBeConjugated,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("savoir", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.ImperfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Ils savaient"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatFutureTenseCanBeConjugated,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("écrire", null, "avoir"), uk.co.mould.matt.data.Persons.SECOND_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.FutureIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Tu écriras"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatSubjunctivePresentCanBeConjugated,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("être", null, "avoir"), uk.co.mould.matt.data.Persons.THIRD_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentSubjunctive());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Il soit"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatConditionalPresentCanBeConjugated,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("vouloir", null, "avoir"), uk.co.mould.matt.data.Persons.SECOND_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PresentConditional());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Tu voudrais"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatPerfectTenseCanBeFormedWithAvoir,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("vouloir", null, "avoir"), uk.co.mould.matt.data.Persons.SECOND_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PerfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Tu as voulu"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatPerfectTenseWithOnePerfectParticipleCanBeFormedWithAvoir,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("être", null, "avoir"), uk.co.mould.matt.data.Persons.FIRST_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PerfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Nous avons été"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatPerfectTenseCanBeFormedWithEtreForSingularPerson,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aller", null, "être"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR, new uk.co.mould.matt.data.tenses.PerfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Je suis allé"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatPerfectTenseCanBeFormedWithEtreForPluralPerson,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("aller", null, "être"), uk.co.mould.matt.data.Persons.FIRST_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PerfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Nous sommes allés"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatVerbWithTwoFormsForAPersonCanBeFormedCorrectly,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("pouvoir", null, null), uk.co.mould.matt.data.Persons.FIRST_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PresentIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Nous pouvons"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,ConjugatorTest,testThatCanConjugatePerfectTense,{     uk.co.mould.matt.data.ConjugatedVerbWithPronoun conjugatedVerbWithPronoun = conjugator.getConjugationOf(new uk.co.mould.matt.data.InfinitiveVerb("pouvoir", null, "avoir"), uk.co.mould.matt.data.Persons.FIRST_PERSON_PLURAL, new uk.co.mould.matt.data.tenses.PerfectIndicative());     org.junit.Assert.assertEquals(new uk.co.mould.matt.data.ConjugatedVerbWithPronoun("Nous avons pu"), conjugatedVerbWithPronoun); }
https://github.com/etp404/frenchverbinator.git,PronounTest,testThatCorrectPronounIsAddedForFirstPersonWithAccent,{     uk.co.mould.matt.conjugators.PronounHandler pronounHandler = new uk.co.mould.matt.conjugators.PronounHandler();     uk.co.mould.matt.data.ConjugatedVerbWithPronoun verbWithPronoun = pronounHandler.addPronoun(new uk.co.mould.matt.data.Conjugation("étais"), uk.co.mould.matt.data.Persons.FIRST_PERSON_SINGULAR);     org.junit.Assert.assertThat(verbWithPronoun.toString(), org.hamcrest.core.Is.is("J'étais")); }
https://github.com/etp404/frenchverbinator.git,QuestionGeneratorTests,returnsNoTensesSelectedIfNoTensesAreSelected,{     uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), new java.util.ArrayList<uk.co.mould.matt.data.InfinitiveVerb>(), new java.util.ArrayList<uk.co.mould.matt.data.Persons.Person>(), new uk.co.mould.matt.QuestionGeneratorTests.EmptyIncludedTensesProvider(), new uk.co.mould.matt.helpers.FakeFailedQuestionStore(), new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(false));     uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();     randomQuestionGenerator.getQuestion(callback);     org.junit.Assert.assertTrue(callback.noTensesSelected); }
https://github.com/etp404/frenchverbinator.git,QuestionGeneratorTests,generatesNewQuestionFromAvailableCombinationsIfShouldUseOldQuestionReturnsFalse,{     uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), java.util.Collections.singletonList(verb), java.util.Collections.singletonList(person), new uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider(java.util.Collections.singletonList(verbMoodAndTense)), new uk.co.mould.matt.helpers.FakeFailedQuestionStore(), new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(false));     uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();     randomQuestionGenerator.getQuestion(callback);     uk.co.mould.matt.questions.Question expectedQuestion = new uk.co.mould.matt.questions.Question(person, verb, verbMoodAndTense);     org.junit.Assert.assertEquals(expectedQuestion, callback.question); }
https://github.com/etp404/frenchverbinator.git,QuestionGeneratorTests,generatesNewQuestionFromAvailableCombinationsIfIncludedTensesHasChanged,{     uk.co.mould.matt.data.tenses.MoodAndTense presentSubjunctive = new uk.co.mould.matt.data.tenses.PresentSubjunctive();     uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider moodsAndTensesToSelectFromProvider = new uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider(java.util.Collections.singletonList(presentSubjunctive));     uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), java.util.Collections.singletonList(verb), java.util.Collections.singletonList(person), moodsAndTensesToSelectFromProvider, new uk.co.mould.matt.helpers.FakeFailedQuestionStore(), new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(false));     moodsAndTensesToSelectFromProvider.includedMoodsAndTenses = java.util.Collections.singletonList(verbMoodAndTense);     uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();     randomQuestionGenerator.getQuestion(callback);     uk.co.mould.matt.questions.Question expectedQuestion = new uk.co.mould.matt.questions.Question(person, verb, verbMoodAndTense);     org.junit.Assert.assertEquals(expectedQuestion, callback.question); }
https://github.com/etp404/frenchverbinator.git,QuestionGeneratorTests,repeatsFailedQuestionFromFailedQuestionStoreIfOldNewSelectorSelectsOldAndThereIsAnOldQuestion,{     uk.co.mould.matt.questions.Question failedQuestion = new uk.co.mould.matt.questions.Question(uk.co.mould.matt.data.Persons.SECOND_PERSON_SINGULAR, new uk.co.mould.matt.data.InfinitiveVerb("bblah", "blaaahdy", "blah"), verbMoodAndTense);     uk.co.mould.matt.FailedQuestionStore failedQuestionStore = new uk.co.mould.matt.helpers.FakeFailedQuestionStore();     failedQuestionStore.store(failedQuestion);     uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), java.util.Collections.singletonList(verb), java.util.Collections.singletonList(person), new uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider(java.util.Collections.singletonList(verbMoodAndTense)), failedQuestionStore, new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(true));     uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();     randomQuestionGenerator.getQuestion(callback);     org.junit.Assert.assertEquals(failedQuestion, callback.question); }
https://github.com/etp404/frenchverbinator.git,QuestionGeneratorTests,generatesNewQuestionIfOldNewSelectorSelectsOldButThereAreNoOldQuestionsWithRightTense,{     uk.co.mould.matt.questions.Question expectedQuestion = new uk.co.mould.matt.questions.Question(person, verb, verbMoodAndTense);     uk.co.mould.matt.FailedQuestionStore failedQuestionStore = new uk.co.mould.matt.helpers.FakeFailedQuestionStore();     failedQuestionStore.store(new uk.co.mould.matt.questions.Question(uk.co.mould.matt.data.Persons.SECOND_PERSON_PLURAL, new uk.co.mould.matt.data.InfinitiveVerb(null, null, null), new uk.co.mould.matt.data.tenses.PresentSubjunctive()));     uk.co.mould.matt.questions.RandomQuestionGenerator randomQuestionGenerator = new uk.co.mould.matt.questions.RandomQuestionGenerator(new uk.co.mould.matt.helpers.FakeRandomNumberGenerator(0), java.util.Collections.singletonList(verb), java.util.Collections.singletonList(person), new uk.co.mould.matt.QuestionGeneratorTests.PreloadedIncludedTensesProvider(java.util.Collections.singletonList(verbMoodAndTense)), failedQuestionStore, new uk.co.mould.matt.QuestionGeneratorTests.FakeShouldUseFailedQuestion(true));     uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback callback = new uk.co.mould.matt.QuestionGeneratorTests.CapturingCallback();     randomQuestionGenerator.getQuestion(callback);     org.junit.Assert.assertEquals(expectedQuestion, callback.question); }
https://github.com/etp404/frenchverbinator.git,ScoreTest,testThatInitialScoreIsZeroOfZero,{     org.junit.Assert.assertThat(new uk.co.mould.matt.marking.Score().toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 0, 0))); }
https://github.com/etp404/frenchverbinator.git,ScoreTest,testThatScoringAnIncorrectAnswerGivesExpectedScore,{     uk.co.mould.matt.marking.Score score = new uk.co.mould.matt.marking.Score();     score.addIncorrect();     org.junit.Assert.assertThat(score.toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 0, 1))); }
https://github.com/etp404/frenchverbinator.git,ScoreTest,testThatScoringTwoCorrectAnswersGivesExpectedScore,{     uk.co.mould.matt.marking.Score score = new uk.co.mould.matt.marking.Score();     score.addCorrect();     score.addCorrect();     org.junit.Assert.assertThat(score.toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 2, 2))); }
https://github.com/etp404/frenchverbinator.git,ScoreTest,testThatScoringTwoCorrectAndOneIncorrectAnswersGivesExpectedScore,{     uk.co.mould.matt.marking.Score score = new uk.co.mould.matt.marking.Score();     score.addCorrect();     score.addCorrect();     score.addIncorrect();     org.junit.Assert.assertThat(score.toString(), org.hamcrest.core.Is.is(java.lang.String.format(uk.co.mould.matt.ScoreTest.SCORE_FORMAT, 2, 3))); }
https://github.com/Dev1012You/GGP_Android.git,DateUtilsTest,testCreateDateRange,{     org.joda.time.LocalDate today = new org.joda.time.LocalDate(2016, 5, 7);     java.lang.String NOW = "NOW";     java.lang.String ONGOING = "ONGOING";     java.lang.String TODAY = "TODAY";     java.lang.Object[][] testData = new java.lang.Object[][]{ new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 0, 0), new org.joda.time.LocalDateTime(2016, 5, 7, 0, 0), TODAY }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 9, 0, 0), new org.joda.time.LocalDateTime(2016, 5, 9, 0, 0), "Mon, May 9" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 10, 0), new org.joda.time.LocalDateTime(2016, 5, 7, 12, 0), TODAY + ": 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 9, 10, 0), new org.joda.time.LocalDateTime(2016, 5, 9, 12, 0), "Mon, May 9: 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 6, 0, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 0, 0), NOW + " - May 10" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 0, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 0, 0), NOW + " - May 10" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 8, 0, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 0, 0), "May 8 - May 10" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 6, 0, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 0, 0), ONGOING }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 0, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 0, 0), ONGOING }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 8, 0, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 0, 0), "May 8 - Sep 30" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 8, 0, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 23, 59), "May 8 - Sep 30" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 6, 13, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 23, 59), NOW + " - Tue, May 10: 1:00 PM - 12:00 AM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 6, 10, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 12, 0), NOW + " - Tue, May 10: 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 10, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 12, 0), NOW + " - Tue, May 10: 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 8, 10, 0), new org.joda.time.LocalDateTime(2016, 5, 10, 12, 0), "Sun, May 8 - Tue, May 10: 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 6, 10, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 12, 0), ONGOING + ": 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 7, 10, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 12, 0), ONGOING + ": 10:00 AM - 12:00 PM" }, new java.lang.Object[]{ new org.joda.time.LocalDateTime(2016, 5, 8, 10, 0), new org.joda.time.LocalDateTime(2016, 9, 30, 12, 0), "Sun, May 8 - Fri, Sep 30: 10:00 AM - 12:00 PM" } };     for (java.lang.Object[] testScenario : testData) {         org.junit.Assert.assertEquals(testScenario[2], com.ggp.theclub.util.DateUtils.getPromotionDateTimeRange(((org.joda.time.LocalDateTime) (testScenario[0])), ((org.joda.time.LocalDateTime) (testScenario[1])), today));     } }
https://github.com/Dev1012You/GGP_Android.git,MovieUtilsTest,testBuildFandangoUrl,{     java.lang.String purchaseTicketsUrl = com.ggp.theclub.util.MovieUtils.buildPurchaseTicketsUrl(movie, movieShowtime, movieTheater.getTheaterUrl(), movieTheater.getTmsId());     java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(fandangoDateTimeFormat);     java.lang.String formattedDateTime = dateFormat.format(movieShowtime.getMovieShowtime());     java.lang.String expectedFandangoUrl = java.lang.String.format(fandangoUrlFormat, mockFandangoId, mockTmsId, formattedDateTime);     org.junit.Assert.assertEquals(expectedFandangoUrl, purchaseTicketsUrl); }
https://github.com/Dev1012You/GGP_Android.git,TenantUtilsTest,testGetTenantById,{     com.ggp.theclub.model.Tenant tenant = com.ggp.theclub.util.TenantUtils.getTenantById(-1, tenants);     junit.framework.Assert.assertNull(tenant);     tenant = com.ggp.theclub.util.TenantUtils.getTenantById(1, null);     junit.framework.Assert.assertNull(tenant);     tenant = com.ggp.theclub.util.TenantUtils.getTenantById(1, tenants);     org.junit.Assert.assertEquals(tenant, tenants.get(0)); }
https://github.com/Dev1012You/GGP_Android.git,TenantUtilsTest,testGetParentTenant,{     com.ggp.theclub.model.Tenant childTenant = com.ggp.theclub.util.TenantUtils.getTenantById(9, tenants);     com.ggp.theclub.model.Tenant parentTenant = com.ggp.theclub.util.TenantUtils.getTenantById(10, tenants);     org.junit.Assert.assertEquals(com.ggp.theclub.util.TenantUtils.getParentTenant(childTenant, tenants).getId(), parentTenant.getId());     junit.framework.Assert.assertNull(com.ggp.theclub.util.TenantUtils.getParentTenant(null, tenants));     junit.framework.Assert.assertNull(com.ggp.theclub.util.TenantUtils.getParentTenant(childTenant, null)); }
https://github.com/thomasfischersm/BagZombie.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.playposse.heavybagzombie", appContext.getPackageName()); }
https://github.com/thomasfischersm/BagZombie.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/brentn/TomatoHub.git,LinuxRouterTests,constructor_initiates_ssh_connection,{     setupPreferences();     when(fakePreferences.getString(eq("protocol"), anyString())).thenReturn("ssh");     com.brentandjody.tomatohub.routers.LinuxRouter router = new com.brentandjody.tomatohub.routers.LinuxRouter(fakeActivity, null, null);     org.junit.Assert.assertTrue(router.getmConnection() instanceof com.brentandjody.tomatohub.routers.connection.SshConnection); }
https://github.com/brentn/TomatoHub.git,LinuxRouterTests,constructor_initiates_telnet_connection,{     setupPreferences();     when(fakePreferences.getString(eq("protocol"), anyString())).thenReturn("telnet");     com.brentandjody.tomatohub.routers.LinuxRouter router = new com.brentandjody.tomatohub.routers.LinuxRouter(fakeActivity, null, null);     org.junit.Assert.assertTrue(router.getmConnection() instanceof com.brentandjody.tomatohub.routers.connection.TelnetConnection); }
https://github.com/brentn/TomatoHub.git,LinuxRouterTests,constructor_handles_invalid_protocol,{     setupPreferences();     when(fakePreferences.getString(eq("protocol"), anyString())).thenReturn("mush");     com.brentandjody.tomatohub.routers.LinuxRouter router = new com.brentandjody.tomatohub.routers.LinuxRouter(fakeActivity, null, null);     org.junit.Assert.assertNull(router.getmConnection()); }
https://github.com/brentn/TomatoHub.git,ObjectIntegrityTest,wifi_constructor_sets_proper_fields,{     java.lang.String SSID = "klkakff";     com.brentandjody.tomatohub.database.Wifi wifi = new com.brentandjody.tomatohub.database.Wifi(SSID);     org.junit.Assert.assertEquals(SSID, wifi.SSID()); }
https://github.com/brentn/TomatoHub.git,ObjectIntegrityTest,wifi_setters_and_getters_work,{     java.lang.String PASSWORD = "spazworkd";     com.brentandjody.tomatohub.database.Wifi wifi = new com.brentandjody.tomatohub.database.Wifi("");     wifi.setPassword(PASSWORD);     org.junit.Assert.assertEquals(PASSWORD, wifi.password()); }
https://github.com/mendhak/gpsmapper.git,DateUtilsTests,testFormatRfc1123DateTime,{     java.util.Calendar cal = java.util.Calendar.getInstance();     cal.clear();     cal.setTimeZone(java.util.TimeZone.getTimeZone("GMT+1"));     cal.set(java.util.Calendar.YEAR, 2015);     cal.set(java.util.Calendar.MONTH, java.util.Calendar.JUNE);     cal.set(java.util.Calendar.DATE, 20);     cal.set(java.util.Calendar.HOUR, 2);     cal.set(java.util.Calendar.MINUTE, 37);     cal.set(java.util.Calendar.SECOND, 14);     java.util.Date date = cal.getTime();     java.util.TimeZone tz = java.util.TimeZone.getTimeZone("GMT");     org.junit.Assert.assertThat("Date to RFC 1123 string", com.mendhak.gpsvisualizer.common.DateUtils.formatRfc1123DateTime(date, tz), org.hamcrest.CoreMatchers.is("Sat, 20 Jun 2015 01:37:14 GMT")); }
https://github.com/mendhak/gpsmapper.git,DateUtilsTests,testFormatIso8601DateTime,{     java.util.Calendar cal = java.util.Calendar.getInstance();     cal.clear();     cal.setTimeZone(java.util.TimeZone.getTimeZone("GMT+1"));     cal.set(java.util.Calendar.YEAR, 1997);     cal.set(java.util.Calendar.MONTH, java.util.Calendar.JULY);     cal.set(java.util.Calendar.DATE, 16);     cal.set(java.util.Calendar.HOUR, 19);     cal.set(java.util.Calendar.MINUTE, 20);     cal.set(java.util.Calendar.SECOND, 30);     java.util.Date date = cal.getTime();     java.util.TimeZone tz = java.util.TimeZone.getTimeZone("GMT");     org.junit.Assert.assertThat("ISO 8601 string from date", com.mendhak.gpsvisualizer.common.DateUtils.formatIso8601DateTime(date, tz), org.hamcrest.CoreMatchers.is("1997-07-16T18:20:30+00:00")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetSpeedDisplay_HighSpeed_KilometersPerHours,{     java.lang.String speedDisplay = com.mendhak.gpsvisualizer.common.Utils.GetSpeedDisplay(14, false);     org.junit.Assert.assertThat("High speed is in km/h", speedDisplay, org.hamcrest.CoreMatchers.is("50.4 km/h")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetSpeedDisplay_LowSpeed_MetersPerSecond,{     java.lang.String speedDisplay = com.mendhak.gpsvisualizer.common.Utils.GetSpeedDisplay(0.1, false);     org.junit.Assert.assertThat("Low speed in m/s", speedDisplay, org.hamcrest.CoreMatchers.is("0.1 m/s")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetSpeedDisplay_Imperial_MilesPerHours,{     java.lang.String speedDisplay = com.mendhak.gpsvisualizer.common.Utils.GetSpeedDisplay(1, true);     org.junit.Assert.assertThat("Imperial in miles/h", speedDisplay, org.hamcrest.CoreMatchers.is("2.237 mi/h")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetDistanceDisplay_LargeDistance_Kilometers,{     java.lang.String distanceDisplay = com.mendhak.gpsvisualizer.common.Utils.GetDistanceDisplay(12174, false);     org.junit.Assert.assertThat("Large distance in km", distanceDisplay, org.hamcrest.CoreMatchers.is("12.174 km")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetDistanceDisplay_SmallDistance_Meters,{     java.lang.String distanceDisplay = com.mendhak.gpsvisualizer.common.Utils.GetDistanceDisplay(121, false);     org.junit.Assert.assertThat("Small distances in meters", distanceDisplay, org.hamcrest.CoreMatchers.is("121 m")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetDistanceDisplay_SmallDistanceImperial_Feet,{     java.lang.String distanceDisplay = com.mendhak.gpsvisualizer.common.Utils.GetDistanceDisplay(121, true);     org.junit.Assert.assertThat("Small distance imperial in feet", distanceDisplay, org.hamcrest.CoreMatchers.is("396.982 ft")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetTimeDisplay_SmallTimes_Seconds,{     org.junit.Assert.assertThat("Small times in seconds", com.mendhak.gpsvisualizer.common.Utils.GetTimeDisplay(4000), org.hamcrest.CoreMatchers.is("4 s")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetTimeDisplay_MediumTimes_Minutes,{     org.junit.Assert.assertThat("Medium times in minutes", com.mendhak.gpsvisualizer.common.Utils.GetTimeDisplay(132000), org.hamcrest.CoreMatchers.is("2.2 min")); }
https://github.com/mendhak/gpsmapper.git,UtilsTests,test_GetTimeDisplay_LargeTimes_Hours,{     org.junit.Assert.assertThat("Large times in hours", com.mendhak.gpsvisualizer.common.Utils.GetTimeDisplay(6840000), org.hamcrest.CoreMatchers.is("1.9 hrs")); }
https://github.com/Kuan-Hsien/TimeManagement.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.realizeitstudio.deteclife", appContext.getPackageName()); }
https://github.com/Kuan-Hsien/TimeManagement.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Klemek/AngersTramWidget.git,HttpUtilsTest,testExecuteRequestError0,{     fr.klemek.angerstramwidget.utils.HttpUtils.HttpResult hr = fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest("GET", "http://httpbin.orga/");     org.junit.Assert.assertEquals(0, hr.code); }
https://github.com/Klemek/AngersTramWidget.git,HttpUtilsTest,testExecuteRequestError404,{     fr.klemek.angerstramwidget.utils.HttpUtils.HttpResult hr = fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest("GET", "http://httpbin.org/404");     org.junit.Assert.assertEquals(404, hr.code); }
https://github.com/Klemek/AngersTramWidget.git,HttpUtilsTest,testExecuteRequestGETRedirect,{     fr.klemek.angerstramwidget.utils.HttpUtils.HttpResult hr = fr.klemek.angerstramwidget.utils.HttpUtils.executeRequest("GET", "http://klemek.fr");     org.junit.Assert.assertEquals(200, hr.code); }
https://github.com/RogerTsai917/MakeCoffe.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.roger.makecoffee", appContext.getPackageName()); }
https://github.com/RogerTsai917/MakeCoffe.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/RogerTsai917/MakeCoffe.git,NewsDataUnitTest,articleIsLegal,{     org.junit.Assert.assertEquals(testValue, mNewsData.getNewsDataSize()); }
https://github.com/RogerTsai917/MakeCoffe.git,isPostingArticleLegal,articleIsLegal,{     org.mockito.Mockito.when(mArticle.getTitle()).thenReturn("123");     org.mockito.Mockito.when(mArticle.getContent()).thenReturn("123");     org.mockito.Mockito.when(mArticle.getImageUrl()).thenReturn("123");     org.junit.Assert.assertTrue(mPresenter.isArticleContentLegal(mArticle)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellTest,testGetState,{     io.github.lewismcgeary.androidgameoflife.GridCell c = new io.github.lewismcgeary.androidgameoflife.GridCell(false);     org.junit.Assert.assertTrue(c.getState()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,AnotherExampleUnitTest,testGetState,{     io.github.lewismcgeary.androidgameoflife.GridCell c = new io.github.lewismcgeary.androidgameoflife.GridCell(true);     org.junit.Assert.assertTrue(c.getState()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,testGetState,{     io.github.lewismcgeary.androidgameoflife.GridCell c = new io.github.lewismcgeary.androidgameoflife.GridCell(true);     org.junit.Assert.assertTrue(c.getState()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,whenLessThanTwoLiveNeighbours_ThenNextStateOfCellShouldBeDead,{     io.github.lewismcgeary.androidgameoflife.GridCell cell = new io.github.lewismcgeary.androidgameoflife.GridCell(true);     org.junit.Assert.assertFalse(cell.applyLifeRules(1)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,whenMoreThanThreeLiveNeighboursCellShouldDie,{     io.github.lewismcgeary.androidgameoflife.GridCell cell = new io.github.lewismcgeary.androidgameoflife.GridCell(true);     org.junit.Assert.assertFalse(cell.applyLifeRules(4)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheCellIsDead_WhenCellHasThreeLivingNeighbours_ThenCellWillBecomeAliveNext,{     io.github.lewismcgeary.androidgameoflife.GridCell cell = new io.github.lewismcgeary.androidgameoflife.GridCell(false);     org.junit.Assert.assertTrue(cell.applyLifeRules(3)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridIsInitialised_WhenAllCellsStartDead_ThenTheyStayDead,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     org.junit.Assert.assertEquals(0, worldGrid.countLivingCells()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridHasOneLiveCell_WhenNoMovesAreMade_ThenGridStillHasOneLiveCell,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.giveLifeToCell(10, 10);     org.junit.Assert.assertEquals(1, worldGrid.countLivingCells()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridIsSeededWithFiveLiveCells_WhenNoMovesAreMade_ThenGridStillHasFiveLiveCells,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.setInitialLiveCells(java.util.Arrays.asList(new io.github.lewismcgeary.androidgameoflife.GridCoordinates(5, 5), new io.github.lewismcgeary.androidgameoflife.GridCoordinates(6, 5), new io.github.lewismcgeary.androidgameoflife.GridCoordinates(5, 6), new io.github.lewismcgeary.androidgameoflife.GridCoordinates(7, 5), new io.github.lewismcgeary.androidgameoflife.GridCoordinates(5, 4)));     org.junit.Assert.assertEquals(5, worldGrid.countLivingCells()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridHasOneLiveCell_WhenAMoveIsMade_ThenGridHasNoLiveCells,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.giveLifeToCell(10, 10);     worldGrid.calculateNextStateOfCells();     worldGrid.switchCellsToNextState();     org.junit.Assert.assertEquals(0, worldGrid.countLivingCells()); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridIsInitialised_WhenAllCellsAreDead_ThenACellsLiveNeighbourCountIsZero,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     org.junit.Assert.assertEquals(0, worldGrid.getCell(10, 10).countLivingNeighbours(worldGrid, 10, 10)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridIsInitialised_WhenACellHasOneLiveNeighbour_ThenTheCellsLiveNeighbourCountIsOne,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.giveLifeToCell(10, 10);     org.junit.Assert.assertEquals(1, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenTheGridIsInitialised_WhenACellHasTwoLiveNeighbours_ThenTheCellsLiveNeighbourCountIsTwo,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.giveLifeToCell(10, 10);     worldGrid.giveLifeToCell(9, 11);     org.junit.Assert.assertEquals(2, worldGrid.getCell(9, 10).countLivingNeighbours(worldGrid, 9, 10)); }
https://github.com/lewismcgeary/AndroidGameofLife.git,GridCellUnitTestCreatedInStudio,givenALiveCellHasOneLiveNeighbour_WhenTheCellCalculatesItsNextState_ItWillBeDead,{     io.github.lewismcgeary.androidgameoflife.Grid worldGrid = new io.github.lewismcgeary.androidgameoflife.Grid(20, 20);     worldGrid.giveLifeToCell(10, 10);     worldGrid.giveLifeToCell(9, 10);     worldGrid.getCell(9, 10).computeNextState(worldGrid, 9, 10);     org.junit.Assert.assertFalse(worldGrid.getCell(9, 10).getNextState()); }
https://github.com/dminor/mockingbird.git,PlaylistTest,getName_isCorrect,{     com.thegreatpotoo.mockingbird.MockingbirdDatabase mockingbirdDatabase = mock(com.thegreatpotoo.mockingbird.MockingbirdDatabase.class);     com.thegreatpotoo.mockingbird.Playlist playlist = new com.thegreatpotoo.mockingbird.Playlist(mockingbirdDatabase, playlistFolder.getRoot().getPath());     org.junit.Assert.assertEquals(playlistFolder.getRoot().getName(), playlist.getName()); }
https://github.com/dminor/mockingbird.git,PlaylistTest,getPlaylistPath_isCorrect,{     com.thegreatpotoo.mockingbird.MockingbirdDatabase mockingbirdDatabase = mock(com.thegreatpotoo.mockingbird.MockingbirdDatabase.class);     com.thegreatpotoo.mockingbird.Playlist playlist = new com.thegreatpotoo.mockingbird.Playlist(mockingbirdDatabase, playlistFolder.getRoot().getPath());     org.junit.Assert.assertEquals(playlistFolder.getRoot().getPath(), playlist.getPlaylistPath()); }
https://github.com/gstraube/cythara.git,SamplerTest,samples_are_filtered_correctly,{     java.util.List<com.github.cythara.PitchDifference> samples = new java.util.ArrayList<>();     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.G3, 4.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     java.util.List<com.github.cythara.PitchDifference> filteredSamples = com.github.cythara.Sampler.filterByNote(samples, com.github.cythara.tuning.GuitarTuning.Pitch.B3);     for (com.github.cythara.PitchDifference sample : filteredSamples) {         org.junit.Assert.assertThat(sample.closest.getName(), org.hamcrest.CoreMatchers.is(com.github.cythara.tuning.GuitarTuning.Pitch.B3.getName()));     } }
https://github.com/gstraube/cythara.git,SamplerTest,the_most_frequent_note_is_extracted_correctly,{     java.util.List<com.github.cythara.PitchDifference> samples = new java.util.ArrayList<>();     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.G3, 4.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     com.github.cythara.Note note = com.github.cythara.Sampler.extractMostFrequentNote(samples);     org.junit.Assert.assertThat(note.getName(), org.hamcrest.CoreMatchers.is(com.github.cythara.tuning.GuitarTuning.Pitch.E2.getName())); }
https://github.com/gstraube/cythara.git,SamplerTest,if_there_are_notes_with_the_same_number_of_occurrences_one_of_them_is_returned,{     java.util.List<com.github.cythara.PitchDifference> samples = new java.util.ArrayList<>();     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.G3, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.E2, 2.0));     samples.add(new com.github.cythara.PitchDifference(com.github.cythara.tuning.GuitarTuning.Pitch.B3, 3.0));     com.github.cythara.Note note = com.github.cythara.Sampler.extractMostFrequentNote(samples);     org.junit.Assert.assertThat(note.getName(), org.hamcrest.CoreMatchers.either(org.hamcrest.CoreMatchers.is(com.github.cythara.tuning.GuitarTuning.Pitch.E2.getName())).or(org.hamcrest.CoreMatchers.is(com.github.cythara.tuning.GuitarTuning.Pitch.B3.getName()))); }
https://github.com/luankevinferreira/expenses.git,ExpenseDAOTest,testShouldAddExpenseType,{     // Prepare     double value = 100.0;     java.lang.String type = "Type";     long id = 123456;     java.lang.String description = "Description";     java.util.Date date = new java.util.Date();     luankevinferreira.expenses.domain.Expense expense = new luankevinferreira.expenses.domain.Expense();     expense.setValue(value);     expense.setType(type);     expense.setId(id);     expense.setDescription(description);     expense.setDate(date);     // Action     expenseDAO.insert(expense);     java.util.List<luankevinferreira.expenses.domain.Type> rate = expenseDAO.selectTypesExpenses();     // Verify     org.junit.Assert.assertThat(rate.size(), org.hamcrest.CoreMatchers.is(1));     junit.framework.Assert.assertEquals(type, rate.get(0).getName());     expenseDAO.delete(expense); }
https://github.com/luankevinferreira/expenses.git,ExpenseDAOTest,testSelectOnlyTypesOfActualMonth,{     // Prepare     java.util.Calendar dateActual = java.util.Calendar.getInstance();     java.util.Calendar dateAnotherMonth = java.util.Calendar.getInstance();     dateAnotherMonth.set(java.util.Calendar.MONTH, java.util.Calendar.MONTH - 3);     java.lang.String typeLastMonth = "TypeLastMonth";     java.lang.String typeActualMonth = "TypeActualMonth";     java.lang.String description = "Description";     double value = 123.45;     long id = 12345;     luankevinferreira.expenses.domain.Expense expenseLastMonth = new luankevinferreira.expenses.domain.Expense();     expenseLastMonth.setDate(dateAnotherMonth.getTime());     expenseLastMonth.setDescription(description);     expenseLastMonth.setValue(value);     expenseLastMonth.setId(id);     expenseLastMonth.setType(typeLastMonth);     luankevinferreira.expenses.domain.Expense expenseActualMonth = new luankevinferreira.expenses.domain.Expense();     expenseActualMonth.setDate(dateActual.getTime());     expenseActualMonth.setDescription(description);     expenseActualMonth.setId(id);     expenseActualMonth.setValue(value);     expenseActualMonth.setType(typeActualMonth);     expenseDAO.insert(expenseLastMonth);     expenseDAO.insert(expenseActualMonth);     // Action     java.util.List<luankevinferreira.expenses.domain.Type> rate = expenseDAO.selectTypesExpenses();     // Verify     org.junit.Assert.assertThat(rate.size(), org.hamcrest.CoreMatchers.is(1));     junit.framework.Assert.assertEquals(typeActualMonth, rate.get(0).getName());     expenseDAO.delete(expenseActualMonth);     expenseDAO.delete(expenseLastMonth); }
https://github.com/luankevinferreira/expenses.git,DateUtilsTest,whenGetStringDatePassingNullMustReturnNewDateString,{     // Prepare     luankevinferreira.expenses.util.DateUtils dateUtils = new luankevinferreira.expenses.util.DateUtils();     // Action     java.lang.String expected = dateUtils.getStringDateTime(null);     // Verify     org.junit.Assert.assertNotNull(expected); }
https://github.com/luankevinferreira/expenses.git,DateUtilsTest,whenGetDateFormatMustReturnFullDateFormat,{     // Prepare     luankevinferreira.expenses.util.DateUtils dateUtils = new luankevinferreira.expenses.util.DateUtils();     java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();     calendar.set(2016, java.util.Calendar.JULY, 1, 2, 3, 4);     // Action     java.text.SimpleDateFormat format = dateUtils.getDateFormat();     // Verify     org.junit.Assert.assertEquals("2016-07-01 02:03:04", format.format(calendar.getTime())); }
https://github.com/luankevinferreira/expenses.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("luankevinferreira.expenses", appContext.getPackageName()); }
https://github.com/rapidpro/surveyor.git,EngineTest,currentSpecVersion,{     org.junit.Assert.assertThat(io.rapidpro.surveyor.engine.Engine.currentSpecVersion(), org.hamcrest.CoreMatchers.is(new com.vdurmont.semver4j.Semver("13.1.0"))); }
https://github.com/SvenWerlen/pathfinderfr-android.git,StringUtilTest,integerHandling,{     int[] source = new int[]{ 2, 1, -4, 3 };     java.lang.String expected = "2:1:-4:3";     org.junit.Assert.assertEquals(expected, org.pathfinderfr.app.util.StringUtil.listToString(source, ':'));     java.lang.String[] sourceList = new java.lang.String[]{ "2", "+1", "-4", "3" };     int[] expectedList = new int[]{ 2, 1, -4, 3 };     org.pathfinderfr.app.util.StringUtilTest.assertlistsMatch(expectedList, org.pathfinderfr.app.util.StringUtil.stringListToIntList(sourceList)); }
https://github.com/SvenWerlen/pathfinderfr-android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("org.pathfinderfr", appContext.getPackageName()); }
https://github.com/thomasfischersm/PeerToPeerOxygen.git,MissionTreeBuilderTest,findOrphanTrees,{     com.playposse.peertopeeroxygen.android.ui.widgets.missiontree.MissionTreeBuilder builder = new com.playposse.peertopeeroxygen.android.ui.widgets.missiontree.MissionTreeBuilder(null, missionTreeBean, com.playposse.peertopeeroxygen.android.ui.widgets.missiontree.MissionTreeBuilderTest.MAX_COLUMNS, dataRepository);     java.util.Set<com.playposse.peertopeeroxygen.android.ui.widgets.missiontree.OrphanTree> orphanTrees = builder.getOrphanTrees();     junit.framework.Assert.assertEquals(1, orphanTrees.size());     com.playposse.peertopeeroxygen.android.ui.widgets.missiontree.OrphanTree orphanTree = orphanTrees.iterator().next();     junit.framework.Assert.assertEquals(1, orphanTree.getSizeComplexity());     org.junit.Assert.assertThat(orphanTree.getSortedOrdinals(), org.hamcrest.CoreMatchers.is(java.util.Arrays.asList(0))); }
https://github.com/thomasfischersm/PeerToPeerOxygen.git,RegisterOrLoginServerActionTest,loginWithoutDomain,{     // Create test user in Facebook.     com.restfb.types.TestUser fbTestUser = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.createFbTestUser(com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TEST_USER_NAME);     // Login for the first time.     com.playposse.peertopeeroxygen.backend.peerToPeerOxygenApi.model.MasterUserBean masterUserBean = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.registerOrLoginUser(fbTestUser, com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken(), null);     assertMasterUser(masterUserBean);     com.playposse.peertopeeroxygen.backend.serveractions.util.VerificationUtil.verifySubscribedDomains(api, masterUserBean, java.util.Collections.<java.lang.Long>emptyList());     java.lang.Long oldSessionId = masterUserBean.getSessionId();     // Login to existing user.     masterUserBean = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.registerOrLoginUser(fbTestUser, com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken(), null);     assertMasterUser(masterUserBean);     com.playposse.peertopeeroxygen.backend.serveractions.util.VerificationUtil.verifySubscribedDomains(api, masterUserBean, java.util.Collections.<java.lang.Long>emptyList());     org.junit.Assert.assertNotEquals(oldSessionId, masterUserBean.getSessionId()); }
https://github.com/thomasfischersm/PeerToPeerOxygen.git,RegisterOrLoginServerActionTest,loginWithDomain,{     // Create test user in Facebook.     com.restfb.types.TestUser fbTestUser = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.createFbTestUser(com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TEST_USER_NAME);     // Login for the first time.     com.playposse.peertopeeroxygen.backend.peerToPeerOxygenApi.model.MasterUserBean masterUserBean = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.registerOrLoginUser(fbTestUser, com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken(), com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TESTING_DOMAIN_ID);     assertMasterUser(masterUserBean);     com.playposse.peertopeeroxygen.backend.serveractions.util.VerificationUtil.verifySubscribedDomains(api, masterUserBean, java.util.Arrays.asList(com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TESTING_DOMAIN_ID));     java.lang.Long oldSessionId = masterUserBean.getSessionId();     // Login to existing user.     masterUserBean = com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.registerOrLoginUser(fbTestUser, com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken(), com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TESTING_DOMAIN_ID);     assertMasterUser(masterUserBean);     com.playposse.peertopeeroxygen.backend.serveractions.util.VerificationUtil.verifySubscribedDomains(api, masterUserBean, java.util.Arrays.asList(com.playposse.peertopeeroxygen.backend.serveractions.util.ApiTestUtil.TESTING_DOMAIN_ID));     org.junit.Assert.assertNotEquals(oldSessionId, masterUserBean.getSessionId()); }
https://github.com/Aedge90/Nine-Mens-Morris-Android.git,StrategyTestParameterized,computeMoveShouldNotUndoHisMove,{     com.github.aedge90.nmm.Options.Color[][] mill5 = new com.github.aedge90.nmm.Options.Color[][]{ new com.github.aedge90.nmm.Options.Color[]{ N, I, I, P1, I, I, N }, new com.github.aedge90.nmm.Options.Color[]{ I, I, I, I, I, I, I }, new com.github.aedge90.nmm.Options.Color[]{ I, I, P1, P2, P1, I, I }, new com.github.aedge90.nmm.Options.Color[]{ P1, I, N, I, N, I, N }, new com.github.aedge90.nmm.Options.Color[]{ I, I, P2, P2, N, I, I }, new com.github.aedge90.nmm.Options.Color[]{ I, I, I, I, I, I, I }, new com.github.aedge90.nmm.Options.Color[]{ P2, I, I, P1, I, I, P2 } };     com.github.aedge90.nmm.GameBoard gameBoard = new com.github.aedge90.nmm.Mill5(mill5);     android.widget.ProgressBar progBar = new android.widget.ProgressBar(new android.test.mock.MockContext());     com.github.aedge90.nmm.ProgressUpdater updater = new com.github.aedge90.nmm.ProgressUpdater(progBar, new com.github.aedge90.nmm.GameModeActivity());     com.github.aedge90.nmm.Strategy strategyPlayer1 = new com.github.aedge90.nmm.Strategy(gameBoard, mPlayer1, updater, nThreads);     com.github.aedge90.nmm.Strategy strategyPlayer2 = new com.github.aedge90.nmm.Strategy(gameBoard, mPlayer2, updater, nThreads);     mPlayer1.setSetCount(0);     mPlayer2.setSetCount(0);     java.util.LinkedList<com.github.aedge90.nmm.Position> positionsP1Before = gameBoard.getPositions(mPlayer1.getColor());     com.github.aedge90.nmm.Move result1 = strategyPlayer1.computeMove();     gameBoard.executeCompleteTurn(result1, mPlayer1);     strategyPlayer2.computeMove();     // do not use this move, but compute it to check that it doesnt influence Player1s decision     gameBoard.executeCompleteTurn(new com.github.aedge90.nmm.Move(new com.github.aedge90.nmm.Position(4, 4), new com.github.aedge90.nmm.Position(3, 4), null), mPlayer2);     com.github.aedge90.nmm.Move result2 = strategyPlayer1.computeMove();     gameBoard.executeCompleteTurn(result2, mPlayer1);     java.util.LinkedList<com.github.aedge90.nmm.Position> positionsP1After = gameBoard.getPositions(mPlayer1.getColor());     org.junit.Assert.assertNotEquals(positionsP1Before, positionsP1After); }
https://github.com/mlintonford/bikecloud.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.example.matthew.myapplication", appContext.getPackageName()); }
https://github.com/mlintonford/bikecloud.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/maxpower47/PinDroid.git,SaxResultParserTest,testResultDoneParsing,{     java.io.InputStream is = new java.io.ByteArrayInputStream(doneTest.getBytes());     com.pindroid.xml.SaxResultParser parser = new com.pindroid.xml.SaxResultParser(is);     com.pindroid.client.PinboardApiResult r = parser.parse();     org.junit.Assert.assertEquals("done", r.getCode());     try {         is.close();     } catch (java.io.IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } }
https://github.com/maxpower47/PinDroid.git,SaxResultParserTest,testResultErrorParsing,{     java.io.InputStream is = new java.io.ByteArrayInputStream(errorTest.getBytes());     com.pindroid.xml.SaxResultParser parser = new com.pindroid.xml.SaxResultParser(is);     com.pindroid.client.PinboardApiResult r = parser.parse();     org.junit.Assert.assertEquals("something went wrong", r.getCode());     try {         is.close();     } catch (java.io.IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } }
https://github.com/maxpower47/PinDroid.git,SaxTokenParserTest,testUpdateParsing,{     java.io.InputStream is = new java.io.ByteArrayInputStream(tokenTest.getBytes());     com.pindroid.xml.SaxTokenParser parser = new com.pindroid.xml.SaxTokenParser(is);     com.pindroid.client.PinboardAuthToken r = parser.parse();     org.junit.Assert.assertEquals("XOG86E7JIYMI", r.getToken());     try {         is.close();     } catch (java.io.IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } }
https://github.com/maxpower47/PinDroid.git,SaxUpdateParserTest,testUpdateParsing,{     java.io.InputStream is = new java.io.ByteArrayInputStream(updateTest.getBytes());     com.pindroid.xml.SaxUpdateParser parser = new com.pindroid.xml.SaxUpdateParser(is);     com.pindroid.client.Update r = parser.parse();     org.junit.Assert.assertEquals(1300993327000L, r.getLastUpdate());     try {         is.close();     } catch (java.io.IOException e) {         e.printStackTrace();     } }
https://github.com/niccokunzmann/mundraub-android.git,HelperTest,metersToDegrees,{     double delta = 1.0E-6;     double meters = 1000;     double result = 0.008953;     double degrees = eu.quelltext.mundraub.common.Helper.metersToDegrees(meters);     org.junit.Assert.assertEquals(result, degrees, delta); }
https://github.com/niccokunzmann/mundraub-android.git,HelperTest,distanceInMetersBetween,{     double delta = 1.0E-6;     double longitude1 = 10.01;     double latitude1 = 11.02;     double longitude2 = 12.03;     double latitude2 = 13.04;     double distanceInMetersBetween = eu.quelltext.mundraub.common.Helper.distanceInMetersBetween(longitude1, latitude1, longitude2, latitude2);     double expected = 315583.811651;     org.junit.Assert.assertEquals(expected, distanceInMetersBetween, delta); }
https://github.com/niccokunzmann/mundraub-android.git,HelperTest,testMetersToDegrees,{     org.junit.Assert.assertEquals(eu.quelltext.mundraub.common.Helper.metersToDegrees(123.25), 0.0011034613797355577, 0); }
https://github.com/niccokunzmann/mundraub-android.git,AddressSearchResultTest,testBoundingBoxIsSetToExtent,{     org.json.JSONObject json = new org.json.JSONObject(eu.quelltext.mundraub.AddressSearchResultTest.JSON_TABARZ);     eu.quelltext.mundraub.search.AddressSearchResult a = eu.quelltext.mundraub.search.AddressSearchResult.fromNominatim(json, "Tabarz");     eu.quelltext.mundraub.map.MapUrl url = a.asMapUrl();     java.lang.String[] extent = url.getString("extent").split(",");     double[] values = new double[]{ 10.463545, 50.8327664, 10.5413258, 50.8942435 };     for (int i = 0; i < 4; i++) {         org.junit.Assert.assertEquals(java.lang.Double.parseDouble(extent[i]), values[i], 1.0E-7);     } }
https://github.com/niccokunzmann/mundraub-android.git,AddressSearchResultTest,testSerializeBoundingBox,{     eu.quelltext.mundraub.search.AddressSearchResult a = new eu.quelltext.mundraub.search.AddressSearchResult(11, "Test1", "Te", eu.quelltext.mundraub.AddressSearchResultTest.POSITION);     a.setBoundingBox(eu.quelltext.mundraub.map.position.BoundingBox.fromNESW(0, 1, 2, 3));     eu.quelltext.mundraub.search.AddressSearchResult a_2 = eu.quelltext.mundraub.search.AddressSearchResult.fromJSON(a.toJSON());     org.junit.Assert.assertEquals(a.asMapUrl().toString(), a_2.asMapUrl().toString()); }
https://github.com/niccokunzmann/mundraub-android.git,AddressStoreTest,testNewAddressIsNotUsedBeforeSearch,{     store.add(eu.quelltext.mundraub.AddressStoreTest.A1);     org.junit.Assert.assertEquals(0, store.size()); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testHashIsPreferredBeforeAQuery,{     eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl("?test=2#test=4");     org.junit.Assert.assertEquals("4", mapUrl.getString("test")); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testMapUrlWithoutParameterIsInvalid,{     org.junit.Assert.assertFalse(new eu.quelltext.mundraub.map.MapUrl("").isValid()); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testMapUrlCanIncludeBoundingBox,{     eu.quelltext.mundraub.map.position.BoundingBoxCollection bboxes = eu.quelltext.mundraub.map.position.BoundingBoxCollection.with(eu.quelltext.mundraub.map.position.BoundingBox.fromNESW(1, 2, 3, 4));     eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl("?").setOfflineAreaBoundingBoxes(bboxes);     org.junit.Assert.assertEquals(bboxes, mapUrl.getOfflineAreaBoundingBoxes()); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testMapUrlIncludesBoundingBoxInUrl,{     eu.quelltext.mundraub.map.position.BoundingBoxCollection bboxes = eu.quelltext.mundraub.map.position.BoundingBoxCollection.with(eu.quelltext.mundraub.map.position.BoundingBox.fromNESW(1, 2, 3, 4), eu.quelltext.mundraub.map.position.BoundingBox.fromNESW(21, 23, 344, 24));     eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl(new eu.quelltext.mundraub.map.MapUrl("?").setOfflineAreaBoundingBoxes(bboxes).getUrl());     eu.quelltext.mundraub.map.position.BoundingBoxCollection other = mapUrl.getOfflineAreaBoundingBoxes();     org.junit.Assert.assertEquals(bboxes, other); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testMapUrlHasNoBoundingBoxByDefault,{     eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl("?");     org.junit.Assert.assertEquals(0, mapUrl.getOfflineAreaBoundingBoxes().size()); }
https://github.com/niccokunzmann/mundraub-android.git,MapUrlTest,testSetZoom,{     eu.quelltext.mundraub.map.MapUrl mapUrl = new eu.quelltext.mundraub.map.MapUrl(0, 0);     for (int i = 1; i < 4; i++) {         mapUrl.setZoomTo(i);         org.junit.Assert.assertEquals(java.lang.Integer.toString(i), mapUrl.getString("zoom"));     } }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testCreatedSearchIsEmpty,{     org.junit.Assert.assertEquals(search.size(), 0); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testObserverIsNotNotifiedOnSubscribe,{     final boolean[] observerWasNotified = new boolean[]{ false };     search.notifyAboutChanges(new eu.quelltext.mundraub.search.IAddressSearch.Observer() {         @java.lang.Override         public void onNewSearchResults(eu.quelltext.mundraub.search.IAddressSearch addressSearch) {             observerWasNotified[0] = true;         }          @java.lang.Override         public void onSearchError(int errorId) {             observerWasNotified[0] = true;         }     });     org.junit.Assert.assertFalse(observerWasNotified[0]); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testEmptySearchHasNoItems,{     nextSearchResultsIn(eu.quelltext.mundraub.NominatimTest.SEARCH_EMPTY);     search.search("Test");     org.junit.Assert.assertEquals(0, search.size()); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testEmptySearchPassesOnSearchTerm,{     nextSearchResultsIn(eu.quelltext.mundraub.NominatimTest.SEARCH_EMPTY);     search.search("Test");     org.junit.Assert.assertEquals(getSearchTerm(), "Test"); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testErrorCodeIsPassedOn,{     nextSearchResultsIn(1000);     search.search("Test");     org.junit.Assert.assertEquals(1000, getObservedError()); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testSearchNotifiesAboutResult,{     nextSearchResultsIn(eu.quelltext.mundraub.NominatimTest.SEARCH_EMPTY);     search.search("123");     org.junit.Assert.assertEquals(search, getObservedSearch()); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testPotsdamHasSearchResults,{     searchFor("Potsdam", eu.quelltext.mundraub.NominatimTest.SEARCH_POTSDAM);     org.junit.Assert.assertEquals(10, search.size()); }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testPotsdamResultsAreNotNull,{     searchFor("Potsdam", eu.quelltext.mundraub.NominatimTest.SEARCH_POTSDAM);     for (int i = 0; i < search.size(); i++) {         org.junit.Assert.assertNotNull(search.get(i));     } }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testPotsdamIsOrderedByImportance,{     searchFor("Potsdam", eu.quelltext.mundraub.NominatimTest.SEARCH_POTSDAM);     for (int i = 0; i < (search.size() - 1); i++) {         eu.quelltext.mundraub.search.AddressSearchResult thisResult = search.get(i);         eu.quelltext.mundraub.search.AddressSearchResult otherResult = search.get(i + 1);         org.junit.Assert.assertTrue(thisResult.compareTo(otherResult) >= 0);     } }
https://github.com/niccokunzmann/mundraub-android.git,NominatimTest,testInvalidJSON,{     searchFor("Potsdam", eu.quelltext.mundraub.NominatimTest.SEARCH_INVALID);     org.junit.Assert.assertEquals(R.string.error_could_not_parse_open_street_map_data, getObservedError()); }
https://github.com/namlit/siteswap_generator.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("namlit.siteswapgenerator", appContext.getPackageName()); }
https://github.com/namlit/siteswap_generator.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/namlit/siteswap_generator.git,NumberFilterTest,testCreateSynchronousFromString,{     java.lang.String expected = new java.lang.String("6p");     siteswaplib.NumberFilter filter = new siteswaplib.NumberFilter(expected, siteswaplib.NumberFilter.Type.EQUAL, 1, 2);     org.junit.Assert.assertEquals(expected, filter.getFilterValue().toString()); }
https://github.com/namlit/siteswap_generator.git,SiteswapTest,testMergeSyncSiteswapsFailOnInvalidSiteswap,{     siteswaplib.Siteswap s1 = new siteswaplib.Siteswap("86277");     siteswaplib.Siteswap s2 = new siteswaplib.Siteswap("6787a");     siteswaplib.Siteswap merged = siteswaplib.Siteswap.mergeCompatible(s1, s2);     org.junit.Assert.assertEquals(merged, null); }
https://github.com/namlit/siteswap_generator.git,SiteswapTest,testMergeSyncSiteswapsFailOnIncompatibility,{     siteswaplib.Siteswap s1 = new siteswaplib.Siteswap("86277");     siteswaplib.Siteswap s2 = new siteswaplib.Siteswap("86727");     siteswaplib.Siteswap merged = siteswaplib.Siteswap.mergeCompatible(s1, s2);     org.junit.Assert.assertEquals(merged, null); }
https://github.com/SecUSo/privacy-friendly-shopping-list.git,DateUtilsTest,getFormattedDateString,{     java.lang.String formattedDateString = privacyfriendlyshoppinglist.secuso.org.privacyfriendlyshoppinglist.framework.utils.DateUtils.getFormattedDateString(data.getInputDate(), data.getInputPattern(), data.getOutputPaterrn(), data.getLanguage());     org.junit.Assert.assertEquals(data.getExpectedDate(), formattedDateString); }
https://github.com/SecUSo/privacy-friendly-shopping-list.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/gsantner/markor.git,Csv2MdTableTest,toMdTable,{     java.lang.String expected = (((("|col1|col2|col3|\n" + "|:---|:---|:---|\n") + "|1|2|3|\n") + "|1|&nbsp;|&nbsp;|\n") + "|1|multi<br/>line|3|\n") + "|1|text with \" .,;!!\t:|3|";     // empty lines are ignored/removed     java.lang.String csv = ((((((("\n\n\n\n" + "# comment lines are ignored/removed\n") + "col1;col2;col3\n") + "1;2;3\n") + // missing colums will be completed     "1\n") + // empty lines are ignored/removed     "\n\n") + // newline in column will be replaced by html <br/>     "1;\"multi\n") + "    line\";3\n") + // handling special chars     "1;\"text with \"\" .,;!|\t:\";3\n";     java.lang.String markdown = net.gsantner.markor.format.csv.CsvTextConverter.Csv2MdTable.toMdTable(csv);     org.junit.Assert.assertEquals(expected, markdown.trim()); }
https://github.com/gsantner/markor.git,Csv2MdTableTest,toMdTableInferSeperator,{     java.lang.String expected = ("|col1|col2|col3|\n" + "|:---|:---|:---|\n") + "|1|2|3|";     // use "," instead of ";" as seperator     // use -'- instead of -"- as quote char     java.lang.String csv = "'col1',col2,col3\n" + "1,'2',3\n";     java.lang.String markdown = net.gsantner.markor.format.csv.CsvTextConverter.Csv2MdTable.toMdTable(csv);     org.junit.Assert.assertEquals(expected, markdown.trim()); }
https://github.com/gsantner/markor.git,WikitextLinkResolverTests,returnsNullIfRelativePageCannotBeFoundWithUnreachableRoot,{     // if the notebook root directory cannot be reached by traversing up,     // make sure that no NullPointerException is thrown - null should be returned as resolved link     java.nio.file.Path currentPage = notebookRoot.resolve("My_page/Another_page.txt");     java.nio.file.Path unreachableRoot = notebookRoot.resolve("Your page");     net.gsantner.markor.format.wikitext.WikitextLinkResolver resolver = net.gsantner.markor.format.wikitext.WikitextLinkResolver.resolve("[[The coolest page]]", unreachableRoot.toFile(), currentPage.toFile(), false);     org.junit.Assert.assertNull(resolver.getResolvedLink()); }
https://github.com/gsantner/markor.git,GsTextUtilsTest,getNeighbourLineEndings_bothFound,{     int pos = lineWithNL.indexOf("av");// inside java      int[] result = net.gsantner.opoc.format.GsTextUtils.getNeighbourLineEndings(lineWithNL, pos, pos);     org.junit.Assert.assertArrayEquals("'java' found", new int[]{ 6, 11 }, result); }
https://github.com/gsantner/markor.git,GsTextUtilsTest,getNeighbourLineEndings_noEnd,{     int pos = lineWithNL.indexOf("or");// inside world      int[] result = net.gsantner.opoc.format.GsTextUtils.getNeighbourLineEndings(lineWithNL, pos, pos);     org.junit.Assert.assertArrayEquals("'world' found", new int[]{ 11, 18 }, result); }
https://github.com/gsantner/markor.git,GsTextUtilsTest,getNeighbourLineEndings_noBegin,{     int pos = lineWithNL.indexOf("el");// inside Hello      int[] result = net.gsantner.opoc.format.GsTextUtils.getNeighbourLineEndings(lineWithNL, pos, pos);     org.junit.Assert.assertArrayEquals("'hello' found", new int[]{ 0, 6 }, result); }
https://github.com/gsantner/markor.git,GsTextUtilsTest,getNeighbourLineEndings_noNl,{     int pos = lineWithNL.indexOf("av");// inside java      int[] result = net.gsantner.opoc.format.GsTextUtils.getNeighbourLineEndings(lineWithoutNL, pos, pos);     org.junit.Assert.assertArrayEquals("whole text returned", new int[]{ 0, 16 }, result); }
https://github.com/vbier/habpanelviewer.git,SseConnectionTest,testInitialStatus,{     org.junit.Assert.assertEquals(de.vier_bier.habpanelviewer.openhab.SseConnection.Status.NOT_CONNECTED, mSseConnection.getStatus()); }
https://github.com/vbier/habpanelviewer.git,SseConnectionTest,testNoNetwork,{     mSseConnection.setServerUrl("http://localhost:8080");     org.junit.Assert.assertEquals(de.vier_bier.habpanelviewer.openhab.SseConnection.Status.NO_NETWORK, mSseConnection.getStatus()); }
https://github.com/vbier/habpanelviewer.git,SseConnectionTest,testMissingConfig,{     mSseConnection.connected();     org.junit.Assert.assertEquals(de.vier_bier.habpanelviewer.openhab.SseConnection.Status.URL_MISSING, mSseConnection.getStatus()); }
https://github.com/ramack/ActivityDiary.git,ActivityDiaryContentProviderTest,insertion,{     android.database.Cursor cursor = contentResolver.query(de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.CONTENT_URI, de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.PROJECTION_ALL, null, null, de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.SORT_ORDER_DEFAULT);     int oldCount = cursor.getCount();     android.content.ContentValues vals = new android.content.ContentValues();     vals.put(de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.NAME, "TestName");     vals.put(de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.COLOR, "BLACK");     contentResolver.insert(de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.CONTENT_URI, vals);     cursor = contentResolver.query(de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.CONTENT_URI, de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.PROJECTION_ALL, null, null, de.rampro.activitydiary.db.ActivityDiaryContract.DiaryActivity.SORT_ORDER_DEFAULT);     org.junit.Assert.assertTrue("content added", cursor.getCount() == (oldCount + 1)); }
https://github.com/ramack/ActivityDiary.git,GraphicsHelperUnitTest,shouldNotBeNull,{     org.junit.Assert.assertNotNull(activity); }
https://github.com/ramack/ActivityDiary.git,MainActivityTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = activity;     org.junit.Assert.assertEquals("de.rampro.activitydiary", appContext.getPackageName()); }
https://github.com/ramack/ActivityDiary.git,MainActivityInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("de.rampro.activitydiary.debug", appContext.getPackageName()); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,Base56UnitTest,testEncodeAndDecodeNormal,{     final java.lang.String testIdentity = "KKUtzSvTsNiNDdPQZdqCpZJCwzCdyQh6kk9vU7wRg6trU6cP6xVqLvNAff4iNv2PW8sw3tYcu7CaxQ5trcTCeB7WbaeDjxTbh6VEiNNPNBd";     byte[] decodedBytes = org.ea.sqrl.utils.EncryptionUtils.decodeBase56(testIdentity);     java.lang.String encoded = org.ea.sqrl.utils.EncryptionUtils.encodeBase56(decodedBytes);     org.junit.Assert.assertEquals("Encoding should be the same before and after", testIdentity, encoded); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,Base56UnitTest,testEncodeAndDecodePadded,{     final java.lang.String testIdentity = "jwvG2Ee7cTT55NxVt5Ja8b32urmmmvbYyMDMKQR3Q2eXMsAKJCYg6SqaihcN69s8P3reQz2xxhy4eRyDgTc3F5zrSmMhSF9SwrDqRAU7E2u";     byte[] decodedBytes = org.ea.sqrl.utils.EncryptionUtils.decodeBase56(testIdentity);     java.lang.String encoded = org.ea.sqrl.utils.EncryptionUtils.encodeBase56(decodedBytes);     org.junit.Assert.assertEquals("Encoding should be the same before and after", testIdentity, encoded); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,Base56UnitTest,testEncodeAndDecodePaddedLong,{     final java.lang.String testIdentity = "tP8zx8kY8EMPLqzWVq6aPL2my25Pc6KwrVyrUQwRiBKwRc6FPAmPumtrGQ8CtBhxqkRLExuE7tsFbrzUTfb2qSZ9eqDbcfjv8Zdqi6DXa5Ztn3CWsVAZFFF6jafiyixYhGqSeZdg4zjCi7cMgEsBYwWHevsB2H6y9gam2GbXk5A4SSek4Rmrmx64qxUnQJer62WnGcWArqCBzQYVw4GcvAsBjvjDvjN7RhKGdhLpLMTKB7DpfTkhCeaPDWCZxy3AVzxbwKSdjHcZmnaMegiE2t";     byte[] decodedBytes = org.ea.sqrl.utils.EncryptionUtils.decodeBase56(testIdentity);     java.lang.String encoded = org.ea.sqrl.utils.EncryptionUtils.encodeBase56(decodedBytes);     org.junit.Assert.assertEquals("Encoding should be the same before and after", testIdentity, encoded); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,Base56UnitTest,testEncodeAndDecodeVectors,{     java.util.List<java.util.List<java.lang.String>> vectors = org.ea.sqrl.TestHelper.parseVectorCsvFile("base56-vectors.txt", true, true);     int vectorNumber = 1;     for (java.util.List<java.lang.String> vector : vectors) {         byte[] input = org.ea.sqrl.utils.EncryptionUtils.hex2Byte(vector.get(0));         java.lang.String lineNum = vector.get(1);         java.lang.String expectedResult = vector.get(2);         java.lang.String expectedCheckChar = vector.get(3);         java.lang.String encoded = org.ea.sqrl.utils.EncryptionUtils.encodeBase56(input);         // Remove check character, this will be verified separately         encoded = encoded.substring(0, encoded.length() - 1);         org.junit.Assert.assertEquals(("encodeBase56 / vector # " + vectorNumber) + ": Encoding should match result in vector file", expectedResult, encoded);         // TODO: Add check character validation         // This cannot be done sanely at the moment, because the check character         // creation is inlined in the encode/decode/verify functions, and there is         // no way to pass in the line number. This should definitely be pulled out         // into a separate function!         // TODO: Add decoding validation         // This cannot be done sanely at the moment, because the check character         // creation is inlined in the encode/decode/verify functions, and there is         // no way to pass in the line number. This should definitely be pulled out         // into a separate function!         vectorNumber++;     } }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,EnHashUnitTest,testEnHashVectors,{     java.util.List<java.util.List<java.lang.String>> vectors = org.ea.sqrl.TestHelper.parseVectorCsvFile("enhash-vectors.txt", true, true);     int vectorNumber = 1;     for (java.util.List<java.lang.String> vector : vectors) {         byte[] input = org.ea.sqrl.TestHelper.base64UrlDecode(vector.get(0));         byte[] expectedResult = org.ea.sqrl.TestHelper.base64UrlDecode(vector.get(1));         byte[] result = org.ea.sqrl.utils.EncryptionUtils.enHash(input);         org.junit.Assert.assertArrayEquals(("testEnHashVectors / vector # " + vectorNumber) + ": Decoded result should match result in vector file", expectedResult, result);         vectorNumber++;     } }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,domainLowercased,{     java.lang.String cryptDomain = testMatch("sqrl://ExAmPlE.cOm/?nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com", cryptDomain); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,ignorePort,{     java.lang.String cryptDomain = testMatch("sqrl://example.com:44344/?nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com", cryptDomain); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,ignoreUsername,{     java.lang.String cryptDomain = testMatch("sqrl://jonny@example.com/?nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com", cryptDomain); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,ignoreUsernameAndPassword,{     java.lang.String cryptDomain = testMatch("sqrl://Jonny:Secret@example.com/?nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com", cryptDomain); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,extendAuthDomain,{     java.lang.String cryptDomain = testMatch("sqrl://example.com/jimbo/?x=6&nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com/jimbo", cryptDomain); }
https://github.com/kalaspuffar/secure-quick-reliable-login.git,SQRLURLUnitTest,extensionCaseAndLimitByQuestionMark,{     java.lang.String cryptDomain = testMatch("sqrl://EXAMPLE.COM/JIMBO?x=16&nut=oOB4QOFJux5Z");     org.junit.Assert.assertEquals("example.com/JIMBO", cryptDomain); }
https://github.com/Berlin-Vegan/berlin-vegan-guide.git,GastroLocationTest,testCondensedOpeningHours,{     final java.util.List<org.berlin_vegan.bvapp.data.OpeningHoursInterval> openingHours = mLocation.getCondensedOpeningHours();     org.junit.Assert.assertEquals(5, openingHours.size()); }
https://github.com/Berlin-Vegan/berlin-vegan-guide.git,GastroLocationTest,testCondensedOpeningHoursCompleteClosed,{     final java.util.List<org.berlin_vegan.bvapp.data.OpeningHoursInterval> openingHours = mLocationAlwaysClosed.getCondensedOpeningHours();     org.junit.Assert.assertEquals(1, openingHours.size()); }
https://github.com/Berlin-Vegan/berlin-vegan-guide.git,GastroLocationTest,testIsOpenLocationAlwaysClosed,{     org.junit.Assert.assertFalse(mLocationAlwaysClosed.isOpen(java.util.Calendar.getInstance().getTime())); }
https://github.com/Berlin-Vegan/berlin-vegan-guide.git,GastroLocationTest,testIsOpenForLocationAlwaysOpen,{     final org.berlin_vegan.bvapp.data.GastroLocation location = new org.berlin_vegan.bvapp.data.GastroLocation();     location.setOtMon("0 - 24");     java.util.Date date = new java.util.GregorianCalendar(2015, 7, 10, 20, 32).getTime();// monday 20:32, 10 August 2015      org.junit.Assert.assertTrue(location.isOpen(date)); }
https://github.com/cfatihb/buluterp.git,LoginResponseInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.mobil.bulut", appContext.getPackageName()); }
https://github.com/cfatihb/buluterp.git,LoginResponseUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/nettrash/SIB.Android.git,MD5UnitTest,hashMD5_isCorrect,{     byte[] bytes = "NETTRASH".getBytes();     ru.nettrash.crypto.MD5 md = new ru.nettrash.crypto.MD5();     md.update(bytes);     byte[] hash = md.digest();     java.lang.StringBuilder sb = new java.lang.StringBuilder();     for (byte b : hash) {         sb.append(java.lang.String.format("%02X", b & 0xff));     }     org.junit.Assert.assertEquals("90bc0c1e6158acdddf5eb5f357ae565a", sb.toString().toLowerCase()); }
https://github.com/nettrash/SIB.Android.git,RIPEMD160UnitTest,hashRIPEMD160_isCorrect,{     byte[] bytes = "NETTRASH".getBytes();     ru.nettrash.crypto.RIPEMD160 md = new ru.nettrash.crypto.RIPEMD160();     md.update(bytes);     byte[] hash = md.digest();     java.lang.StringBuilder sb = new java.lang.StringBuilder();     for (byte b : hash) {         sb.append(java.lang.String.format("%02X", b & 0xff));     }     org.junit.Assert.assertEquals("f221ac849e46be0afb53ef24610bba35ae1ceb3b", sb.toString().toLowerCase()); }
https://github.com/nettrash/SIB.Android.git,SHA256UnitTest,hashSHA256_isCorrect,{     byte[] bytes = "NETTRASH".getBytes();     ru.nettrash.crypto.SHA256 md = new ru.nettrash.crypto.SHA256();     md.update(bytes);     byte[] hash = md.digest();     java.lang.StringBuilder sb = new java.lang.StringBuilder();     for (byte b : hash) {         sb.append(java.lang.String.format("%02X", b & 0xff));     }     org.junit.Assert.assertEquals("1dbc11294e55278e06b32729c22144fd51da3d20b770ef9270af380d33b2525d", sb.toString().toLowerCase()); }
https://github.com/nettrash/SIB.Android.git,sibWalletUnitTest,sibTransactionSign_isCorrect,{     ru.nettrash.sibcoin.sibTransaction tx = new ru.nettrash.sibcoin.sibTransaction();     tx.addInput(new ru.nettrash.sibcoin.classes.sibUnspentTransaction("6f0bc852576ab14ba3034de7a31395391b3860f1269d938248e25059f9e0f151", 1.0, "SQDtZDsmQqinZw7tRr9JVKX7iF8RndCLNW", 0, "76a91420214eb53d755ce189873609c5d17404db01539488ac"));     tx.addOutput("SQBYgoR2r67ihxZToKfeLrxtCjGPWTrZRh", 0.1);     ru.nettrash.sibcoin.database.Address addr = new ru.nettrash.sibcoin.database.Address();     addr.setAddress("SQDtZDsmQqinZw7tRr9JVKX7iF8RndCLNW");     addr.setAddressType(((short) (0)));     addr.setCompressed(true);     addr.setWif("KxeSJPbsGzdMzn9BEsWZJzLLGduZZWCJp2BbL9GbvY2UvexCCnnp");     addr.setPrivateKey(new int[]{ 42, 142, 181, 162, 240, 227, 230, 146, 76, 87, 211, 205, 139, 192, 200, 164, 24, 19, 119, 69, 144, 212, 247, 82, 3, 234, 176, 215, 192, 106, 36, 56 });     addr.setPublicKey(new int[]{ 2, 5, 14, 229, 161, 25, 28, 166, 246, 74, 254, 167, 71, 35, 198, 29, 110, 236, 119, 50, 25, 124, 97, 120, 71, 241, 196, 142, 48, 59, 89, 255, 61 });     int[] s = tx.sign(new ru.nettrash.sibcoin.database.Address[]{ addr });     int[] script = ru.nettrash.sibcoin.sibAddress.spendToScript("SQBYgoR2r67ihxZToKfeLrxtCjGPWTrZRh");     org.junit.Assert.assertEquals(s.length, 158); }
https://github.com/amrendra18/codezera.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/SecUSo/privacy-friendly-battleship.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/SecUSo/privacy-friendly-battleship.git,GameControllerTest,testEquals,{     org.secuso.privacyfriendlybattleship.game.GameCell cell = controller.getGridFirstPlayer().getCell(1, 1);     org.junit.Assert.assertTrue(controller.getGridSecondPlayer().getCell(1, 1).equals(cell)); }
https://github.com/SecUSo/privacy-friendly-battleship.git,GameControllerTest,testFindShipContainingCell,{     org.secuso.privacyfriendlybattleship.game.GameGrid grid;     if (!controller.getCurrentPlayer()) {         grid = controller.getGridFirstPlayer();     } else {         grid = controller.getGridSecondPlayer();     }     org.secuso.privacyfriendlybattleship.game.GameCell cell = grid.getCell(1, 1);     org.secuso.privacyfriendlybattleship.game.GameShip ship = grid.getShipSet().findShipContainingCell(cell);     org.junit.Assert.assertEquals(ship.getSize(), 3); }
https://github.com/SecUSo/privacy-friendly-battleship.git,GameControllerTest,placeShipsRandomlyTest,{     controller.getGridSecondPlayer().getShipSet().placeShipsRandomly();     org.junit.Assert.assertEquals(controller.getGridSecondPlayer().getShipSet().placementLegit(), true); }
https://github.com/bigmikehoncho/RiskDiceSimulator.git,RiskDiceSimulatorUnitTest,checkIfValidBattle,{     org.junit.Assert.assertTrue(mSimulator.isAttackPossible()); }
https://github.com/PiXeL16/Sea-Nec-IO.git,PhoneNumberUtilsTests,testStripCountryCode,{     java.lang.String result = com.greenpixels.seanecio.telephony.PhoneNumberUtils.stripCountryCodeFromPhoneNumber("+50660-51-10-10", "CR");     org.junit.Assert.assertEquals(result, "60511010"); }
https://github.com/PiXeL16/Sea-Nec-IO.git,PhoneNumberUtilsTests,testStripCountryCodeWithErrors,{     java.lang.String result = com.greenpixels.seanecio.telephony.PhoneNumberUtils.stripCountryCodeFromPhoneNumber("+151-10-10", "CR");     org.junit.Assert.assertEquals(result, "511010"); }
https://github.com/PiXeL16/Sea-Nec-IO.git,PhoneNumberUtilsTests,testFormatingPhoneNumber,{     java.lang.String result = com.greenpixels.seanecio.telephony.PhoneNumberUtils.formatPhoneNumber("60511008", "CR");     org.junit.Assert.assertEquals(result, "6051 1008"); }
https://github.com/PiXeL16/Sea-Nec-IO.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/TimLavers/IndoFlashJava.git,Shuffle,doIt,{     ui.checkCurrentWordIs("you");// Sanity check.      ui.shuffleUnshuffleButton().checkDescription("Turn shuffle on");     ui.shuffleUnshuffleButton().activate();     ui.shuffleUnshuffleButton().checkDescription("Turn shuffle off");     // The list should be refreshed and the words should show in a random order.     org.junit.Assert.assertNotEquals(firstFiveWordsShowing(), firstFiveWordsUnshuffled());// Could happen, but very unlikely (1 in 5,100,480 chance).  }
https://github.com/TimLavers/IndoFlashJava.git,TurnShuffleOff,doIt,{     ui.checkCurrentWordIs("you");// Sanity check.      ui.shuffleUnshuffleButton().checkDescription("Turn shuffle on");     ui.shuffleUnshuffleButton().activate();     ui.shuffleUnshuffleButton().checkDescription("Turn shuffle off");     ui.shuffleUnshuffleButton().activate();// Second time it is called.      // The list should be refreshed and the words should show in normal order.     org.junit.Assert.assertEquals(firstFiveWordsUnshuffled(), firstFiveWordsShowing()); }
https://github.com/TimLavers/IndoFlashJava.git,ChapterSpecTest,toStringTest,{     org.w3c.dom.Node appNode = org.grandtestauto.indoflash.spec.WordListSpecTest.parseNode(org.grandtestauto.indoflash.spec.ChapterSpecTest.XML, org.grandtestauto.indoflash.spec.ChapterSpec.CHAPTER);     org.grandtestauto.indoflash.spec.ChapterSpec spec = new org.grandtestauto.indoflash.spec.ChapterSpec(((org.w3c.dom.Element) (appNode)));     org.junit.Assert.assertEquals("Lessons 1 - 10", spec.toString()); }
https://github.com/TimLavers/IndoFlashJava.git,SpecTest,testTitle,{     org.junit.Assert.assertEquals("The title", org.grandtestauto.indoflash.spec.SpecTest.spec("The title").title()); }
https://github.com/TimLavers/IndoFlashJava.git,SpecTest,constructFromNode,{     java.lang.String xml = "<WordList><Title>Lesson 1</Title><File>lesson1</File></WordList>";     org.w3c.dom.Node appNode = org.grandtestauto.indoflash.spec.WordListSpecTest.parseNode(xml, org.grandtestauto.indoflash.spec.WordListSpec.TAG);     org.grandtestauto.indoflash.spec.Spec list = new org.grandtestauto.indoflash.spec.Spec(((org.w3c.dom.Element) (appNode)));     org.junit.Assert.assertEquals("Lesson 1", list.title()); }
https://github.com/TimLavers/IndoFlashJava.git,WordListSpecTest,testTitle,{     java.lang.String title = "The title";     org.junit.Assert.assertEquals(title, org.grandtestauto.indoflash.spec.WordListSpecTest.wordListSpec(title, "The file").title()); }
https://github.com/TimLavers/IndoFlashJava.git,WordListSpecTest,testFileName,{     java.lang.String title = "The title";     java.lang.String fileName = "The file";     org.junit.Assert.assertEquals(fileName, org.grandtestauto.indoflash.spec.WordListSpecTest.wordListSpec(title, fileName).fileName()); }
https://github.com/TimLavers/IndoFlashJava.git,WordListSpecTest,toStringTest,{     java.lang.String title = "The title";     org.junit.Assert.assertEquals(title, org.grandtestauto.indoflash.spec.WordListSpecTest.wordListSpec(title, "The file").toString()); }
https://github.com/TimLavers/IndoFlashJava.git,WordListTest,wordsReturnsCopies,{     org.grandtestauto.indoflash.word.WordList list = wl123();     org.junit.Assert.assertNotSame(list.words(), list.words()); }
https://github.com/TimLavers/IndoFlashJava.git,WordListTest,read,{     java.io.Reader reader = new java.io.StringReader("satu=one\ndua=two\n\ntiga=three");     org.junit.Assert.assertEquals(org.grandtestauto.indoflash.word.WordList.read(reader).words(), wl123().words()); }
https://github.com/TimLavers/IndoFlashJava.git,WordTest,hashCodeTest,{     org.grandtestauto.indoflash.word.Word w1 = new org.grandtestauto.indoflash.word.Word("satu", "one");     org.grandtestauto.indoflash.word.Word w2 = new org.grandtestauto.indoflash.word.Word("satu", "1");     org.junit.Assert.assertEquals(w1.hashCode(), w2.hashCode()); }
https://github.com/TimLavers/IndoFlashJava.git,WordTest,testWord,{     org.grandtestauto.indoflash.word.Word word = new org.grandtestauto.indoflash.word.Word("satu", "one");     org.junit.Assert.assertEquals("satu", word.word()); }
https://github.com/TimLavers/IndoFlashJava.git,WordTest,testDefinition,{     org.grandtestauto.indoflash.word.Word word = new org.grandtestauto.indoflash.word.Word("satu", "one");     org.junit.Assert.assertEquals("one", word.definition()); }
https://github.com/TimLavers/IndoFlashJava.git,WordTest,toStringTest,{     org.grandtestauto.indoflash.word.Word word = new org.grandtestauto.indoflash.word.Word("satu", "one");     org.junit.Assert.assertEquals("satu=one", word.toString()); }
https://github.com/Jindetta/Android-Sudoku.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("fi.tuni.androidsudoku", appContext.getPackageName()); }
https://github.com/DanielTheDeveloper/My-Digital-Safe.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.securityFirstDesigns.security.ciphernote", appContext.getPackageName()); }
https://github.com/Mools222/Consentcoin.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.thomosim.consentcoin", appContext.getPackageName()); }
https://github.com/Mools222/Consentcoin.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/fedeLizondo/BaseDeDatos.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("fedelizondo.basededatos", appContext.getPackageName()); }
https://github.com/fedeLizondo/BaseDeDatos.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/fedeLizondo/BaseDeDatos.git,AdministradoraTest,darListadoAtributos,{     java.util.ArrayList<java.lang.String> atributos = new java.util.ArrayList<java.lang.String>() {         {             add("A");             add("B");             add("C");             add("D");             add("E");         }     };     org.junit.Assert.assertEquals(atributos, LogicaNegocio.AdministradoraTest.admin.darListadoAtributos()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFComplejaTest,soyDeterminanteComplejo,{     org.junit.Assert.assertEquals(false, LogicaNegocio.DFComplejaTest.dfCompleja.soyDeterminanteComplejo()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFComplejaTest,soyCompleja,{     org.junit.Assert.assertEquals(true, LogicaNegocio.DFComplejaTest.dfCompleja.soyCompleja()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFComplejaTest,toStrings,{     org.junit.Assert.assertEquals("[A, B] -> [C, D]", LogicaNegocio.DFComplejaTest.dfCompleja.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFDeterminadoComplejoTest,soyDeterminanteComplejo,{     org.junit.Assert.assertEquals(false, LogicaNegocio.DFDeterminadoComplejoTest.dfDeterminadoComplejo.soyDeterminanteComplejo()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFDeterminadoComplejoTest,soyCompleja,{     org.junit.Assert.assertEquals(false, LogicaNegocio.DFDeterminadoComplejoTest.dfDeterminadoComplejo.soyDeterminanteComplejo()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFDeterminadoComplejoTest,toStrings,{     org.junit.Assert.assertEquals("A -> [B, C]", LogicaNegocio.DFDeterminadoComplejoTest.dfDeterminadoComplejo.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFDeterminanteComplejoTest,toStrings,{     org.junit.Assert.assertEquals("[A, B] -> C", LogicaNegocio.DFDeterminanteComplejoTest.dfDeterminanteComplejo.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,DFSimpleTest,toStringS,{     org.junit.Assert.assertEquals("A -> B", dfSimple.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,justificaMiFN,{     org.junit.Assert.assertEquals("Esta en Forma Normal de Boyce-Codd.", LogicaNegocio.FNBCTest.fnbc.JustificaMiFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,toStrings,{     org.junit.Assert.assertEquals("FORMA NORMAL DE BOYCE-CODD", LogicaNegocio.FNBCTest.fnbc.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,soyFNBC,{     org.junit.Assert.assertEquals(true, LogicaNegocio.FNBCTest.fnbc.soyFNBC()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,soyTerceraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.FNBCTest.fnbc.soyTerceraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,soySegundaFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.FNBCTest.fnbc.soySegundaFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,FNBCTest,soyPrimeraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.FNBCTest.fnbc.soyPrimeraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,justificaMiFN,{     org.junit.Assert.assertEquals((("Esta en 1ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.PrimeraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.JustificaMiFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,toStrings,{     org.junit.Assert.assertEquals("PRIMERA FORMA NORMAL", LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,soyprimeraFormaNormal,{     org.junit.Assert.assertEquals(false, LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.soyFNBC()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,soyTerceraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.soyTerceraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,soySegundaFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.soySegundaFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,PrimeraFormaNormalTest,soyPrimeraFN,{     org.junit.Assert.assertEquals(true, LogicaNegocio.PrimeraFormaNormalTest.primeraFormaNormal.soyPrimeraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,justificaMiFN,{     org.junit.Assert.assertEquals((("Esta en 2da Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.SegundaFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.JustificaMiFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,toStrings,{     org.junit.Assert.assertEquals("SEGUNDA FORMA NORMAL", LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,soyprimeraFormaNormal,{     org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyFNBC()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,soyTerceraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyTerceraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,soySegundaFN,{     org.junit.Assert.assertEquals(true, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soySegundaFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,SegundaFormaNormalTest,soyPrimeraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.SegundaFormaNormalTest.segundaFormaNormal.soyPrimeraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,justificaMiFN,{     org.junit.Assert.assertEquals((("Esta en 3ra Forma Normal :\n" + "Por la dependencia Funcional ") + LogicaNegocio.TerceraFormaNormalTest.dfSimple.toString()) + ". ", LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.JustificaMiFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,toStrings,{     org.junit.Assert.assertEquals("TERCERA FORMA NORMAL", LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.toString()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,soyprimeraFormaNormal,{     org.junit.Assert.assertEquals(false, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soyFNBC()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,soyTerceraFN,{     org.junit.Assert.assertEquals(true, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soyTerceraFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,soySegundaFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soySegundaFN()); }
https://github.com/fedeLizondo/BaseDeDatos.git,TerceraFormaNormalTest,soyPrimeraFN,{     org.junit.Assert.assertEquals(false, LogicaNegocio.TerceraFormaNormalTest.terceraFormaNormal.soyPrimeraFN()); }
https://github.com/ProjectUNBI/Iyek_Retouch.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.unbi.iyekretouch", appContext.getPackageName()); }
https://github.com/ProjectUNBI/Iyek_Retouch.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ProjectUNBI/Iyek_Retouch.git,doIyekTest,convertnow,{     com.unbi.iyekretouch.userSavePreferance userpref = new com.unbi.iyekretouch.userSavePreferance();     android.content.Context context = null;     java.lang.String preIyek = "k";     com.unbi.iyekretouch.doIyek doiyek = new com.unbi.iyekretouch.doIyek();     doiyek.convertnow("hh", context, preIyek, userpref);     java.lang.String output = doiyek.getConverted();     java.lang.System.out.print(output);     java.lang.String expect = "ꯀ";     org.junit.Assert.assertEquals(expect, output); }
https://github.com/MahalingamD/ROTO.git,TISplashPresenterTest,checkAppUpdate,{     // TIRotogroAPI mockedApiInterface = Mockito.mock(TIRotogroAPI.class);     // Call<Data> mockedCall = Mockito.mock(Call.class);     retrofit2.Call<com.ti.rotogro.model.Data> call = myRetrofitInstance.getAPI().getVersionResult("GetAppUpdate", "2.0");     try {         retrofit2.Response<com.ti.rotogro.model.Data> response = call.execute();         com.ti.rotogro.model.Data authResponse = response.body();         java.lang.System.out.println("Hello StackOverflow");         if (authResponse.getResponse().getResponse_code().equals("1")) {             java.lang.System.out.println("test pass");         } else {             java.lang.System.out.println("test fail");         }         org.junit.Assert.assertTrue("Test pass", response.isSuccessful());     } catch (java.io.IOException e) {         java.lang.System.out.println("test fail");         e.printStackTrace();     } }
https://github.com/MahalingamD/ROTO.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.ti.rotogro", appContext.getPackageName()); }
https://github.com/MahalingamD/ROTO.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/sysrqb/ortt.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("sysrqb.ortt", appContext.getPackageName()); }
https://github.com/sysrqb/ortt.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/kikAutomation/3d.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.dmitrybrant.modelviewer", appContext.getPackageName()); }
https://github.com/Evin1-/PopularMovies.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Evin1-/PopularMovies.git,DateMagicUnitTest,isDateCorrectlyFormatted,{     java.lang.System.out.println(com.loopcupcakes.udacity.popularmovies.utils.DatesMagic.generateDate(2));     org.junit.Assert.assertTrue(com.loopcupcakes.udacity.popularmovies.utils.DatesMagic.generateDate(2).equals("2016-08-15")); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,startTimer_shouldChangeStateToStarted_whenCalled,{     timerService.startTimer();     org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.TimerState.STARTED, timerService.getCurrentTimerState()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,stopTimer_shouldChangeStateToStopped_whenCalled,{     timerService.startTimer();     timerService.stopTimer();     org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.TimerState.STOPPED, timerService.getCurrentTimerState()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,pauseTimer_shouldChangeStateToPaused_whenCalled,{     timerService.startTimer();     timerService.pauseTimer();     org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.TimerState.PAUSED, timerService.getCurrentTimerState()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,stopTimer_shouldIncrementConsecutiveWorkPeriod_whenCalled,{     timerService.startTimer();     timerService.stopTimer();     org.junit.Assert.assertEquals(1, timerService.getConsecutiveWorkPeriods()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,onSkipButtonClick_shouldSkipToNextPeriod_whenCalled,{     timerService.onSkipButtonClickInActivity();     org.junit.Assert.assertEquals(artem122ya.tomatotimer.timer.TimerService.PeriodState.BREAK, timerService.getCurrentPeriod()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerServiceTest,onSkipButtonClick_shouldIncrementConsecutiveWorkPeriod_whenCalled,{     timerService.onSkipButtonClickInActivity();     org.junit.Assert.assertEquals(1, timerService.getConsecutiveWorkPeriods()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,timerView_shouldInitializeSweepAngle_whenCreated,{     org.junit.Assert.assertEquals(270, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerStarted_shouldSetSweepAngleToZero_whenPassedTimeThatEnds,{     timerView.onTimerStarted(10000, 300);     org.junit.Assert.assertEquals(0, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerStarted_shouldSetSweepAngleToHalf_whenPassedHalfOfTime,{     timerView.onTimerStarted(10000, 5300);     org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerStarted_shouldSetSweepAngleToFull_whenPassedFullTime,{     timerView.onTimerStarted(10000, 10300);     org.junit.Assert.assertEquals(270, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerStarted_shouldSetSweepAngleToZero_whenNegativeTime,{     timerView.onTimerStarted(10000, -1000);     org.junit.Assert.assertEquals(0, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,stopAnimation_shouldStopAnimatingAngle_whenCalled,{     timerView.onTimerStarted(10000, 5300);     timerView.stopAnimation();     java.lang.Thread.sleep(1000);     org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerPaused_shouldSetSweepAngleToHalf_whenPassedHalfOfTime,{     timerView.onTimerPaused(10000, 5000);     org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerStopped_shouldSetSweepAngleToHalf_whenPassedHalfOfTime,{     timerView.onTimerStopped(10000, 5000);     org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerUpdate_shouldSetSweepAngleToHalf_whenPassedHalfOfTime,{     timerView.onTimerStopped(10000, 5000);     org.junit.Assert.assertEquals(135, timerView.getCurrentArcSweepAngle(), 0); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerUpdate_shouldSetDisplayedTime_whenPassedTime,{     timerView.onTimerStopped(61000, 61000);     org.junit.Assert.assertEquals("01:01", timerView.getDisplayedTime()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerUpdate_shouldSetDisplayedTimeToZero_whenPassedNegativeTime,{     timerView.onTimerStopped(1000, -1000);     org.junit.Assert.assertEquals("00:00", timerView.getDisplayedTime()); }
https://github.com/artem122ya/TomatoTimer-Android.git,TimerViewTest,onTimerUpdate_shouldSetDisplayedTimeToTripleDigits_whenPassedTime,{     timerView.onTimerStopped(6000000, 6000000);     org.junit.Assert.assertEquals("100:00", timerView.getDisplayedTime()); }
https://github.com/mach91uk/alarmatic.git,AlarmTest,alarm_RingsAt_MiddleOutQueueingRecurringDays,{     java.util.Calendar cal = new java.util.GregorianCalendar();     int D_C = cal.get(java.util.Calendar.DAY_OF_WEEK);     for (int h = 0; h < 24; h++) {         for (int m = 0; m < 60; m++) {             uk.mach91.autoalarm.alarms.Alarm a = uk.mach91.autoalarm.alarms.Alarm.builder().hour(h).minutes(m).build();             a.setRecurring(uk.mach91.autoalarm.alarms.misc.DaysOfWeek.WEDNESDAY, true);             long wednesdayRingTime = a.ringsAt();             for (int D = java.util.Calendar.THURSDAY; D <= java.util.Calendar.SATURDAY; D++) {                 java.lang.System.out.println("Wednesday ring time: " + wednesdayRingTime);                 // Check that the ring time is always on Wednesday                 a.setRecurring(D - 1, true);                 org.junit.Assert.assertEquals(wednesdayRingTime, a.ringsAt());             }             for (int D = java.util.Calendar.TUESDAY; D >= java.util.Calendar.SUNDAY; D--) {                 // Check that the ring time is earlier after each iteration                 int hC = cal.get(java.util.Calendar.HOUR_OF_DAY);// Current hour                  int mC = cal.get(java.util.Calendar.MINUTE);// Current minute                  a.setRecurring(D - 1, true);                 int days = 0;                 if ((h > hC) || ((h == hC) && (m > mC))) {                     if (D < D_C) {                         days = (java.util.Calendar.SATURDAY - D_C) + D;                     } else if (D == D_C) {                         days = 0;// upcoming on the same day                      } else {                         days = D - D_C;                     }                 } else if (h <= hC) {                     if (D < D_C) {                         days = ((java.util.Calendar.SATURDAY - D_C) + D) - 1;                     } else if (D == D_C) {                         days = 0;                     } else {                         days = (D - D_C) - 1;                     }                 }                 calculateRingTimeAndTest(h, m, days, cal, a.ringsAt());             }         }     } }
https://github.com/mach91uk/alarmatic.git,AlarmTest,alarm_RingsAt_RecurringDayIsCurrentDay_ReturnsCorrectRingTime,{     java.util.Calendar cal = new java.util.GregorianCalendar();     int dC = cal.get(java.util.Calendar.DAY_OF_WEEK) - 1;// Current week day, converted to our values      for (int h = 0; h < 24; h++) {         for (int m = 0; m < 60; m++) {             int hC = cal.get(java.util.Calendar.HOUR_OF_DAY);// Current hour              int mC = cal.get(java.util.Calendar.MINUTE);// Current minute              uk.mach91.autoalarm.alarms.Alarm a = uk.mach91.autoalarm.alarms.Alarm.builder().hour(h).minutes(m).build();             a.setRecurring(dC, true);             // Quantities until the ring time (h, m)             int days = 0;             int hours = 0;             int minutes = 0;             if (h <= hC) {                 if (m <= mC) {                     days = 6;                     hours = (23 - hC) + h;                     minutes = (60 - mC) + m;                 } else {                     minutes = m - mC;                     if (h < hC) {                         days = 6;                         hours = (24 - hC) + h;                     }                 }             } else if (m <= mC) {                 hours = (h - hC) - 1;                 minutes = (60 - mC) + m;             } else {                 hours = h - hC;                 minutes = m - mC;             }             cal.add(java.util.Calendar.HOUR_OF_DAY, 24 * days);             cal.add(java.util.Calendar.HOUR_OF_DAY, hours);             cal.add(java.util.Calendar.MINUTE, minutes);             cal.set(java.util.Calendar.SECOND, 0);             cal.set(java.util.Calendar.MILLISECOND, 0);             org.junit.Assert.assertEquals(a.ringsAt(), cal.getTimeInMillis());             // VERY IMPORTANT TO RESET AT THE END!!!!             cal.setTimeInMillis(java.lang.System.currentTimeMillis());         }     } }
https://github.com/mach91uk/alarmatic.git,AlarmTest,alarm_RingsAt_RecurringDayAfterCurrentDay_ReturnsCorrectRingTime,{     java.util.Calendar cal = new java.util.GregorianCalendar();     int dC = cal.get(java.util.Calendar.DAY_OF_WEEK) - 1;// Current week day, converted to our values      for (int h = 0; h < 24; h++) {         for (int m = 0; m < 60; m++) {             // Start after the current day, using our value. Note that if the current day is Saturday,             // this test won't run anything and would still pass.             for (int d = dC + 1; d <= uk.mach91.autoalarm.alarms.misc.DaysOfWeek.SATURDAY; d++) {                 java.lang.System.out.println(((((("Testing (h, m, d) = (" + h) + ", ") + m) + ", ") + d) + ")");                 int hC = cal.get(java.util.Calendar.HOUR_OF_DAY);// Current hour                  int mC = cal.get(java.util.Calendar.MINUTE);// Current minute                  uk.mach91.autoalarm.alarms.Alarm a = uk.mach91.autoalarm.alarms.Alarm.builder().hour(h).minutes(m).build();                 a.setRecurring(d, true);                 // Quantities until the ring time (h, m)                 int days = 0;                 int hours = 0;                 int minutes = 0;                 if (h <= hC) {                     if (m <= mC) {                         days = (d - dC) - 1;                         hours = (23 - hC) + h;                         minutes = (60 - mC) + m;                     } else {                         minutes = m - mC;                         if (h < hC) {                             days = (d - dC) - 1;                             hours = (24 - hC) + h;                         } else {                             // h == hC                             days = d - dC;                         }                     }                 } else if (m <= mC) {                     days = d - dC;                     hours = (h - hC) - 1;                     minutes = (60 - mC) + m;                 } else {                     days = d - dC;                     hours = h - hC;                     minutes = m - mC;                 }                 cal.add(java.util.Calendar.HOUR_OF_DAY, 24 * days);                 cal.add(java.util.Calendar.HOUR_OF_DAY, hours);                 cal.add(java.util.Calendar.MINUTE, minutes);                 cal.set(java.util.Calendar.SECOND, 0);                 cal.set(java.util.Calendar.MILLISECOND, 0);                 org.junit.Assert.assertEquals(a.ringsAt(), cal.getTimeInMillis());                 // VERY IMPORTANT TO RESET AT THE END!!!!                 cal.setTimeInMillis(java.lang.System.currentTimeMillis());             }         }     } }
https://github.com/mach91uk/alarmatic.git,AlarmTest,alarm_RingsAt_RecurringDayBeforeCurrentDay_ReturnsCorrectRingTime,{     java.util.Calendar cal = new java.util.GregorianCalendar();     int D_C = cal.get(java.util.Calendar.DAY_OF_WEEK);// Current week day as defined in Calendar class      for (int h = 0; h < 24; h++) {         for (int m = 0; m < 60; m++) {             for (int D = java.util.Calendar.SUNDAY; D < D_C; D++) {                 java.lang.System.out.println(((((("Testing (h, m, d) = (" + h) + ", ") + m) + ", ") + (D - 1)) + ")");                 int hC = cal.get(java.util.Calendar.HOUR_OF_DAY);// Current hour                  int mC = cal.get(java.util.Calendar.MINUTE);// Current minute                  uk.mach91.autoalarm.alarms.Alarm a = uk.mach91.autoalarm.alarms.Alarm.builder().hour(h).minutes(m).build();                 a.setRecurring(D - 1, true);                 // Quantities until the ring time (h, m)                 int days = 0;                 int hours = 0;                 int minutes = 0;                 if (h <= hC) {                     if (m <= mC) {                         days = ((java.util.Calendar.SATURDAY - D_C) + D) - 1;                         hours = (23 - hC) + h;                         minutes = (60 - mC) + m;                     } else {                         minutes = m - mC;                         if (h < hC) {                             days = ((java.util.Calendar.SATURDAY - D_C) + D) - 1;                             hours = (24 - hC) + h;                         } else {                             // h == hC                             days = (java.util.Calendar.SATURDAY - D_C) + D;                         }                     }                 } else if (m <= mC) {                     days = (java.util.Calendar.SATURDAY - D_C) + D;                     hours = (h - hC) - 1;                     minutes = (60 - mC) + m;                 } else {                     days = (java.util.Calendar.SATURDAY - D_C) + D;                     hours = h - hC;                     minutes = m - mC;                 }                 cal.add(java.util.Calendar.HOUR_OF_DAY, 24 * days);                 cal.add(java.util.Calendar.HOUR_OF_DAY, hours);                 cal.add(java.util.Calendar.MINUTE, minutes);                 cal.set(java.util.Calendar.SECOND, 0);                 cal.set(java.util.Calendar.MILLISECOND, 0);                 org.junit.Assert.assertEquals(a.ringsAt(), cal.getTimeInMillis());                 // VERY IMPORTANT TO RESET AT THE END!!!!                 cal.setTimeInMillis(java.lang.System.currentTimeMillis());             }         }     } }
https://github.com/mach91uk/alarmatic.git,AlarmTest,snoozeAlarm_AssertEquals_SnoozingUntilMillis_CorrespondsToWallClock,{     java.util.Calendar cal = new java.util.GregorianCalendar();     cal.add(java.util.Calendar.MINUTE, 10);     uk.mach91.autoalarm.alarms.Alarm alarm = uk.mach91.autoalarm.alarms.Alarm.builder().build();     alarm.snooze(10);     // Unlike ring times, the snoozingUntilMillis has seconds and millis components.     // Due to the overhead of computation, the two time values will inherently have some     // millis difference. However, if the difference is meaningfully small enough, then     // for all practical purposes, we can consider them equal.     org.junit.Assert.assertTrue(java.lang.Math.abs(alarm.snoozingUntil() - cal.getTimeInMillis()) <= 10); }
https://github.com/mach91uk/alarmatic.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/jay1729/Class-Manager.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.gvjay.classmanager", appContext.getPackageName()); }
https://github.com/jay1729/Class-Manager.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/sullivankw/blackjack-v2-android-app.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.sullivankw.blackjackhelper", appContext.getPackageName()); }
https://github.com/abahnj/Confession.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/rahobbs/ToDoList.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/CarstenKarbach/VoBox.git,DictionaryManagementTest,testReadDictionaryList,{     de.karbach.superapp.StarterActivity activity = org.robolectric.Robolectric.buildActivity(de.karbach.superapp.StarterActivity.class).setup().get();     de.karbach.superapp.data.DictionaryManagement dm = de.karbach.superapp.data.DictionaryManagement.getInstance(activity);     java.util.Set<java.lang.String> dictList = dm.readDictionaryList();     org.junit.Assert.assertTrue(dictList.size() > 0); }
https://github.com/CarstenKarbach/VoBox.git,DictionaryTest,testCreation,{     de.karbach.superapp.data.Dictionary dict = new de.karbach.superapp.data.Dictionary("test");     org.junit.Assert.assertEquals("test", dict.getName()); }
https://github.com/CarstenKarbach/VoBox.git,DictionaryTest,testLoadIfPossible,{     de.karbach.superapp.StarterActivity activity = org.robolectric.Robolectric.buildActivity(de.karbach.superapp.StarterActivity.class).setup().get();     de.karbach.superapp.data.Dictionary dict = new de.karbach.superapp.data.Dictionary("test");     dict.loadIfPossible(activity);     org.junit.Assert.assertEquals(0, dict.getCards().size()); }
https://github.com/CarstenKarbach/VoBox.git,StartActivitiesTest,startActivityTest,{     de.karbach.superapp.StarterActivity activity = org.robolectric.Robolectric.buildActivity(de.karbach.superapp.StarterActivity.class).setup().get();     org.junit.Assert.assertFalse(activity.showUpButton()); }
https://github.com/CarstenKarbach/VoBox.git,StartActivitiesTest,testBuildConfig,{     org.junit.Assert.assertTrue((BuildConfig.DEBUG == true) || (BuildConfig.DEBUG == false)); }
https://github.com/patrickma345/Shopper.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.gmail.patrickma345.shopper", appContext.getPackageName()); }
https://github.com/patrickma345/Shopper.git,SummaryTest,extractCostTest,{     java.lang.String info = "A;1.00;1";     double cost = com.gmail.patrickma345.shopper.Utility.Summary.extractCost(info);     org.junit.Assert.assertEquals(cost, 1.0, 0); }
https://github.com/MrR0bo7/FreezerManager.git,ItemInstrumentedTest,testParcelEqual,{     de.geek_hub.freezermanager.Item classUnderTest = new de.geek_hub.freezermanager.Item("Ice Cream");     android.os.Parcel parcel = android.os.Parcel.obtain();     classUnderTest.writeToParcel(parcel, 0);     parcel.setDataPosition(0);     de.geek_hub.freezermanager.Item createdFromParcel = de.geek_hub.freezermanager.Item.CREATOR.createFromParcel(parcel);     org.junit.Assert.assertTrue("Original item and item from parcel do not match", org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(classUnderTest, createdFromParcel)); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testConstructor,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     org.junit.Assert.assertEquals("New ItemList has to be empty", 0, classUnderTest.length()); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testAddAndGetItem,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Ice Cream");     int position = classUnderTest.addItem(testItem);     org.junit.Assert.assertTrue("Original item and item from list do not match", org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(testItem, classUnderTest.getItem(position))); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testDeleteFirstItemWithActiveNotification,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Marshmallow");     testItem.setExpDate(new java.util.Date(10000));     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("Donut");     testItem.setExpDate(new java.util.Date(1000));     classUnderTest.addItem(testItem);     classUnderTest.deleteItem(0);     classUnderTest.sortList("name");     org.junit.Assert.assertTrue("nextNotificationId has non-existent ID", true); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSortListByName,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     classUnderTest.addItem(new de.geek_hub.freezermanager.Item("Marshmallow"));     classUnderTest.addItem(new de.geek_hub.freezermanager.Item("ice cream"));     classUnderTest.addItem(new de.geek_hub.freezermanager.Item("Donut"));     classUnderTest.sortList("name");     boolean isCorrectlySorted = (classUnderTest.getItem(0).getName().equals("Donut") && classUnderTest.getItem(1).getName().equals("ice cream")) && classUnderTest.getItem(2).getName().equals("Marshmallow");     org.junit.Assert.assertTrue("ItemList is not sorted by name", isCorrectlySorted); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSortListBySize,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Marshmallow");     testItem.setSize(-2.4);     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("Donut");     testItem.setSize(5.5);     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("ice cream");     testItem.setSize(0);     classUnderTest.addItem(testItem);     classUnderTest.sortList("size");     boolean isCorrectlySorted = (classUnderTest.getItem(0).getName().equals("Donut") && classUnderTest.getItem(1).getName().equals("ice cream")) && classUnderTest.getItem(2).getName().equals("Marshmallow");     org.junit.Assert.assertTrue("ItemList is not sorted by size", isCorrectlySorted); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSortListByFreezeDate,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Marshmallow");     testItem.setFreezeDate(new java.util.Date(10000));     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("Donut");     testItem.setFreezeDate(new java.util.Date(500));     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("ice cream");     testItem.setFreezeDate(new java.util.Date(1000));     classUnderTest.addItem(testItem);     classUnderTest.sortList("freezeDate");     boolean isCorrectlySorted = (classUnderTest.getItem(0).getName().equals("Donut") && classUnderTest.getItem(1).getName().equals("ice cream")) && classUnderTest.getItem(2).getName().equals("Marshmallow");     org.junit.Assert.assertTrue("ItemList is not sorted by freezeDate", isCorrectlySorted); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSortListByExpDate,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Marshmallow");     testItem.setExpDate(new java.util.Date(10000));     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("Donut");     testItem.setExpDate(new java.util.Date(500));     classUnderTest.addItem(testItem);     testItem = new de.geek_hub.freezermanager.Item("ice cream");     testItem.setExpDate(new java.util.Date(1000));     classUnderTest.addItem(testItem);     classUnderTest.sortList("expDate");     boolean isCorrectlySorted = (classUnderTest.getItem(0).getName().equals("Donut") && classUnderTest.getItem(1).getName().equals("ice cream")) && classUnderTest.getItem(2).getName().equals("Marshmallow");     org.junit.Assert.assertTrue("ItemList is not sorted by expDate", isCorrectlySorted); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testLoadItems,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     java.lang.String data = "[{\"category\":\"meat\",\"freezeDate\":\"2017-10-05 18:30:15.562\",\"name\":\"Ice Cream\",\"notifiedAboutExpire\":true,\"section\":0,\"size\":-1.0,\"unit\":\"mass\"}]";     android.content.SharedPreferences prefs = context.getSharedPreferences("de.geek-hub.freezermanager.data", android.content.Context.MODE_PRIVATE);     prefs.edit().putString("items", data).apply();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     org.junit.Assert.assertEquals("ItemList should have loaded 1 item", 1, classUnderTest.length()); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSaveItems,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Ice Cream");     testItem.setCategory("meat");     testItem.setFreezeDate(new java.util.Date(1500));     testItem.setSection(0);     testItem.setSize(-1.0);     testItem.setUnit("mass");     classUnderTest.addItem(testItem);     java.lang.String expected = "[{\"category\":\"meat\",\"freezeDate\":\"1970-01-01 01:00:01.500\",\"name\":\"Ice Cream\",\"notifiedAboutExpire\":true,\"section\":0,\"size\":-1.0,\"unit\":\"mass\"}]";     android.content.SharedPreferences prefs = context.getSharedPreferences("de.geek-hub.freezermanager.data", android.content.Context.MODE_PRIVATE);     java.lang.String actual = prefs.getString("items", null);     org.junit.Assert.assertEquals("ItemLists do not match", expected, actual); }
https://github.com/MrR0bo7/FreezerManager.git,ItemListInstrumentedTest,testSaveNextNotification,{     android.content.Context context = android.support.test.InstrumentationRegistry.getTargetContext();     de.geek_hub.freezermanager.ItemList classUnderTest = new de.geek_hub.freezermanager.ItemList(context);     de.geek_hub.freezermanager.Item testItem = new de.geek_hub.freezermanager.Item("Ice Cream");     testItem.setExpDate(new java.util.Date(new java.util.Date().getTime() + 5000));     classUnderTest.addItem(testItem);     android.content.SharedPreferences prefs = context.getSharedPreferences("de.geek-hub.freezermanager.data", android.content.Context.MODE_PRIVATE);     int actual = prefs.getInt("nextNotificationItemId", -1);     org.junit.Assert.assertEquals("ItemId does not match", 0, actual); }
https://github.com/MrR0bo7/FreezerManager.git,ItemTest,testConstructorWithName,{     java.lang.String expected = "Ice Cream";     de.geek_hub.freezermanager.Item classUnderTest = new de.geek_hub.freezermanager.Item(expected);     org.junit.Assert.assertEquals("Name does not match", expected, classUnderTest.getName()); }
https://github.com/MrR0bo7/FreezerManager.git,ItemTest,testConstructorNotified,{     de.geek_hub.freezermanager.Item classUnderTest = new de.geek_hub.freezermanager.Item("Ice Cream");     java.util.Date date = new java.util.Date();     org.junit.Assert.assertTrue("Notified should be true on a new item", classUnderTest.notifiedAboutExpire()); }
https://github.com/MrR0bo7/FreezerManager.git,ItemTest,testSetExpDate,{     de.geek_hub.freezermanager.Item classUnderTest = new de.geek_hub.freezermanager.Item("Ice Cream");     java.util.Date date = new java.util.Date();     classUnderTest.setExpDate(date);     org.junit.Assert.assertFalse("Notified should be false after setting a expDate", classUnderTest.notifiedAboutExpire()); }
https://github.com/jeremybrooks/readsy-android.git,BitHelperTest,getUnreadItemCount,{     // this bit pattern is all days read up to dec 22, so there should be 9 unread days     net.jeremybrooks.readsy.BitHelper bitHelper = new net.jeremybrooks.readsy.BitHelper("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0f00");     java.util.GregorianCalendar dec31 = new java.util.GregorianCalendar();     dec31.set(java.util.GregorianCalendar.YEAR, 2017);     int currentDayOfYear = dec31.get(java.util.Calendar.DAY_OF_YEAR);     dec31.set(java.util.GregorianCalendar.MONTH, java.util.GregorianCalendar.DECEMBER);     dec31.set(java.util.GregorianCalendar.DAY_OF_MONTH, 31);     org.junit.Assert.assertEquals(9, bitHelper.getUnreadItemCount(dec31.getTime(), "2017"));     int unread = bitHelper.getUnreadItemCount(dec31.getTime(), "2017");     float daysInYear = ((float) (dec31.get(java.util.Calendar.DAY_OF_YEAR)));     float read = daysInYear - unread;     int pct = ((int) (((daysInYear - unread) / daysInYear) * 100));     java.lang.System.out.println(daysInYear - currentDayOfYear);     int percentTarget = ((int) (((daysInYear - (daysInYear - currentDayOfYear)) / daysInYear) * 100));     java.lang.System.out.println(pct);     java.lang.System.out.println(percentTarget); }
https://github.com/brcamp13/lostInTheWoods.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.bmcampbell.firstproject", appContext.getPackageName()); }
https://github.com/brcamp13/lostInTheWoods.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/brcamp13/lostInTheWoods.git,viewDirectionsTest,revFunc,{     // Fill a test array with an input     java.util.ArrayList<java.lang.String> input = new java.util.ArrayList<>();     input.add("Left");     input.add("Straight");     input.add("Right");     // Fill an expected results array with the result that is expected     java.util.ArrayList<java.lang.String> expected = new java.util.ArrayList<>();     expected.add("Right");     expected.add("Straight");     expected.add("Left");     // Output == the function being tested with test input being passed in     java.util.ArrayList<java.lang.String> output = newViewDirections.revFunc(input);     // Determines if the expected output is equivalent to the actual output     org.junit.Assert.assertEquals(output, expected); }
https://github.com/brcamp13/lostInTheWoods.git,viewDirectionsTest,revDirections,{     // Fill a test array with an input     java.util.ArrayList<java.lang.String> input = new java.util.ArrayList<>();     input.add("Left");     input.add("Straight");     input.add("Right");     input.add("Right");     // Fill an expected results array with the result that is expected     java.util.ArrayList<java.lang.String> expected = new java.util.ArrayList<>();     expected.add("Right");     expected.add("Straight");     expected.add("Left");     expected.add("Left");     // Output == the function being tested with test input being passed in     java.util.ArrayList<java.lang.String> output = newViewDirections.revDirections(input);     // Determines if the expected output is equivalent to the actual output     org.junit.Assert.assertEquals(output, expected); }
https://github.com/ASofterSpace/UniversalConverter.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.moyaccercchi.morsecoder", appContext.getPackageName()); }
https://github.com/ASofterSpace/UniversalConverter.git,Base64CoderUnitTest,encoderIsWorking,{     // A quote from Thomas Hobbes' Leviathan - taken from the wikipedia article on base64:     java.lang.String text = (("Man is distinguished, not only by his reason, but by this singular " + "passion from other animals, which is a lust of the mind, that by a perseverance ") + "of delight in the continued and indefatigable generation of knowledge, exceeds ") + "the short vehemence of any carnal pleasure.";     java.lang.String base64EncodedText = new com.asofterspace.apps.universalconverter.backend.coders.Base64Encoder().encodeIntoBase64(text);     org.junit.Assert.assertEquals((((("TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1\r\n" + "dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3\r\n") + "aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFu\r\n") + "Y2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxl\r\n") + "IGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhl\r\n") + "bWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=", base64EncodedText); }
https://github.com/ASofterSpace/UniversalConverter.git,Base64CoderUnitTest,encodingAndDecodingIsConsistent,{     java.lang.String text = "Just like, you know, some example text!";     java.lang.String base64EncodedText = new com.asofterspace.apps.universalconverter.backend.coders.Base64Encoder().encodeIntoBase64(text);     java.lang.String decodedText = new com.asofterspace.apps.universalconverter.backend.coders.Base64Decoder().decodeFromBase64(base64EncodedText);     org.junit.Assert.assertEquals(text, decodedText); }
https://github.com/ASofterSpace/UniversalConverter.git,BinaryCoderUnitTest,encoderIsWorking,{     java.lang.String text = "16";     java.lang.String result = new com.asofterspace.apps.universalconverter.backend.coders.BinaryEncoder().encodeIntoBinaryString(text);     org.junit.Assert.assertEquals("10000", result); }
https://github.com/ASofterSpace/UniversalConverter.git,BinaryCoderUnitTest,decoderIsWorking,{     java.lang.String text = "0x01";     int result = new com.asofterspace.apps.universalconverter.backend.coders.BinaryDecoder().decodeFromBinary(text);     org.junit.Assert.assertEquals(1, result); }
https://github.com/ASofterSpace/UniversalConverter.git,RomanNumeralCoderUnitTest,checkThatNothingBadHappens,{     java.lang.String numbers = "oh my!";     java.lang.String outcome = new com.asofterspace.apps.universalconverter.backend.coders.RomanNumeralEncoder().encodeNumbersIntoRomanNumerals(numbers);     org.junit.Assert.assertEquals("N/A", outcome);     java.lang.String numerals = "just some random letters...";     new com.asofterspace.apps.universalconverter.backend.coders.RomanNumeralDecoder().decodeRomanNumeralsIntoNumbers(numerals);     // it here does not matter what actually comes out - but just that something comes     // out instead of an exception being thrown ;) }
https://github.com/jaunerc/ThinkQuick.git,TutorialFactoryTest,initModul,{     tutorialFactory.initModul();     org.junit.Assert.assertEquals(true, tutorialFactory.hasTutorials()); }
https://github.com/jaunerc/ThinkQuick.git,TutorialFactoryTest,hasTutorials,{     org.junit.Assert.assertEquals(false, tutorialFactory.hasTutorials()); }
https://github.com/jaunerc/ThinkQuick.git,LifeTest,removeLife,{     life.removeLife();     org.junit.Assert.assertEquals(2, life.getLife()); }
https://github.com/jaunerc/ThinkQuick.git,LifeTest,getLife,{     org.junit.Assert.assertEquals(3, life.getLife()); }
https://github.com/jaunerc/ThinkQuick.git,MatchResultTest,getWinner,{     matchResult.match(ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.ROCK, ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.PAPER);     org.junit.Assert.assertEquals(ch.hslu.mobpro.proj.thinkquick.game.MatchResultTest.PAPER, matchResult.getWinner()); }
https://github.com/jaunerc/ThinkQuick.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("ch.hslu.mobpro.proj.thinkquick", appContext.getPackageName()); }
https://github.com/Digolodollarz/HolyBible.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("tech.diggle.apps.bible.bhaibheridzvenemuchishona", appContext.getPackageName()); }
https://github.com/Digolodollarz/HolyBible.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGiveSameValue_whenSendingMinus170,{     int value = 170;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(170, response); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGiveSameValue_whenSending0,{     int value = 0;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(0, response); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGiveSameValue_whenSending170,{     int value = 170;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(170, response); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGiveMinus170_whenSending190,{     int value = 190;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(-170, response); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGive20_whenSending380,{     int value = 380;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(20, response); }
https://github.com/Fewlaps/flone-android.git,CleanHeadingTest,shouldGive0_whenSending360,{     int value = 360;     int response = cleanHeading.getCleanValue(value);     org.junit.Assert.assertEquals(0, response); }
https://github.com/ezet/movie-tracker.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("no.ezet.fasttrack.popularmovies", appContext.getPackageName()); }
https://github.com/5calls/android.git,DevicePermissionsManagerTest,isPermissionGranted_shouldBeGranted,{     // Grant permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.grantPermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission check is correct     org.junit.Assert.assertTrue(mPermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION)); }
https://github.com/5calls/android.git,DevicePermissionsManagerTest,isPermissionGranted_shouldNotBeGranted,{     // Revokes permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.revokePermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission check is correct     org.junit.Assert.assertFalse(mPermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION)); }
https://github.com/5calls/android.git,DevicePermissionsManagerTest,requestIfNeeded_shouldRequest,{     // Revokes permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.revokePermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     mPermissionsManager.requestIfNeeded(mTestActivityRule.getActivity(), com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission dialogue is prompted     android.support.test.uiautomator.UiObject2 denyButton = mDevice.wait(com.truethat.android.application.permissions.PermissionsTestUtil.DENY_SEARCH_CONDITION, 100);     org.hamcrest.MatcherAssert.assertThat(denyButton.isEnabled(), org.hamcrest.core.Is.is(true));     // Deny permission     denyButton.click();     // Wait for the click to register     mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.pkg(com.truethat.android.application.ApplicationTestUtil.APPLICATION_PACKAGE_NAME).depth(0)), 100);     // Assert that permissions wasn't granted     org.junit.Assert.assertNotEquals(android.content.pm.PackageManager.PERMISSION_GRANTED, android.support.v4.app.ActivityCompat.checkSelfPermission(mTestActivityRule.getActivity(), com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION.getManifest())); }
https://github.com/5calls/android.git,FakePermissionsManagerTest,isPermissionGranted,{     // Grants permission     mFakePermissionsManager.grant(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     // Permission should be granted.     org.junit.Assert.assertTrue(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/5calls/android.git,FakePermissionsManagerTest,requestIfNeeded_newPermission,{     // requestIfNeeded grants permissions by default     mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     org.junit.Assert.assertTrue(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/5calls/android.git,FakePermissionsManagerTest,requestIfNeeded_alreadyForbidden,{     mFakePermissionsManager.forbid(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     // requestIfNeeded does not override forbid.     mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/5calls/android.git,FakeInternalStorageManagerTest,readShouldFail,{     mFakeInternalStorage.write(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME, "");     mFakeInternalStorage.setShouldFail(true);     mFakeInternalStorage.read(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME);     mFakeInternalStorage.setShouldFail(false);     org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME)); }
https://github.com/5calls/android.git,FakeInternalStorageManagerTest,deleteShouldFail,{     mFakeInternalStorage.write(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME, "");     mFakeInternalStorage.setShouldFail(true);     mFakeInternalStorage.delete(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME);     mFakeInternalStorage.setShouldFail(false);     org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME)); }
https://github.com/5calls/android.git,BaseAuthManagerTest,authFromLastSession,{     prepareAuth();     // Authenticate user;     mAuthManager.auth(mListener);     assertAuthOk();     // Should authenticate against backend     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,BaseAuthManagerTest,signInAlreadyAuthOk,{     performAuth();     mListener.resetResult();     mAuthManager.signIn(mListener);     // Should not authenticate against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,BaseAuthManagerTest,signInByDevice,{     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,BaseAuthManagerTest,signInByLastSession,{     prepareAuth();     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,BaseAuthManagerTest,signInWithStorageFailure,{     prepareAuth();     mInternalStorage.setShouldFail(true);     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,BaseAuthManagerTest,signUp,{     mAuthManager.signUp(mListener, mUser);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,FakeAuthManagerTest,authOkFake,{     performAuth();     org.junit.Assert.assertEquals(0, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,FakeAuthManagerTest,authRegular,{     ((com.truethat.android.application.auth.FakeAuthManager) (mAuthManager)).useNetwork();     performAuth();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,FakeAuthManagerTest,signUpFake,{     mAuthManager.signUp(mListener, mUser);     assertAuthOk();     org.junit.Assert.assertEquals(0, mMockWebServer.getRequestCount()); }
https://github.com/5calls/android.git,FakeAuthManagerTest,disallowAuth,{     ((com.truethat.android.application.auth.FakeAuthManager) (mAuthManager)).forbidAuth();     prepareAuth();     // Authenticate user;     mAuthManager.auth(mListener);     // Should not be auth-ok     org.junit.Assert.assertFalse(mAuthManager.isAuthOk()); }
https://github.com/5calls/android.git,AssetsReaderUtilTest,readAsBytes,{     byte[] res = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.AssetsReaderUtilTest.TINY_FILE_PATH);     org.junit.Assert.assertEquals("My name is Inigo Montoya", new java.lang.String(res, "UTF-8")); }
https://github.com/5calls/android.git,CameraUtilTest,toByteArray,{     // Asserts that an exception is not thrown, as the actual image cannot be expected.     byte[] expected = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH);     byte[] actual = com.truethat.android.common.util.CameraUtil.toByteArray(com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(expected));     org.junit.Assert.assertArrayEquals(expected, actual); }
https://github.com/5calls/android.git,CameraUtilTest,compareEquals,{     android.media.Image image = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH));     org.junit.Assert.assertTrue(com.truethat.android.common.util.CameraUtil.compare(image, image)); }
https://github.com/5calls/android.git,CameraUtilTest,compareNotEquals,{     byte[] source = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH);     android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeByteArray(source, 0, source.length).copy(Bitmap.Config.ARGB_8888, true);     bitmap.setPixel(0, 0, bitmap.getPixel(0, 0) + 100000);     android.media.Image image1 = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(source);     android.media.Image image2 = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(com.truethat.android.common.util.CameraTestUtil.bitmapToByteArray(bitmap));     org.junit.Assert.assertFalse(com.truethat.android.common.util.CameraUtil.compare(image1, image2)); }
https://github.com/5calls/android.git,NumberUtilTest,sum,{     org.junit.Assert.assertEquals(2L, com.truethat.android.common.util.NumberUtil.sum(com.google.common.collect.ImmutableMap.of("a", 1L, "b", 1L))); }
https://github.com/5calls/android.git,StringUtilTest,titleCase,{     org.junit.Assert.assertEquals("Matt Damon", com.truethat.android.common.util.StringUtil.toTitleCase("matt damon")); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonSerialize_namingStrategy,{     java.lang.String actual = com.truethat.android.common.network.NetworkUtil.GSON.toJson(new com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     java.lang.String expected = new com.google.gson.GsonBuilder().create().toJson(new com.truethat.android.common.network.NetworkUtilTest.MyClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonDeserialize_namingStrategy,{     java.lang.String source = new com.google.gson.GsonBuilder().create().toJson(new com.truethat.android.common.network.NetworkUtilTest.MyClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass expected = new com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass(com.truethat.android.common.network.NetworkUtilTest.NUM);     com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass actual = com.truethat.android.common.network.NetworkUtil.GSON.fromJson(source, com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass.class);     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonSerialize_date,{     java.lang.String actual = com.truethat.android.common.network.NetworkUtil.GSON.toJson(com.truethat.android.common.network.NetworkUtilTest.DATE);     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.UTC_DATE, actual); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonDeserialize_date,{     java.util.Date actual = com.truethat.android.common.network.NetworkUtil.GSON.fromJson(com.truethat.android.common.network.NetworkUtilTest.UTC_DATE, java.util.Date.class);     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.DATE, actual); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonSerialize_subtype,{     com.google.gson.JsonElement serialized = com.truethat.android.common.network.NetworkUtil.GSON.toJsonTree(com.truethat.android.common.network.NetworkUtilTest.photo);     // Should have type.     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.photo.getClass().getSimpleName(), serialized.getAsJsonObject().get(com.truethat.android.external.gson.RuntimeTypeAdapterFactory.TYPE_FIELD_NAME).getAsString()); }
https://github.com/5calls/android.git,NetworkUtilTest,gsonDeserialize_subtype,{     com.truethat.android.model.Photo actual = ((com.truethat.android.model.Photo) (com.truethat.android.common.network.NetworkUtil.GSON.fromJson(com.truethat.android.common.network.NetworkUtil.GSON.toJson(com.truethat.android.common.network.NetworkUtilTest.photo), com.truethat.android.model.Media.class)));     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.photo, actual); }
https://github.com/5calls/android.git,FlowTreeTest,getChild,{     mTree.addNode(com.truethat.android.model.FlowTreeTest.PHOTO_1, com.truethat.android.model.FlowTreeTest.PHOTO_2);     mTree.addEdge(com.truethat.android.model.FlowTreeTest.EDGE_1);     org.junit.Assert.assertEquals(com.truethat.android.model.FlowTreeTest.PHOTO_2, mTree.getChild(com.truethat.android.model.FlowTreeTest.PHOTO_1.getId(), com.truethat.android.model.FlowTreeTest.EDGE_1.getReaction())); }
https://github.com/5calls/android.git,CameraFragmentTest,pictureNotTaken_activityPaused,{     mCameraFragment.takePicture();     // Navigate to a different activity     mTestActivityRule.getActivity().startActivity(new android.content.Intent(mTestActivityRule.getActivity(), com.truethat.android.view.activity.TestActivity.class));     // Wait for an image to be taken     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // An image should not have been taken.     org.junit.Assert.assertFalse(mImageTaken); }
https://github.com/5calls/android.git,CameraFragmentTest,pictureNotTaken_cameraClosed,{     mCameraFragment.takePicture();     // Close camera     mCameraFragment.onHidden();     // Wait for an image to be taken     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // An image should not have been taken.     org.junit.Assert.assertFalse(mImageTaken); }
https://github.com/5calls/android.git,CameraFragmentTest,cameraPreviewIsFrozenAfterTakingPicture,{     mCameraFragment.takePicture();     // An image should have been taken.     Awaitility.await().until(new java.util.concurrent.Callable<java.lang.Boolean>() {         @java.lang.Override         public java.lang.Boolean call() throws java.lang.Exception {             return mImageTaken;         }     });     // Save current preview.     android.graphics.Bitmap than = mCameraFragment.getCameraPreview().getBitmap();     // Wait for the preview to change, this is unstable, but at least something.     java.lang.Thread.sleep(500);     android.graphics.Bitmap now = mCameraFragment.getCameraPreview().getBitmap();     org.junit.Assert.assertTrue(than.sameAs(now)); }
https://github.com/5calls/android.git,CameraFragmentTest,cameraPreviewCanBeRestored,{     mCameraFragment.takePicture();     // An image should have been taken.     Awaitility.await().until(new java.util.concurrent.Callable<java.lang.Boolean>() {         @java.lang.Override         public java.lang.Boolean call() throws java.lang.Exception {             return mImageTaken;         }     });     // Save current preview.     android.graphics.Bitmap than = mCameraFragment.getCameraPreview().getBitmap();     // Restores preview     mCameraFragment.restorePreview();     // Increase probability of preview change.     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // New preview should be different     android.graphics.Bitmap now = mCameraFragment.getCameraPreview().getBitmap();     org.junit.Assert.assertFalse(than.sameAs(now)); }
https://github.com/5calls/android.git,OnBoardingSignUpStageFragmentTest,testStageEditSaved,{     manualSetUp();     // For some reason typing fails initially.     Awaitility.await().untilAsserted(new org.awaitility.core.ThrowingRunnable() {         @java.lang.Override         public void run() throws java.lang.Throwable {             // Type user name             android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.nameEditText)).perform(ViewActions.typeText(com.truethat.android.view.activity.BaseOnBoardingTest.NAME));         }     });     // Destroy activity and resume to it.     android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() {         @java.lang.Override         public void run() {             mActivity.recreate();         }     });     // Detection should not start     java.lang.Thread.sleep(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS() / 2);     org.junit.Assert.assertFalse(mFakeReactionDetectionManager.isDetecting());     com.truethat.android.application.ApplicationTestUtil.waitMatcher(org.hamcrest.CoreMatchers.allOf(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.nameEditText), android.support.test.espresso.matcher.ViewMatchers.isDisplayed(), android.support.test.espresso.matcher.ViewMatchers.withText(com.truethat.android.view.activity.BaseOnBoardingTest.NAME))); }
https://github.com/5calls/android.git,StudioFragmentTest,editStateSaved,{     // Take a picture     android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() {         @java.lang.Override         public void run() {             mMainActivityRule.getActivity().mToolbarStudio.performClick();         }     });     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     // Chose a reaction     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(mStudioFragment.getEmotionToViewId().get(com.truethat.android.model.Emotion.OMG))).perform(ViewActions.click());     // Should proceed to camera state.     assertCameraState();     // Record a video     recodeVideo();     // Should proceed to edit state     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     com.truethat.android.model.Scene directedScene = ((com.truethat.android.view.fragment.StudioFragment) (mMainActivityRule.getActivity().getCurrentMainFragment())).getViewModel().getDirectedScene();     // Navigate out of studio     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(android.R.id.content)).perform(android.support.test.espresso.action.ViewActions.swipeLeft());     waitForMainFragment(com.truethat.android.view.activity.MainActivity.TOOLBAR_THEATER_INDEX);     // Navigate back to studio     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(android.R.id.content)).perform(android.support.test.espresso.action.ViewActions.swipeRight());     waitForMainFragment(com.truethat.android.view.activity.MainActivity.TOOLBAR_STUDIO_INDEX);     // Should resume to edit state     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     // Should save the directed scene     org.junit.Assert.assertEquals(directedScene, ((com.truethat.android.view.fragment.StudioFragment) (mMainActivityRule.getActivity().getCurrentMainFragment())).getViewModel().getDirectedScene()); }
https://github.com/5calls/android.git,StudioViewModelTest,previousMedia,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Chose a follow up reaction     mViewModel.onReactionChosen(com.truethat.android.model.Emotion.DISGUST);     assertCameraState();     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Go to root media     mViewModel.displayParentMedia();     // Should edit root media     assertEditState();     org.junit.Assert.assertEquals(mViewModel.getDirectedScene().getRootMedia(), mViewModel.getCurrentMedia()); }
https://github.com/5calls/android.git,StudioViewModelTest,previousMediaHiddenFromRoot,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     org.junit.Assert.assertFalse(mViewModel.mPreviousMediaVisibility.get()); }
https://github.com/5calls/android.git,StudioViewModelTest,approvalCancel,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Cancel the picture taken     mViewModel.onCancel();     assertCameraState();     // Should restore preview     org.junit.Assert.assertTrue(mView.mPreviewRestored); }
https://github.com/5calls/android.git,StudioViewModelTest,publishedFailed,{     mMockWebServer.setDispatcher(new okhttp3.mockwebserver.Dispatcher() {         @java.lang.Override         public okhttp3.mockwebserver.MockResponse dispatch(okhttp3.mockwebserver.RecordedRequest request) throws java.lang.InterruptedException {             return new okhttp3.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR);         }     });     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Send the scene.     mViewModel.onSent();     assertSentState();     // Should fail     assertPublishFailed();     org.junit.Assert.assertEquals(com.truethat.android.viewmodel.StudioViewModelTest.SENT_FAILED, mView.getToastText()); }
https://github.com/yuragr/BPolite.git,WeekDayComparatorTest,getWeekDaysByLocale_sundayFirstDayOfWeek,{     com.bpolite.data.comparator.WeekDayComparator comparator = new com.bpolite.data.comparator.WeekDayComparator();     java.util.List<com.bpolite.data.enums.WeekDay> weekDayList = comparator.getWeekDaysByLocale(0);     org.junit.Assert.assertEquals(com.bpolite.data.enums.WeekDay.SUN, weekDayList.get(0)); }
https://github.com/yuragr/BPolite.git,WeekDayComparatorTest,getWeekDaysByLocale_mondayFirstDayOfWeek,{     com.bpolite.data.comparator.WeekDayComparator comparator = new com.bpolite.data.comparator.WeekDayComparator();     java.util.List<com.bpolite.data.enums.WeekDay> weekDayList = comparator.getWeekDaysByLocale(1);     org.junit.Assert.assertEquals(com.bpolite.data.enums.WeekDay.MON, weekDayList.get(0)); }
https://github.com/yuragr/BPolite.git,WeekDayComparatorTest,getWeekDaysByLocale_saturdayFirstDayOfWeek,{     com.bpolite.data.comparator.WeekDayComparator comparator = new com.bpolite.data.comparator.WeekDayComparator();     java.util.List<com.bpolite.data.enums.WeekDay> weekDayList = comparator.getWeekDaysByLocale(6);     org.junit.Assert.assertEquals(com.bpolite.data.enums.WeekDay.SAT, weekDayList.get(0)); }
https://github.com/yuragr/BPolite.git,RingerDelayTest,getByValueTest,{     for (com.bpolite.data.enums.RingerDelay ringerDelay : com.bpolite.data.enums.RingerDelay.values()) {         org.junit.Assert.assertEquals(ringerDelay, com.bpolite.data.enums.RingerDelay.getByValue(ringerDelay.getValue()));     } }
https://github.com/yuragr/BPolite.git,WeekDayUtilsTest,convertListToCommaSeparatedStringForDisplay_adjacentDays,{     for (int i = 0; i < 6; i++) {         java.util.List<com.bpolite.data.enums.WeekDay> weekDayList = java.util.Arrays.asList(java.util.Arrays.copyOfRange(com.bpolite.data.enums.WeekDay.values(), i, i + 2));         java.lang.String result = com.bpolite.utils.WeekDayUtils.convertListToCommaSeparatedStringForDisplay(weekDayList);         org.junit.Assert.assertEquals((com.bpolite.data.enums.WeekDay.values()[i].toString() + ", ") + com.bpolite.data.enums.WeekDay.values()[i + 1].toString(), result);     } }
https://github.com/yuragr/BPolite.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.bpolite", appContext.getPackageName()); }
https://github.com/karlkar/queuedroid.git,QueueModelTest,resetScoreboard,{     mModel.resetScoreboard();     org.junit.Assert.assertEquals(0, mModel.getPlayersCount()); }
https://github.com/vexelon-dot-net/currencybg.app.git,CalculatorTest,testCase1,{     net.vexelon.currencybg.app.utils.Calculator calculator = new net.vexelon.currencybg.app.utils.Calculator(new java.math.BigDecimal(0.485), 2);     org.junit.Assert.assertTrue(calculator.add(new java.math.BigDecimal(1.348)).add(new java.math.BigDecimal(0.97)).getNormalizedResult().equals("2.80")); }
https://github.com/vexelon-dot-net/currencybg.app.git,CalculatorTest,testCase2,{     net.vexelon.currencybg.app.utils.Calculator calculator = new net.vexelon.currencybg.app.utils.Calculator(new java.math.BigDecimal(0.485), 2);     org.junit.Assert.assertTrue(calculator.add(new java.math.BigDecimal(1.348)).div(new java.math.BigDecimal(2.1)).getNormalizedResult().equals("0.87")); }
https://github.com/vexelon-dot-net/currencybg.app.git,CalculatorTest,testCase3,{     net.vexelon.currencybg.app.utils.Calculator calculator = new net.vexelon.currencybg.app.utils.Calculator(new java.math.BigDecimal(10.568), 2);     org.junit.Assert.assertTrue(calculator.sub(new java.math.BigDecimal(2.586)).mul(new java.math.BigDecimal(0.555)).getNormalizedResult().equals("4.43")); }
https://github.com/lizyeseul/SoftHanJolUp.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("o1.mobile.softhanjolup", appContext.getPackageName()); }
https://github.com/lizyeseul/SoftHanJolUp.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/codimoc/PrismaCallBlocker.git,ActionsTest,testAvailableActions,{     java.util.Set<java.lang.Class<?>> actions = com.prismaqf.callblocker.utils.DexClassScanner.findSubClassesWithAnnotation(com.prismaqf.callblocker.actions.ActionsTest.myCtx, "com.prismaqf.callblocker.actions", com.prismaqf.callblocker.actions.IAction.class, com.prismaqf.callblocker.actions.AvailableAction.class);     org.junit.Assert.assertTrue("The set is not empty", actions.size() > 0); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,dbSmokeTest,{     org.junit.Assert.assertEquals("DB version", 14, myDb.getVersion()); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,LoggedCallsInsertRows,{     com.prismaqf.callblocker.sql.LoggedCallProvider.InsertRow(myDb, new com.prismaqf.callblocker.sql.LoggedCallProvider.LoggedCall(15, null, "123", "a dummy"));     com.prismaqf.callblocker.sql.LoggedCallProvider.InsertRow(myDb, new com.prismaqf.callblocker.sql.LoggedCallProvider.LoggedCall(21, null, "321", "another dummy"));     android.database.Cursor c = com.prismaqf.callblocker.sql.LoggedCallProvider.LatestCalls(myDb, 5);     org.junit.Assert.assertEquals("There should be two records", 2, c.getCount()); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,InsertCalendarRule,{     com.prismaqf.callblocker.sql.CalendarRuleProvider.InsertRow(myDb, new com.prismaqf.callblocker.rules.CalendarRule("first", com.prismaqf.callblocker.rules.CalendarRule.makeMask(9), 5, 45, 21, 12));     com.prismaqf.callblocker.sql.CalendarRuleProvider.InsertRow(myDb, new com.prismaqf.callblocker.rules.CalendarRule("second", com.prismaqf.callblocker.rules.CalendarRule.makeMask(96)));     android.database.Cursor c = com.prismaqf.callblocker.sql.CalendarRuleProvider.AllCalendarRules(myDb);     org.junit.Assert.assertEquals("There should be two records", 2, c.getCount()); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,TestDeleteFilterRuleByName,{     com.prismaqf.callblocker.rules.FilterRule fr1 = new com.prismaqf.callblocker.rules.FilterRule("first", "The first rule");     fr1.addPattern("123");     fr1.addPattern("4*56");     long ruleid = com.prismaqf.callblocker.sql.FilterRuleProvider.InsertRow(myDb, fr1);     com.prismaqf.callblocker.sql.FilterRuleProvider.DeleteFilterRule(myDb, "first");     com.prismaqf.callblocker.rules.FilterRule fr2 = com.prismaqf.callblocker.sql.FilterRuleProvider.FindFilterRule(myDb, ruleid);     org.junit.Assert.assertNull("Rule deleted and not found", fr2); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,TestDeleteFilterRuleById,{     com.prismaqf.callblocker.rules.FilterRule fr1 = new com.prismaqf.callblocker.rules.FilterRule("first", "The first rule");     fr1.addPattern("123");     fr1.addPattern("4*56");     long ruleid = com.prismaqf.callblocker.sql.FilterRuleProvider.InsertRow(myDb, fr1);     com.prismaqf.callblocker.sql.FilterRuleProvider.DeleteFilterRule(myDb, ruleid);     com.prismaqf.callblocker.rules.FilterRule fr2 = com.prismaqf.callblocker.sql.FilterRuleProvider.FindFilterRule(myDb, ruleid);     org.junit.Assert.assertNull("Rule deleted and not found", fr2); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,InsertFilterUniqueNameKey,{     com.prismaqf.callblocker.filters.FilterHandle fh = new com.prismaqf.callblocker.filters.FilterHandle("first", "My calendar", "My patterns", "My action");     com.prismaqf.callblocker.sql.FilterProvider.InsertRow(myDb, fh);     com.prismaqf.callblocker.filters.FilterHandle fh2 = new com.prismaqf.callblocker.filters.FilterHandle("first", "My calendar2", "My patterns2", "My action2");     long rowId = com.prismaqf.callblocker.sql.FilterProvider.InsertRow(myDb, fh2);     org.junit.Assert.assertTrue("An error occurred", rowId < 0); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,TestDeleteFilterByName,{     com.prismaqf.callblocker.filters.FilterHandle fh1 = new com.prismaqf.callblocker.filters.FilterHandle("first", "My calendar1", "My patterns1", "My action1");     long filterid = com.prismaqf.callblocker.sql.FilterProvider.InsertRow(myDb, fh1);     com.prismaqf.callblocker.sql.FilterProvider.DeleteFilter(myDb, "first");     com.prismaqf.callblocker.filters.FilterHandle fh2 = com.prismaqf.callblocker.sql.FilterProvider.FindFilter(myDb, filterid);     org.junit.Assert.assertNull("Rule deleted and not found", fh2); }
https://github.com/codimoc/PrismaCallBlocker.git,DbHelperTest,TestDeleteFilterById,{     com.prismaqf.callblocker.filters.FilterHandle fh1 = new com.prismaqf.callblocker.filters.FilterHandle("first", "My calendar1", "My patterns1", "My action1");     long filterid = com.prismaqf.callblocker.sql.FilterProvider.InsertRow(myDb, fh1);     com.prismaqf.callblocker.sql.FilterProvider.DeleteFilter(myDb, filterid);     com.prismaqf.callblocker.filters.FilterHandle fh2 = com.prismaqf.callblocker.sql.FilterProvider.FindFilter(myDb, filterid);     org.junit.Assert.assertNull("Rule deleted and not found", fh2); }
https://github.com/codimoc/PrismaCallBlocker.git,TestCalendarRule,TestEqualityVsNull,{     com.prismaqf.callblocker.rules.CalendarRule c1 = new com.prismaqf.callblocker.rules.CalendarRule("first", java.util.EnumSet.of(com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.MONDAY, com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.FRIDAY), 2, 15, 10, 7);     org.junit.Assert.assertNotEquals("Null is not equal to any object", c1, null); }
https://github.com/codimoc/PrismaCallBlocker.git,FilterCreationTest,ParcelableTest,{     com.prismaqf.callblocker.filters.FilterHandle fh1 = new com.prismaqf.callblocker.filters.FilterHandle("myFilter", com.prismaqf.callblocker.FilterCreationTest.CAL_RULE, com.prismaqf.callblocker.FilterCreationTest.FIL_RULE, com.prismaqf.callblocker.actions.DropCallByDownButton.class.getCanonicalName());     android.os.Parcel parcel = android.os.Parcel.obtain();     fh1.writeToParcel(parcel, 0);     parcel.setDataPosition(0);     com.prismaqf.callblocker.filters.FilterHandle fh2 = com.prismaqf.callblocker.filters.FilterHandle.CREATOR.createFromParcel(parcel);     org.junit.Assert.assertEquals("Equal after Parcelization", fh1, fh2); }
https://github.com/codimoc/PrismaCallBlocker.git,FilterRuleParcelTest,TestParcelable,{     com.prismaqf.callblocker.rules.FilterRule fr1 = new com.prismaqf.callblocker.rules.FilterRule("first", "A filter");     fr1.addPattern("123");     fr1.addPattern("4*56");     android.os.Parcel parcel = android.os.Parcel.obtain();     fr1.writeToParcel(parcel, 0);     parcel.setDataPosition(0);     com.prismaqf.callblocker.rules.FilterRule fr2 = com.prismaqf.callblocker.rules.FilterRule.CREATOR.createFromParcel(parcel);     org.junit.Assert.assertEquals("Equal after Prcelization", fr1, fr2); }
https://github.com/codimoc/PrismaCallBlocker.git,NewCalendarRuleTest,TestParcelable,{     com.prismaqf.callblocker.rules.CalendarRule c1 = new com.prismaqf.callblocker.rules.CalendarRule("first", java.util.EnumSet.of(com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.MONDAY, com.prismaqf.callblocker.rules.CalendarRule.DayOfWeek.FRIDAY), 2, 15, 10, 7);     android.os.Parcel parcel = android.os.Parcel.obtain();     c1.writeToParcel(parcel, 0);     parcel.setDataPosition(0);     com.prismaqf.callblocker.rules.CalendarRule c2 = com.prismaqf.callblocker.rules.CalendarRule.CREATOR.createFromParcel(parcel);     org.junit.Assert.assertEquals("Equal after Prcelization", c1, c2); }
https://github.com/codimoc/PrismaCallBlocker.git,UpdateCalendarRuleTest,TestSelectFromListOfExisting,{     onView(android.support.test.espresso.matcher.ViewMatchers.withText(com.prismaqf.callblocker.UpdateCalendarRuleTest.TEST_RULE)).check(matches(isDisplayed()));     onView(android.support.test.espresso.matcher.ViewMatchers.withText(com.prismaqf.callblocker.UpdateCalendarRuleTest.TEST_RULE)).perform(click());     onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.edit_calendar_rule_name)).check(matches(org.hamcrest.core.IsNot.not(isEnabled())));     android.app.Activity currentActivity = com.prismaqf.callblocker.utils.InstrumentTestHelper.getCurrentActivity();     org.junit.Assert.assertEquals("Enetered the NewEditCalendarRule activity", com.prismaqf.callblocker.NewEditCalendarRule.class, currentActivity.getClass()); }
https://github.com/codimoc/PrismaCallBlocker.git,UpdateFilterRuleTest,TestSelectFromListOfExisting,{     onView(android.support.test.espresso.matcher.ViewMatchers.withText(com.prismaqf.callblocker.UpdateFilterRuleTest.TEST_RULE)).check(matches(isDisplayed()));     onView(android.support.test.espresso.matcher.ViewMatchers.withText(com.prismaqf.callblocker.UpdateFilterRuleTest.TEST_RULE)).perform(click());     onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.edit_filter_rule_name)).check(matches(org.hamcrest.core.IsNot.not(isEnabled())));     android.app.Activity currentActivity = com.prismaqf.callblocker.utils.InstrumentTestHelper.getCurrentActivity();     org.junit.Assert.assertEquals("Enetered the NewEditCalendarRule activity", com.prismaqf.callblocker.NewEditFilterRule.class, currentActivity.getClass()); }
https://github.com/codimoc/PrismaCallBlocker.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/salminnella/PreScoop.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/sewerina/reek.git,InstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.github.sewerina.reek", appContext.getPackageName()); }
https://github.com/sewerina/reek.git,UnitTest,testMapScreenPath,{     com.github.sewerina.reek.ui.MainViewModel viewModel = new com.github.sewerina.reek.ui.MainViewModel();     viewModel.setMapScreenPath("abcPath");     org.junit.Assert.assertEquals("abcPath", viewModel.mapScreenPath().getValue()); }
https://github.com/sewerina/reek.git,UnitTest,testHasMapScreen,{     com.github.sewerina.reek.ui.MainViewModel viewModel = new com.github.sewerina.reek.ui.MainViewModel();     viewModel.setMapScreenPath("abcPath");     org.junit.Assert.assertTrue(viewModel.hasMapScreen()); }
https://github.com/sewerina/reek.git,UnitTest,testCheckRecipient,{     com.github.sewerina.reek.ui.MainViewModel viewModel = new com.github.sewerina.reek.ui.MainViewModel();     viewModel.checkRecipient(2, true);     org.junit.Assert.assertTrue(viewModel.mRecipientList.get(2).mIsSelected); }
https://github.com/AndrewPochapsky/RoutinePlanner.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.company.loaf.routinescheduler", appContext.getPackageName()); }
https://github.com/AndrewPochapsky/RoutinePlanner.git,DateUtilsTests,dateToString_TodayDate_ReturnsValidFormat,{     java.lang.String regex = "\\d{4}\\|\\d{1,2}\\|\\d{1,2}";     org.junit.Assert.assertTrue(com.company.loaf.routinescheduler.utils.DateUtils.dateToString(java.time.LocalDate.now()).matches(regex)); }
https://github.com/AndrewPochapsky/RoutinePlanner.git,DateUtilsTests,stringToDate_TodayDate_ReturnsValidDate,{     java.time.LocalDate date = java.time.LocalDate.now();     java.lang.String stringDate = com.company.loaf.routinescheduler.utils.DateUtils.dateToString(date);     java.time.LocalDate convertedDate = com.company.loaf.routinescheduler.utils.DateUtils.stringToDate(stringDate);     org.junit.Assert.assertTrue(date.equals(convertedDate)); }
https://github.com/AndrewPochapsky/RoutinePlanner.git,JsonTests,routinesToJson_SingleRoutineJson_ReturnsValidJson,{     java.lang.String json = ((((("[\n" + "  {\n") + "    \"name\": \"test\",\n") + "    \"interval\": 5,\n") + "    \"savedDate\": \"0000\"\n") + "  }\n") + "]";     json = json.replaceAll("[\r\n]+", " ");     json = json.replaceAll(" ", "");     com.company.loaf.routinescheduler.Routine[] routines = new com.company.loaf.routinescheduler.Routine[]{ new com.company.loaf.routinescheduler.Routine("test", 5, "0000") };     java.lang.String returnedJson = com.company.loaf.routinescheduler.utils.JSONUtils.routinesToJson(routines);     org.junit.Assert.assertEquals(json, returnedJson); }
https://github.com/AndrewPochapsky/RoutinePlanner.git,JsonTests,jsonToRoutines_EmptyJson_ReturnsEmptyArray,{     com.company.loaf.routinescheduler.Routine[] arr = com.company.loaf.routinescheduler.utils.JSONUtils.jsonToRoutines("");     org.junit.Assert.assertNull(arr); }
https://github.com/FrankSpitulski/TritonTrade.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.tmnt.tritontrade", appContext.getPackageName()); }
https://github.com/FrankSpitulski/TritonTrade.git,InstrumentedServerTest,testAddNewUserStandardEmail,{     // try to add weird but valid ucsd emails as users     try {         android.util.Log.d("DEBUG", "AFTER0");         // Valid email         testUsers.add(com.tmnt.tritontrade.controller.Server.addNewUser("I  AM STEVEEEE", "PHOTO LINK HERE", "I ARE VERY INTERESTING", "+0001 (510) 999-9999", "k5mao@ucsd.edu", "hunter2"));     } catch (java.io.IOException e) {         org.junit.Assert.fail();         android.util.Log.d("DEBUG", "EXCEPTIONNN", e);     } }
https://github.com/FrankSpitulski/TritonTrade.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,ReadPrioritiesActivityTest,testActivityStarts,{     com.reactiverobot.priorities.activity.ReadPrioritiesActivity readPrioritiesActivity = org.robolectric.Robolectric.setupActivity(com.reactiverobot.priorities.activity.ReadPrioritiesActivity.class);     readPrioritiesActivity.finish();     org.junit.Assert.assertNotNull(readPrioritiesActivity); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,ReadPrioritiesActivityTest,testPrioritiesNotSet,{     com.reactiverobot.priorities.activity.ReadPrioritiesActivity readPrioritiesActivity = org.robolectric.Robolectric.setupActivity(com.reactiverobot.priorities.activity.ReadPrioritiesActivity.class);     android.widget.Button setPrioritiesButton = ((android.widget.Button) (readPrioritiesActivity.findViewById(R.id.set_priorities_button)));     setPrioritiesButton.performClick();     android.content.Intent expectedIntent = new android.content.Intent(readPrioritiesActivity, com.reactiverobot.priorities.activity.SetPrioritiesActivity.class);     org.junit.Assert.assertEquals(expectedIntent, Shadows.shadowOf(readPrioritiesActivity).getNextStartedActivity()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,SetPrioritiesActivityTest,testActivityStarts,{     com.reactiverobot.priorities.activity.SetPrioritiesActivity setPrioritiesActivity = org.robolectric.Robolectric.setupActivity(com.reactiverobot.priorities.activity.SetPrioritiesActivity.class);     setPrioritiesActivity.finish();     org.junit.Assert.assertNotNull(setPrioritiesActivity); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPriorityReminderTest,testBroadcastRecieverRegistered,{     org.junit.Assert.assertTrue(getRuthlessPriorityReminderReceiver().isPresent()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testInstantiatePrefs,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     org.junit.Assert.assertNotNull(prefs); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testDefaultTopPriorities,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     java.util.List<java.lang.String> topPriorities = prefs.getTopPriorities();     org.junit.Assert.assertTrue(topPriorities.isEmpty()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testSetTopPriorities,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     java.util.List<java.lang.String> testPriorities = org.roboguice.shaded.goole.common.collect.Lists.newArrayList("p1", "p2");     prefs.setTopPriorities(testPriorities);     org.junit.Assert.assertEquals(testPriorities, prefs.getTopPriorities()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testDefaultNotPriorities,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     java.util.List<java.lang.String> notPriorities = prefs.getNotPriorities();     org.junit.Assert.assertTrue(notPriorities.isEmpty()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testSetNotPriorities,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     java.util.List<java.lang.String> testPriorities = org.roboguice.shaded.goole.common.collect.Lists.newArrayList("p1", "p2");     prefs.setNotPriorities(testPriorities);     org.junit.Assert.assertEquals(testPriorities, prefs.getNotPriorities()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testDefaultIsFirstStartUp,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     org.junit.Assert.assertTrue(prefs.isFirstStartUp()); }
https://github.com/MatthewDailey/ruthless-priorities-android.git,RuthlessPrefsTest,testMarkStartedUp,{     com.reactiverobot.priorities.prefs.RuthlessPrefs prefs = com.reactiverobot.priorities.prefs.RuthlessPrefs.fromContext(context);     prefs.reportStartedUp();     org.junit.Assert.assertFalse(prefs.isFirstStartUp()); }
https://github.com/ucam-emule/eMule.git,LocationUtilTest,LocationUtil_getDateCurrentTimeZone,{     org.junit.Assert.assertEquals(uk.ac.cam.cl.emule.util.LocationUtil.getDateCurrentTimeZone(1492523649), "18 Apr 14:54"); }
https://github.com/Marrrrtthias/Zeiterfassung.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("de.tastykatana.zeiterfassung", appContext.getPackageName()); }
https://github.com/Marrrrtthias/Zeiterfassung.git,MiscTests,getStartOfDay_isCorrect,{     org.junit.Assert.assertEquals("might fail because of changed date", org.joda.time.DateTime.now().withMillisOfDay(0).toString(), "2017-02-14T00:00:00.000+01:00"); }
https://github.com/Marrrrtthias/Zeiterfassung.git,MiscTests,getEndOfDay_isCorrect,{     org.junit.Assert.assertEquals("might fail because of changed date", org.joda.time.DateTime.now().withMillisOfDay(org.joda.time.DateTimeConstants.MILLIS_PER_DAY - 1).toString(), "2017-02-14T23:59:59.999+01:00"); }
https://github.com/KleberDevMen/AcampamentoAdventista.git,MusicaUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ciuc/InternetRadioClock.git,RadioAlarmManagerTest,setAlarm,{     Mockito.when(prefs.getBoolean("setting.alarm.1.key.2", false)).thenReturn(true);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.5", false)).thenReturn(true);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.7", false)).thenReturn(true);     Mockito.when(prefs.getInt("setting.alarm.1.hh", -1)).thenReturn(11);     Mockito.when(prefs.getInt("setting.alarm.1.mm", -1)).thenReturn(11);     java.lang.reflect.Method method = ro.antiprotv.radioclock.RadioAlarmManager.class.getDeclaredMethod("getNextAlarm", java.lang.Integer.TYPE);     method.setAccessible(true);     ro.antiprotv.radioclock.RadioAlarmManager.Alarm alarm = ((ro.antiprotv.radioclock.RadioAlarmManager.Alarm) (method.invoke(radioAlarmManager, 1)));     org.junit.Assert.assertEquals(new ro.antiprotv.radioclock.RadioAlarmManager.Alarm(7, 11, 11, 1), alarm); }
https://github.com/ciuc/InternetRadioClock.git,RadioAlarmManagerTest,setAlarm2,{     Mockito.when(prefs.getBoolean("setting.alarm.1.key.2", false)).thenReturn(true);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.5", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.7", false)).thenReturn(false);     java.util.Calendar now = java.util.Calendar.getInstance();     Mockito.when(prefs.getInt("setting.alarm.1.hh", -1)).thenReturn(now.get(java.util.Calendar.HOUR_OF_DAY) - 1);     Mockito.when(prefs.getInt("setting.alarm.1.mm", -1)).thenReturn(11);     java.lang.reflect.Method method = ro.antiprotv.radioclock.RadioAlarmManager.class.getDeclaredMethod("getNextAlarm", java.lang.Integer.TYPE);     method.setAccessible(true);     ro.antiprotv.radioclock.RadioAlarmManager.Alarm alarm = ((ro.antiprotv.radioclock.RadioAlarmManager.Alarm) (method.invoke(radioAlarmManager, 1)));     org.junit.Assert.assertEquals(new ro.antiprotv.radioclock.RadioAlarmManager.Alarm(1, now.get(java.util.Calendar.HOUR_OF_DAY) - 1, 11, 1), alarm); }
https://github.com/ciuc/InternetRadioClock.git,RadioAlarmManagerTest,setAlarm3,{     Mockito.when(prefs.getBoolean("setting.alarm.1.key.2", false)).thenReturn(true);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.5", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.7", false)).thenReturn(false);     java.util.Calendar now = java.util.Calendar.getInstance();     Mockito.when(prefs.getInt("setting.alarm.1.hh", -1)).thenReturn(now.get(java.util.Calendar.HOUR_OF_DAY) + 1);     Mockito.when(prefs.getInt("setting.alarm.1.mm", -1)).thenReturn(11);     java.lang.reflect.Method method = ro.antiprotv.radioclock.RadioAlarmManager.class.getDeclaredMethod("getNextAlarm", java.lang.Integer.TYPE);     method.setAccessible(true);     ro.antiprotv.radioclock.RadioAlarmManager.Alarm alarm = ((ro.antiprotv.radioclock.RadioAlarmManager.Alarm) (method.invoke(radioAlarmManager, 1)));     org.junit.Assert.assertEquals(new ro.antiprotv.radioclock.RadioAlarmManager.Alarm(7, now.get(java.util.Calendar.HOUR_OF_DAY) + 1, 11, 1), alarm); }
https://github.com/ciuc/InternetRadioClock.git,RadioAlarmManagerTest,setAlarm_5,{     Mockito.when(prefs.getBoolean("setting.alarm.1.key.2", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.5", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.7", false)).thenReturn(false);     java.util.Calendar now = java.util.Calendar.getInstance();     Mockito.when(prefs.getInt("setting.alarm.1.hh", -1)).thenReturn(now.get(java.util.Calendar.HOUR_OF_DAY) + 1);     Mockito.when(prefs.getInt("setting.alarm.1.mm", -1)).thenReturn(11);     java.lang.reflect.Method method = ro.antiprotv.radioclock.RadioAlarmManager.class.getDeclaredMethod("getNextAlarm", java.lang.Integer.TYPE);     method.setAccessible(true);     ro.antiprotv.radioclock.RadioAlarmManager.Alarm alarm = ((ro.antiprotv.radioclock.RadioAlarmManager.Alarm) (method.invoke(radioAlarmManager, 1)));     java.lang.System.out.println("result: " + alarm);     org.junit.Assert.assertEquals(new ro.antiprotv.radioclock.RadioAlarmManager.Alarm(7, now.get(java.util.Calendar.HOUR_OF_DAY) + 1, 11, 1), alarm); }
https://github.com/ciuc/InternetRadioClock.git,RadioAlarmManagerTest,setAlarm_6,{     Mockito.when(prefs.getBoolean("setting.alarm.1.key.2", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.5", false)).thenReturn(false);     Mockito.when(prefs.getBoolean("setting.alarm.1.key.7", false)).thenReturn(false);     java.util.Calendar now = java.util.Calendar.getInstance();     Mockito.when(prefs.getInt("setting.alarm.1.hh", -1)).thenReturn(now.get(java.util.Calendar.HOUR_OF_DAY) - 1);     Mockito.when(prefs.getInt("setting.alarm.1.mm", -1)).thenReturn(11);     java.lang.reflect.Method method = ro.antiprotv.radioclock.RadioAlarmManager.class.getDeclaredMethod("getNextAlarm", java.lang.Integer.TYPE);     method.setAccessible(true);     ro.antiprotv.radioclock.RadioAlarmManager.Alarm alarm = ((ro.antiprotv.radioclock.RadioAlarmManager.Alarm) (method.invoke(radioAlarmManager, 1)));     java.lang.System.out.println("result: " + alarm);     org.junit.Assert.assertEquals(new ro.antiprotv.radioclock.RadioAlarmManager.Alarm(1, now.get(java.util.Calendar.HOUR_OF_DAY) - 1, 11, 1), alarm); }
https://github.com/BeedleEiEi/final_project_android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("app.beedle.pocketreview", appContext.getPackageName()); }
https://github.com/TekkLabs/memoria-politica.git,QueryMatcherTest,test,{     com.tekklabs.memoriapolitica.domain.QueryMatcher matcher = new com.tekklabs.memoriapolitica.domain.QueryMatcher("Jair Bolsonaro", "PP");     boolean result = matcher.matches("bolsonaro");     org.junit.Assert.assertTrue(result); }
https://github.com/Scaronthesky/UK-Gebaerden_Muensterland.git,DbHelperTest,testDelete,{     final de.lebenshilfe_muenster.uk_gebaerden_muensterland.database.Sign sign = signDAO.create(de.lebenshilfe_muenster.uk_gebaerden_muensterland.TestConstants.TEST_SIGN);     final int numberOfSignsBefore = signDAO.read().size();     signDAO.delete(sign);     final int numberOfSignsAfter = signDAO.read().size();     if (numberOfSignsAfter != (numberOfSignsBefore - 1)) {         org.junit.Assert.fail("Deleted sign, but reading returns a list with the same size");     } }
https://github.com/UlricusR/FPU_Calculator.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("info.rueth.fpucalculator", appContext.getPackageName()); }
https://github.com/UlricusR/FPU_Calculator.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/jangerhard/BitcoinWalletTracker.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("io.github.jangerhard.BitcoinWalletTracker", appContext.getPackageName()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,GsonUtilsTest,testGetGson,{     org.junit.Assert.assertNotNull(com.charlesmadere.hummingbird.misc.GsonUtils.getGson()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,AnimeLibraryEntryTest,testHasNotes,{     org.junit.Assert.assertFalse(mLibraryEntry.hasNotes()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,AnimeLibraryEntryTest,testHasRating,{     org.junit.Assert.assertTrue(mLibraryEntry.hasRating()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,AnimeLibraryUpdateTest,testContainsModifications,{     org.junit.Assert.assertFalse(mLibraryUpdate.containsModifications()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetAnimeLibraryEntries,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.AnimeLibraryEntry> libraryEntries = mFeed.getAnimeLibraryEntries();     org.junit.Assert.assertTrue((libraryEntries == null) || libraryEntries.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetAnimeLibraryEntriesSize,{     org.junit.Assert.assertEquals(mFeed.getAnimeLibraryEntriesSize(), 0); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetAnimeReviews,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.AnimeReview> animeReviews = mFeed.getAnimeReviews();     org.junit.Assert.assertTrue((animeReviews == null) || animeReviews.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetGroupMembers,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.GroupMember> groupMembers = mFeed.getGroupMembers();     org.junit.Assert.assertTrue((groupMembers == null) || groupMembers.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetGroups,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.Group> groups = mFeed.getGroups();     org.junit.Assert.assertTrue((groups == null) || groups.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetManga,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.Manga> manga = mFeed.getManga();     org.junit.Assert.assertTrue((manga == null) || manga.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetMangaLibraryEntries,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.MangaLibraryEntry> libraryEntries = mFeed.getMangaLibraryEntries();     org.junit.Assert.assertTrue((libraryEntries == null) || libraryEntries.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetMangaLibraryEntriesSize,{     org.junit.Assert.assertEquals(mFeed.getMangaLibraryEntriesSize(), 0); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetNotifications,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.AbsNotification> notifications = mFeed.getNotifications();     org.junit.Assert.assertTrue((notifications == null) || notifications.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetStories,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.AbsStory> stories = mFeed.getStories();     org.junit.Assert.assertTrue((stories == null) || stories.isEmpty()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetStoriesSize,{     org.junit.Assert.assertEquals(mFeed.getStoriesSize(), 0); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetStory,{     org.junit.Assert.assertNull(mFeed.getStory()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetSubstoriesSize,{     org.junit.Assert.assertEquals(mFeed.getSubstoriesSize(), 8); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetUsers,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.User> users = mFeed.getUsers();     org.junit.Assert.assertTrue((users != null) && (!users.isEmpty())); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testGetUsersSize,{     org.junit.Assert.assertEquals(mFeed.getUsersSize(), 5); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasAnime,{     org.junit.Assert.assertFalse(mFeed.hasAnime()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasAnimeLibraryEntries,{     org.junit.Assert.assertFalse(mFeed.hasAnimeLibraryEntries()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasAnimeReviews,{     org.junit.Assert.assertFalse(mFeed.hasAnimeReviews()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasCursor,{     org.junit.Assert.assertFalse(mFeed.hasCursor()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasGroupMembers,{     org.junit.Assert.assertFalse(mFeed.hasGroupMembers()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasGroups,{     org.junit.Assert.assertFalse(mFeed.hasGroups()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasManga,{     org.junit.Assert.assertFalse(mFeed.hasManga()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasMangaLibraryEntries,{     org.junit.Assert.assertFalse(mFeed.hasMangaLibraryEntries()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasNotifications,{     org.junit.Assert.assertFalse(mFeed.hasNotifications()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasStories,{     org.junit.Assert.assertFalse(mFeed.hasStories()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasStory,{     org.junit.Assert.assertFalse(mFeed.hasStory()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasSubstories,{     org.junit.Assert.assertTrue(mFeed.hasSubstories()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHasUsers,{     org.junit.Assert.assertTrue(mFeed.hasUsers()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,FeedTest,testHydrate,{     final java.util.ArrayList<com.charlesmadere.hummingbird.models.AbsSubstory> substories = mFeed.getSubstories();     // noinspection ConstantConditions     for (final com.charlesmadere.hummingbird.models.AbsSubstory substory : substories) {         final com.charlesmadere.hummingbird.models.ReplySubstory reply = ((com.charlesmadere.hummingbird.models.ReplySubstory) (substory));         org.junit.Assert.assertNotNull(reply.getUser());     } }
https://github.com/charlesmadere/that-lil-hummingbird.git,MangaLibraryEntryTest,testHasNotes,{     org.junit.Assert.assertFalse(mLibraryEntry.hasNotes()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,MangaLibraryEntryTest,testHasRating,{     org.junit.Assert.assertFalse(mLibraryEntry.hasRating()); }
https://github.com/charlesmadere/that-lil-hummingbird.git,MangaLibraryUpdateTest,testContainsModifications,{     org.junit.Assert.assertFalse(mLibraryUpdate.containsModifications()); }
https://github.com/SecUSo/privacy-friendly-food-tracker.git,ApiManagerTest,readProductInformation,{     final java.util.concurrent.CountDownLatch signal = new java.util.concurrent.CountDownLatch(1);     retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call = mProductApiService.listProducts("banane");     call.enqueue(new retrofit2.Callback<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse>() {         @java.lang.Override         public void onResponse(retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call, retrofit2.Response<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> response) {             if (response.isSuccessful()) {                 productResponse = response.body();             } else {                 // show error             }             signal.countDown();         }          @java.lang.Override         public void onFailure(retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call, java.lang.Throwable t) {             signal.countDown();         }     });     signal.await();// wait for callback      // uses the current location. To pass the test, the location must be "de"     org.junit.Assert.assertTrue("Responds should contains 20 product informations ", productResponse.getProducts().size() == 20); }
https://github.com/SecUSo/privacy-friendly-food-tracker.git,ApiManagerTest,readProductInformationConverter,{     final java.util.concurrent.CountDownLatch signal = new java.util.concurrent.CountDownLatch(1);     retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call = mProductApiService.listProducts("banane");     call.enqueue(new retrofit2.Callback<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse>() {         @java.lang.Override         public void onResponse(retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call, retrofit2.Response<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> response) {             if (response.isSuccessful()) {                 // Conversion to db product                 productResponse = response.body();                 for (int i = 0; i < productResponse.getProducts().size(); i++) {                     org.secuso.privacyfriendlyfoodtracker.network.models.NetworkProduct product = productResponse.getProducts().get(i);                     if (product != null) {                         products.add(org.secuso.privacyfriendlyfoodtracker.network.utils.ProductConversionHelper.conversionProduct(product));                     }                 }             } else {                 // show error             }             signal.countDown();         }          @java.lang.Override         public void onFailure(retrofit2.Call<org.secuso.privacyfriendlyfoodtracker.network.models.ProductResponse> call, java.lang.Throwable t) {             signal.countDown();         }     });     signal.await();// wait for callback      // uses the current location. To pass the test, the location must be "de"     org.junit.Assert.assertTrue("Responds should contains 20 product informations ", products.get(0).energy != 0); }
https://github.com/GoneUp/Htwg_LsfPlan.git,CryptoUtilsTest,getSetStoreField_Vaild,{     java.lang.String input = "1234";     com.hstrobel.lsfplan.model.CryptoUtils.setStoreField(appContext, "Valid", input);     java.lang.String decrypt = com.hstrobel.lsfplan.model.CryptoUtils.getStoreField(appContext, "Valid");     org.junit.Assert.assertEquals(input, decrypt); }
https://github.com/nordfalk/AndroidElementer.git,GalgelogikTest,prøvHentOrdFraDr,{     lekt02_aktiviteter.Galgelogik spil = new lekt02_aktiviteter.Galgelogik();     spil.hentOrdFraDr();     org.junit.Assert.assertTrue("Mere end 100 ord fra DR", spil.muligeOrd.size() > 100); }
https://github.com/adrmal/DrSmartMobile.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("net.azurewebsites.drsmart2016.drsmartmobile", appContext.getPackageName()); }
https://github.com/linux-colonel/AdminControl.git,KeyguardFeaturesTest,test_noChangeNoKeyguardFeaturesDisabled,{     int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE, false);     org.junit.Assert.assertEquals(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE, result); }
https://github.com/linux-colonel/AdminControl.git,KeyguardFeaturesTest,test_changeNoKeyguardFeaturesDisabled,{     int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE, true);     org.junit.Assert.assertEquals(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT, result); }
https://github.com/linux-colonel/AdminControl.git,KeyguardFeaturesTest,test_noChangeOneKeyguardFeaturesDisabled,{     int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS, false);     org.junit.Assert.assertEquals(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS, result); }
https://github.com/linux-colonel/AdminControl.git,KeyguardFeaturesTest,test_changeOneKeyguardFeaturesDisabled,{     int expected = android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS + android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT;     int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS, true);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/linux-colonel/AdminControl.git,KeyguardFeaturesTest,test_changeAllKeyguardFeaturesDisabled,{     int expected = android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL;     int result = com.davidshewitt.admincontrol.KeyguardFeatures.setFingerprintDisabled(android.app.admin.DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_ALL, true);     org.junit.Assert.assertEquals(expected, result); }
https://github.com/JobardJerome14/KenkenJJ.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.real.first.sandoken", appContext.getPackageName()); }
https://github.com/JobardJerome14/KenkenJJ.git,APITests,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Jigsaw-Code/Intra.git,UntemplateTest,testTemplateWeird,{     org.junit.Assert.assertEquals("https://foo.example/prefix/suffix", app.intra.ui.settings.Untemplate.strip("https://foo.example/prefix{/dns}/suffix")); }
https://github.com/Jigsaw-Code/Intra.git,DnsPacketTest,testEmpty,{     byte[] data = new byte[]{  };     try {         app.intra.net.dns.DnsPacket p = new app.intra.net.dns.DnsPacket(data);         org.junit.Assert.fail();     } catch (java.net.ProtocolException e) {     } }
https://github.com/Jigsaw-Code/Intra.git,DnsPacketTest,testTruncated,{     byte[] data = new byte[]{ -107, -6// [0-1]   query ID     , 1, 0// [2-3]   flags, RD=1     , 0, 1// [4-5]   QDCOUNT (number of queries) = 1     , 0, 0// [6-7]   ANCOUNT (number of answers) = 0     , 0, 0// [8-9]   NSCOUNT (number of authoritative answers) = 0     , 0, 0// [10-11] ARCOUNT (number of additional records) = 0     , // First question     5, 'm', 't', 'a', 'l', 'k', 6, 'g', 'o', 'o', 'g', 'l', 'e', 3, 'c', 'o', 'm', 0// null terminator of FQDN (DNS root)     , 0, 1// QTYPE = A     , 0, 1// QCLASS = IN (Internet)      };     for (int i = 0; i < data.length; ++i) {         byte[] truncated = java.util.Arrays.copyOf(data, i);         try {             app.intra.net.dns.DnsPacket p = new app.intra.net.dns.DnsPacket(truncated);             org.junit.Assert.fail();         } catch (java.net.ProtocolException e) {         }     } }
https://github.com/NikShuvalov/Twas.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("shuvalov.nikita.twas", appContext.getPackageName()); }
https://github.com/NikShuvalov/Twas.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/astrada/smartwishlistapp-android.git,ApiSignatureTest,testGenerateSignature,{     java.lang.String signature = net.smartwishlist.smartwishlistapp.ApiSignature.generateRequestSignature("Smart Wish List API v0.1 - Shared Secret", "test", 1.41960739371E9);     org.junit.Assert.assertEquals("c5493a92b170a845a44cf78263a581f26ace023c91c18a1bc22b876807b827dd", signature); }
https://github.com/astrada/smartwishlistapp-android.git,ApiSignatureTest,testGenerateSignatureApi,{     java.lang.String signature = net.smartwishlist.smartwishlistapp.ApiSignature.generateRequestSignature("14cf1e72acd716691c9e13a813b5551dfe761b5188189accf8f410f87299a6a2", "seagate 5tbCA", 1.42029664296E9);     org.junit.Assert.assertEquals("f734253438a53261abc38981916a03528d987f08432a9899147aef231956e5b0", signature); }
https://github.com/rijogeorge7/TipCalculator.git,CalcSplitBillTest,round,{     double value = 55.727272;     double roundValue = 55.73;     int places = 2;     double answer = net.logicshades.tipcalculator.util.CalcSplitBill.round(value, places);     org.junit.Assert.assertEquals("rounded no", roundValue, answer, 0.0); }
https://github.com/rijogeorge7/TipCalculator.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/WesBunton/MyCertificates.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.wesbunton.projects.mycertificates", appContext.getPackageName()); }
https://github.com/WesBunton/MyCertificates.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/WesBunton/MyCertificates.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.wesbunton.projects.mycertificates", appContext.getPackageName()); }
https://github.com/WesBunton/MyCertificates.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/The224/Infectious_Mobile.git,GameActivityInstrumentedTest,confirmWorkingGame,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.m224.ataxx", appContext.getPackageName()); }
https://github.com/rstockbridge/ShowStats.git,UserStatisticsUnitTests,testUserId,{     org.junit.Assert.assertEquals(userStatistics.getUserId(), userId); }
https://github.com/marcosdiez/LimiteCartao.git,ParseSmsTest,testAlwaysPass,{     org.junit.Assert.assertEquals(10, 10); }
https://github.com/Jenova7/Electra-Android.git,KVStoreTests,testSetThenSetIncrementsVersion,{     byte[] value = "hello".getBytes();     byte[] value2 = "hello2".getBytes();     com.platform.kvstore.CompletionObject setObj = com.electraproject.platform.KVStoreTests.store.set(0, 0, "hello", value, java.lang.System.currentTimeMillis(), 0);     com.platform.kvstore.CompletionObject setObj2 = com.electraproject.platform.KVStoreTests.store.set(setObj.version, 0, "hello", value2, java.lang.System.currentTimeMillis(), 0);     org.junit.Assert.assertEquals(setObj2.version, setObj.version + 1); }
https://github.com/Jenova7/Electra-Android.git,KVStoreTests,testSetWithIncorrectFirstVersionFails,{     byte[] value = "hello".getBytes();     com.platform.kvstore.CompletionObject setObj = com.electraproject.platform.KVStoreTests.store.set(1, 0, "hello", value, java.lang.System.currentTimeMillis(), 0);     org.junit.Assert.assertNotNull(setObj.err); }
https://github.com/Jenova7/Electra-Android.git,KVStoreTests,testGetNonExistentKeyFails,{     com.platform.kvstore.CompletionObject object = com.electraproject.platform.KVStoreTests.store.get("hello", 0);     com.platform.sqlite.KVItem getKv = object.kv;     org.junit.Assert.assertNull(getKv); }
https://github.com/Jenova7/Electra-Android.git,KVStoreTests,testGetNonExistentKeyVersionFails,{     com.platform.kvstore.CompletionObject object = com.electraproject.platform.KVStoreTests.store.get("hello", 1);     com.platform.sqlite.KVItem getKv = object.kv;     org.junit.Assert.assertNull(getKv); }
https://github.com/Jenova7/Electra-Android.git,KVStoreTests,testSyncTenTimes,{     int n = 10;     while (n > 0) {         boolean success = com.electraproject.platform.KVStoreTests.store.syncAllKeys();         org.junit.Assert.assertTrue(success);         n--;     }      assertDatabasesAreSynced(); }
https://github.com/Jenova7/Electra-Android.git,PlatformTests,testFeePerKbFetch,{     long fee = com.platform.APIClient.getInstance(mActivityRule.getActivity()).feePerKb();     java.lang.System.out.println("testFeePerKbFetch: fee: " + fee);     org.junit.Assert.assertNotSame(fee, ((long) (0))); }
https://github.com/Jenova7/Electra-Android.git,PlatformTests,testMeRequest,{     com.platform.APIClient apiClient = com.platform.APIClient.getInstance(mActivityRule.getActivity());     java.lang.String response = apiClient.buyBitcoinMe();     org.junit.Assert.assertNotNull(response); }
https://github.com/Jenova7/Electra-Android.git,EncryptionMessagesTests,encryptDecrypt,{     com.electraproject.core.BRCoreKey key = new com.electraproject.core.BRCoreKey(testPrivKey);     com.electraproject.protocols.messageexchange.MessageExchangeService messageExchangeService = new com.electraproject.protocols.messageexchange.MessageExchangeService();     com.electraproject.protocols.messageexchange.entities.EncryptedMessage encryptedMessage = messageExchangeService.encrypt(key, key.getPubKey(), com.electraproject.core.BRCoreKey.decodeHex(sampleInputData));     byte[] decryptedMessage = messageExchangeService.decrypt(key, key.getPubKey(), encryptedMessage.getEncryptedData(), encryptedMessage.getNonce());     org.junit.Assert.assertEquals(sampleInputData, com.electraproject.core.BRCoreKey.encodeHex(decryptedMessage)); }
https://github.com/Jenova7/Electra-Android.git,EncryptionMessagesTests,verifyEnvelope,{     com.electraproject.core.BRCoreKey authKey = new com.electraproject.core.BRCoreKey(testPrivKey);     com.electraproject.core.BRCoreKey receiverKey = new com.electraproject.core.BRCoreKey(testPrivKey2);     com.electraproject.protocols.messageexchange.Protos.Ping ping = com.electraproject.protocols.messageexchange.Protos.Ping.newBuilder().setPing("Hello ping").build();     java.lang.String uniqueId = "myId";     com.electraproject.protocols.messageexchange.MessageExchangeService messageExchangeService = new com.electraproject.protocols.messageexchange.MessageExchangeService();     com.electraproject.protocols.messageexchange.entities.EncryptedMessage encryptedMessage = messageExchangeService.encrypt(authKey, receiverKey.getPubKey(), ping.toByteArray());     com.electraproject.protocols.messageexchange.Protos.Envelope envelope = com.electraproject.protocols.messageexchange.MessageExchangeService.createEnvelope(com.google.protobuf.ByteString.copyFrom(encryptedMessage.getEncryptedData()), com.electraproject.protocols.messageexchange.MessageExchangeService.MessageType.PING, com.google.protobuf.ByteString.copyFrom(authKey.getPubKey()), com.google.protobuf.ByteString.copyFrom(receiverKey.getPubKey()), uniqueId, com.google.protobuf.ByteString.copyFrom(encryptedMessage.getNonce()));     byte[] signature = authKey.compactSign(com.electraproject.tools.crypto.CryptoHelper.doubleSha256(envelope.toByteArray()));     envelope = envelope.toBuilder().setSignature(com.google.protobuf.ByteString.copyFrom(signature)).build();     org.junit.Assert.assertTrue(messageExchangeService.verifyEnvelopeSignature(envelope)); }
https://github.com/Jenova7/Electra-Android.git,KeyStoreTests,testKeyStoreAuthTime,{     org.junit.Assert.assertEquals(com.electraproject.tools.security.BRKeyStore.AUTH_DURATION_SEC, 300); }
https://github.com/Jenova7/Electra-Android.git,PaperKeyTests,testPaperKeyValidation,{     java.util.List<java.lang.String> list = getAllWords();     org.junit.Assert.assertThat(list.size(), org.hamcrest.Matchers.is(10240)); }
https://github.com/karino2/MeatPieDay.git,NoteTest,import_isCorrect,{     karino2.livejournal.com.meatpieday.json.JsonNote note = readTestNote();     org.junit.Assert.assertEquals(2, note.cells.size()); }
https://github.com/karino2/MeatPieDay.git,NoteTest,metadata_updateAt,{     karino2.livejournal.com.meatpieday.json.JsonNote note = readTestNote();     org.junit.Assert.assertEquals(1506077162718L, note.cells.get(0).metadata.updatedAt); }
https://github.com/YonahKarp/SeatSuite.git,TableArrayTest,acrossIndex,{     org.junit.Assert.assertEquals(7, list.acrossIndex(1)); }
https://github.com/YonahKarp/SeatSuite.git,TableArrayTest,circularWorks,{     list.add(steve);     list.add(josh);     list.add(anna);     org.junit.Assert.assertEquals(steve, list.get(-3)); }
https://github.com/YonahKarp/SeatSuite.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.imersionultd.seatsuite", appContext.getPackageName()); }
https://github.com/YonahKarp/SeatSuite.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/YonahKarp/SeatSuite.git,GuestListTest,ListDoesntContainGuestsNotAdded,{     com.imersionultd.seatsuite.Classes.Guest mac = new com.imersionultd.seatsuite.Classes.Guest("mac", 21, true);     org.junit.Assert.assertFalse(list.contains(mac)); }
https://github.com/YonahKarp/SeatSuite.git,GuestListTest,TestMostPicky,{     com.imersionultd.seatsuite.Classes.Guest ira = new com.imersionultd.seatsuite.Classes.Guest("ira", 75, true);     list.add(ira);     com.imersionultd.seatsuite.Classes.Guest mostPicky = list.getMostPickyGuest(true);     org.junit.Assert.assertEquals(ira, mostPicky); }
https://github.com/mkloar/DrinkMoreWater.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.mj.drinkmorewater", appContext.getPackageName()); }
https://github.com/mkloar/DrinkMoreWater.git,DateUtilsTest,currentLocalDate_ReturnsTrue,{     java.time.LocalDate localDate = com.mj.drinkmorewater.Utils.DateUtils.getCurrentDate();     java.time.LocalDate currentLocalDate = java.time.LocalDate.now();     org.junit.Assert.assertEquals(currentLocalDate, localDate); }
https://github.com/mkloar/DrinkMoreWater.git,DateUtilsTest,substractDaysTest,{     java.time.LocalDate today = com.mj.drinkmorewater.Utils.DateUtils.getCurrentDate();     java.time.LocalDate todayMinusFiveDays = today.minusDays(5);     org.junit.Assert.assertEquals(todayMinusFiveDays, com.mj.drinkmorewater.Utils.DateUtils.substract(today, 5)); }
https://github.com/mkloar/DrinkMoreWater.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/carcme/btown_mvp.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("me.carc.b_townmvp", appContext.getPackageName()); }
https://github.com/carcme/btown_mvp.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/carcme/btown_mvp.git,WikiLinkBuilderTest,filenameDecode,{     java.lang.String filename = "Stolperstein_Marschnerstr_38_%28Lichf%29_Kurt_Aron.jpg";     java.lang.String result = "Stolperstein_Marschnerstr_38_(Lichf)_Kurt_Aron.jpg";     org.junit.Assert.assertEquals(me.carc.btown.Utils.WikiUtils.decodeFilename(filename), result); }
https://github.com/carcme/btown_mvp.git,WikiLinkBuilderTest,md5Check1,{     java.lang.StringBuilder testRes = new java.lang.StringBuilder();     java.lang.String filename = "Stolperstein_Marschnerstr_38_%28Lichf%29_Kurt_Aron.jpg";     java.lang.String decoded = me.carc.btown.Utils.WikiUtils.decodeFilename(filename);     byte[] temp = new byte[1];     me.carc.btown.Utils.WikiUtils.md5(decoded, temp);// not interested in the return value      java.lang.String md2 = java.lang.Integer.toHexString(temp[0] & 0xff);     char md1 = md2.charAt(0);     testRes.append(md1).append("/");     testRes.append(md2).append("/");     org.junit.Assert.assertEquals(testRes.toString(), "2/2e/"); }
https://github.com/carcme/btown_mvp.git,WikiLinkBuilderTest,wikiImageLinkBuilder,{     java.util.ArrayList<java.lang.String> links = new java.util.ArrayList<>();     java.util.ArrayList<java.lang.String> results = new java.util.ArrayList<>();     links.add("http://commons.wikimedia.org/wiki/File:Stolperstein_Marschnerstr_38_%28Lichf%29_Kurt_Aron.jpg");     results.add("https://upload.wikimedia.org/wikipedia/commons/2/2e/Stolperstein_Marschnerstr_38_%28Lichf%29_Kurt_Aron.jpg");     links.add("http://commons.wikimedia.org/wiki/File:Stolperstein_Hartmannstr_35_%28Lichtf%29_Edith_Braun.jpg");     results.add("https://upload.wikimedia.org/wikipedia/commons/7/77/Stolperstein_Hartmannstr_35_%28Lichtf%29_Edith_Braun.jpg");     links.add("http://commons.wikimedia.org/wiki/File:Stolperstein Hartmannstr 35 (Lichtf) Edith Braun.jpg");     results.add("https://upload.wikimedia.org/wikipedia/commons/7/77/Stolperstein_Hartmannstr_35_%28Lichtf%29_Edith_Braun.jpg");     links.add("https://de.wikipedia.org/wiki/Datei:Stolperstein_Holsteinische_Str_34_(Fried)_Regina_Lewitt.jpg?uselang=de");     results.add("https://upload.wikimedia.org/wikipedia/commons/e/ee/Stolperstein_Holsteinische_Str_34_%28Fried%29_Regina_Lewitt.jpg");     links.add("https://commons.wikimedia.org/wiki/File:Berlin,_Mitte,_Unter_den_Linden,_Reiterstandbild_Friedrich_II.jpg");     results.add("https://upload.wikimedia.org/wikipedia/commons/6/65/Berlin%2C_Mitte%2C_Unter_den_Linden%2C_Reiterstandbild_Friedrich_II.jpg");     links.add("https://commons.wikimedia.org/wiki/File:Fetchter_Memorial_040409.JPG");     results.add("https://upload.wikimedia.org/wikipedia/commons/a/ab/Fetchter_Memorial_040409.JPG");     for (int i = 0; i < links.size(); i++) {         java.lang.String ret = me.carc.btown.Utils.WikiUtils.buildWikiCommonsLink(links.get(i), 0);         org.junit.Assert.assertEquals(ret, results.get(i));     } }
https://github.com/ineiti/Dictionary2.git,LiftTest,testCacheWrite,{     java.lang.System.out.println(new java.io.File(".").getCanonicalPath());     java.io.File f = new java.io.File(cacheName);     f.delete();     wordList = new org.profeda.dictionary.WordList(liftName, org.profeda.dictionary.Translate.initLanguages());     java.lang.System.out.println("Wordlist loaded");     wordList.WriteCache(cacheName);     org.junit.Assert.assertTrue(f.exists()); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testRefTudaga,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> results = wordList.searchWord("cilab", "tuq");     org.profeda.dictionary.LiftCache result = results.get("cilab");     java.lang.System.out.println(result.RefTudaga);     org.junit.Assert.assertTrue(result.RefTudaga.contains("bigi2")); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testId,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> results = wordList.searchWord("kowus", "tuq");     org.profeda.dictionary.LiftCache result = results.get("kowus");     java.lang.System.out.println("RefTudaga is: " + result.RefTudaga);     org.junit.Assert.assertTrue(result.RefTudaga.contains("mûyi")); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testSearch,{     loadWholeFile();     java.util.List<java.lang.String> translations = java.util.Arrays.asList("ali", "kirki", "kubo turti");     for (java.lang.String s : translations) {         java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> e = wordList.searchWord(s, "en");         org.junit.Assert.assertTrue(e.size() > 0);         for (java.util.Map.Entry<java.lang.String, org.profeda.dictionary.LiftCache> ent : e.entrySet()) {             java.lang.System.out.println((ent.getValue().Original + " means ") + ent.getValue().String());         }     } }
https://github.com/ineiti/Dictionary2.git,LiftTest,testDouble,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> results = wordList.searchWord("ndogusi", "en");     org.profeda.dictionary.LiftCache ndogusi = results.get("ndogusi_4030259a-3b36-41ce-bfbf-f4ae4855db6b");     org.junit.Assert.assertTrue(ndogusi.Senses.size() == 2);     java.lang.System.out.println(ndogusi.Senses.get(0).GlossDef());     java.lang.System.out.println(ndogusi.Senses.get(1).GlossDef()); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testCacheRead,{     testCacheWrite();     org.junit.Assert.assertTrue(wordList.LoadCache(cacheName));     searchWord(); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testCacheWordList,{     testCacheWrite();     org.profeda.dictionary.WordList wl = new org.profeda.dictionary.WordList(cacheName, null);     org.junit.Assert.assertTrue(wl.TranslationList.size() > 0);     searchWord(); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testVersionMismatch,{     loadWholeFile();     wordList.versionTest = 2;     wordList.WriteCache(cacheName);     org.junit.Assert.assertTrue(!wordList.LoadCache(cacheName)); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testSenses,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> result = wordList.searchWord("borsu", "en");     java.util.List<org.profeda.dictionary.LiftCacheDefinition> s = result.get("borsu").Senses;     java.lang.System.out.println(s);     org.junit.Assert.assertTrue(s.size() == 2); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testDeAccent,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> arabic = wordList.searchWord("aci", "ayl");     java.lang.String arabic_str = arabic.get("aci").String();     java.lang.System.out.println(arabic_str);     java.lang.System.out.println(org.profeda.dictionary.WordList.deAccent(arabic_str));     java.lang.String ret = org.profeda.dictionary.WordList.deAccent("hello(there)");     org.junit.Assert.assertTrue(ret.equals("hellothere")); }
https://github.com/ineiti/Dictionary2.git,LiftTest,testMultiSource,{     loadWholeFile();     java.util.Map<java.lang.String, org.profeda.dictionary.LiftCache> fromTudaga1 = wordList.searchWord("^bidi$", "en");     java.lang.System.out.println(fromTudaga1);     java.lang.System.out.println(fromTudaga1.get("bidi").String());     java.lang.System.out.println(fromTudaga1.get("bidi ").String());     java.lang.System.out.println(fromTudaga1.get("bidi  ").String());     // There should be 'bidi', 'bîdi' and 'bîdibidi'     org.junit.Assert.assertTrue(fromTudaga1.size() == 4); }
https://github.com/ineiti/Dictionary2.git,WordListTest,testCacheWrite,{     java.io.File f = new java.io.File(cacheName);     f.delete();     org.profeda.dictionary.WordList wordList = new org.profeda.dictionary.WordList(liftName, org.profeda.dictionary.Translate.initLanguages());     java.lang.System.out.println("Wordlist loaded");     wordList.WriteCache(cacheName);     org.junit.Assert.assertTrue(f.exists());     java.lang.System.out.println("Wordlist saved"); }
https://github.com/aayaffe/SailingRaceCourseManager.git,DistanceDialogTest,calcDistByClassWind,{     com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseDescription.RaceCourseDescriptor rc = new com.aayaffe.sailingracecoursemanager.initializinglayer.InitialCourseDescriptor().getRaceCourse("Trapezoid 60\\120");     com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseDescription.Legs l = rc.getRaceCourseLegs().get(1);// Half beat      com.aayaffe.sailingracecoursemanager.initializinglayer.Boat b = new com.aayaffe.sailingracecoursemanager.initializinglayer.Boat();     double arr[][] = new double[][]{ new double[]{ 1, 1, 1 }, new double[]{ 2, 3, 4 }, new double[]{ 3, 3, 3 }, new double[]{ 4, 4, 4 } };     b.setVmg(arr);     b.setBoatClass("TestClass1");     b.setTargettime(12);     com.aayaffe.sailingracecoursemanager.dialogs.DistanceDialog dd = new com.aayaffe.sailingracecoursemanager.dialogs.DistanceDialog(null, null);     org.junit.Assert.assertEquals(4.125, com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseTiming.calcDistByClassWind(b, 10, 50, l), 1.0E-4); }
https://github.com/aayaffe/SailingRaceCourseManager.git,GeoUtilsTest,getLocationFromDirDist,{     com.aayaffe.sailingracecoursemanager.geographical.AviLocation loc1 = new com.aayaffe.sailingracecoursemanager.geographical.AviLocation();     int distInMeters = 1852;     loc1.setLat(32.0);     loc1.setLon(32.0);     com.aayaffe.sailingracecoursemanager.geographical.AviLocation loc2 = com.aayaffe.sailingracecoursemanager.geographical.GeoUtils.getLocationFromDirDist(loc1, 15.0F, distInMeters);     float dist = ((int) (loc1.distanceTo(loc2)));     org.junit.Assert.assertEquals(("Distance difference is " + java.lang.Math.abs(100 - ((dist / ((float) (distInMeters))) * 100))) + "%", distInMeters, dist, 6); }
https://github.com/aayaffe/SailingRaceCourseManager.git,RaceCourseStatisticsTest,getSailTime,{     com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseDescription.RaceCourseDescriptor rc = new com.aayaffe.sailingracecoursemanager.initializinglayer.InitialCourseDescriptor().getRaceCourse("Trapezoid 60\\120");     com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseDescription.Legs l = rc.getRaceCourseLegs().get(1);// Half beat      com.aayaffe.sailingracecoursemanager.initializinglayer.Boat b = new com.aayaffe.sailingracecoursemanager.initializinglayer.Boat();     double arr[][] = new double[][]{ new double[]{ 1, 1, 1 }, new double[]{ 2, 3, 4 }, new double[]{ 3, 3, 3 }, new double[]{ 4, 4, 4 } };     b.setVmg(arr);     b.setBoatClass("TestClass1");     b.setTargettime(12);     org.junit.Assert.assertEquals(12.5, com.aayaffe.sailingracecoursemanager.initializinglayer.RaceCourseTiming.GetSailTime(b, l, l.markRoundingOptions.get(0), 1, 10), 1.0E-4); }
https://github.com/SmileChaoLee/BouncyBall.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.smile.bouncyball", appContext.getPackageName()); }
https://github.com/SmileChaoLee/BouncyBall.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/SmileChaoLee/BouncyBall.git,UnitTestCases,test_getBallRadius,{     java.lang.System.out.println("Testing the method getBallRadius() of BouncyBall class");     int radius = bBall.getBallRadius();     org.junit.Assert.assertEquals(8, radius); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_VALID_LINES_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax,eax");     testLines.add("section .data");     testLines.add("testOp: db \"Hello\"");     testLines.add("section .bss");     testLines.add("testOp2: resb 50");     org.junit.Assert.assertEquals(true, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_EMPTY_LINES_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_VALID_TEXT_SECTION__WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax,eax");     org.junit.Assert.assertEquals(true, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_VALID_DATA_SECTION_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .data");     testLines.add("testOp4: db \"Hello\"");     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_VALID_BSS_SECTION_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .bss");     testLines.add("testOp3: resb 50");     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_NOT_VALID_LINES_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax");     testLines.add("section .bss");     testLines.add("testOps: resb 50");     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_NOT_VALID_TEXT_SECTION__WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax");     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_NOT_VALID_DATA_SECTION_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .data");     testLines.add("testOp:");     org.junit.Assert.assertFalse(interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testLoad_WITH_NOT_VALID_BSS_SECTION_WITH_NULL_CONTEXT,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .bss");     testLines.add("testOp2:");     org.junit.Assert.assertEquals(false, interpreter.load(testLines, null)); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testInterpret_WITH_VALID_CODE,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax,eax");     testLines.add("section .data");     testLines.add("testOp: db \"Hello\"");     testLines.add("section .bss");     testLines.add("testOp2: resb 50");     interpreter.load(testLines, null);     org.junit.Assert.assertTrue(interpreter.interpret()); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testInterpret_WITH_INVALID_CODE,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     testLines.add("section .text");     testLines.add("xor eax");     testLines.add("section .data");     testLines.add("testOp: db \"Hello\"");     testLines.add("section .bss");     testLines.add("testOp2: resb 50");     interpreter.load(testLines, null);     org.junit.Assert.assertFalse(interpreter.interpret()); }
https://github.com/Izodine/Capstone-Project.git,InterpreterTest,testInterpret_WITH_EMPTY_CODE,{     java.util.List<java.lang.String> testLines = new java.util.ArrayList<>();     interpreter.load(testLines, null);     org.junit.Assert.assertFalse(interpreter.interpret()); }
https://github.com/Izodine/Capstone-Project.git,IASMUtilsTest,testIsNumeric_WITH_CONTAINS_H,{     org.junit.Assert.assertEquals(java.lang.Integer.valueOf(0x5), com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.radix16Parse("5h")); }
https://github.com/Izodine/Capstone-Project.git,IASMUtilsTest,testIsNumeric_WITH_CONTAINS_0X,{     org.junit.Assert.assertEquals(java.lang.Integer.valueOf(0x5), com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.radix16Parse("0x5")); }
https://github.com/Izodine/Capstone-Project.git,IASMUtilsTest,testIsNumeric_WITH_EMPTYSTRING,{     org.junit.Assert.assertEquals(java.lang.Integer.valueOf(0x0), com.syncedsoftware.iassembly.iasm_base.utils.IASMUtils.radix16Parse("")); }
https://github.com/Izodine/Capstone-Project.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/evolv34/p2j-v2.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("p2j.evolv.com.p2j_v2", appContext.getPackageName()); }
https://github.com/hodlwallet/hodl-wallet-android.git,KVStoreTests,testSetThenSetIncrementsVersion,{     byte[] value = "hello".getBytes();     byte[] value2 = "hello2".getBytes();     co.platform.kvstore.CompletionObject setObj = co.hodlwallet.platform.KVStoreTests.store.set(0, 0, "hello", value, java.lang.System.currentTimeMillis(), 0);     co.platform.kvstore.CompletionObject setObj2 = co.hodlwallet.platform.KVStoreTests.store.set(setObj.version, 0, "hello", value2, java.lang.System.currentTimeMillis(), 0);     org.junit.Assert.assertEquals(setObj2.version, setObj.version + 1); }
https://github.com/hodlwallet/hodl-wallet-android.git,KVStoreTests,testSetWithIncorrectFirstVersionFails,{     byte[] value = "hello".getBytes();     co.platform.kvstore.CompletionObject setObj = co.hodlwallet.platform.KVStoreTests.store.set(1, 0, "hello", value, java.lang.System.currentTimeMillis(), 0);     org.junit.Assert.assertNotNull(setObj.err); }
https://github.com/hodlwallet/hodl-wallet-android.git,KVStoreTests,testGetNonExistentKeyFails,{     co.platform.kvstore.CompletionObject object = co.hodlwallet.platform.KVStoreTests.store.get("hello", 0);     co.platform.sqlite.KVItem getKv = object.kv;     org.junit.Assert.assertNull(getKv); }
https://github.com/hodlwallet/hodl-wallet-android.git,KVStoreTests,testGetNonExistentKeyVersionFails,{     co.platform.kvstore.CompletionObject object = co.hodlwallet.platform.KVStoreTests.store.get("hello", 1);     co.platform.sqlite.KVItem getKv = object.kv;     org.junit.Assert.assertNull(getKv); }
https://github.com/hodlwallet/hodl-wallet-android.git,KVStoreTests,testSyncTenTimes,{     int n = 10;     while (n > 0) {         boolean success = co.hodlwallet.platform.KVStoreTests.store.syncAllKeys();         org.junit.Assert.assertTrue(success);         n--;     }      assertDatabasesAreSynced(); }
https://github.com/hodlwallet/hodl-wallet-android.git,PlatformTests,testFeePerKbFetch,{     long fee = co.platform.APIClient.getInstance(mActivityRule.getActivity()).feePerKb();     java.lang.System.out.println("testFeePerKbFetch: fee: " + fee);     org.junit.Assert.assertNotSame(fee, ((long) (0))); }
https://github.com/hodlwallet/hodl-wallet-android.git,PlatformTests,bundleExtractTest,{     co.platform.APIClient apiClient = co.platform.APIClient.getInstance(mActivityRule.getActivity());     okhttp3.Request request = new okhttp3.Request.Builder().url(java.lang.String.format("%s/assets/bundles/%s/download", co.hodlwallet.platform.PlatformTests.BASE_URL, co.platform.APIClient.BREAD_POINT)).get().build();     okhttp3.Response response = null;     response = apiClient.sendRequest(request, false, 0);     try {         apiClient.writeBundleToFile(response);         java.lang.String extractFolderName = apiClient.getExtractedPath(mActivityRule.getActivity(), null);         apiClient.tryExtractTar();         java.io.File temp = new java.io.File(extractFolderName);         int filesExtracted = temp.listFiles().length;         android.util.Log.e(co.hodlwallet.platform.PlatformTests.TAG, "bundleExtractTest: filesExtracted: " + filesExtracted);         org.junit.Assert.assertNotSame(filesExtracted, 0);         android.util.Log.e(co.hodlwallet.platform.PlatformTests.TAG, "bundleExtractTest: ");         if (temp.isDirectory()) {             java.lang.String[] children = temp.list();             for (int i = 0; i < children.length; i++) {                 new java.io.File(temp, children[i]).delete();             }         }     } finally {         response.close();     } }
https://github.com/hodlwallet/hodl-wallet-android.git,PlatformTests,testMeRequest,{     co.platform.APIClient apiClient = co.platform.APIClient.getInstance(mActivityRule.getActivity());     okhttp3.Response response = apiClient.buyBitcoinMe();     org.junit.Assert.assertTrue(response.isSuccessful());     response.close(); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetMasterPubKey,{     byte[] pubKey = "26wZYDdvpmCrYZeUcxgqd1KquN4o6wXwLomBW5SjnwUqG".getBytes();     co.hodlwallet.tools.security.BRKeyStore.putMasterPublicKey(pubKey, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.PUB_KEY_ALIAS);     byte[] freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getMasterPublicKey(mActivityRule.getActivity());     org.junit.Assert.assertArrayEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetAuthKey,{     byte[] authKey = "26wZYDdvpmCrYZeUcxgqd1KquN4o6wXwLomBW5SjnwUqG".getBytes();     co.hodlwallet.tools.security.BRKeyStore.putAuthKey(authKey, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.AUTH_KEY_ALIAS);     byte[] freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getAuthKey(mActivityRule.getActivity());     org.junit.Assert.assertArrayEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetToken,{     byte[] token = "26wZYDdvpmCrYZeUcxgqd1KquN4o6wXwLomBW5SjnwUqG".getBytes();     co.hodlwallet.tools.security.BRKeyStore.putToken(token, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.TOKEN_ALIAS);     byte[] freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getToken(mActivityRule.getActivity());     org.junit.Assert.assertArrayEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetWalletCreationTime,{     int time = 1479686841;     co.hodlwallet.tools.security.BRKeyStore.putWalletCreationTime(time, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.WALLET_CREATION_TIME_ALIAS);     int freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getWalletCreationTime(mActivityRule.getActivity());     org.junit.Assert.assertEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetFailCount,{     int failCount = 2;     co.hodlwallet.tools.security.BRKeyStore.putFailCount(failCount, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.FAIL_COUNT_ALIAS);     int freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getFailCount(mActivityRule.getActivity());     org.junit.Assert.assertEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetSpendLimit,{     long spendLimit = 100000;     co.hodlwallet.tools.security.BRKeyStore.putSpendLimit(spendLimit, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.SPEND_LIMIT_ALIAS);     long freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getSpendLimit(mActivityRule.getActivity());     org.junit.Assert.assertEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetSFailTimeStamp,{     long failTime = 1479686841;     co.hodlwallet.tools.security.BRKeyStore.putFailTimeStamp(failTime, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.FAIL_TIMESTAMP_ALIAS);     long freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getFailTimeStamp(mActivityRule.getActivity());     org.junit.Assert.assertEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,setGetLastPasscodeUsedTime,{     long time = 1479686841;     co.hodlwallet.tools.security.BRKeyStore.putLastPinUsedTime(time, mActivityRule.getActivity());     assertFilesExist(co.hodlwallet.tools.security.BRKeyStore.PASS_TIME_ALIAS);     long freshGet;     freshGet = co.hodlwallet.tools.security.BRKeyStore.getLastPinUsedTime(mActivityRule.getActivity());     org.junit.Assert.assertEquals(freshGet, freshGet); }
https://github.com/hodlwallet/hodl-wallet-android.git,KeyStoreTests,testKeyStoreAuthTime,{     org.junit.Assert.assertEquals(co.hodlwallet.tools.security.BRKeyStore.AUTH_DURATION_SEC, 300); }
https://github.com/hodlwallet/hodl-wallet-android.git,PaperKeyTests,testPaperKeyValidation,{     java.util.List<java.lang.String> list = getAllWords();     org.junit.Assert.assertThat(list.size(), org.hamcrest.Matchers.is(10240)); }
https://github.com/borfast/arrispwgen-android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.grounduphq.arrispwgen", appContext.getPackageName()); }
https://github.com/borfast/arrispwgen-android.git,ArrispwgenTest,generates_single_password_if_date_interval_just_one_date,{     org.threeten.bp.LocalDate d1 = org.threeten.bp.LocalDate.of(2016, 1, 5);     org.threeten.bp.LocalDate d2 = org.threeten.bp.LocalDate.of(2016, 1, 5);     java.util.Map<org.threeten.bp.LocalDate, java.lang.String> potd_list = com.grounduphq.arrispwgen.Arrispwgen.generate_multi(d1, d2, com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);     org.junit.Assert.assertEquals(1, potd_list.size()); }
https://github.com/borfast/arrispwgen-android.git,DataTest,list1_test,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         org.junit.Assert.assertArrayEquals(l1, com.grounduphq.arrispwgen.DataHelper.test_list1.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list2_with_default_seed,{     int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);     org.junit.Assert.assertArrayEquals(l2, com.grounduphq.arrispwgen.DataHelper.test_list2_using_default_seed); }
https://github.com/borfast/arrispwgen-android.git,DataTest,list2_with_custom_seed,{     int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.DataHelper.CUSTOM_SEED);     org.junit.Assert.assertArrayEquals(l2, com.grounduphq.arrispwgen.DataHelper.test_list2_using_custom_seed); }
https://github.com/borfast/arrispwgen-android.git,DataTest,list3_with_default_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         org.junit.Assert.assertArrayEquals(l3, com.grounduphq.arrispwgen.DataHelper.test_list3_using_default_seed.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list3_with_custom_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.DataHelper.CUSTOM_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         org.junit.Assert.assertArrayEquals(l3, com.grounduphq.arrispwgen.DataHelper.test_list3_using_custom_seed.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list4_with_default_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         int[] l4 = com.grounduphq.arrispwgen.Data.list4(l3);         org.junit.Assert.assertArrayEquals(l4, com.grounduphq.arrispwgen.DataHelper.test_list4_using_default_seed.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list4_with_custom_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.DataHelper.CUSTOM_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         int[] l4 = com.grounduphq.arrispwgen.Data.list4(l3);         org.junit.Assert.assertArrayEquals(l4, com.grounduphq.arrispwgen.DataHelper.test_list4_using_custom_seed.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list5_with_default_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.Constants.DEFAULT_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         int[] l4 = com.grounduphq.arrispwgen.Data.list4(l3);         int[] l5 = com.grounduphq.arrispwgen.Data.list5(com.grounduphq.arrispwgen.Constants.DEFAULT_SEED, l4);         org.junit.Assert.assertArrayEquals(l5, com.grounduphq.arrispwgen.DataHelper.test_list5_using_default_seed.get(date));     } }
https://github.com/borfast/arrispwgen-android.git,DataTest,list5_with_custom_seed,{     for (org.threeten.bp.LocalDate date : com.grounduphq.arrispwgen.DataHelper.TEST_DATES) {         int[] l1 = com.grounduphq.arrispwgen.Data.list1(date);         int[] l2 = com.grounduphq.arrispwgen.Data.list2(com.grounduphq.arrispwgen.DataHelper.CUSTOM_SEED);         int[] l3 = com.grounduphq.arrispwgen.Data.list3(l1, l2);         int[] l4 = com.grounduphq.arrispwgen.Data.list4(l3);         int[] l5 = com.grounduphq.arrispwgen.Data.list5(com.grounduphq.arrispwgen.DataHelper.CUSTOM_SEED, l4);         org.junit.Assert.assertArrayEquals(l5, com.grounduphq.arrispwgen.DataHelper.test_list5_using_custom_seed.get(date));     } }
https://github.com/Tuchnyak/smart-criteria.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.tuchnyak.smartcriteria", appContext.getPackageName()); }
https://github.com/Tuchnyak/smart-criteria.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/shiftlyapp/Shiftly.git,UserClassTest,default_groupsCount_is_correct,{     com.technion.shiftlyapp.shiftly.dataTypes.User user = new com.technion.shiftlyapp.shiftly.dataTypes.User("Ada", "Yonat", "ada@gmail.com");     org.junit.Assert.assertEquals("0", user.getGroups_count().toString()); }
https://github.com/hei-connect/android.git,DevicePermissionsManagerTest,isPermissionGranted_shouldBeGranted,{     // Grant permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.grantPermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission check is correct     org.junit.Assert.assertTrue(mPermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION)); }
https://github.com/hei-connect/android.git,DevicePermissionsManagerTest,isPermissionGranted_shouldNotBeGranted,{     // Revokes permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.revokePermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission check is correct     org.junit.Assert.assertFalse(mPermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION)); }
https://github.com/hei-connect/android.git,DevicePermissionsManagerTest,requestIfNeeded_shouldRequest,{     // Revokes permission via shell     com.truethat.android.application.permissions.PermissionsTestUtil.revokePermission(com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     mPermissionsManager.requestIfNeeded(mTestActivityRule.getActivity(), com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION);     // Assert permission dialogue is prompted     android.support.test.uiautomator.UiObject2 denyButton = mDevice.wait(com.truethat.android.application.permissions.PermissionsTestUtil.DENY_SEARCH_CONDITION, 100);     org.hamcrest.MatcherAssert.assertThat(denyButton.isEnabled(), org.hamcrest.core.Is.is(true));     // Deny permission     denyButton.click();     // Wait for the click to register     mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.pkg(com.truethat.android.application.ApplicationTestUtil.APPLICATION_PACKAGE_NAME).depth(0)), 100);     // Assert that permissions wasn't granted     org.junit.Assert.assertNotEquals(android.content.pm.PackageManager.PERMISSION_GRANTED, android.support.v4.app.ActivityCompat.checkSelfPermission(mTestActivityRule.getActivity(), com.truethat.android.application.permissions.DevicePermissionsManagerTest.PERMISSION.getManifest())); }
https://github.com/hei-connect/android.git,FakePermissionsManagerTest,isPermissionGranted,{     // Grants permission     mFakePermissionsManager.grant(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     // Permission should be granted.     org.junit.Assert.assertTrue(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/hei-connect/android.git,FakePermissionsManagerTest,requestIfNeeded_newPermission,{     // requestIfNeeded grants permissions by default     mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     org.junit.Assert.assertTrue(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/hei-connect/android.git,FakePermissionsManagerTest,requestIfNeeded_alreadyForbidden,{     mFakePermissionsManager.forbid(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     // requestIfNeeded does not override forbid.     mFakePermissionsManager.requestIfNeeded(null, com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION);     org.junit.Assert.assertFalse(mFakePermissionsManager.isPermissionGranted(com.truethat.android.application.permissions.FakePermissionsManagerTest.PERMISSION)); }
https://github.com/hei-connect/android.git,FakeInternalStorageManagerTest,readShouldFail,{     mFakeInternalStorage.write(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME, "");     mFakeInternalStorage.setShouldFail(true);     mFakeInternalStorage.read(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME);     mFakeInternalStorage.setShouldFail(false);     org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME)); }
https://github.com/hei-connect/android.git,FakeInternalStorageManagerTest,deleteShouldFail,{     mFakeInternalStorage.write(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME, "");     mFakeInternalStorage.setShouldFail(true);     mFakeInternalStorage.delete(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME);     mFakeInternalStorage.setShouldFail(false);     org.junit.Assert.assertTrue(mFakeInternalStorage.exists(com.truethat.android.application.storage.internal.FakeInternalStorageManagerTest.FILE_NAME)); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,authFromLastSession,{     prepareAuth();     // Authenticate user;     mAuthManager.auth(mListener);     assertAuthOk();     // Should authenticate against backend     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,signInAlreadyAuthOk,{     performAuth();     mListener.resetResult();     mAuthManager.signIn(mListener);     // Should not authenticate against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,signInByDevice,{     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,signInByLastSession,{     prepareAuth();     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,signInWithStorageFailure,{     prepareAuth();     mInternalStorage.setShouldFail(true);     mAuthManager.signIn(mListener);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,BaseAuthManagerTest,signUp,{     mAuthManager.signUp(mListener, mUser);     // Should make authentication against backend     assertAuthOk();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,FakeAuthManagerTest,authOkFake,{     performAuth();     org.junit.Assert.assertEquals(0, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,FakeAuthManagerTest,authRegular,{     ((com.truethat.android.application.auth.FakeAuthManager) (mAuthManager)).useNetwork();     performAuth();     org.junit.Assert.assertEquals(1, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,FakeAuthManagerTest,signUpFake,{     mAuthManager.signUp(mListener, mUser);     assertAuthOk();     org.junit.Assert.assertEquals(0, mMockWebServer.getRequestCount()); }
https://github.com/hei-connect/android.git,FakeAuthManagerTest,disallowAuth,{     ((com.truethat.android.application.auth.FakeAuthManager) (mAuthManager)).forbidAuth();     prepareAuth();     // Authenticate user;     mAuthManager.auth(mListener);     // Should not be auth-ok     org.junit.Assert.assertFalse(mAuthManager.isAuthOk()); }
https://github.com/hei-connect/android.git,AssetsReaderUtilTest,readAsBytes,{     byte[] res = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.AssetsReaderUtilTest.TINY_FILE_PATH);     org.junit.Assert.assertEquals("My name is Inigo Montoya", new java.lang.String(res, "UTF-8")); }
https://github.com/hei-connect/android.git,CameraUtilTest,toByteArray,{     // Asserts that an exception is not thrown, as the actual image cannot be expected.     byte[] expected = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH);     byte[] actual = com.truethat.android.common.util.CameraUtil.toByteArray(com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(expected));     org.junit.Assert.assertArrayEquals(expected, actual); }
https://github.com/hei-connect/android.git,CameraUtilTest,compareEquals,{     android.media.Image image = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH));     org.junit.Assert.assertTrue(com.truethat.android.common.util.CameraUtil.compare(image, image)); }
https://github.com/hei-connect/android.git,CameraUtilTest,compareNotEquals,{     byte[] source = com.truethat.android.common.util.AssetsReaderUtil.readAsBytes(mTestActivityRule.getActivity(), com.truethat.android.common.util.CameraTestUtil.BITMAP_1x1_PATH);     android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeByteArray(source, 0, source.length).copy(Bitmap.Config.ARGB_8888, true);     bitmap.setPixel(0, 0, bitmap.getPixel(0, 0) + 100000);     android.media.Image image1 = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(source);     android.media.Image image2 = com.truethat.android.common.util.CameraTestUtil.bitmapBytesToMockedImage(com.truethat.android.common.util.CameraTestUtil.bitmapToByteArray(bitmap));     org.junit.Assert.assertFalse(com.truethat.android.common.util.CameraUtil.compare(image1, image2)); }
https://github.com/hei-connect/android.git,NumberUtilTest,sum,{     org.junit.Assert.assertEquals(2L, com.truethat.android.common.util.NumberUtil.sum(com.google.common.collect.ImmutableMap.of("a", 1L, "b", 1L))); }
https://github.com/hei-connect/android.git,StringUtilTest,titleCase,{     org.junit.Assert.assertEquals("Matt Damon", com.truethat.android.common.util.StringUtil.toTitleCase("matt damon")); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonSerialize_namingStrategy,{     java.lang.String actual = com.truethat.android.common.network.NetworkUtil.GSON.toJson(new com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     java.lang.String expected = new com.google.gson.GsonBuilder().create().toJson(new com.truethat.android.common.network.NetworkUtilTest.MyClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonDeserialize_namingStrategy,{     java.lang.String source = new com.google.gson.GsonBuilder().create().toJson(new com.truethat.android.common.network.NetworkUtilTest.MyClass(com.truethat.android.common.network.NetworkUtilTest.NUM));     com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass expected = new com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass(com.truethat.android.common.network.NetworkUtilTest.NUM);     com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass actual = com.truethat.android.common.network.NetworkUtil.GSON.fromJson(source, com.truethat.android.common.network.NetworkUtilTest.MyAndroidClass.class);     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonSerialize_date,{     java.lang.String actual = com.truethat.android.common.network.NetworkUtil.GSON.toJson(com.truethat.android.common.network.NetworkUtilTest.DATE);     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.UTC_DATE, actual); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonDeserialize_date,{     java.util.Date actual = com.truethat.android.common.network.NetworkUtil.GSON.fromJson(com.truethat.android.common.network.NetworkUtilTest.UTC_DATE, java.util.Date.class);     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.DATE, actual); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonSerialize_subtype,{     com.google.gson.JsonElement serialized = com.truethat.android.common.network.NetworkUtil.GSON.toJsonTree(com.truethat.android.common.network.NetworkUtilTest.photo);     // Should have type.     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.photo.getClass().getSimpleName(), serialized.getAsJsonObject().get(com.truethat.android.external.gson.RuntimeTypeAdapterFactory.TYPE_FIELD_NAME).getAsString()); }
https://github.com/hei-connect/android.git,NetworkUtilTest,gsonDeserialize_subtype,{     com.truethat.android.model.Photo actual = ((com.truethat.android.model.Photo) (com.truethat.android.common.network.NetworkUtil.GSON.fromJson(com.truethat.android.common.network.NetworkUtil.GSON.toJson(com.truethat.android.common.network.NetworkUtilTest.photo), com.truethat.android.model.Media.class)));     org.junit.Assert.assertEquals(com.truethat.android.common.network.NetworkUtilTest.photo, actual); }
https://github.com/hei-connect/android.git,FlowTreeTest,getChild,{     mTree.addNode(com.truethat.android.model.FlowTreeTest.PHOTO_1, com.truethat.android.model.FlowTreeTest.PHOTO_2);     mTree.addEdge(com.truethat.android.model.FlowTreeTest.EDGE_1);     org.junit.Assert.assertEquals(com.truethat.android.model.FlowTreeTest.PHOTO_2, mTree.getChild(com.truethat.android.model.FlowTreeTest.PHOTO_1.getId(), com.truethat.android.model.FlowTreeTest.EDGE_1.getReaction())); }
https://github.com/hei-connect/android.git,CameraFragmentTest,pictureNotTaken_activityPaused,{     mCameraFragment.takePicture();     // Navigate to a different activity     mTestActivityRule.getActivity().startActivity(new android.content.Intent(mTestActivityRule.getActivity(), com.truethat.android.view.activity.TestActivity.class));     // Wait for an image to be taken     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // An image should not have been taken.     org.junit.Assert.assertFalse(mImageTaken); }
https://github.com/hei-connect/android.git,CameraFragmentTest,pictureNotTaken_cameraClosed,{     mCameraFragment.takePicture();     // Close camera     mCameraFragment.onHidden();     // Wait for an image to be taken     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // An image should not have been taken.     org.junit.Assert.assertFalse(mImageTaken); }
https://github.com/hei-connect/android.git,CameraFragmentTest,cameraPreviewIsFrozenAfterTakingPicture,{     mCameraFragment.takePicture();     // An image should have been taken.     Awaitility.await().until(new java.util.concurrent.Callable<java.lang.Boolean>() {         @java.lang.Override         public java.lang.Boolean call() throws java.lang.Exception {             return mImageTaken;         }     });     // Save current preview.     android.graphics.Bitmap than = mCameraFragment.getCameraPreview().getBitmap();     // Wait for the preview to change, this is unstable, but at least something.     java.lang.Thread.sleep(500);     android.graphics.Bitmap now = mCameraFragment.getCameraPreview().getBitmap();     org.junit.Assert.assertTrue(than.sameAs(now)); }
https://github.com/hei-connect/android.git,CameraFragmentTest,cameraPreviewCanBeRestored,{     mCameraFragment.takePicture();     // An image should have been taken.     Awaitility.await().until(new java.util.concurrent.Callable<java.lang.Boolean>() {         @java.lang.Override         public java.lang.Boolean call() throws java.lang.Exception {             return mImageTaken;         }     });     // Save current preview.     android.graphics.Bitmap than = mCameraFragment.getCameraPreview().getBitmap();     // Restores preview     mCameraFragment.restorePreview();     // Increase probability of preview change.     java.lang.Thread.sleep(java.lang.Math.min(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS(), 1000));     // New preview should be different     android.graphics.Bitmap now = mCameraFragment.getCameraPreview().getBitmap();     org.junit.Assert.assertFalse(than.sameAs(now)); }
https://github.com/hei-connect/android.git,OnBoardingSignUpStageFragmentTest,testStageEditSaved,{     manualSetUp();     // For some reason typing fails initially.     Awaitility.await().untilAsserted(new org.awaitility.core.ThrowingRunnable() {         @java.lang.Override         public void run() throws java.lang.Throwable {             // Type user name             android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.nameEditText)).perform(ViewActions.typeText(com.truethat.android.view.activity.BaseOnBoardingTest.NAME));         }     });     // Destroy activity and resume to it.     android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() {         @java.lang.Override         public void run() {             mActivity.recreate();         }     });     // Detection should not start     java.lang.Thread.sleep(com.truethat.android.common.BaseInstrumentationTestSuite.TIMEOUT.getValueInMS() / 2);     org.junit.Assert.assertFalse(mFakeReactionDetectionManager.isDetecting());     com.truethat.android.application.ApplicationTestUtil.waitMatcher(org.hamcrest.CoreMatchers.allOf(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.nameEditText), android.support.test.espresso.matcher.ViewMatchers.isDisplayed(), android.support.test.espresso.matcher.ViewMatchers.withText(com.truethat.android.view.activity.BaseOnBoardingTest.NAME))); }
https://github.com/hei-connect/android.git,StudioFragmentTest,editStateSaved,{     // Take a picture     android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() {         @java.lang.Override         public void run() {             mMainActivityRule.getActivity().mToolbarStudio.performClick();         }     });     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     // Chose a reaction     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(mStudioFragment.getEmotionToViewId().get(com.truethat.android.model.Emotion.OMG))).perform(ViewActions.click());     // Should proceed to camera state.     assertCameraState();     // Record a video     recodeVideo();     // Should proceed to edit state     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     com.truethat.android.model.Scene directedScene = ((com.truethat.android.view.fragment.StudioFragment) (mMainActivityRule.getActivity().getCurrentMainFragment())).getViewModel().getDirectedScene();     // Navigate out of studio     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(android.R.id.content)).perform(android.support.test.espresso.action.ViewActions.swipeLeft());     waitForMainFragment(com.truethat.android.view.activity.MainActivity.TOOLBAR_THEATER_INDEX);     // Navigate back to studio     android.support.test.espresso.Espresso.onView(android.support.test.espresso.matcher.ViewMatchers.withId(android.R.id.content)).perform(android.support.test.espresso.action.ViewActions.swipeRight());     waitForMainFragment(com.truethat.android.view.activity.MainActivity.TOOLBAR_STUDIO_INDEX);     // Should resume to edit state     com.truethat.android.view.fragment.StudioFragmentTest.assertEditState();     // Should save the directed scene     org.junit.Assert.assertEquals(directedScene, ((com.truethat.android.view.fragment.StudioFragment) (mMainActivityRule.getActivity().getCurrentMainFragment())).getViewModel().getDirectedScene()); }
https://github.com/hei-connect/android.git,StudioViewModelTest,previousMedia,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Chose a follow up reaction     mViewModel.onReactionChosen(com.truethat.android.model.Emotion.DISGUST);     assertCameraState();     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Go to root media     mViewModel.displayParentMedia();     // Should edit root media     assertEditState();     org.junit.Assert.assertEquals(mViewModel.getDirectedScene().getRootMedia(), mViewModel.getCurrentMedia()); }
https://github.com/hei-connect/android.git,StudioViewModelTest,previousMediaHiddenFromRoot,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     org.junit.Assert.assertFalse(mViewModel.mPreviousMediaVisibility.get()); }
https://github.com/hei-connect/android.git,StudioViewModelTest,approvalCancel,{     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Cancel the picture taken     mViewModel.onCancel();     assertCameraState();     // Should restore preview     org.junit.Assert.assertTrue(mView.mPreviewRestored); }
https://github.com/hei-connect/android.git,StudioViewModelTest,publishedFailed,{     mMockWebServer.setDispatcher(new okhttp3.mockwebserver.Dispatcher() {         @java.lang.Override         public okhttp3.mockwebserver.MockResponse dispatch(okhttp3.mockwebserver.RecordedRequest request) throws java.lang.InterruptedException {             return new okhttp3.mockwebserver.MockResponse().setResponseCode(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR);         }     });     mViewModel.onPhotoTaken(createMockedImage());     assertEditState();     // Send the scene.     mViewModel.onSent();     assertSentState();     // Should fail     assertPublishFailed();     org.junit.Assert.assertEquals(com.truethat.android.viewmodel.StudioViewModelTest.SENT_FAILED, mView.getToastText()); }
https://github.com/jrodalo/copit.git,CopyUnitTest,should_throw_exception_when_one_folder_contains_the_other,{     java.io.File source = tempFolder.newFolder("test-source");     java.io.File dest = new java.io.File(source, "test-dest");     org.junit.Assert.assertThat(dest.mkdir(), org.hamcrest.CoreMatchers.is(true));     es.rodalo.copit.utils.Files.copyFolder(source, dest, null); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,useAppContext,{     org.junit.Assert.assertEquals("com.stingaltd.stingaltd", c.getPackageName()); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,CountEqual4Test,{     java.util.List<com.stingaltd.stingaltd.Models.JobItem> obj = ((java.util.List<com.stingaltd.stingaltd.Models.JobItem>) (com.stingaltd.stingaltd.Common.Common.readObjectFromFile(c, com.stingaltd.stingaltd.Common.Common.getUserJobsFileName(c))));     org.junit.Assert.assertEquals(obj.size(), 4); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,JobId2Test,{     com.stingaltd.stingaltd.Models.JobItem T = com.stingaltd.stingaltd.Common.Common.FilterJobById(c, 2);     org.junit.Assert.assertEquals(T.getTitle(), "Fix brocken cable"); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,JobIndexTest,{     int idx = com.stingaltd.stingaltd.Common.Common.GetJobByIdx(c, 2);     org.junit.Assert.assertEquals(3, idx); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,GetJobFileNameTest,{     java.lang.String name = com.stingaltd.stingaltd.Common.Common.getUserJobsFileName(c);     org.junit.Assert.assertEquals("jobs_demo.json", name); }
https://github.com/sirrom2005/StingaLtd.git,ExampleInstrumentedTest,TechNoteTest,{     com.stingaltd.stingaltd.Models.JobItem T = com.stingaltd.stingaltd.Common.Common.FilterJobById(c, 2);     org.junit.Assert.assertEquals(T.getTechnicianNote(), "hello world 123"); }
https://github.com/sirrom2005/StingaLtd.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isValidFirstName,{     java.lang.String name = "israel";     org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isValidFirstName2,{     java.lang.String name = "i";     org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isNotValidFirstName,{     java.lang.String name = "";     org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isNotValidFirstName2,{     java.lang.String name = "Isr@el";     org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidPattern(com.householdmanagement.controller.Patterns.FIRST_NAME, name)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isValidFloat,{     java.lang.String amount = "98";     org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidFloat(amount)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isValidFloat2,{     java.lang.String amount = ".45";     org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidFloat(amount)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isNotValidFloat,{     java.lang.String amount = "Hello";     org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidFloat(amount)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isNotValidFloat2,{     java.lang.String amount = "";     org.junit.Assert.assertFalse(com.householdmanagement.controller.Validator.isValidFloat(amount)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_isValidAmount,{     java.lang.String amount = "208.16";     org.junit.Assert.assertTrue(com.householdmanagement.controller.Validator.isValidAmount(amount, 1000.0F)); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,assert_equalString,{     java.lang.String text = "   colin       \n\t\r";     org.junit.Assert.assertEquals(com.householdmanagement.controller.Validator.clearWhiteSpace(text), "colin"); }
https://github.com/sicheng-zhu/HouseholdManagement.git,ValidatorUnitTest,cleanStringWhiteSpaceTest,{     java.lang.String text = "  Israel             \n\tSantiago \r    ";     org.junit.Assert.assertEquals("Israel Santiago", com.householdmanagement.controller.Validator.clearWhiteSpace(text)); }
https://github.com/Mools222/HOEK-Helper-v1.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.example.hoek_helper", appContext.getPackageName()); }
https://github.com/Mools222/HOEK-Helper-v1.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Mools222/HOEK-Helper-v1.git,TestingXlmpl,setAntal,{     t.setAntal(5);     org.junit.Assert.assertEquals(t.getAntal(), 5, 0.1); }
https://github.com/Mools222/HOEK-Helper-v1.git,TestingXlmpl,getAntal,{     t.setAntal(10);     org.junit.Assert.assertEquals(10, t.getAntal()); }
https://github.com/Mools222/HOEK-Helper-v1.git,VEImplTest,setVaerdi,{     dk.kugelberg.hoek_helper.model.VEImpl d = new dk.kugelberg.hoek_helper.model.VEImpl();     d.setVaerdi(45);     org.junit.Assert.assertEquals(d.getVaerdi(), 45, 0.1); }
https://github.com/Mools222/HOEK-Helper-v1.git,VEImplTest,getVaerdi,{     dk.kugelberg.hoek_helper.model.VEImpl d = new dk.kugelberg.hoek_helper.model.VEImpl();     d.setVaerdi(45);     org.junit.Assert.assertEquals(d.getVaerdi(), 45, 0.1); }
https://github.com/Mools222/HOEK-Helper-v1.git,VOImplTest,setVaerdi,{     vo.setVaerdi(45);     org.junit.Assert.assertEquals(vo.getVaerdi(), 45, 0); }
https://github.com/Mools222/HOEK-Helper-v1.git,VOImplTest,getVaerdi,{     vo.setVaerdi(45);     org.junit.Assert.assertEquals(vo.getVaerdi(), 45, 0); }
https://github.com/pumpkinz/pumpkin-reader.git,UtilTest,getDomainName,{     org.junit.Assert.assertEquals("reddit.com", io.pumpkinz.pumpkinreader.util.Util.getDomainName("https://www.reddit.com/r/funny/comments/3cz30y/one_of_the_better_things_ive_seen_at_comic_con/")); }
https://github.com/divizdev/WallpaperGallery.git,ImageUITest,convertToMap,{     java.util.Map<java.lang.Integer, ru.divizdev.wallpapergallery.entities.ImageUI> uiMap = ru.divizdev.wallpapergallery.entities.ImageUI.convertToMap(_pixabayImages);     org.junit.Assert.assertEquals(2, uiMap.get(2).getID()); }
https://github.com/divizdev/WallpaperGallery.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("ru.divizdev.wallpapergallery", appContext.getPackageName()); }
https://github.com/divizdev/WallpaperGallery.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/martincheung/wrestlejam.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/maciej-kaznowski/Londair.git,PreferenceManagerTest,setNotificationHour,{     java.lang.String key = "KEY_NOTIFICATION_HOUR";     int defaultValue = 9;     int newValue = 0;     com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.preferenceManager.setNotificationHour(newValue);     org.junit.Assert.assertEquals(newValue, com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.sharedPreferences.getInt(key, defaultValue)); }
https://github.com/maciej-kaznowski/Londair.git,PreferenceManagerTest,setNotificationMinute,{     java.lang.String key = "KEY_NOTIFICATION_MINUTE";     int defaultValue = 0;     int newValue = 30;     com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.preferenceManager.setNotificationMinute(newValue);     org.junit.Assert.assertEquals(newValue, com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.sharedPreferences.getInt(key, defaultValue)); }
https://github.com/maciej-kaznowski/Londair.git,PreferenceManagerTest,setNotificationMinSeverity,{     java.lang.String key = "KEY_NOTIFICATION_MIN_SEVERITY";     java.lang.String defaultValue = com.innercirclesoftware.londair.data.tfl.CurrentForecast.BAND_LOW;     java.lang.String newValue = com.innercirclesoftware.londair.data.tfl.CurrentForecast.BAND_HIGH;     com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.preferenceManager.setNotificationMinSeverity(newValue);     org.junit.Assert.assertEquals(newValue, com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.sharedPreferences.getString(key, defaultValue)); }
https://github.com/maciej-kaznowski/Londair.git,PreferenceManagerTest,setNotificationEnabled,{     java.lang.String key = "KEY_NOTIFICATION_ENABLED";     com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.preferenceManager.setNotificationEnabled(false);     org.junit.Assert.assertFalse(com.innercirclesoftware.londair.data.preferences.PreferenceManagerTest.sharedPreferences.getBoolean(key, true)); }
https://github.com/maciej-kaznowski/Londair.git,PrefUtilsTest,setInt,{     java.lang.String key = "key";     int value = 0;     com.innercirclesoftware.londair.utils.PrefUtils.setInt(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value);     org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getInt(key, -1)); }
https://github.com/maciej-kaznowski/Londair.git,PrefUtilsTest,setBoolean,{     java.lang.String key = "key";     com.innercirclesoftware.londair.utils.PrefUtils.setBoolean(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, true);     org.junit.Assert.assertTrue(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getBoolean(key, false)); }
https://github.com/maciej-kaznowski/Londair.git,PrefUtilsTest,setString,{     java.lang.String key = "key";     java.lang.String value = "value";     com.innercirclesoftware.londair.utils.PrefUtils.setString(com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences, key, value);     org.junit.Assert.assertEquals(value, com.innercirclesoftware.londair.utils.PrefUtilsTest.preferences.getString(key, "")); }
https://github.com/magenta-aps/VoKS-android.git,RandomStringTest,testRandomString_lengthIsNegative_lengthShouldBeDefault,{     java.lang.System.out.println("---------------------------------------------------------------------");     java.lang.System.out.println("Running testRandomString_lengthIsNegative_lengthShouldBeDefault");     boolean result = new com.bcomesafe.app.utils.RandomString(-1).nextString().length() == com.bcomesafe.app.utils.RandomString.DEFAULT_RANDOM_LENGTH;     java.lang.System.out.println("Result=" + result);     org.junit.Assert.assertTrue(result);     java.lang.System.out.println("Finished testRandomString_lengthIsNegative_lengthShouldBeDefault"); }
https://github.com/magenta-aps/VoKS-android.git,RandomStringTest,testRandomString_lengthIsZero_lengthShouldBeDefault,{     java.lang.System.out.println("---------------------------------------------------------------------");     java.lang.System.out.println("Running testRandomString_lengthIsZero_lengthShouldBeDefault");     boolean result = new com.bcomesafe.app.utils.RandomString(0).nextString().length() == com.bcomesafe.app.utils.RandomString.DEFAULT_RANDOM_LENGTH;     java.lang.System.out.println("Result=" + result);     org.junit.Assert.assertTrue(result);     java.lang.System.out.println("Finished testRandomString_lengthIsZero_lengthShouldBeDefault"); }
https://github.com/magenta-aps/VoKS-android.git,RandomStringTest,testRandomString_lengthIsPositive_lengthShouldBeAsGiven,{     java.lang.System.out.println("---------------------------------------------------------------------");     java.lang.System.out.println("Running testRandomString_lengthIsPositive_lengthShouldBeAsGiven");     int givenLength = 10;     boolean result = new com.bcomesafe.app.utils.RandomString(givenLength).nextString().length() == givenLength;     java.lang.System.out.println("Result=" + result);     org.junit.Assert.assertTrue(result);     java.lang.System.out.println("Finished testRandomString_lengthIsPositive_lengthShouldBeAsGiven"); }
https://github.com/steevp/YoureWinnerApp.git,BBCodeTests,emotesWork,{     final java.lang.String in = "YOU'RE :stamp: '< :stamp:";     final java.lang.String out = com.yourewinner.yourewinner.BBCodeConverter.process(in);     final java.lang.String expected = "YOU&apos;RE <img src=\"stamp\"> <img src=\"pacman\"> <img src=\"stamp\">";     org.junit.Assert.assertEquals(expected, out); }
https://github.com/steevp/YoureWinnerApp.git,BBCodeTests,bbCodeWorks,{     final java.lang.String in = "[quote][url=http://yourewinner.com]YOU'RE WINNER ![/url][/quote]";     final java.lang.String out = com.yourewinner.yourewinner.BBCodeConverter.process(in);     final java.lang.String expected = "<blockquote><a href=\"http://yourewinner.com\">YOU&apos;RE WINNER !</a></blockquote>";     org.junit.Assert.assertEquals(expected, out); }
https://github.com/peterhuangSC/Jugmaster.git,UnitTests,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/gummangummangumman/WhoseTweetIsThatAppThing.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("hotboys69.dat153.whosetweetisthatappthing", appContext.getPackageName()); }
https://github.com/gummangummangumman/WhoseTweetIsThatAppThing.git,RandomTweeterTest,theSizeIsFour,{     tweeters = hotboys69.dat153.whosetweetisthatappthing.util.TweeterRandomiser.getRandomTweeters(null);     org.junit.Assert.assertEquals(tweeters.size(), 4); }
https://github.com/gummangummangumman/WhoseTweetIsThatAppThing.git,RandomTweeterTest,usernameExists,{     java.lang.String username = hotboys69.dat153.whosetweetisthatappthing.util.TweeterRandomiser.getRandomTweeter(tweeters);     org.junit.Assert.assertTrue(hotboys69.dat153.whosetweetisthatappthing.data.Tweeters.musicians.contains(username) || hotboys69.dat153.whosetweetisthatappthing.data.Tweeters.non_musicians.contains(username)); }
https://github.com/AndyCooler/github-pass15.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.mythosapps.pass15", appContext.getPackageName()); }
https://github.com/AndyCooler/github-pass15.git,EncryptionUtilTest,testEncryptDecrypt,{     java.lang.String expected = "1111";     byte[] temp = com.mythosapps.pass15.util.EncryptionUtil.encrypt(expected);     java.lang.String actual = com.mythosapps.pass15.util.EncryptionUtil.decrypt(temp);     java.lang.System.out.println(("testEncryptDecrypt result:'" + temp) + "'");     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,EncryptionUtilTest,testEncryptDecryptStream,{     java.lang.String expected = "1111";     java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();     com.mythosapps.pass15.util.EncryptionUtil.writeAndEncrypt(os, expected);     java.lang.String temp = os.toString("UTF-8");     java.lang.System.out.println(("testEncryptDecryptStream result:'" + temp) + "'");     java.io.ByteArrayInputStream is = new java.io.ByteArrayInputStream(os.toByteArray());     java.lang.String actual = com.mythosapps.pass15.util.EncryptionUtil.readAndDecrypt(is);     java.lang.System.out.println(("testEncryptDecryptStream result: actual:'" + actual) + "'");     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,EncryptionUtilTest,testEncryptDecryptFile,{     // String expected = "1111\n222\n333";     java.lang.String expected = "1111\n222\n!\"%&/()=?}ß§&/3\\&3";     java.lang.String actual = null;     java.io.File tempFile = null;     try {         tempFile = java.io.File.createTempFile("testEncryptDecryptFile", null);         java.io.FileOutputStream fos = new java.io.FileOutputStream(tempFile);         com.mythosapps.pass15.util.EncryptionUtil.writeAndEncrypt(fos, expected);         java.io.FileInputStream fis = new java.io.FileInputStream(tempFile);         actual = com.mythosapps.pass15.util.EncryptionUtil.readAndDecrypt(fis);     } finally {         if (tempFile != null) {             tempFile.delete();         }     }     java.lang.System.out.println(("testEncryptDecryptFile expected:'" + expected) + "'");     java.lang.System.out.println(("testEncryptDecryptFile actual  :'" + actual) + "'");     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,EncryptionUtilTest,testEncryptDecryptStreamXML,{     java.lang.String expected = (((((((((((((((((((((((((("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<config>\n") + "    <entry>\n") + "        <category>Privat</category>\n") + "        <name>Meine Webseite</name>\n") + "        <username>Mein Username</username>\n") + "        <password>Mein Passwort</password>\n") + "        <created>2018-05-24</created>\n") + "        <lastModified>2018-05-24</lastModified>\n") + "    </entry>\n") + "    <entry>\n") + "        <category>Privat</category>\n") + "        <name>Meine Webseite 2</name>\n") + "        <username>Mein Username 2</username>\n") + "        <password>Mein Passwort 2</password>\n") + "        <created>2018-05-24</created>\n") + "        <lastModified>2018-05-24</lastModified>\n") + "    </entry>\n") + "    <entry>\n") + "        <category>Beruflich</category>\n") + "        <name>Meine Firmenseite</name>\n") + "        <username>Mein Username 3</username>\n") + "        <password>Mein Passwort 3</password>\n") + "        <created>2018-05-24</created>\n") + "        <lastModified>2018-05-24</lastModified>\n") + "    </entry>\n") + "\n") + "</config>";     java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();     com.mythosapps.pass15.util.EncryptionUtil.writeAndEncrypt(os, expected);     java.lang.String temp = os.toString("UTF-8");     java.lang.System.out.println(("testEncryptDecryptStreamXML result:'" + temp) + "'");     java.io.ByteArrayInputStream is = new java.io.ByteArrayInputStream(os.toByteArray());     java.lang.String actual = com.mythosapps.pass15.util.EncryptionUtil.readAndDecrypt(is);     java.lang.System.out.println(("testEncryptDecryptStreamXML result: actual:'" + actual) + "'");     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,EncryptionUtilTest,testEncryptDecryptStreamWithNullParam,{     java.lang.String expected = null;     java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();     com.mythosapps.pass15.util.EncryptionUtil.writeAndEncrypt(os, expected);     java.lang.String temp = os.toString("UTF-8");     java.lang.System.out.println(("testEncryptDecryptStreamWithNullParam result:'" + temp) + "'");     java.io.ByteArrayInputStream is = new java.io.ByteArrayInputStream(os.toByteArray());     java.lang.String actual = com.mythosapps.pass15.util.EncryptionUtil.readAndDecrypt(is);     java.lang.System.out.println(("testEncryptDecryptStreamWithNullParam result: actual:'" + actual) + "'");     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,XmlParserTest,testNormalValue,{     java.lang.String expected = "1111";     com.mythosapps.pass15.types.PasswordEntry entry = new com.mythosapps.pass15.types.PasswordEntry(expected, expected, expected, expected, expected, expected);     java.lang.String xml = (com.mythosapps.pass15.storage.ConfigStorageFacade.XML_PROLOG + entry.toXmlConfig()) + com.mythosapps.pass15.storage.ConfigStorageFacade.XML_END;     com.mythosapps.pass15.util.ConfigXmlParser parser = new com.mythosapps.pass15.util.ConfigXmlParser();     java.util.List<com.mythosapps.pass15.types.PasswordEntry> list = parser.parse(new java.io.ByteArrayInputStream(xml.getBytes("UTF-8")));     java.lang.String actual = list.get(0).getPassword();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,XmlParserTest,testAmpersandValue,{     java.lang.String expected = "1111&";     com.mythosapps.pass15.types.PasswordEntry entry = new com.mythosapps.pass15.types.PasswordEntry(expected, expected, expected, expected, expected, expected);     java.lang.String xml = (com.mythosapps.pass15.storage.ConfigStorageFacade.XML_PROLOG + entry.toXmlConfig()) + com.mythosapps.pass15.storage.ConfigStorageFacade.XML_END;     com.mythosapps.pass15.util.ConfigXmlParser parser = new com.mythosapps.pass15.util.ConfigXmlParser();     java.util.List<com.mythosapps.pass15.types.PasswordEntry> list = parser.parse(new java.io.ByteArrayInputStream(xml.getBytes("UTF-8")));     java.lang.String actual = list.get(0).getPassword();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,XmlParserTest,testLessThanValue,{     java.lang.String expected = "1111<";     com.mythosapps.pass15.types.PasswordEntry entry = new com.mythosapps.pass15.types.PasswordEntry(expected, expected, expected, expected, expected, expected);     java.lang.String xml = (com.mythosapps.pass15.storage.ConfigStorageFacade.XML_PROLOG + entry.toXmlConfig()) + com.mythosapps.pass15.storage.ConfigStorageFacade.XML_END;     com.mythosapps.pass15.util.ConfigXmlParser parser = new com.mythosapps.pass15.util.ConfigXmlParser();     java.util.List<com.mythosapps.pass15.types.PasswordEntry> list = parser.parse(new java.io.ByteArrayInputStream(xml.getBytes("UTF-8")));     java.lang.String actual = list.get(0).getPassword();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/AndyCooler/github-pass15.git,XmlParserTest,testSpecialValue,{     java.lang.String expected = "111\n\\§$%&/()=?_-#'+~*!@;:'&<<>>[]{}&1234567890#";     com.mythosapps.pass15.types.PasswordEntry entry = new com.mythosapps.pass15.types.PasswordEntry(expected, expected, expected, expected, expected, expected);     java.lang.String xml = (com.mythosapps.pass15.storage.ConfigStorageFacade.XML_PROLOG + entry.toXmlConfig()) + com.mythosapps.pass15.storage.ConfigStorageFacade.XML_END;     com.mythosapps.pass15.util.ConfigXmlParser parser = new com.mythosapps.pass15.util.ConfigXmlParser();     java.util.List<com.mythosapps.pass15.types.PasswordEntry> list = parser.parse(new java.io.ByteArrayInputStream(xml.getBytes("UTF-8")));     java.lang.String actual = list.get(0).getPassword();     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/NoiceAppOrg/noice-android.git,URIHelperTest,testExtractYoutubeId,{     java.lang.String id = com.noice.noice.util.URIHelper.extractYoutubeId("https://www.youtube.com/watch?v=jaPn5pXtkuI");     org.junit.Assert.assertEquals("Id should extract correctly", "jaPn5pXtkuI", id); }
https://github.com/memoeslink/Adivinador.git,ExampleInstrumentedTest,useAppContext,{     android.content.Context appContext = androidx.test.core.app.ApplicationProvider.getApplicationContext();     org.junit.Assert.assertEquals("com.app.memoeslink.adivinador", appContext.getPackageName()); }
https://github.com/memoeslink/Adivinador.git,ExamplePairTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ROSHiix/ravencoin-android.git,PaperKeyTests,testPaperKeyValidation,{     java.util.List<java.lang.String> list = getAllWords();     org.junit.Assert.assertThat(list.size(), org.hamcrest.Matchers.is(10240)); }
https://github.com/nextcashtech/android_wallet.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("tech.nextcash.nextcashwallet", appContext.getPackageName()); }
https://github.com/nextcashtech/android_wallet.git,BitcoinTest,runTests,{     tech.nextcash.nextcashwallet.Bitcoin bitcoin = new tech.nextcash.nextcashwallet.Bitcoin();     org.junit.Assert.assertEquals(bitcoin.test(), true); }
https://github.com/nextcashtech/android_wallet.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/nextcashtech/android_wallet.git,NextCashTest,runTests,{     org.junit.Assert.assertEquals(tech.nextcash.nextcashwallet.NextCash.test(), true); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.jakeesveld.vapebiblejuicecalc", appContext.getPackageName()); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,getBottleSize,{     org.junit.Assert.assertThat(recipe.getBottleSize(), org.hamcrest.CoreMatchers.equalTo(120)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,setBottleSize,{     recipe.setBottleSize(60);     org.junit.Assert.assertThat(recipe.getBottleSize(), org.hamcrest.CoreMatchers.equalTo(60)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,getPG,{     org.junit.Assert.assertThat(recipe.getPG(), org.hamcrest.CoreMatchers.equalTo(30)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,setPG,{     recipe.setPG(50);     org.junit.Assert.assertThat(recipe.getPG(), org.hamcrest.CoreMatchers.equalTo(50)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,getVG,{     org.junit.Assert.assertThat(recipe.getVG(), org.hamcrest.CoreMatchers.equalTo(70)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,setVG,{     recipe.setVG(50);     org.junit.Assert.assertThat(recipe.getVG(), org.hamcrest.CoreMatchers.equalTo(50)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,getNic,{     org.junit.Assert.assertThat(recipe.getNic(), org.hamcrest.CoreMatchers.equalTo(3)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,setNic,{     recipe.setNic(12);     org.junit.Assert.assertThat(recipe.getNic(), org.hamcrest.CoreMatchers.equalTo(12)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,getName,{     org.junit.Assert.assertThat(recipe.getName(), org.hamcrest.CoreMatchers.equalTo(com.jakeesveld.vapebiblejuicecalc.RecipeTest.RECIPE_NAME)); }
https://github.com/JakeEsveldDevelopment/Vape-Bible-Juice-Calc.git,RecipeTest,setName,{     recipe.setName("Different");     org.junit.Assert.assertThat(recipe.getName(), org.hamcrest.CoreMatchers.equalTo("Different")); }
https://github.com/chervonyi/board-game-android.git,BaseTest,getListOfCells,{     java.util.ArrayList<java.lang.Integer> output;     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>();     output = enemyBase.getCells();     // output = allianceBase.getCells();     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,BotTest,getPriority,{     int input = 0;     int output;     int expected = 0;     output = bot.getPriority(input);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,FigureTest,getXY,{     int input = 50;     int[] output;     int[] expected = new int[]{ 4, 9 };     output = figure.getXY(input);     org.junit.Assert.assertArrayEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,FigureTest,getPosition,{     int x = 4;     int y = 9;     int output;     int expected = 49;     output = figure.getPosition(x, y);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,FigureTest,isExist,{     int x = 2;     int y = -1;     boolean output;     boolean expected = false;     output = figure.isExist(x, y);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,MasterTest,getAvailableCellsToMoveFrom,{     int input = 49;     java.util.ArrayList<java.lang.Integer> output;     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(java.util.Arrays.asList(37, 38, 39, 42, 43, 44, 47, 48));     output = master.getAvailableCellsToMoveFrom(input);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,PredatorTest,getAvailableCellsToMoveFrom,{     int input = 47;     java.util.ArrayList<java.lang.Integer> output;     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(java.util.Arrays.asList(41, 43));     output = predator.getAvailableCellsToMoveFrom(input);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,SoldierTest,getAvailableCellsToMoveFrom,{     int input = 49;     java.util.ArrayList<java.lang.Integer> output;     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(java.util.Arrays.asList(43, 44, 48));     output = soldier.getAvailableCellsToMoveFrom(input);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,StoneTest,getAvailableCellsToMoveFrom,{     int input = 44;     java.util.ArrayList<java.lang.Integer> output;     java.util.ArrayList<java.lang.Integer> expected = new java.util.ArrayList<>(java.util.Arrays.asList(38, 39, 43, 48, 49));     output = stone.getAvailableCellsToMoveFrom(input);     org.junit.Assert.assertEquals(expected, output); }
https://github.com/chervonyi/board-game-android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("chrgames.boardgame", appContext.getPackageName()); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_nietsBehaald,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     org.junit.Assert.assertFalse("Geen eisen behaald", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_1EisBehaaldNietAlles,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     cursist.addDiplomeEis(diplomaEisen.get(0));     org.junit.Assert.assertFalse("Niet alle eisen behaald", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_alleEisenBehaald,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     cursist.addDiplomeEis(diplomaEisen.get(0));     cursist.addDiplomeEis(diplomaEisen.get(1));     cursist.addDiplomeEis(diplomaEisen.get(2));     org.junit.Assert.assertTrue("Alle eisen behaald", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_1DiplomaBehaaldNietAlleEisen,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     cursist.addDiploma(diplomas.get(0));     org.junit.Assert.assertFalse("1 Diploma, niet alle eisen", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_2DiplomaBehaaldAlleEisenVoldaan,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     cursist.addDiploma(diplomas.get(0));     cursist.addDiploma(diplomas.get(1));     org.junit.Assert.assertTrue("2 Diploma, wel alle eisen voldaan", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,CursistTest,isAlleEisenBehaald_1Diploma1EisenAllesBehaald,{     nl.multimedia_engineer.watersport_training.model.Cursist cursist = new nl.multimedia_engineer.watersport_training.model.Cursist();     cursist.addDiploma(diplomas.get(0));     cursist.addDiplomeEis(diplomaEisen.get(1));     org.junit.Assert.assertTrue("1 diploma, 1 eis, alles gehaald", cursist.isAlleEisenBehaald(diplomaEisen)); }
https://github.com/MissMormie/CWO-Training-App.git,DateUtilTest,nextOccurence_SameDayPastTime_Test,{     // This test will fail when run at 0:00;     java.util.Calendar calendar = java.util.Calendar.getInstance();     int dow = calendar.get(java.util.Calendar.DAY_OF_WEEK);     java.util.Calendar expected = java.util.Calendar.getInstance();     expected.add(java.util.Calendar.DAY_OF_MONTH, 7);     expected.set(java.util.Calendar.HOUR_OF_DAY, 0);     expected.set(java.util.Calendar.MINUTE, 0);     java.util.Calendar result = nl.multimedia_engineer.watersport_training.util.DateUtil.nextOccurence(dow, 0, 0);     // Setting both result and expected milli seconds to 0 because they're likely not the same but are irrelevant.     clearSecondsAndMilliSeconds(result, expected);     org.junit.Assert.assertTrue((("expecting: " + expected.getTime()) + " got: ") + result.getTime(), result.equals(expected)); }
https://github.com/MissMormie/CWO-Training-App.git,DateUtilTest,nextOccurence_SameDayBeforeTime_Test,{     // This test will fail when run at 23:59;     java.util.Calendar calendar = java.util.Calendar.getInstance();     int dow = calendar.get(java.util.Calendar.DAY_OF_WEEK);     java.util.Calendar expected = java.util.Calendar.getInstance();     expected.add(java.util.Calendar.DAY_OF_MONTH, 0);// stays same day      expected.set(java.util.Calendar.HOUR_OF_DAY, 23);     expected.set(java.util.Calendar.MINUTE, 59);     java.util.Calendar result = nl.multimedia_engineer.watersport_training.util.DateUtil.nextOccurence(dow, 23, 59);     // Setting both result and expected milli seconds to 0 because they're likely not the same but are irrelevant.     clearSecondsAndMilliSeconds(result, expected);     org.junit.Assert.assertTrue((("expecting: " + expected.getTime()) + " got: ") + result.getTime(), result.equals(expected)); }
https://github.com/MissMormie/CWO-Training-App.git,DateUtilTest,nextOccurence_tomorrow_Test,{     // This test will fail when run at 23:59;     java.util.Calendar calendar = java.util.Calendar.getInstance();     int dow = calendar.get(java.util.Calendar.DAY_OF_WEEK) + 1;     int hour = 10;     int min = 10;     java.util.Calendar expected = java.util.Calendar.getInstance();     expected.add(java.util.Calendar.DAY_OF_MONTH, 1);// tomorrow      expected.set(java.util.Calendar.HOUR_OF_DAY, hour);     expected.set(java.util.Calendar.MINUTE, min);     java.util.Calendar result = nl.multimedia_engineer.watersport_training.util.DateUtil.nextOccurence(dow, hour, min);     // Setting both result and expected milli seconds to 0 because they're likely not the same but are irrelevant.     clearSecondsAndMilliSeconds(result, expected);     org.junit.Assert.assertTrue((("expecting: " + expected.getTime()) + " got: ") + result.getTime(), result.equals(expected)); }
https://github.com/MissMormie/CWO-Training-App.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/FLF69740/FMEIManager.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.FMEA.fmeimanager", appContext.getPackageName()); }
https://github.com/FLF69740/FMEIManager.git,ProcessusDaoTest,getAllProcessus,{     java.util.List<com.FMEA.fmeimanager.database.Processus> processusList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(mDatabase.mProcessusDao().getAllProcessus());     org.junit.Assert.assertEquals(5, processusList.size()); }
https://github.com/FLF69740/FMEIManager.git,ProcessusDaoTest,insertAndGetProcessusTest,{     com.FMEA.fmeimanager.database.Processus processus = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mProcessusDao().getProcessus(com.FMEA.fmeimanager.ProcessusDaoTest.ID_1));     org.junit.Assert.assertTrue(processus.getName().equals("processus_step_1") && (processus.getId() == com.FMEA.fmeimanager.ProcessusDaoTest.ID_1)); }
https://github.com/FLF69740/FMEIManager.git,RiskAndCorrectiveActionDaoTest,getAllRisk,{     java.util.List<com.FMEA.fmeimanager.database.Risk> riskList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(mDatabase.mRiskDao().getAllRisk());     org.junit.Assert.assertEquals(5, riskList.size()); }
https://github.com/FLF69740/FMEIManager.git,RiskAndCorrectiveActionDaoTest,insertAndGetRiskTest,{     com.FMEA.fmeimanager.database.Risk risk = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mRiskDao().getRisk(com.FMEA.fmeimanager.RiskAndCorrectiveActionDaoTest.ID_1));     org.junit.Assert.assertTrue(risk.getCreationDate().equals("12/02/2019") && (risk.getId() == com.FMEA.fmeimanager.RiskAndCorrectiveActionDaoTest.ID_1)); }
https://github.com/FLF69740/FMEIManager.git,RiskAndCorrectiveActionDaoTest,getAllCorrectiveAction,{     java.util.List<com.FMEA.fmeimanager.database.CorrectiveAction> correctiveActionList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(mDatabase.mCorrectiveActionDao().getAllCorrectiveAction());     org.junit.Assert.assertEquals(5, correctiveActionList.size()); }
https://github.com/FLF69740/FMEIManager.git,RiskAndCorrectiveActionDaoTest,insertAndGetCorrectiveActionTest,{     com.FMEA.fmeimanager.database.CorrectiveAction correctiveActionList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mCorrectiveActionDao().getCorrectiveAction(com.FMEA.fmeimanager.RiskAndCorrectiveActionDaoTest.ID_1));     org.junit.Assert.assertTrue(correctiveActionList.getCreationDate().equals("21/02/2019") && (correctiveActionList.getId() == com.FMEA.fmeimanager.RiskAndCorrectiveActionDaoTest.ID_1)); }
https://github.com/FLF69740/FMEIManager.git,RiskAndCorrectiveActionDaoTest,getCorrectiveActionListWithProcessusIdTest,{     com.FMEA.fmeimanager.database.CorrectiveAction correctiveAction = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mCorrectiveActionDao().getCorrectiveActionAboutRiskId(com.FMEA.fmeimanager.RiskAndCorrectiveActionDaoTest.ID_5));     org.junit.Assert.assertTrue(correctiveAction.getCorrectiveAction().equals("Corrective_action_title_5")); }
https://github.com/FLF69740/FMEIManager.git,TeamFmeiDaoTest,getAllFmeis,{     java.util.List<com.FMEA.fmeimanager.database.Fmei> fmeiList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mFmeiDao().getFmeis());     org.junit.Assert.assertEquals(2, fmeiList.size()); }
https://github.com/FLF69740/FMEIManager.git,TeamFmeiDaoTest,getAllParticipants,{     java.util.List<com.FMEA.fmeimanager.database.Participant> participantList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mParticipantDao().getParticipants());     org.junit.Assert.assertEquals(3, participantList.size()); }
https://github.com/FLF69740/FMEIManager.git,TeamFmeiDaoTest,getAllTeams,{     java.util.List<com.FMEA.fmeimanager.database.TeamFmei> teamFmeiList = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mTeamFmeiDao().getTeams());     org.junit.Assert.assertEquals(5, teamFmeiList.size()); }
https://github.com/FLF69740/FMEIManager.git,TeamFmeiDaoTest,updateAndGetTeamFmeiTest,{     com.FMEA.fmeimanager.database.TeamFmei teamFmei1 = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mTeamFmeiDao().getTeamFmei(com.FMEA.fmeimanager.TeamFmeiDaoTest.ID_1));     teamFmei1.setParticipantId(4);     teamFmei1.setFmeiId(8);     this.mDatabase.mTeamFmeiDao().updateTeamFmei(teamFmei1);     com.FMEA.fmeimanager.database.TeamFmei teamFmeiUpdated = com.FMEA.fmeimanager.LiveDataTestUtil.getValue(this.mDatabase.mTeamFmeiDao().getTeamFmei(com.FMEA.fmeimanager.TeamFmeiDaoTest.ID_1));     org.junit.Assert.assertTrue((teamFmeiUpdated.getFmeiId() == 8) && (teamFmeiUpdated.getParticipantId() == 4)); }
https://github.com/FLF69740/FMEIManager.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/zhumayun/Fallout-4-Terminal-Solver.git,TerminalSolverTest,basicNotSolvedTest,{     com.zainhumayun.fallout4terminalsolver.TerminalSolver solver = getSolverInstance("HEAT", "KEEP", "FEET");     org.junit.Assert.assertFalse(solver.isSolved()); }
https://github.com/forestcoinspace/WavesWallet-android.git,NodeManagerTest,signature,{     byte[] seed = "seed".getBytes();     com.wavesplatform.wallet.crypto.PrivateKeyAccount acc = new com.wavesplatform.wallet.crypto.PrivateKeyAccount(seed);     byte[] msg = "message".getBytes();     java.lang.String sigStr = "425CPC8fBPyNpcdfykNDTx9fk1B3vzVoaDYEVuzN6sTeG1LJgSu1EQFRAZ2HukTjwm1FChZcAF6CccKZgWa6R78m";     byte[] genSig = com.wavesplatform.wallet.crypto.CryptoProvider.get().calculateSignature(com.wavesplatform.wallet.crypto.CryptoProvider.get().getRandom(com.wavesplatform.wallet.request.TransferTransactionRequest.SignatureLength), acc.getPrivateKey(), msg);     org.junit.Assert.assertTrue(com.wavesplatform.wallet.crypto.CryptoProvider.get().verifySignature(acc.getPublicKey(), msg, com.wavesplatform.wallet.crypto.Base58.decode(sigStr))); }
https://github.com/forestcoinspace/WavesWallet-android.git,NodeManagerTest,hashes,{     com.wavesplatform.wallet.crypto.PrivateKeyAccount pk = new com.wavesplatform.wallet.crypto.PrivateKeyAccount(com.wavesplatform.wallet.crypto.Base58.decode("KFWy4MpQgRcaEAdjwr9KenkSWCKzEUCzK9SXWCFGD4KWYsXiKBhmjW2Dma996W5XV5esBJTELoTjF88C6QBNVRKenMjCzYWinbvWTfcbUfB5YjjxVVhrt9FUKRM"));     org.junit.Assert.assertEquals("EtujXZmPthSG8YUwvF88seDcw4WH6ZPN3tRJZ6w1mev1", pk.getPublicKeyStr()); }
https://github.com/forestcoinspace/WavesWallet-android.git,PayloadJsonTest,assetBalance,{     java.lang.String abJson = ((((("{\"assetId\":\"8Nu3gdirpraz8ghmDHscTnoAbmCTLPxLhMeVzG4UxSQY\"," + "\"balance\":100000000,\"reissuable\":true,\"quantity\":100000000,") + "\"issueTransaction\":{\"type\":3,\"id\":\"8Nu3gdirpraz8ghmDHscTnoAbmCTLPxLhMeVzG4UxSQY\",") + "\"senderPublicKey\":\"3N5sUvKLnEUBwk7WFCSjJs8VoiLiuqTs29v\",") + "\"senderPublicKey\":\"EtujXZmPthSG8YUwvF88seDcw4WH6ZPN3tRJZ6w1mev1\",") + "\"fee\":100000000,\"timestamp\":1485941350077,") + "\"signature\":\"5foqUXywB3r2uDMqVCEzdf8tuwoRmRsjuWcENDBP2jCfqdoESuyA7ptY1HNRC7arLhW31v6ij87q1KDBrktCEX7b\"}}";     com.google.gson.Gson gson = new com.google.gson.Gson();     com.wavesplatform.wallet.payload.AssetBalance ab = gson.fromJson(abJson, com.wavesplatform.wallet.payload.AssetBalance.class);     org.junit.Assert.assertEquals(100000000L, ab.balance); }
https://github.com/forestcoinspace/WavesWallet-android.git,PayloadJsonTest,assetBalances,{     java.lang.String abJson = ((("{\"address\":\"3N5sUvKLnEUBwk7WFCSjJs8VoiLiuqTs29v\",\"balances\":[" + "{\"assetId\":\"8Nu3gdirpraz8ghmDHscTnoAbmCTLPxLhMeVzG4UxSQY\",\"balance\":100000000,\"reissuable\":true,\"quantity\":100000000,") + "  \"issueTransaction\":{\"type\":3,\"id\":\"8Nu3gdirpraz8ghmDHscTnoAbmCTLPxLhMeVzG4UxSQY\",\"senderPublicKey\":\"3N5sUvKLnEUBwk7WFCSjJs8VoiLiuqTs29v\",\"senderPublicKey\":\"EtujXZmPthSG8YUwvF88seDcw4WH6ZPN3tRJZ6w1mev1\",\"fee\":100000000,\"timestamp\":1485941350077,\"signature\":\"5foqUXywB3r2uDMqVCEzdf8tuwoRmRsjuWcENDBP2jCfqdoESuyA7ptY1HNRC7arLhW31v6ij87q1KDBrktCEX7b\",\"assetId\":\"8Nu3gdirpraz8ghmDHscTnoAbmCTLPxLhMeVzG4UxSQY\",\"name\":\"DEXt\",\"description\":\"for DEX testing\",\"quantity\":100000000,\"decimals\":2,\"reissuable\":true}},") + "{\"assetId\":\"AnAU5Kp8Dev7GZHQ5nxH4FPB12qdMTYHLYMBGCNeq4pE\",\"balance\":10000000,\"reissuable\":true,\"quantity\":100000000,") + "  \"issueTransaction\":{\"type\":3,\"id\":\"AnAU5Kp8Dev7GZHQ5nxH4FPB12qdMTYHLYMBGCNeq4pE\",\"senderPublicKey\":\"3N5GRqzDBhjVXnCn44baHcz2GoZy5qLxtTh\",\"senderPublicKey\":\"FM5ojNqW7e9cZ9zhPYGkpSP1Pcd8Z3e3MNKYVS5pGJ8Z\",\"fee\":100000000,\"timestamp\":1485946444602,\"signature\":\"42dma4RzojZAtSwMhZJRyHtCfX9ojj8vnvHVkxi4221MJoCLpGARcyHfwzmfCEtKW1RDssaW7w7DMNHuibjDHQ8r\",\"assetId\":\"AnAU5Kp8Dev7GZHQ5nxH4FPB12qdMTYHLYMBGCNeq4pE\",\"name\":\"DEXsuper\",\"description\":\"string\",\"quantity\":100000000,\"decimals\":2,\"reissuable\":true}}]}";     com.google.gson.Gson gson = new com.google.gson.Gson();     com.wavesplatform.wallet.payload.AssetBalances abs = gson.fromJson(abJson, com.wavesplatform.wallet.payload.AssetBalances.class);     org.junit.Assert.assertEquals(2, abs.balances.size()); }
https://github.com/ryan-mcgoff/assignment4.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.stealbox.android.flexitask", appContext.getPackageName()); }
https://github.com/ryan-mcgoff/assignment4.git,FlexiTaskUnitTests,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ryan-mcgoff/assignment4.git,FlexiTaskUnitTests,testTaskCursorAdapterNotverDue,{     java.util.Calendar todayDateC = java.util.Calendar.getInstance();     long todayDate = todayDateC.getTimeInMillis();     java.util.Calendar dueDateC = ((java.util.Calendar) (todayDateC.clone()));     // due IN 7 days     dueDateC.add(java.util.Calendar.DAY_OF_MONTH, 7);     dueDateC.add(java.util.Calendar.MINUTE, -1);     java.lang.String expectedMessage = "Due in 7 days";     long dueDate = dueDateC.getTimeInMillis();     java.lang.String datemessage;     if (dueDate >= todayDate) {         long differenceMillisecond = (dueDate - todayDate) + 1;         long differenceDays = java.util.concurrent.TimeUnit.MILLISECONDS.toDays(differenceMillisecond) + 1;         datemessage = "Due in " + java.lang.String.valueOf(differenceDays);         if (differenceDays == 0) {             datemessage = "DUE TODAY!";         } else if (differenceDays != 1) {             datemessage += " days";         } else {             datemessage += " day";         }     } else {         long differenceMillisecond = todayDate - dueDate;         long differenceDays = java.util.concurrent.TimeUnit.MILLISECONDS.toDays(differenceMillisecond) + 1;         datemessage = "Overdue by " + java.lang.String.valueOf(differenceDays);         if (differenceDays == 0) {             datemessage = "DUE TODAY!";         } else if (differenceDays != 1) {             datemessage += " days";         } else {             datemessage += " day";         }     }     org.junit.Assert.assertEquals("Overdue method not working", datemessage, expectedMessage); }
https://github.com/ryan-mcgoff/assignment4.git,FlexiTaskUnitTests,testTaskCursorAdapterOverdue,{     java.util.Calendar todayDateC = java.util.Calendar.getInstance();     long todayDate = todayDateC.getTimeInMillis();     java.util.Calendar dueDateC = ((java.util.Calendar) (todayDateC.clone()));     // over due by 7 days     dueDateC.add(java.util.Calendar.DAY_OF_MONTH, -7);     dueDateC.add(java.util.Calendar.MINUTE, -1);     java.lang.String expectedMessage = "Overdue by 7 days";     long dueDate = dueDateC.getTimeInMillis();     java.lang.String datemessage;     if (dueDate >= todayDate) {         long differenceMillisecond = (dueDate - todayDate) + 1;         long differenceDays = java.util.concurrent.TimeUnit.MILLISECONDS.toDays(differenceMillisecond) + 1;         datemessage = "Due in " + java.lang.String.valueOf(differenceDays);         if (differenceDays == 0) {             datemessage = "DUE TODAY!";         } else if (differenceDays != 1) {             datemessage += " days";         } else {             datemessage += " day";         }     } else {         long differenceMillisecond = todayDate - dueDate;         long differenceDays = java.util.concurrent.TimeUnit.MILLISECONDS.toDays(differenceMillisecond) + 1;         datemessage = "Overdue by " + java.lang.String.valueOf(differenceDays);         if (differenceDays == 0) {             datemessage = "DUE TODAY!";         } else if (differenceDays != 1) {             datemessage += " days";         } else {             datemessage += " day";         }     }     org.junit.Assert.assertEquals("Overdue method not working", datemessage, expectedMessage); }
https://github.com/ryan-mcgoff/assignment4.git,FlexiTaskUnitTests,testReminderSetter,{     java.util.Calendar reminderCalander = java.util.Calendar.getInstance();     java.util.Calendar secondCalender = ((java.util.Calendar) (reminderCalander.clone()));     java.lang.String mReminderUnit = "4";     java.lang.String mReminderUnitBefore = "Hours before";     secondCalender.add(java.util.Calendar.HOUR_OF_DAY, -java.lang.Integer.valueOf(mReminderUnit));     long expectedResult = secondCalender.getTimeInMillis();     // Makes sure there is a valid reminder date     if (!(mReminderUnitBefore.equals("") || mReminderUnit.equals(""))) {         switch (mReminderUnitBefore) {             case "Minutes before" :                 reminderCalander.add(java.util.Calendar.MINUTE, -java.lang.Integer.valueOf(mReminderUnit));                 break;             case "Hours before" :                 reminderCalander.add(java.util.Calendar.HOUR_OF_DAY, -java.lang.Integer.valueOf(mReminderUnit));                 break;             case "Days before" :                 reminderCalander.add(java.util.Calendar.DAY_OF_YEAR, -java.lang.Integer.valueOf(mReminderUnit));                 break;             case "Weeks before" :                 reminderCalander.add(java.util.Calendar.WEEK_OF_YEAR, -java.lang.Integer.valueOf(mReminderUnit));                 break;         }         org.junit.Assert.assertEquals("Alarm not set correctly", expectedResult, reminderCalander.getTimeInMillis());     } }
https://github.com/stv2pointo/SmartMeds.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.stvjuliengmail.smartmeds", appContext.getPackageName()); }
https://github.com/stv2pointo/SmartMeds.git,ImageDownloadTaskTest,badUrlMakesNullBitmapResult,{     java.lang.String badUrl = "http://www.blah.com/badurl.jpg";     com.stvjuliengmail.smartmeds.api.ImageDownloadTask task = new com.stvjuliengmail.smartmeds.api.ImageDownloadTask();     android.graphics.Bitmap nullBitmap = task.execute(badUrl).get();     // this test passes whether or not the bitmap is null !!!     org.junit.Assert.assertNotNull(nullBitmap); }
https://github.com/stv2pointo/SmartMeds.git,RxImageResultTest,createImagesWorks,{     com.stvjuliengmail.smartmeds.model.NlmRxImage[] images = new com.stvjuliengmail.smartmeds.model.NlmRxImage[2];     images[0] = new com.stvjuliengmail.smartmeds.model.NlmRxImage(1, 111, "firstname", "firsturl");     images[1] = new com.stvjuliengmail.smartmeds.model.NlmRxImage(2, 222, "secondname", "secondurl");     com.stvjuliengmail.smartmeds.model.RxImagesResult result = new com.stvjuliengmail.smartmeds.model.RxImagesResult(images);     org.junit.Assert.assertEquals(2, result.getNlmRxImages().length); }
https://github.com/arcbit/arcbit-android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/arcbit/arcbit-android.git,TLBitcoinjWrapperTest,testReverseHexString,{     java.lang.String txid = "2c441ba4920f03f37866edb5647f2626b64f57ad98b0a8e011af07da0aefcec3";     java.lang.String txHash = com.arcbit.arcbit.model.TLBitcoinjWrapper.reverseHexString(txid);     org.junit.Assert.assertTrue(txHash.equals("c3ceef0ada07af11e0a8b098ad574fb626267f64b5ed6678f3030f92a41b442c")); }
https://github.com/arcbit/arcbit-android.git,TLStealthAddressTest,testSharedSecret,{     java.lang.String sharedSecret = com.arcbit.arcbit.model.TLStealthAddress.getSharedSecretForReceiver(com.arcbit.arcbit.TLStealthAddressTest.ephemeralPublicKey, com.arcbit.arcbit.TLStealthAddressTest.scanPrivateKey);     org.junit.Assert.assertTrue(sharedSecret.equals("b35751272054acdc2debe7ad58cc102b2bfb164bb994a2ff788bff1d6490df4a")); }
https://github.com/arcbit/arcbit-android.git,TLStealthAddressTest,testNonce,{     java.lang.Integer nonce = com.arcbit.arcbit.model.TLStealthAddress.generateNonce();     org.junit.Assert.assertTrue(nonce instanceof java.lang.Integer); }
https://github.com/juanmadelboca/spitball-android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/yasmindunsky/FrizzleApp.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.example.yasmindunsky.frizzleapp", appContext.getPackageName()); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsFunctionsWithSameName_contains_true,{     java.lang.String code = "function funcName(element){speakOut(\"hello\");" + "function funcName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsFunctionsWithSameName(code);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsFunctionsWithSameName_doesntContain_false,{     java.lang.String code = "function funcName(element){speakOut(\"hello\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsFunctionsWithSameName(code);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsFunctionWithName_contains_true,{     java.lang.String code = "function funcName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsFunctionWithName(code, "funcName");     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsFunctionWithName_doesntContain_false,{     java.lang.String code = "function otherName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsFunctionWithName(code, "funcName");     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsSpeakOutAndString_containsAndShould_true,{     java.lang.String code = "speakOut(\"hello\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsSpeakOutAndString(code, "hello", true);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsSpeakOutAndString_doesntContainAndShould_false,{     java.lang.String code = "speakOut(\"goodbye\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsSpeakOutAndString(code, "hello", true);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsSpeakOutAndString_containsAndShouldnt_false,{     java.lang.String code = "speakOut(\"hello\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsSpeakOutAndString(code, "hello", false);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfContainsSpeakOutAndString_doesntContainAndShouldnt_true,{     java.lang.String code = "speakOut(\"goodbye\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfContainsSpeakOutAndString(code, "hello", false);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfFunctionSignatureIsValid_valid_true,{     java.lang.String code = "function otherName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfFunctionSignatureIsValid(code);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfFunctionSignatureIsValid_missingSpace_false,{     java.lang.String code = "functionotherName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfFunctionSignatureIsValid(code);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakOutIsInsideCurlyBrackets_isInside_true,{     java.lang.String code = "function funcName(element){speakOut(\"hello\");}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakOutIsInsideCurlyBrackets(code);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakOutIsInsideCurlyBrackets_isAfter_false,{     java.lang.String code = "function funcName(element){}speakOut(\"hello\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakOutIsInsideCurlyBrackets(code);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakOutIsInsideCurlyBrackets_isBefore_false,{     java.lang.String code = "function funcNamespeakOut(\"hello\");(element){}";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakOutIsInsideCurlyBrackets(code);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakoutIsEmpty_speakOutEmpty_true,{     java.lang.String code = "speakOut(\"\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakoutIsEmpty(code);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakoutIsEmpty_speakOutNotEmpty_false,{     java.lang.String code = "speakOut(\"Hello\");";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakoutIsEmpty(code);     org.junit.Assert.assertEquals(false, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,CodeCheckUtilsTest,checkIfSpeakoutIsEmpty_noCode_true,{     java.lang.String code = "";     boolean answer = com.frizzl.app.frizzleapp.CodeCheckUtils.checkIfSpeakoutIsEmpty(code);     org.junit.Assert.assertEquals(true, answer); }
https://github.com/yasmindunsky/FrizzleApp.git,ErrorManagerTest,getBuildError,{     java.lang.String originalCode = "";     java.lang.String result = com.frizzl.app.frizzleapp.ErrorManager.ERROR_FUNCTION_SPEAKOUT_IN_WRONG_PLACE.check(originalCode, "");     org.junit.Assert.assertEquals(null, result); }
https://github.com/maxfie1d/SpinnerMeijin.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.inoueken.handspinner", appContext.getPackageName()); }
https://github.com/maxfie1d/SpinnerMeijin.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/gonzalo-m/ohms-law.git,OhmsLawModelTest,testDefaultConstructor,{     com.ilogic.ohmslaw.model.OhmsLawModel ol = new com.ilogic.ohmslaw.model.OhmsLawModel();     org.junit.Assert.assertEquals("OhmsLawModel [voltage=0 -VOLT, current=0 -AMP, resistance=0 -OHM, power=0 -WATT]", ol.toString()); }
https://github.com/AndyRadionov/15Puzzle.git,FieldGeneratorTest,testCheckCorrectFieldSolvability,{     int[][] solvableFields = new int[][]{ new int[]{ 12, 5, 8, 7, 4, 11, 2, 14, 13, 6, 1, 0, 10, 9, 15, 3 }, new int[]{ 8, 13, 1, 4, 2, 14, 0, 5, 3, 12, 10, 7, 11, 6, 9, 15 }, new int[]{ 11, 5, 1, 2, 15, 14, 10, 7, 3, 12, 13, 9, 4, 8, 6, 0 }, new int[]{ 0, 8, 14, 13, 11, 12, 9, 10, 3, 7, 2, 1, 5, 15, 4, 6 }, new int[]{ 1, 7, 13, 14, 0, 4, 5, 8, 2, 15, 12, 3, 11, 10, 6, 9 } };     for (int[] solvableField : solvableFields) {         boolean checkSolvabilityResult = io.github.andyradionov.pyatnashki.game.FieldGenerator.checkSolvability(solvableField);         org.junit.Assert.assertTrue(checkSolvabilityResult);     } }
https://github.com/AndyRadionov/15Puzzle.git,FieldGeneratorTest,testCheckIncorrectFieldSolvability,{     int[][] unsolvableFields = new int[][]{ new int[]{ 14, 9, 6, 12, 13, 1, 15, 7, 4, 0, 10, 11, 3, 5, 2, 8 }, new int[]{ 8, 13, 1, 4, 2, 14, 10, 5, 3, 12, 7, 11, 6, 9, 15, 0 }, new int[]{ 14, 9, 8, 13, 5, 4, 0, 15, 2, 6, 7, 1, 3, 10, 12, 11 }, new int[]{ 0, 2, 6, 13, 4, 11, 3, 10, 9, 15, 7, 5, 8, 14, 1, 12 }, new int[]{ 5, 15, 12, 13, 8, 4, 1, 6, 7, 0, 10, 2, 9, 3, 11, 14 } };     for (int[] unsolvableField : unsolvableFields) {         boolean checkSolvabilityResult = io.github.andyradionov.pyatnashki.game.FieldGenerator.checkSolvability(unsolvableField);         org.junit.Assert.assertFalse(checkSolvabilityResult);     } }
https://github.com/AndyRadionov/15Puzzle.git,FieldGeneratorTest,testNextField,{     for (int i = 0; i < 100; i++) {         int[] field = io.github.andyradionov.pyatnashki.game.FieldGenerator.nextGameField();         boolean checkSolvabilityResult = io.github.andyradionov.pyatnashki.game.FieldGenerator.checkSolvability(field);         org.junit.Assert.assertTrue(checkSolvabilityResult);     } }
https://github.com/tobyli/Sugilite_development.git,DateAnnotatorTest,testBadInput,{     java.util.List<edu.cmu.hcii.sugilite.ontology.helper.annotator.SugiliteTextParentAnnotator.AnnotatingResult> res = annotator.annotate("3/32/2018");     org.junit.Assert.assertEquals(res.size(), 0); }
https://github.com/tobyli/Sugilite_development.git,DateAnnotatorTest,testBadInput1,{     java.util.List<edu.cmu.hcii.sugilite.ontology.helper.annotator.SugiliteTextParentAnnotator.AnnotatingResult> res = annotator.annotate("8 Feb 2018");     org.junit.Assert.assertEquals(res.size(), 0); }
https://github.com/tobyli/Sugilite_development.git,TimeAnnotatorTest,testBadInput1,{     java.util.List<edu.cmu.hcii.sugilite.ontology.helper.annotator.SugiliteTextParentAnnotator.AnnotatingResult> results = annotator.annotate("Bad time: 0:60 pm");     org.junit.Assert.assertTrue(results.size() == 0); }
https://github.com/tobyli/Sugilite_development.git,TimeAnnotatorTest,testBadInput2,{     java.util.List<edu.cmu.hcii.sugilite.ontology.helper.annotator.SugiliteTextParentAnnotator.AnnotatingResult> results = annotator.annotate("Bad time: 24:00");     org.junit.Assert.assertTrue(results.size() == 0); }
https://github.com/tobyli/Sugilite_development.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/luke-c/Ikue.git,DatabaseTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertTrue(appContext.getPackageName().equals("com.ikue.japanesedictionary") || appContext.getPackageName().equals("com.ikue.japanesedictionary.debug")); }
https://github.com/luke-c/Ikue.git,DatabaseTest,testGettingHistory_notEmpty,{     com.ikue.japanesedictionary.DatabaseTest.helper.addToHistory(1000000);     java.util.List<com.ikue.japanesedictionary.models.DictionaryListEntry> history = com.ikue.japanesedictionary.DatabaseTest.helper.getHistory();     org.junit.Assert.assertFalse(history.isEmpty());     com.ikue.japanesedictionary.DatabaseTest.helper.removeFromHistory(1000000); }
https://github.com/luke-c/Ikue.git,DatabaseTest,testRemovingFromFavourites,{     int entryIdToRemove = 1000040;     com.ikue.japanesedictionary.DatabaseTest.helper.addToFavourites(entryIdToRemove);     com.ikue.japanesedictionary.DatabaseTest.helper.removeFromFavourites(entryIdToRemove);     java.util.List<com.ikue.japanesedictionary.models.DictionaryListEntry> results = com.ikue.japanesedictionary.DatabaseTest.helper.getFavourites();     for (com.ikue.japanesedictionary.models.DictionaryListEntry entry : results) {         org.junit.Assert.assertNotEquals(entry.getEntryId(), entryIdToRemove);     } }
https://github.com/luke-c/Ikue.git,DatabaseTest,testGettingFavourites_notEmpty,{     com.ikue.japanesedictionary.DatabaseTest.helper.addToFavourites(1000050);     java.util.List<com.ikue.japanesedictionary.models.DictionaryListEntry> results = com.ikue.japanesedictionary.DatabaseTest.helper.getFavourites();     org.junit.Assert.assertFalse(results.isEmpty());     com.ikue.japanesedictionary.DatabaseTest.helper.removeFromFavourites(1000050); }
https://github.com/luke-c/Ikue.git,DbUtilsUnitTest,testFormatString_withSeparator,{     java.util.List<java.lang.String> strings = com.ikue.japanesedictionary.utils.DbUtils.formatString("this§is§a§test");     junit.framework.Assert.assertTrue(strings.size() == 4);     junit.framework.Assert.assertTrue(strings.contains("this"));     junit.framework.Assert.assertTrue(strings.contains("is"));     junit.framework.Assert.assertTrue(strings.contains("a"));     junit.framework.Assert.assertTrue(strings.contains("test"));     java.lang.String[] expected = new java.lang.String[]{ "this", "is", "a", "test" };     org.junit.Assert.assertTrue(strings.containsAll(java.util.Arrays.asList(expected))); }
https://github.com/slt-programmers/macrologAndroid.git,DiaryFragmentTest,onViewCreated,{     org.junit.Assert.assertTrue(true); }
https://github.com/slt-programmers/macrologAndroid.git,DateParserTest,format,{     java.util.Calendar calendar = java.util.Calendar.getInstance();     calendar.set(2018, 4, 14);     java.util.Date date = calendar.getTime();     org.junit.Assert.assertEquals("2018-05-14", com.csl.macrologandroid.util.DateParser.format(date)); }
https://github.com/slt-programmers/macrologAndroid.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().getTargetContext();     org.junit.Assert.assertTrue(appContext.getPackageName().startsWith("com.csl.macrologandroid")); }
https://github.com/akgoal/YourTurnTimer.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.deakishin.yourturntimer", appContext.getPackageName()); }
https://github.com/akgoal/YourTurnTimer.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/jooejooe/tigase-mobilemessenger.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromPath,{     org.junit.Assert.assertEquals("Hello, World", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/Hello, World.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromSubPath,{     org.junit.Assert.assertEquals("Hello, World", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("aaa/bbb/Hello, World.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromUniquePath,{     org.junit.Assert.assertEquals("Hello, World", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/Hello, World~~3465786348.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromUniquePathWithDoubleSepatator,{     org.junit.Assert.assertEquals("Hello~~World", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/Hello~~World~~3465786348.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleDecodeChars,{     org.junit.Assert.assertEquals("Hello, World /?<>\\:*|\"^", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/Hello, World (sl)(qst)(lt)(gt)(bsl)(col)(star)(pipe)(dqt)(crt)~~3465786348.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromMinimalPath,{     org.junit.Assert.assertEquals("", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,getTitleFromShortPath,{     org.junit.Assert.assertEquals("1", com.notedok.notedok.TitleToPathConverter.getInstance().getTitle("/1.txt")); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,generatePathFromTitle,{     org.junit.Assert.assertEquals("/Hello, World.txt", com.notedok.notedok.TitleToPathConverter.getInstance().generatePath("Hello, World", false)); }
https://github.com/artemkv/notedok-android-app.git,TitleToPathConverterTest,generatePathFromTitleEncodeChars,{     org.junit.Assert.assertEquals("/Hello, World (sl)(qst)(lt)(gt)(bsl)(col)(star)(pipe)(dqt)(crt).txt", com.notedok.notedok.TitleToPathConverter.getInstance().generatePath("Hello, World /?<>\\:*|\"^", false)); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,trivialFormatting,{     java.lang.String text = "Hello *world*!";     java.lang.String expectedText = "Hello <b>world</b>!\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("trivial formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,basicFormatting,{     java.lang.String text = "As a regular user, I want to be able to use basic formatting options to control how the text is rendered on the webpage.\n\n* *bold* is rendered as &lt;b&gt;bold&lt;/b&gt;\n* _italics_ is rendered as &lt;i&gt;italics&lt;/i&gt;\n* --deleted-- is rendered as &lt;del&gt;deleted&lt;/del&gt;\n* ++underline++ is rendered as &lt;u&gt;underline&lt;/u&gt;\n* ^superscript^ is rendered as &lt;sup&gt;superscript&lt;/sup&gt;\n* ~subscript~ is rendered as &lt;sub&gt;subscript&lt;/sub&gt;";     java.lang.String expectedText = "As a regular user, I want to be able to use basic formatting options to control how the text is rendered on the webpage.\n\n<ul><li><b>bold</b> is rendered as &lt;b&gt;bold&lt;/b&gt;</li>\n<li><i>italics</i> is rendered as &lt;i&gt;italics&lt;/i&gt;</li>\n<li><del>deleted</del> is rendered as &lt;del&gt;deleted&lt;/del&gt;</li>\n<li><u>underline</u> is rendered as &lt;u&gt;underline&lt;/u&gt;</li>\n<li><sup>superscript</sup> is rendered as &lt;sup&gt;superscript&lt;/sup&gt;</li>\n<li><sub>subscript</sub> is rendered as &lt;sub&gt;subscript&lt;/sub&gt;</li></ul>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("basic formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,boldFormatting,{     java.lang.String text = "*bold* text at the beginning of the text\n*bold* text at the beginning of the line\nThis is a *bold* word in the middle of the text\nThis is a *long bold text* consisting of several words\nThis is a b*o*ld o letter in the middle of the text\nThis is a **bold** text, with a double-star\n* this is list item\nThis is not a * bold* text, because there is a whitespace after star\nThis is not a *bold text, because there is no second star on the same line";     java.lang.String expectedText = "<b>bold</b> text at the beginning of the text\n<b>bold</b> text at the beginning of the line\nThis is a <b>bold</b> word in the middle of the text\nThis is a <b>long bold text</b> consisting of several words\nThis is a b<b>o</b>ld o letter in the middle of the text\nThis is a *<b>bold</b>* text, with a double-star\n<ul><li>this is list item</li></ul>\nThis is not a * bold* text, because there is a whitespace after star\nThis is not a *bold text, because there is no second star on the same line\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("bold formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,italicFormatting,{     java.lang.String text = "_italic_ text at the beginning of the text\n_italic_ text at the beginning of the line\nThis is an _italic_ word in the middle of the text\nThis is a _long italic text_ consisting of several words\nThis is a it_a_lic a letter in the middle of the text\nThis is an __italic__ text, with double-underscore\nThis is not an _ italic_ text, because there is a whitespace after underscore\nThis is not an _italic text, because there is no second underscore on the same line";     java.lang.String expectedText = "<i>italic</i> text at the beginning of the text\n<i>italic</i> text at the beginning of the line\nThis is an <i>italic</i> word in the middle of the text\nThis is a <i>long italic text</i> consisting of several words\nThis is a it<i>a</i>lic a letter in the middle of the text\nThis is an _<i>italic</i>_ text, with double-underscore\nThis is not an _ italic_ text, because there is a whitespace after underscore\nThis is not an _italic text, because there is no second underscore on the same line\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("italic formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,boldAndItalicFormatting,{     java.lang.String text = "This text is *bold* and this text is _italic_\nThis text is *_bold and italic_*\nThis text is also _*bold and italic*_, but the formatting is inverse\nThis text is *bold which is also partially _italic_*\nThis text is _italic which is also partially *bold* too_, it's possible\nThis formatting is wrong because *bold and _italic*_ are misnested\nMi*sn_es*te_d tags";     java.lang.String expectedText = "This text is <b>bold</b> and this text is <i>italic</i>\nThis text is <b><i>bold and italic</i></b>\nThis text is also <i><b>bold and italic</b></i>, but the formatting is inverse\nThis text is <b>bold which is also partially <i>italic</i></b>\nThis text is <i>italic which is also partially <b>bold</b> too</i>, it's possible\nThis formatting is wrong because <b>bold and _italic</b>_ are misnested\nMi<b>sn_es</b>te_d tags\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("bold and italic formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,underscore,{     java.lang.String text = "This is ++part of the text++ that is ++underscored++";     java.lang.String expectedText = "This is <u>part of the text</u> that is <u>underscored</u>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("underscore", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,strikethrough,{     java.lang.String text = "This is --part of the text-- that is --striken through-- and -this part- is not";     java.lang.String expectedText = "This is <del>part of the text</del> that is <del>striken through</del> and -this part- is not\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("strikethrough", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,cancelFormatting,{     java.lang.String text = "This is *bold* and this is _italic_ formatting.\nThis is {&quot;no *bold* and _italic_ formatting&quot;}*and here there is*\nThis is a link [http://++notedok++.com]. Inside the link formatting doesn't apply\nImmediately after a link [http://notedok.com]*text is formatted*.\nThe {&quot;rest of \nthe _text_\nis not *formatted*";     java.lang.String expectedText = "This is <b>bold</b> and this is <i>italic</i> formatting.\nThis is no *bold* and _italic_ formatting<b>and here there is</b>\nThis is a link <a href='http://++notedok++.com' target='_blank'>http://++notedok++.com</a>. Inside the link formatting doesn't apply\nImmediately after a link <a href='http://notedok.com' target='_blank'>http://notedok.com</a><b>text is formatted</b>.\nThe rest of \nthe _text_\nis not *formatted*\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("cancel formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,linksFormatting,{     java.lang.String text = "This is an explicit link: [http://notedok.com]\nThe text that will render as link: [redui.net], although it doesn't really work";     java.lang.String expectedText = "This is an explicit link: <a href='http://notedok.com' target='_blank'>http://notedok.com</a>\nThe text that will render as link: <a href='redui.net' target='_blank'>redui.net</a>, although it doesn't really work\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("links formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,listsFormatting1,{     java.lang.String text = "* item 1\n* item 2\n* item 3";     java.lang.String expectedText = "<ul><li>item 1</li>\n<li>item 2</li>\n<li>item 3</li></ul>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("lists formatting - stars", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,listsFormatting2,{     java.lang.String text = "* item 1\n* item 2\nThis line breaks the list\n* item 3";     java.lang.String expectedText = "<ul><li>item 1</li>\n<li>item 2</li></ul>\nThis line breaks the list\n<ul><li>item 3</li></ul>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("lists formatting - 2 lists with dashes", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,listsFormatting3,{     java.lang.String text = "* item 1\n- item 2\n* item 3";     java.lang.String expectedText = "<ul><li>item 1</li></ul>\n<ul><li>item 2</li></ul>\n<ul><li>item 3</li></ul>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("lists formatting - mixed", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,listItemFormatting,{     java.lang.String text = "List with formatting inside:\n* *Bold* item\n* Item _italic_\n* Item with {code}code{code} inside";     java.lang.String expectedText = "List with formatting inside:\n<ul><li><b>Bold</b> item</li>\n<li>Item <i>italic</i></li>\n<li>Item with <pre class='codeblock'>code</pre> inside</li></ul>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("lists formatting - item formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,cancelListFormatting,{     java.lang.String text = "Not a list:\n{&quot;\n* not an item\n* not an item either\n&quot;}";     java.lang.String expectedText = "Not a list:\n\n* not an item\n* not an item either\n\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("cancel lists formatting", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,codeBlock,{     java.lang.String text = "This is code block:\n\n{code}\nfunction tryAnchor(): void {\n\tvar nextChar = _text[_pos + 1];\n\t// The link opening bracket is immediately followed by the link\n\tif (nextChar !== &quot;[&quot; && !WHITESPACE.test(nextChar) && !NEWLINE.test(nextChar)) {\n\t\t// There is a closing bracket\n\t\tvar closingBracketPos = _text.indexOf(&quot;]&quot;, _pos + 1);\n\t\tif (closingBracketPos > 0 && _text.indexOf(&quot;\n&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t// The closing character is before &quot;<&quot; on the same line\n\t\t\tif (_text.indexOf(&quot;<&quot;, _pos + 1) == -1 || _text.indexOf(&quot;<&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t\tvar href = _text.substring(_pos + 1, closingBracketPos);\n\t\t\t\tvar link = &quot;<a href='&quot; + href + &quot;' target='_blank'>&quot; + href + &quot;</a>&quot;;\n\t\t\t\t_text = _text.substring(0, _pos) + link + _text.substring(closingBracketPos + 1);\n\t\t\t\t_pos = closingBracketPos + link.length - href.length - 2; // 1 removed char, 1 char back from the closing bracket\n\t\t\t}\n\t\t}\n\t}\n}{code}";     java.lang.String expectedText = "This is code block:\n\n<pre class='codeblock'>\nfunction tryAnchor(): void {\n\tvar nextChar = _text[_pos + 1];\n\t// The link opening bracket is immediately followed by the link\n\tif (nextChar !== &quot;[&quot; && !WHITESPACE.test(nextChar) && !NEWLINE.test(nextChar)) {\n\t\t// There is a closing bracket\n\t\tvar closingBracketPos = _text.indexOf(&quot;]&quot;, _pos + 1);\n\t\tif (closingBracketPos > 0 && _text.indexOf(&quot;\n&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t// The closing character is before &quot;<&quot; on the same line\n\t\t\tif (_text.indexOf(&quot;<&quot;, _pos + 1) == -1 || _text.indexOf(&quot;<&quot;, _pos + 1) > closingBracketPos) {\n\t\t\t\tvar href = _text.substring(_pos + 1, closingBracketPos);\n\t\t\t\tvar link = &quot;<a href='&quot; + href + &quot;' target='_blank'>&quot; + href + &quot;</a>&quot;;\n\t\t\t\t_text = _text.substring(0, _pos) + link + _text.substring(closingBracketPos + 1);\n\t\t\t\t_pos = closingBracketPos + link.length - href.length - 2; // 1 removed char, 1 char back from the closing bracket\n\t\t\t}\n\t\t}\n\t}\n}</pre>\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("code block", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,headers1,{     java.lang.String text = "! header 1\n\nThis is not a header!\n\n!! header 1.1\n\n ! Not a header\n\n!! header 1.2\n\n!Not a header neither";     java.lang.String expectedText = "<h1>header 1</h1>\n\nThis is not a header!\n\n<h2>header 1.1</h2>\n\n ! Not a header\n\n<h2>header 1.2</h2>\n\n!Not a header neither\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("headers - exclamation mark", expectedText, formattedText); }
https://github.com/artemkv/notedok-android-app.git,WikiToHtmlFormatterTest,headers2,{     java.lang.String text = "h1. header 1\n\nThis is not a header h1.\n\nh2. header 1.1\n\n h2. Not a header\n\nh2. header 1.2\n\nh1.Not a header neither";     java.lang.String expectedText = "<h1>header 1</h1>\n\nThis is not a header h1.\n\n<h2>header 1.1</h2>\n\n h2. Not a header\n\n<h2>header 1.2</h2>\n\nh1.Not a header neither\n";     com.notedok.notedok.WikiToHtmlFormatter formatter = new com.notedok.notedok.WikiToHtmlFormatter();     java.lang.String formattedText = formatter.format(text);     org.junit.Assert.assertEquals("headers - numeric", expectedText, formattedText); }
https://github.com/smirnov-i-SPbAU/BrainRing.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("ru.spbhse.brainring", appContext.getPackageName()); }
https://github.com/grishmashrestha/ekaai.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/grishmashrestha/ekaai.git,LengthConversionTest,length_conversion_kilometer_to_nautical_mile_is_correct,{     com.lftechnology.ekaai.conversions.Length length = new com.lftechnology.ekaai.conversions.Length(1.0, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.INCH, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.KILOMETER);     junit.framework.Assert.assertEquals(length.convert(), 2.54E-5);     org.junit.Assert.assertNotEquals(length.convert(), 3.54E-5); }
https://github.com/grishmashrestha/ekaai.git,LengthConversionTest,length_conversion_same_unit_conversions_is_correct,{     com.lftechnology.ekaai.conversions.Length length = new com.lftechnology.ekaai.conversions.Length(10.0, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.KILOMETER, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.KILOMETER);     org.junit.Assert.assertNotEquals("False assumption", length.convert(), 5.0);     junit.framework.Assert.assertEquals("True Assumption", length.convert(), 10.0);     junit.framework.Assert.assertNotNull(length.convert()); }
https://github.com/grishmashrestha/ekaai.git,LengthConversionTest,length_conversion_micron_to_feet_is_correct,{     com.lftechnology.ekaai.conversions.Length length = new com.lftechnology.ekaai.conversions.Length(10.0, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.MICRON, com.lftechnology.ekaai.constant.AppConstant.LengthConstant.FEET);     org.junit.Assert.assertNotEquals("False assumption", length.convert(), 5.0);     junit.framework.Assert.assertEquals("True Assumption", length.convert(), 3.280839895013123E-5);     junit.framework.Assert.assertNotNull(length.convert()); }
https://github.com/AJWurts/AndroidSolitaire.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.sigpit.alexwurts.solitare", appContext.getPackageName()); }
https://github.com/AJWurts/AndroidSolitaire.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/AJWurts/AndroidSolitaire.git,CardTest,toStringTest,{     org.junit.Assert.assertEquals("c1", c1.toString()); }
https://github.com/tkrajina/10000sentences.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("info.puzz.a10000sentences", appContext.getPackageName()); }
https://github.com/mneidhardt/MinAppNr1.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("dk.meem.minappnr1", appContext.getPackageName()); }
https://github.com/mneidhardt/MinAppNr1.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/fdoclaves/BGGQuery.git,HolaTest,pepe44,{     com.faaya.fernandoaranaandrade.bggquery.selectBussines.DataGetterData dataGetterData = dataGetter.getDataFromUser("pepe44", null, 5, directory);     com.faaya.fernandoaranaandrade.bggquery.selectBussines.items.Items items = xmlConverter.convertToItems(dataGetterData);     org.junit.Assert.assertNull(items.getItem()); }
https://github.com/fdoclaves/BGGQuery.git,HolaTest,pepe444,{     try {         com.faaya.fernandoaranaandrade.bggquery.selectBussines.DataGetterData dataGetterData = dataGetter.getDataFromUser("pepe444", null, 5, directory);         xmlConverter.convertToItems(dataGetterData);         org.junit.Assert.fail();     } catch (com.faaya.fernandoaranaandrade.bggquery.selectBussines.InvalidUserName e) {         java.lang.System.out.println("No exite el usuario");     } }
https://github.com/Myced/pcc.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.pefscomsys.pcc_buea", appContext.getPackageName()); }
https://github.com/Myced/pcc.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Myced/pcc.git,ScriptureTextHandlerTest,formatVerse,{     java.lang.String cedric = "Ced.Drikc";     java.lang.String[] parts = cedric.split("\\.");     java.lang.String part1 = parts[0];     java.lang.String part2 = parts[1];     org.junit.Assert.assertEquals("Ced", part1); }
https://github.com/mdilaveroglu/Quoter-Android.git,ExampleInstrumentedTest,useAppContext,{     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("co.dilaver.quoter", appContext.getPackageName()); }
https://github.com/mdilaveroglu/Quoter-Android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ahn94/DrywallTally.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/ahn94/DrywallTally.git,UtilsTest,shouldAddTalliesToSingleTallyArea,{     java.util.List<com.austinnightingale.drywalltally.db.TallyArea> tallyAreas = new java.util.ArrayList<>();     for (int i = 1; i < 4; i++) {         com.austinnightingale.drywalltally.db.TallyArea area = com.austinnightingale.drywalltally.db.TallyArea.builder().jobID(0).areaName("job: " + i).halfRegEight(i).halfRegNine(i).halfRegTen(i).halfRegTwelve(i).halfRegFourteen(i).halfRegSixteen(i).halfStretchTwelve(i).halfStretchFourteen(i).halfStretchSixteen(i).fiveEighthRegEight(i).fiveEighthRegNine(i).fiveEighthRegTen(i).fiveEighthRegTwelve(i).fiveEighthRegFourteen(i).fiveEightStretchTwelve(i).ceilingEight(i).ceilingNine(i).ceilingTen(i).ceilingTwelve(i).ceilingFourteen(i).ceilingSixteen(i).fireEight(i).fireNine(i).fireTen(i).fireTwelve(i).fireFourteen(i).fireSixteen(i).moldEight(i).moldTwelve(i).build();         tallyAreas.add(area);     }     org.junit.Assert.assertTrue("combined tallies = total tally for job", test.equals(com.austinnightingale.drywalltally.job.Utils.getJobTally(test.areaName(), tallyAreas))); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,addBothAM,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(3, 30, true);     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(4, 30, true);     java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("8:00AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,addBothPM,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(3, 30, false);     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(4, 30, false);     java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("8:00AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,pmAndAm,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(3, 30, false);     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(4, 30, true);     java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("8:00PM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,bothAMNonZeroMinute,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(9, 30, true);     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(7, 37, true);     java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("5:07PM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,oneAMonePM,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(9, 30, true);     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(7, 37, false);     java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("5:07AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,hour12PlusHour24,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12am (12)      wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, false);// 12pm (24)      java.lang.String result = time2.add(time1).toString();     org.junit.Assert.assertEquals("12:00PM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,hour12PlusHour12,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12pm (12)      wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12pm (12)      java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("12:00AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,hour24PlusHour24,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time1 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12am (0/24)      wilmol.com.github.sleepeasy.tools.Time12HourFormat time2 = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12am (0/24)      java.lang.String result = time1.add(time2).toString();     org.junit.Assert.assertEquals("12:00AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,add90Am,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(7, 00, true);     java.lang.String result = time.addNinteyMinutesXTimes(1).toString();     org.junit.Assert.assertEquals("8:30AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,add90Pm,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(7, 00, false);     java.lang.String result = time.addNinteyMinutesXTimes(1).toString();     org.junit.Assert.assertEquals("8:30PM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,add90AmToPm,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(11, 00, true);     java.lang.String result = time.addNinteyMinutesXTimes(1).toString();     org.junit.Assert.assertEquals("12:30PM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,add90PmToAm,{     wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(11, 00, false);     java.lang.String result = time.addNinteyMinutesXTimes(1).toString();     org.junit.Assert.assertEquals("12:30AM", result); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatAddMethod,add90STwelveTimes,{     java.util.List<java.lang.String> times = new java.util.ArrayList<java.lang.String>();     int i = 0;     while ((i++) < 12) {         wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 15, true);// 12:15am          time = time.addNinteyMinutesXTimes(i);// add cycle of 90mins          time = time.add(new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 15, true));// add 15mins          times.add(time.toString());     }      java.util.List<java.lang.String> expect = new java.util.ArrayList<java.lang.String>();     expect.add("2:00AM");     expect.add("3:30AM");     expect.add("5:00AM");     expect.add("6:30AM");     expect.add("8:00AM");     expect.add("9:30AM");     expect.add("11:00AM");     expect.add("12:30PM");     expect.add("2:00PM");     expect.add("3:30PM");     expect.add("5:00PM");     expect.add("6:30PM");     org.junit.Assert.assertEquals(expect, times); }
https://github.com/wilmol/Sleep-Easy.git,TestTime12HourFormatSubtractMethod,subtract90TwelveTimes,{     java.util.List<java.lang.String> times = new java.util.ArrayList<java.lang.String>();     int i = 0;     while ((i++) < 12) {         wilmol.com.github.sleepeasy.tools.Time12HourFormat time = new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 00, true);// 12:00am          time = time.subtractNinteyMinutesXTimes(i);         // subtract cycle of 90mins         time = time.subtract(new wilmol.com.github.sleepeasy.tools.Time12HourFormat(0, 15, true));// subtract 15mins          times.add(time.toString());     }      java.util.List<java.lang.String> expect = new java.util.ArrayList<java.lang.String>();     expect.add("10:15PM");     expect.add("8:45PM");     expect.add("7:15PM");     expect.add("5:45PM");     expect.add("4:15PM");     expect.add("2:45PM");     expect.add("1:15PM");     expect.add("11:45AM");     expect.add("10:15AM");     expect.add("8:45AM");     expect.add("7:15AM");     expect.add("5:45AM");     org.junit.Assert.assertEquals(expect, times); }
https://github.com/Ifsttar/NoiseCapture.git,ApplicationTest,launchRecord,{     android.content.Intent intent = new android.content.Intent();     mActivityRule.launchActivity(intent);     junit.framework.Assert.assertEquals(-1, mActivityRule.getActivity().getRecordId());     // Click on launch record     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.recordBtn)).perform(androidx.test.espresso.action.ViewActions.click());     // Check that record id is defined     org.junit.Assert.assertNotEquals(-1, mActivityRule.getActivity().getRecordId()); }
https://github.com/Ifsttar/NoiseCapture.git,PeakFinderTest,findPeaks,{     org.noise_planet.noisecapture.util.PeakFinder peakFinder = new org.noise_planet.noisecapture.util.PeakFinder();     java.lang.String line;     java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(org.noise_planet.noisecapture.PeakFinderTest.class.getResourceAsStream("sunspot.dat")));     long index = 1;     while ((line = br.readLine()) != null) {         java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(line, " ");         int year = java.lang.Integer.parseInt(tokenizer.nextToken());         float value = java.lang.Float.parseFloat(tokenizer.nextToken());         peakFinder.add(index++, ((double) (value)));     }      int[] expectedIndex = new int[]{ 5, 17, 27, 38, 50, 52, 61, 69, 78, 87, 102, 104, 116, 130, 137, 148, 160, 164, 170, 177, 183, 193, 198, 205, 207, 217, 228, 237, 247, 257, 268, 272, 279, 290, 299 };     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> results = peakFinder.getPeaks();     int[] got = new int[results.size()];     for (int i = 0; i < results.size(); i++) {         got[i] = ((int) (results.get(i).index));     }     org.junit.Assert.assertArrayEquals(expectedIndex, got); }
https://github.com/Ifsttar/NoiseCapture.git,PeakFinderTest,findPeaksMinimumWidth,{     org.noise_planet.noisecapture.util.PeakFinder peakFinder = new org.noise_planet.noisecapture.util.PeakFinder();     java.lang.String line;     java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(org.noise_planet.noisecapture.PeakFinderTest.class.getResourceAsStream("sunspot.dat")));     long index = 1;     while ((line = br.readLine()) != null) {         java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(line, " ");         int year = java.lang.Integer.parseInt(tokenizer.nextToken());         float value = java.lang.Float.parseFloat(tokenizer.nextToken());         peakFinder.add(index++, ((double) (value)));     }      int[] expectedIndex = new int[]{ 5, 17, 27, 38, 50, 61, 69, 78, 87, 104, 116, 130, 137, 148, 160, 170, 183, 193, 205, 217, 228, 237, 247, 257, 268, 279, 290, 299 };     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> results = org.noise_planet.noisecapture.util.PeakFinder.filter(peakFinder.getPeaks(), 6);     int[] got = new int[results.size()];     for (int i = 0; i < results.size(); i++) {         got[i] = ((int) (results.get(i).index));     }     org.junit.Assert.assertArrayEquals(expectedIndex, got); }
https://github.com/Ifsttar/NoiseCapture.git,PeakFinderTest,findPeaksIncreaseCondition,{     org.noise_planet.noisecapture.util.PeakFinder peakFinder = new org.noise_planet.noisecapture.util.PeakFinder();     peakFinder.setMinIncreaseCount(3);     double[] values = new double[]{ 4, 5, 7, 13, 10, 9, 9, 10, 4, 6, 7, 8, 11, 3, 2, 2 };     long index = 0;     for (double value : values) {         peakFinder.add(index++, value);     }     int[] expectedIndex = new int[]{ 3, 12 };     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> results = peakFinder.getPeaks();     int[] got = new int[results.size()];     for (int i = 0; i < results.size(); i++) {         got[i] = ((int) (results.get(i).index));     }     org.junit.Assert.assertArrayEquals(expectedIndex, got); }
https://github.com/Ifsttar/NoiseCapture.git,PeakFinderTest,findPeaksDecreaseCondition,{     org.noise_planet.noisecapture.util.PeakFinder peakFinder = new org.noise_planet.noisecapture.util.PeakFinder();     peakFinder.setMinDecreaseCount(2);     double[] values = new double[]{ 4, 5, 7, 13, 10, 9, 9, 10, 4, 6, 7, 8, 11, 3, 2, 2 };     long index = 0;     for (double value : values) {         peakFinder.add(index++, value);     }     int[] expectedIndex = new int[]{ 3, 12 };     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> results = peakFinder.getPeaks();     int[] got = new int[results.size()];     for (int i = 0; i < results.size(); i++) {         got[i] = ((int) (results.get(i).index));     }     org.junit.Assert.assertArrayEquals(expectedIndex, got); }
https://github.com/Ifsttar/NoiseCapture.git,TrafficNoiseEstimatorTest,testDetectTrafficPeaks,{     org.noise_planet.noisecapture.util.TrafficNoiseEstimator trafficNoiseEstimator = new org.noise_planet.noisecapture.util.TrafficNoiseEstimator();     double[] laeqs = org.noise_planet.noisecapture.TrafficNoiseEstimatorTest.getLAeqs(org.noise_planet.noisecapture.TrafficNoiseEstimatorTest.class.getResourceAsStream("traffic_50kmh_3m.ogg"), false);     laeqs = trafficNoiseEstimator.fastToSlowLeqMax(laeqs);     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> peaks = trafficNoiseEstimator.getNoisePeaks(laeqs);     // for (PeakFinder.Element el : peaks) {     // System.out.println(String.format(Locale.ROOT, "Find peak at %.3f s spl:  %.2f dB(A)", el.index / 1000.0, el.value));     // }     double[] expectedPeakTime = new double[]{ 1.75, 7.88, 13.4, 20.5, 31.6, 44.1, 58.5 };     for (double v : expectedPeakTime) {         boolean found = false;         for (org.noise_planet.noisecapture.util.PeakFinder.Element el : peaks) {             if (java.lang.Math.abs(el.index - v) <= 250) {                 found = true;                 break;             }         }         org.junit.Assert.assertTrue(found);     } }
https://github.com/Ifsttar/NoiseCapture.git,TrafficNoiseEstimatorTest,findPeaksIncreaseDecreaseCondition,{     org.noise_planet.noisecapture.util.TrafficNoiseEstimator trafficNoiseEstimator = new org.noise_planet.noisecapture.util.TrafficNoiseEstimator();     java.util.List<java.lang.Double> leqs = new java.util.ArrayList<>();     java.util.List<java.lang.Double> peakOk = java.util.Arrays.asList(4.0, 11.0, 17.0, 13.0, 10.0);     java.util.List<java.lang.Double> noise = java.util.Arrays.asList(0.7, 1.0, 1.5, 1.8, 1.1, 1.7, 1.5, 1.1);     leqs.addAll(noise);     leqs.addAll(noise);     leqs.addAll(noise);     leqs.addAll(peakOk);     leqs.addAll(noise);     leqs.addAll(noise);     leqs.addAll(peakOk);     leqs.addAll(noise);     leqs.addAll(peakOk);     leqs.addAll(peakOk);     leqs.addAll(noise);     leqs.addAll(noise);     leqs.addAll(peakOk);     leqs.addAll(noise);     leqs.addAll(noise);     int index = 0;     double[] maxLeqs = new double[leqs.size()];     for (double value : leqs) {         maxLeqs[index++] = value;     }     java.util.List<org.noise_planet.noisecapture.util.PeakFinder.Element> els = trafficNoiseEstimator.getNoisePeaks(maxLeqs);     org.junit.Assert.assertEquals(5, els.size()); }
https://github.com/Ifsttar/NoiseCapture.git,AWeightingTest,testGetAWeightingCoefficients,{     org.orbisgis.sos.AWeighting aWeighting = new org.orbisgis.sos.AWeighting();     double[] numerator = aWeighting.numerator;     double[] denominator = aWeighting.denominator;     org.junit.Assert.assertEquals(numerator.length, denominator.length); }
https://github.com/Ifsttar/NoiseCapture.git,ThirdOctaveBandsFilteringTest,testReadCsv,{     int samplingRate = 44100;     org.orbisgis.sos.ThirdOctaveBandsFiltering.FREQUENCY_BANDS frequencyBands = org.orbisgis.sos.ThirdOctaveBandsFiltering.FREQUENCY_BANDS.REDUCED;     org.orbisgis.sos.ThirdOctaveBandsFiltering thirdOctaveBandsFiltering = new org.orbisgis.sos.ThirdOctaveBandsFiltering(samplingRate, frequencyBands);     java.util.List<org.orbisgis.sos.ThirdOctaveBandsFiltering.FiltersParameters> filtersCoefficients = thirdOctaveBandsFiltering.getFilterParameters();     org.junit.Assert.assertEquals(24, filtersCoefficients.size()); }
https://github.com/Ifsttar/NoiseCapture.git,ThirdOctaveBandsFilteringTest,testPinkNoise,{     short[] pinkNoise = org.orbisgis.sos.SOSSignalProcessing.makePinkNoise(441000, ((short) (2500)), 0);     org.orbisgis.sos.FFTSignalProcessing fftSignalProcessing = new org.orbisgis.sos.FFTSignalProcessing(44100, org.orbisgis.sos.ThirdOctaveBandsFiltering.STANDARD_FREQUENCIES_REDUCED, pinkNoise.length);     fftSignalProcessing.addSample(pinkNoise);     org.orbisgis.sos.FFTSignalProcessing.ProcessingResult result = fftSignalProcessing.processSample(org.orbisgis.sos.FFTSignalProcessing.WINDOW_TYPE.RECTANGULAR, false, false);     // Compute     org.apache.commons.math3.stat.descriptive.moment.StandardDeviation standardDeviation = new org.apache.commons.math3.stat.descriptive.moment.StandardDeviation();     double[] dArray = new double[result.dBaLevels.length];     for (int i = 0; i < result.dBaLevels.length; i++) {         dArray[i] = result.dBaLevels[i];     }     org.junit.Assert.assertEquals(0, standardDeviation.evaluate(dArray), 0.25); }
https://github.com/mrvivacious/PorNo_Android.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("us.mrvivacio.porno", appContext.getPackageName()); }
https://github.com/mrvivacious/PorNo_Android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/mrvivacious/PorNo_Android.git,porNoTest,isPorn,{     boolean malformedURL = us.mrvivacio.porno.porNo.isPorn("pornhub com");     org.junit.Assert.assertFalse(malformedURL); }
https://github.com/mrvivacious/PorNo_Android.git,porNoTest,isNotPorn,{     boolean notPornURL = us.mrvivacio.porno.porNo.isPorn("https://chrome.google.com/webstore/detail/porno-beta/fkhfpbfakkjpkhnonhelnnbohblaeooj");     org.junit.Assert.assertFalse(notPornURL); }
https://github.com/emitchel/uDraw.git,StringUtilsTest,isValidString_isCorrect,{     org.junit.Assert.assertEquals(true, erm.udraw.utils.StringUtils.isValidString("valid string")); }
https://github.com/emitchel/uDraw.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/GlobalTechnology/android-ekko.git,ResourceUtilsTest,testYouTubeExtractVideoId,{     final java.lang.String id = "dQw4w9WgXcQ";     final java.lang.String[] urls = new java.lang.String[]{ "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "http://www.youtube.com/watch?v=dQw4w9WgXcQ&feature=related", "http://youtu.be/dQw4w9WgXcQ", "http://www.youtube.com/embed/dQw4w9WgXcQ", "http://www.youtube.com/v/dQw4w9WgXcQ", "https://youtube.googleapis.com/v/dQw4w9WgXcQ", "http://m.youtube.com/watch?v=dQw4w9WgXcQ", "http://www.youtube.com/ytscreeningroom?v=dQw4w9WgXcQ" };     for (final java.lang.String url : urls) {         org.junit.Assert.assertEquals(url, id, org.ekkoproject.android.player.util.ResourceUtils.youtubeExtractVideoId(android.net.Uri.parse(url)));     } }
https://github.com/arvipDev/EnergyConversionLabDemo.git,ExperimentsListInstrumentationTest,testNumberOfItemsOnList,{     android.widget.ListView listview = ((android.widget.ListView) (main.getActivity().findViewById(R.id.experiments_lv)));     org.junit.Assert.assertThat(listview.getCount(), org.hamcrest.core.Is.is(5));     // Counts the number of items on the list and asserts.     // The number 5 should change as we add more items to the list }
https://github.com/amarradi/bloginfo.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.github.amarradi.bloginfo", appContext.getPackageName()); }
https://github.com/amarradi/bloginfo.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/amarradi/bloginfo.git,FeedReaderTest,parseLastBuildDate,{     java.io.InputStream is = getClass().getResourceAsStream("/feed.xml");     java.lang.String lastBuildDate = new com.github.amarradi.bloginfo.FeedReader().parseLastBuildDate(is);     org.junit.Assert.assertEquals("Di, 22 Jan 2019 13:05:25 +0000", lastBuildDate); }
https://github.com/playerone-id/EosCommander.git,EcTest,testSampleR1Keys,{     org.junit.Assert.assertEquals("ec(secp256r1) key pair not match! - 1", new io.plactal.eoscommander.crypto.ec.EosPrivateKey("PVT_R1_iyQmnyPEGvFd8uffnk152WC2WryBjgTrg22fXQryuGL9mU6qW").getPublicKey().toString(), "PUB_R1_6EPHFSKVYHBjQgxVGQPrwCxTg7BbZ69H9i4gztN9deKTEXYne4"); }
https://github.com/playerone-id/EosCommander.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/cyblack/HelpMom.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("org.androidtown.helpmom", appContext.getPackageName()); }
https://github.com/cyblack/HelpMom.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/frodegill/GridWalking.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/frodegill/GridWalking.git,GridUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/kuwako/TodoKuwako.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/n8yn8/ABMA-Android.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/mrzzy/Skeem.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("sstinc.skeem", appContext.getPackageName()); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,to_string,{     setup();     java.lang.String[] stringTestCases = convertTestCasesString();     for (int i = 0; i < this.testCases.length; i++) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(this.testCases[i]);         org.junit.Assert.assertTrue(testObject.toString().equals(stringTestCases[i]));     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getMillis,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getMillis() == testCase.getMillis());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getYear,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getYear() == testCase.getYear());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getMonth,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getMonth() == testCase.getMonthOfYear());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getDay,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getDay() == testCase.getDayOfMonth());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getHour,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getHour() == testCase.getHourOfDay());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DatetimeTest,getMinute,{     setup();     for (org.joda.time.DateTime testCase : this.testCases) {         sstinc.skeem.models.Datetime testObject = new sstinc.skeem.models.Datetime(testCase);         org.junit.Assert.assertTrue(testObject.getMinute() == testCase.getMinuteOfHour());     }     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,copyConstructor,{     setup();     sstinc.skeem.models.Duration copyObject = new sstinc.skeem.models.Duration(this.testObject);     org.junit.Assert.assertTrue(this.testObject.equals(copyObject));     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,addUnit,{     setup();     this.testObject.add(1, sstinc.skeem.models.Duration.TimeUnit.millisecond);     this.testObject.add(1, sstinc.skeem.models.Duration.TimeUnit.second);     this.testObject.add(1, sstinc.skeem.models.Duration.TimeUnit.minute);     this.testObject.add(1, sstinc.skeem.models.Duration.TimeUnit.hour);     org.junit.Assert.assertTrue(this.testObject.getDurationMillis() == 3662001);     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,addDuration,{     setup();     sstinc.skeem.models.Duration addObject = new sstinc.skeem.models.Duration(4000);     this.testObject.add(addObject);     org.junit.Assert.assertTrue(this.testObject.getDurationMillis() == 5000);     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,minusUnit,{     setup();     this.testObject.minus(1, sstinc.skeem.models.Duration.TimeUnit.millisecond);     this.testObject.minus(1, sstinc.skeem.models.Duration.TimeUnit.second);     this.testObject.minus(1, sstinc.skeem.models.Duration.TimeUnit.minute);     this.testObject.minus(1, sstinc.skeem.models.Duration.TimeUnit.hour);     org.junit.Assert.assertTrue(this.testObject.getDurationMillis() == (-3660001));     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,minusDuration,{     setup();     sstinc.skeem.models.Duration minusObject = new sstinc.skeem.models.Duration(4000);     this.testObject.minus(minusObject);     org.junit.Assert.assertTrue(this.testObject.getDurationMillis() == (-3000));     clean(); }
https://github.com/mrzzy/Skeem.git,DurationTest,getDurationMillis,{     setup();     org.junit.Assert.assertTrue(this.testObject.getDurationMillis() == 1000);     clean(); }
https://github.com/dparker1005/app_JustChess.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.alaskalinuxuser.justchess", appContext.getPackageName()); }
https://github.com/dparker1005/app_JustChess.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/dparker1005/app_JustChess.git,GameModeTest,acceptsValidBoards,{     org.junit.Assert.assertTrue(com.alaskalinuxuser.justchess.GameMode.isValidBoard(mValidBoard)); }
https://github.com/dparker1005/app_JustChess.git,GameModeTest,deniesBoardCauseInvalidChar,{     org.junit.Assert.assertFalse(com.alaskalinuxuser.justchess.GameMode.isValidBoard(mValidBoard.replace('q', 'j'))); }
https://github.com/dparker1005/app_JustChess.git,GameModeTest,canCreateValidMode,{     boolean gameModeLegal = true;     try {         com.alaskalinuxuser.justchess.GameMode gameMode = new com.alaskalinuxuser.justchess.GameMode("Test Mode", "Test Description", mValidBoard);         if (!((gameMode.getName().equals("Test Mode") && gameMode.getDescription().equals("Test Description")) && gameMode.getNewBoard().equals(mValidBoard))) {             gameModeLegal = false;         }     } catch (java.lang.IllegalArgumentException e) {         gameModeLegal = false;     }     org.junit.Assert.assertTrue(gameModeLegal); }
https://github.com/dparker1005/app_JustChess.git,GameModeTest,cannotCreateInvalidMode,{     boolean exceptionCaught = false;     try {         com.alaskalinuxuser.justchess.GameMode gameMode = new com.alaskalinuxuser.justchess.GameMode("Test Mode", "Test Description", mValidBoard.substring(1));     } catch (java.lang.IllegalArgumentException e) {         exceptionCaught = true;     }     org.junit.Assert.assertTrue(exceptionCaught); }
https://github.com/LazzyBee/LazyBee-Android.git,CardSchedTest,test_nextIntervalByDays,{     org.junit.Assert.assertEquals(cardLast_ivl3days.getLast_ivl(), 3);     java.lang.System.out.println("Next interval HARD: " + scheduler._nextIntervalByDays(cardLast_ivl3days, com.born2go.lazzybee.db.Card.EASE_HARD));     java.lang.System.out.println("Next interval GOOD: " + scheduler._nextIntervalByDays(cardLast_ivl3days, com.born2go.lazzybee.db.Card.EASE_GOOD));     java.lang.System.out.println("Next interval EASY: " + scheduler._nextIntervalByDays(cardLast_ivl3days, com.born2go.lazzybee.db.Card.EASE_EASY)); }
https://github.com/LazzyBee/LazyBee-Android.git,WordEstimateTest,test_getLastResult,{     org.junit.Assert.fail();// Just want to have a failure test  }
https://github.com/LazzyBee/LazyBee-Android.git,WordEstimateTest,testUpdateVoca,{     testEstimate.updateVoca(1, true);     org.junit.Assert.assertEquals(1730.0, testEstimate._estimateVoca(), com.born2go.lazzybee.algorithms.WordEstimateTest.DELTA); }
https://github.com/LazzyBee/LazyBee-Android.git,WordEstimateTest,test_sampleNumberWordEachLevel,{     int set[] = testEstimate._sampleNumberWordEachLevel();     org.junit.Assert.assertEquals(100, ((((((set[0] + set[1]) + set[2]) + set[3]) + set[4]) + set[5]) + set[6]) + set[7], com.born2go.lazzybee.algorithms.WordEstimateTest.DELTA); }
https://github.com/gpadmaku1/card-reader.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.example.gautham.imagetotextanalysis", appContext.getPackageName()); }
https://github.com/gpadmaku1/card-reader.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/fantazac/TP3Mobile2.git,ReminderListUnitTest,AddReminder,{     reminderList.add(reminder1);     reminderList.add(reminder2);     org.junit.Assert.assertEquals(2, reminderList.getReminderListCount()); }
https://github.com/fantazac/TP3Mobile2.git,ReminderListUnitTest,RemoveReminder,{     reminderList.add(reminder1);     reminderList.add(reminder2);     reminderList.remove(reminder1);     reminderList.remove(reminder2);     org.junit.Assert.assertEquals(0, reminderList.getReminderListCount()); }
https://github.com/fantazac/TP3Mobile2.git,ReminderListUnitTest,AddReminderAddedListener,{     reminderList.addReminderAddedListener(new ca.csf.mobile2.tp3.model.ReminderList.ReminderAddedListener() {         @java.lang.Override         public void onReminderAdded(ca.csf.mobile2.tp3.model.Reminder reminder) {         }     });     org.junit.Assert.assertEquals(1, reminderList.getReminderAddedListenersCount()); }
https://github.com/fantazac/TP3Mobile2.git,ReminderListUnitTest,AddReminderRemovedListener,{     reminderList.addReminderRemovedListener(new ca.csf.mobile2.tp3.model.ReminderList.ReminderRemovedListener() {         @java.lang.Override         public void onReminderRemoved(ca.csf.mobile2.tp3.model.Reminder user) {         }     });     org.junit.Assert.assertEquals(1, reminderList.getReminderRemovedListenersCount()); }
https://github.com/Krock21rus/MafiaGame.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("me.hwproj.mafiagame", appContext.getPackageName()); }
https://github.com/josdem/jugoterapia-mobile.git,BeverageSplitterTest,shouldSplitBeverages,{     java.lang.String ingredients = "2 Zanahorias,1 Pepino,1 Rama de apio";     java.lang.String result = com.jugoterapia.josdem.util.BeverageSplitter.split(ingredients);     org.junit.Assert.assertEquals(result, (((("2 Zanahorias" + '\n') + "1 Pepino") + '\n') + "1 Rama de apio") + '\n'); }
https://github.com/Primo17/EliteanimesApp.git,OkHttpTest,testSimplePost,{     okhttp3.OkHttpClient client = new okhttp3.OkHttpClient();     okhttp3.RequestBody requestBody = new okhttp3.FormBody.Builder().add("name", "testuser").add("password", "password").build();     okhttp3.Request postRequest = new okhttp3.Request.Builder().url("http://httpbin.org/post").post(requestBody).build();     okhttp3.Call call = client.newCall(postRequest);     okhttp3.Response response = call.execute();     org.junit.Assert.assertThat(response.isSuccessful(), org.hamcrest.CoreMatchers.is(true));     assertContent(response.body().string()); }
https://github.com/christopherkade/Task-Forge.git,TaskForgeInstrumentedTest,checkRessourceValidity,{     java.lang.String resString = appContext.getResources().getString(R.string.app_name);     org.junit.Assert.assertEquals("Task Forge", resString); }
https://github.com/christopherkade/Task-Forge.git,TaskForgeInstrumentedTest,useAppContext,{     org.junit.Assert.assertEquals("kade_c.taskforge", appContext.getPackageName()); }
https://github.com/christopherkade/Task-Forge.git,TaskForgeUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/EthamQ/CustomNewsAndroid_2019.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = android.support.test.InstrumentationRegistry.getTargetContext();     org.junit.Assert.assertEquals("com.example.rapha.swipeprototype2", appContext.getPackageName()); }
https://github.com/EthamQ/CustomNewsAndroid_2019.git,ExampleUnitTest,addition_isCorrect,{     org.junit.Assert.assertEquals(4, 2 + 2); }
https://github.com/Nikoloutsos/myHomework.git,NoteAdapterTests,convertUnixTimeStampInReadableForm_isCorrect,{     long timeInMillis = 1541322212788L;     java.lang.String expected = "2018-11-04";     org.junit.Assert.assertEquals(com.tutorial.androiddreamer.myhomework.Helpers.DateUtil.convertUnixTimeStampInReadableForm(timeInMillis), expected); }
https://github.com/beemdevelopment/Aegis.git,SlotTest,testRawSlotCrypto,{     com.beemdevelopment.aegis.vault.slots.RawSlot slot = new com.beemdevelopment.aegis.vault.slots.RawSlot();     javax.crypto.SecretKey rawKey = com.beemdevelopment.aegis.crypto.CryptoUtils.generateKey();     javax.crypto.Cipher cipher = com.beemdevelopment.aegis.crypto.CryptoUtils.createEncryptCipher(rawKey);     slot.setKey(_masterKey, cipher);     cipher = slot.createDecryptCipher(rawKey);     com.beemdevelopment.aegis.crypto.MasterKey decryptedKey = slot.getKey(cipher);     org.junit.Assert.assertArrayEquals(_masterKey.getBytes(), decryptedKey.getBytes()); }
https://github.com/beemdevelopment/Aegis.git,SlotTest,testPasswordSlotCrypto,{     final char[] password = "test".toCharArray();     final com.beemdevelopment.aegis.crypto.SCryptParameters scryptParams = new com.beemdevelopment.aegis.crypto.SCryptParameters(com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_N, com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_p, com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_SCRYPT_r, new byte[com.beemdevelopment.aegis.crypto.CryptoUtils.CRYPTO_AEAD_KEY_SIZE]);     com.beemdevelopment.aegis.vault.slots.PasswordSlot slot = new com.beemdevelopment.aegis.vault.slots.PasswordSlot();     javax.crypto.SecretKey passwordKey = slot.deriveKey(password, scryptParams);     javax.crypto.Cipher cipher = com.beemdevelopment.aegis.crypto.CryptoUtils.createEncryptCipher(passwordKey);     slot.setKey(_masterKey, cipher);     cipher = slot.createDecryptCipher(passwordKey);     com.beemdevelopment.aegis.crypto.MasterKey decryptedKey = slot.getKey(cipher);     org.junit.Assert.assertArrayEquals(_masterKey.getBytes(), decryptedKey.getBytes()); }
https://github.com/beemdevelopment/Aegis.git,HOTPTest,vectorsMatch,{     for (int i = 0; i < com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS.length; i++) {         com.beemdevelopment.aegis.crypto.otp.OTP otp = com.beemdevelopment.aegis.crypto.otp.HOTP.generateOTP(com.beemdevelopment.aegis.crypto.otp.HOTPTest.SECRET, "HmacSHA1", 6, i);         org.junit.Assert.assertEquals(com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i], otp.toString());     } }
https://github.com/beemdevelopment/Aegis.git,MOTPTest,testOutputCode,{     for (com.beemdevelopment.aegis.crypto.otp.MOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.MOTPTest.VECTORS) {         com.beemdevelopment.aegis.crypto.otp.MOTP otp = com.beemdevelopment.aegis.crypto.otp.MOTP.generateOTP(com.beemdevelopment.aegis.encoding.Hex.decode(vector.Secret), "MD5", 6, 10, vector.Pin, vector.Time);         org.junit.Assert.assertEquals(vector.OTP, otp.toString());     } }
https://github.com/beemdevelopment/Aegis.git,TOTPTest,vectorsMatch,{     for (com.beemdevelopment.aegis.crypto.otp.TOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.TOTPTest.VECTORS) {         byte[] seed = com.beemdevelopment.aegis.crypto.otp.TOTPTest.getSeed(vector.Algo);         com.beemdevelopment.aegis.crypto.otp.OTP otp = com.beemdevelopment.aegis.crypto.otp.TOTP.generateOTP(seed, vector.Algo, 8, 30, vector.Time);         org.junit.Assert.assertEquals(vector.OTP, otp.toString());     } }
https://github.com/beemdevelopment/Aegis.git,YAOTPTest,validateYaOtp,{     for (com.beemdevelopment.aegis.crypto.otp.YAOTPTest.Vector testCase : com.beemdevelopment.aegis.crypto.otp.YAOTPTest.TEST_CASES) {         byte[] secret = com.beemdevelopment.aegis.otp.YandexInfo.parseSecret(com.beemdevelopment.aegis.encoding.Base32.decode(testCase.secret));         com.beemdevelopment.aegis.crypto.otp.YAOTP otp = com.beemdevelopment.aegis.crypto.otp.YAOTP.generateOTP(secret, testCase.pin, 8, "HmacSHA256", testCase.timestamp, 30);         org.junit.Assert.assertEquals(testCase.expected, otp.toString());     } }
https://github.com/beemdevelopment/Aegis.git,QrCodeAnalyzerTest,testScanQrCode,{     boolean found = scan("qr.y.gz", 1600, 1200, 1600);     org.junit.Assert.assertTrue("QR code not found", found); }
https://github.com/beemdevelopment/Aegis.git,GoogleAuthInfoTest,testGoogleAuthInfoEmptySecret,{     java.lang.String uri = "otpauth://totp/test:test?secret=%s&algo=SHA1&digits=6&period=30";     com.beemdevelopment.aegis.otp.GoogleAuthInfo.parseUri(java.lang.String.format(uri, "AA"));     org.junit.Assert.assertThrows(com.beemdevelopment.aegis.otp.GoogleAuthInfoException.class, () -> com.beemdevelopment.aegis.otp.GoogleAuthInfo.parseUri(java.lang.String.format(uri, ""))); }
https://github.com/beemdevelopment/Aegis.git,HotpInfoTest,testHotpInfoOtp,{     for (int i = 0; i < com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS.length; i++) {         com.beemdevelopment.aegis.otp.HotpInfo info = new com.beemdevelopment.aegis.otp.HotpInfo(com.beemdevelopment.aegis.crypto.otp.HOTPTest.SECRET, com.beemdevelopment.aegis.otp.OtpInfo.DEFAULT_ALGORITHM, com.beemdevelopment.aegis.otp.OtpInfo.DEFAULT_DIGITS, i);         org.junit.Assert.assertEquals(info.getOtp(), com.beemdevelopment.aegis.crypto.otp.HOTPTest.VECTORS[i]);     } }
https://github.com/beemdevelopment/Aegis.git,MotpInfoTest,testMotpInfoOtp,{     for (com.beemdevelopment.aegis.crypto.otp.MOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.MOTPTest.VECTORS) {         com.beemdevelopment.aegis.otp.MotpInfo info = new com.beemdevelopment.aegis.otp.MotpInfo(com.beemdevelopment.aegis.encoding.Hex.decode(vector.Secret), vector.Pin);         org.junit.Assert.assertEquals(vector.OTP, info.getOtp(vector.Time));     } }
https://github.com/beemdevelopment/Aegis.git,TotpInfoTest,testTotpInfoOtp,{     for (com.beemdevelopment.aegis.crypto.otp.TOTPTest.Vector vector : com.beemdevelopment.aegis.crypto.otp.TOTPTest.VECTORS) {         byte[] seed = com.beemdevelopment.aegis.crypto.otp.TOTPTest.getSeed(vector.Algo);         com.beemdevelopment.aegis.otp.TotpInfo info = new com.beemdevelopment.aegis.otp.TotpInfo(seed, vector.Algo, 8, com.beemdevelopment.aegis.otp.TotpInfo.DEFAULT_PERIOD);         org.junit.Assert.assertEquals(vector.OTP, info.getOtp(vector.Time));     } }
https://github.com/domogik/domodroid.git,calculTest,testRound_double,{     final double testRound_double = Abstract.calcul.Round_double(19.99);     org.junit.Assert.assertEquals(19.99, testRound_double, 0); }
https://github.com/domogik/domodroid.git,calculTest,testRound_float,{     final float testRound_double = Abstract.calcul.Round_float(((float) (19.99099)), 2);     org.junit.Assert.assertEquals(19.99, testRound_double, 0.001); }
https://github.com/domogik/domodroid.git,Entity_Feature_AssociationTest,testGetFeat_model_id,{     Entity.Entity_Feature_Association feature_association = new Entity.Entity_Feature_Association(0, null, 0, 0, null);     java.lang.String feature_model_id = feature_association.getFeat_model_id();     org.junit.Assert.assertEquals(null, feature_model_id);     org.json.JSONObject device_feature_model_id = new org.json.JSONObject();     device_feature_model_id.put("device_feature_model_id", "125");     feature_association.setDevice_feature(device_feature_model_id);     feature_model_id = feature_association.getFeat_model_id();     // todo handle json in test     // Assert.assertEquals("125", feature_model_id); }
https://github.com/domogik/domodroid.git,Entity_Feature_AssociationTest,testGetFeat_id,{     Entity.Entity_Feature_Association feature_association = new Entity.Entity_Feature_Association(0, null, 0, 0, null);     int feature_id = feature_association.getFeat_id();     org.junit.Assert.assertEquals(0, feature_id);     org.json.JSONObject device_feature_model_id = new org.json.JSONObject();     device_feature_model_id.put("id", "125");     feature_association.setDevice_feature(device_feature_model_id);     feature_id = feature_association.getFeat_id();     // todo handle json in test     // Assert.assertEquals("125", feature_id); }
https://github.com/domogik/domodroid.git,Entity_Feature_AssociationTest,testGetFeat_device_id,{     Entity.Entity_Feature_Association feature_association = new Entity.Entity_Feature_Association(0, null, 0, 0, null);     int feature_device_id = feature_association.getFeat_device_id();     org.junit.Assert.assertEquals(0, feature_device_id);     org.json.JSONObject device_feature_model_id = new org.json.JSONObject();     device_feature_model_id.put("device_id", "125");     // todo handle json in test     // feature_association.setDevice_feature(device_feature_model_id);     feature_device_id = feature_association.getFeat_device_id();     // Assert.assertEquals("125", feature_device_id); }
https://github.com/xbmc/Kore.git,AddonsActivityTests,showHamburgerInInitialState,{     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,AddonsActivityTests,showArrowWhenSelectingListItem,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,AddonsActivityTests,showHamburgerWhenSelectingListItemAndReturn,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     androidx.test.espresso.Espresso.pressBack();     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,AddonsActivityTests,restoreArrowOnConfigurationChange,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MoviesActivityTests,showHamburgerInInitialState,{     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MoviesActivityTests,showArrowWhenSelectingListItem,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MoviesActivityTests,showHamburgerWhenSelectingListItemAndReturn,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     androidx.test.espresso.Espresso.pressBack();     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MoviesActivityTests,restoreArrowOnConfigurationChange,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MusicActivityTests,showHamburgerInInitialState,{     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MusicActivityTests,showArrowWhenSelectingListItem,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(org.xbmc.kore.tests.ui.music.MusicActivityTests.ArtistTestData.title, R.id.list);     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MusicActivityTests,showHamburgerWhenSelectingListItemAndReturn,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(org.xbmc.kore.tests.ui.music.MusicActivityTests.ArtistTestData.title, R.id.list);     androidx.test.espresso.Espresso.pressBack();     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,MusicActivityTests,restoreArrowOnConfigurationChange,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(org.xbmc.kore.tests.ui.music.MusicActivityTests.ArtistTestData.title, R.id.list);     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,setVolume,{     final int volume = 16;     org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().setVolume(volume, true);     org.junit.Assert.assertTrue(org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume() == volume);     expandPanel();     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_seek_bar)).check(androidx.test.espresso.assertion.ViewAssertions.matches(org.xbmc.kore.testhelpers.Matchers.withProgress(volume)));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_volume_text)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.withText(java.lang.String.valueOf(volume)))); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,changeVolume,{     final int volume = 16;     expandPanel();     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_seek_bar)).perform(org.xbmc.kore.testhelpers.action.ViewActions.slideSeekBar(volume));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_seek_bar)).check(androidx.test.espresso.assertion.ViewAssertions.matches(org.xbmc.kore.testhelpers.Matchers.withProgress(volume)));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_volume_text)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.withText(java.lang.String.valueOf(volume))));     org.xbmc.kore.tests.ui.AbstractTestClass.getConnectionHandlerManager().waitForMethodHandled(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Application.SetVolume.METHOD_NAME, 10000);     org.junit.Assert.assertTrue((("applicationHandler volume: " + org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume()) + " != ") + volume, org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume() == volume); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,restoreVolumeIndicatorOnRotate,{     final int volume = 16;     expandPanel();     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_seek_bar)).perform(org.xbmc.kore.testhelpers.action.ViewActions.slideSeekBar(volume));     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertTrue((("applicationHandler volume: " + org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume()) + " != ") + volume, org.xbmc.kore.tests.ui.AbstractTestClass.getApplicationHandler().getVolume() == volume);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(org.xbmc.kore.testhelpers.action.ViewActions.waitForView(R.id.vli_seek_bar, new org.xbmc.kore.testhelpers.action.ViewActions.CheckStatus() {         @java.lang.Override         public boolean check(android.view.View v) {             return ((android.widget.SeekBar) (v)).getProgress() == volume;         }     }, 10000));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.vli_volume_text)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.withText(java.lang.String.valueOf(volume)))); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,setProgression,{     final int progress = 16;     final java.lang.String progressText = "0:16";     expandPanel();     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.play)).perform(androidx.test.espresso.action.ViewActions.click());// Pause playback      androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.mpi_seek_bar)).perform(org.xbmc.kore.testhelpers.action.ViewActions.slideSeekBar(progress));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.mpi_progress)).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.withText(progressText)));     org.junit.Assert.assertTrue(org.xbmc.kore.tests.ui.AbstractTestClass.getPlayerHandler().getTimeElapsed() == progress); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,restoreProgressOnRotate,{     final int progress = 16;     final java.lang.String progressText = "0:16";     expandPanel();     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.play)).perform(androidx.test.espresso.action.ViewActions.click());// Pause playback      androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.mpi_seek_bar)).perform(org.xbmc.kore.testhelpers.action.ViewActions.slideSeekBar(progress));     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertEquals(org.xbmc.kore.tests.ui.AbstractTestClass.getPlayerHandler().getTimeElapsed(), progress);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.mpi_progress)).check(androidx.test.espresso.assertion.ViewAssertions.matches(org.xbmc.kore.testhelpers.Matchers.withProgress(progressText)));     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.mpi_seek_bar)).check(androidx.test.espresso.assertion.ViewAssertions.matches(org.xbmc.kore.testhelpers.Matchers.withProgress(progress))); }
https://github.com/xbmc/Kore.git,SlideUpPanelTests,pausePlayback,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.play)).perform(androidx.test.espresso.action.ViewActions.click());     org.junit.Assert.assertSame(org.xbmc.kore.tests.ui.AbstractTestClass.getPlayerHandler().getPlayState(), org.xbmc.kore.testutils.tcpserver.handlers.PlayerHandler.PLAY_STATE.PAUSED);     expandPanel();     final int progress = ((android.widget.SeekBar) (getActivity().findViewById(R.id.mpi_seek_bar))).getProgress();     android.os.SystemClock.sleep(1000);// wait one second to check if progression has indeed paused      androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(org.xbmc.kore.testhelpers.action.ViewActions.waitForView(R.id.mpi_seek_bar, new org.xbmc.kore.testhelpers.action.ViewActions.CheckStatus() {         @java.lang.Override         public boolean check(android.view.View v) {             int seekBarProgress = ((android.widget.SeekBar) (v)).getProgress();             return seekBarProgress == progress;         }     }, 10000)); }
https://github.com/xbmc/Kore.git,PlaylistTests,keepPlaylistOnStop,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeRight());     org.xbmc.kore.testhelpers.EspressoTestUtils.clickButton(R.id.stop);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeLeft());     org.junit.Assert.assertEquals(org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().getPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO).size(), org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE);     org.xbmc.kore.testhelpers.EspressoTestUtils.checkListViewSize(org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE, R.id.playlist); }
https://github.com/xbmc/Kore.git,PlaylistTests,keepPlaylistOnPause,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeRight());     org.xbmc.kore.testhelpers.EspressoTestUtils.clickButton(R.id.play);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeLeft());     org.junit.Assert.assertEquals(org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().getPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO).size(), org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE);     org.xbmc.kore.testhelpers.EspressoTestUtils.checkListViewSize(org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE, R.id.playlist); }
https://github.com/xbmc/Kore.git,PlaylistTests,clearPlaylistWhenClearedOnKodi,{     org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().clearPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO);     org.xbmc.kore.tests.ui.AbstractTestClass.getConnectionHandlerManager().waitForNotification(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.notifications.Playlist.OnClear.METHOD_NAME, 10000);     org.junit.Assert.assertEquals(0, org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().getPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO).size());     androidx.test.espresso.Espresso.onView(org.hamcrest.Matchers.allOf(androidx.test.espresso.matcher.ViewMatchers.withId(R.id.info_title), androidx.test.espresso.matcher.ViewMatchers.withText(R.string.playlist_empty))).check(androidx.test.espresso.assertion.ViewAssertions.matches(androidx.test.espresso.matcher.ViewMatchers.isDisplayed())); }
https://github.com/xbmc/Kore.git,PlaylistTests,restorePlaylistAfterConfigurationChange,{     org.xbmc.kore.tests.ui.AbstractTestClass.getConnectionHandlerManager().clearMethodsHandled();     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     waitForAudioPlaylistToShow();     org.junit.Assert.assertEquals(org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().getPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO).size(), org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE);     org.xbmc.kore.testhelpers.EspressoTestUtils.checkListViewSize(org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE, R.id.playlist); }
https://github.com/xbmc/Kore.git,PlaylistTests,restorePlaylistAfterStopAndConfigurationChange,{     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeRight());     org.xbmc.kore.testhelpers.EspressoTestUtils.clickButton(R.id.stop);     androidx.test.espresso.Espresso.onView(androidx.test.espresso.matcher.ViewMatchers.isRoot()).perform(androidx.test.espresso.action.ViewActions.swipeLeft());     org.xbmc.kore.tests.ui.AbstractTestClass.getConnectionHandlerManager().clearMethodsHandled();     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     waitForAudioPlaylistToShow();     org.junit.Assert.assertEquals(org.xbmc.kore.tests.ui.AbstractTestClass.getPlaylistHandler().getPlaylist(org.xbmc.kore.testutils.tcpserver.handlers.jsonrpc.response.methods.Playlist.playlistID.AUDIO).size(), org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE);     org.xbmc.kore.testhelpers.EspressoTestUtils.checkListViewSize(org.xbmc.kore.tests.ui.remote.playlistfragment.TCP.PlaylistTests.PLAYLIST_SIZE, R.id.playlist); }
https://github.com/xbmc/Kore.git,TVShowsActivityTests,showHamburgerInInitialState,{     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,TVShowsActivityTests,showArrowWhenSelectingListItem,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,TVShowsActivityTests,showHamburgerWhenSelectingListItemAndReturn,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     androidx.test.espresso.Espresso.pressBack();     org.junit.Assert.assertFalse(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,TVShowsActivityTests,restoreArrowOnConfigurationChange,{     org.xbmc.kore.testhelpers.EspressoTestUtils.clickRecyclerViewItem(0, R.id.list);     org.xbmc.kore.testhelpers.EspressoTestUtils.rotateDevice(getActivity());     org.junit.Assert.assertTrue(getActivity().getDrawerIndicatorIsArrow()); }
https://github.com/xbmc/Kore.git,ApplicationTest,setMuteTrueTest,{     applicationHandler.setMuted(false, false);     sendSetMute(true);     org.junit.Assert.assertTrue(org.xbmc.kore.utils.RoboThreadRunner.run(10)); }
https://github.com/xbmc/Kore.git,ApplicationTest,setMuteFalseTest,{     applicationHandler.setMuted(true, false);     sendSetMute(false);     org.junit.Assert.assertTrue(org.xbmc.kore.utils.RoboThreadRunner.run(10)); }
https://github.com/xbmc/Kore.git,AlbumsTest,queryAlbumTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Albums.buildAlbumUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId(), org.xbmc.kore.provider.mediaprovider.TestValues.Album.albumId);     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.Album.PROJECTION, null, null, null);     junit.framework.Assert.assertNotNull(cursor);     junit.framework.Assert.assertEquals("cursor size ", 1, cursor.getCount());     org.junit.Assert.assertTrue(cursor.moveToFirst());     org.xbmc.kore.provider.mediaprovider.TestValues.Album.test(cursor); }
https://github.com/xbmc/Kore.git,AlbumsTest,queryAlbumsForArtistTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.AlbumArtists.buildAlbumsForArtistListUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId(), org.xbmc.kore.provider.mediaprovider.TestValues.Artist.artistId);     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.Album.PROJECTION, null, null, null);     junit.framework.Assert.assertNotNull(cursor);     junit.framework.Assert.assertEquals("cursor size ", 1, cursor.getCount());     org.junit.Assert.assertTrue(cursor.moveToFirst());     org.xbmc.kore.provider.mediaprovider.TestValues.Album.test(cursor); }
https://github.com/xbmc/Kore.git,AlbumsTest,queryAlbumWithoutArtist,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Albums.buildAlbumUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId(), org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithoutArtist.albumId);     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithoutArtist.PROJECTION, null, null, null);     junit.framework.Assert.assertNotNull(cursor);     junit.framework.Assert.assertEquals("cursor size ", 1, cursor.getCount());     org.junit.Assert.assertTrue(cursor.moveToFirst());     org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithoutArtist.test(cursor); }
https://github.com/xbmc/Kore.git,AlbumsTest,queryAlbumWithMultipleArtists,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Albums.buildAlbumUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId(), org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithMultipleArtists.albumId);     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithMultipleArtists.PROJECTION, null, null, null);     junit.framework.Assert.assertNotNull(cursor);     junit.framework.Assert.assertEquals("cursor size ", 1, cursor.getCount());     org.junit.Assert.assertTrue(cursor.moveToFirst());     org.xbmc.kore.provider.mediaprovider.TestValues.AlbumWithMultipleArtists.test(cursor); }
https://github.com/xbmc/Kore.git,SongsTest,queryAllSongsSongWithAlbumAndArtistTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Songs.buildSongsListUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId());     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.ArtistSong.PROJECTION, null, null, null);     org.junit.Assert.assertTrue(org.xbmc.kore.testutils.CursorUtils.moveCursorToFirstOccurrence(cursor, cursor.getColumnIndex(org.xbmc.kore.provider.MediaContract.Songs.SONGID), org.xbmc.kore.provider.mediaprovider.TestValues.SongWithAlbumAndArtist.songId));     org.xbmc.kore.provider.mediaprovider.TestValues.SongWithAlbumAndArtist.test(cursor); }
https://github.com/xbmc/Kore.git,SongsTest,queryAllSongsSongWithArtistWithoutAlbumTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Songs.buildSongsListUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId());     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.ArtistSong.PROJECTION, null, null, null);     org.junit.Assert.assertTrue(org.xbmc.kore.testutils.CursorUtils.moveCursorToFirstOccurrence(cursor, cursor.getColumnIndex(org.xbmc.kore.provider.MediaContract.Songs.SONGID), org.xbmc.kore.provider.mediaprovider.TestValues.SongWithArtistWithoutAlbum.songId));     org.xbmc.kore.provider.mediaprovider.TestValues.SongWithArtistWithoutAlbum.test(cursor); }
https://github.com/xbmc/Kore.git,SongsTest,queryAllSongsSongWithAlbumWithoutArtistTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Songs.buildSongsListUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId());     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.ArtistSong.PROJECTION, null, null, null);     org.junit.Assert.assertTrue(org.xbmc.kore.testutils.CursorUtils.moveCursorToFirstOccurrence(cursor, cursor.getColumnIndex(org.xbmc.kore.provider.MediaContract.Songs.SONGID), org.xbmc.kore.provider.mediaprovider.TestValues.SongWithAlbumWithoutArtist.songId));     org.xbmc.kore.provider.mediaprovider.TestValues.SongWithAlbumWithoutArtist.test(cursor); }
https://github.com/xbmc/Kore.git,SongsTest,queryAllSongsSongWithMultipleArtistsTest,{     android.net.Uri uri = org.xbmc.kore.provider.MediaContract.Songs.buildSongsListUri(org.xbmc.kore.provider.mediaprovider.AbstractTestClass.hostInfo.getId());     android.database.Cursor cursor = client.query(uri, org.xbmc.kore.provider.mediaprovider.TestValues.ArtistSong.PROJECTION, null, null, null);     org.junit.Assert.assertTrue(org.xbmc.kore.testutils.CursorUtils.moveCursorToFirstOccurrence(cursor, cursor.getColumnIndex(org.xbmc.kore.provider.MediaContract.Songs.SONGID), org.xbmc.kore.provider.mediaprovider.TestValues.SongWithMultipleArtists.songId));     org.xbmc.kore.provider.mediaprovider.TestValues.SongWithMultipleArtists.test(cursor); }
https://github.com/xbmc/Kore.git,PluginUrlUtilsTest,isHostArte,{     org.junit.Assert.assertTrue(org.xbmc.kore.utils.PluginUrlUtils.isHostArte("www.arte.tv")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testFieldName,{     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<>("x", "y").fieldName(), org.hamcrest.Matchers.is("x")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVAllDay1,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20180109"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVAllDay2,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109,20180110");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20180109"), org.dmfs.rfc5545.DateTime.parse("20180110"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVFloating1,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109T140000");     values.putNull("y");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20180109T140000"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVFloating2,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109T140000,20180110T140000");     values.putNull("y");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20180109T140000"), org.dmfs.rfc5545.DateTime.parse("20180110T140000"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVAbsolute1,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109T140000Z");     values.put("y", "Europe/Berlin");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testGetFromCVAbsolute2,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     values.put("x", "20180109T140000Z,20180110T140000Z");     values.put("y", "Europe/Berlin");     org.junit.Assert.assertThat(adapter.getFrom(values), iteratesTo(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180110T150000"))); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInNull,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, null);     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.nullValue()); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInEmpty,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, org.dmfs.iterables.EmptyIterable.instance());     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.nullValue()); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInSingleAllDay,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInSingleFloating,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T150000")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInSingleAbsolute,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T140000Z")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInDoubleAllDay,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109"), org.dmfs.rfc5545.DateTime.parse("20180110")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109,20180110")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInDoubleFloating,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109T150000"), org.dmfs.rfc5545.DateTime.parse("20180110T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T150000,20180110T150000")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInDoubleAbsolute,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180110T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T140000Z,20180110T140000Z")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInMultiAllDay,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109"), org.dmfs.rfc5545.DateTime.parse("20180110"), org.dmfs.rfc5545.DateTime.parse("20180111")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109,20180110,20180111")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInMultiFloating,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180109T150000"), org.dmfs.rfc5545.DateTime.parse("20180110T150000"), org.dmfs.rfc5545.DateTime.parse("20180111T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T150000,20180110T150000,20180111T150000")); }
https://github.com/dmfs/opentasks.git,DateTimeIterableFieldAdapterTest,testSetInMultiAbsolute,{     android.content.ContentValues values = new android.content.ContentValues();     org.dmfs.provider.tasks.model.adapters.FieldAdapter<java.lang.Iterable<org.dmfs.rfc5545.DateTime>, ?> adapter = new org.dmfs.provider.tasks.model.adapters.DateTimeIterableFieldAdapter<org.dmfs.provider.tasks.model.TaskAdapter>("x", "y");     adapter.setIn(values, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180109T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180110T150000"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20180111T150000")));     org.junit.Assert.assertThat(values.getAsString("x"), org.hamcrest.Matchers.is("20180109T140000Z,20180110T140000Z,20180111T140000Z")); }
https://github.com/dmfs/opentasks.git,DatedTest,testAbsent,{     android.content.ContentValues instanceData = new org.dmfs.provider.tasks.processors.tasks.instancedata.Dated(absent(), "ts", "sorting", android.content.ContentValues::new).value();     // this shouldn't really add any values and go by the "defaults"     org.junit.Assert.assertThat(instanceData.size(), org.hamcrest.Matchers.is(0)); }
https://github.com/dmfs/opentasks.git,TaskRelatedTest,testValue,{     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.processors.tasks.instancedata.TaskRelated(123, android.content.ContentValues::new), hasValue(new org.dmfs.provider.tasks.utils.ContentValuesWithLong(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, 123))); }
https://github.com/dmfs/opentasks.git,TaskInstanceIterableTest,testAbsolute,{     org.dmfs.provider.tasks.model.TaskAdapter taskAdapter = new org.dmfs.provider.tasks.model.ContentValuesTaskAdapter(new android.content.ContentValues());     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.DTSTART, org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RRULE, new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=10"));     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.TaskInstanceIterable(taskAdapter), iteratesTo(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121314"))); }
https://github.com/dmfs/opentasks.git,TaskInstanceIterableTest,testAllDay,{     org.dmfs.provider.tasks.model.TaskAdapter taskAdapter = new org.dmfs.provider.tasks.model.ContentValuesTaskAdapter(new android.content.ContentValues());     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.DTSTART, org.dmfs.rfc5545.DateTime.parse("20170606"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RRULE, new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=10"));     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.TaskInstanceIterable(taskAdapter), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20170606"), org.dmfs.rfc5545.DateTime.parse("20170608"), org.dmfs.rfc5545.DateTime.parse("20170610"), org.dmfs.rfc5545.DateTime.parse("20170612"), org.dmfs.rfc5545.DateTime.parse("20170614"), org.dmfs.rfc5545.DateTime.parse("20170616"), org.dmfs.rfc5545.DateTime.parse("20170618"), org.dmfs.rfc5545.DateTime.parse("20170620"), org.dmfs.rfc5545.DateTime.parse("20170622"), org.dmfs.rfc5545.DateTime.parse("20170624"))); }
https://github.com/dmfs/opentasks.git,TaskInstanceIterableTest,testFloating,{     org.dmfs.provider.tasks.model.TaskAdapter taskAdapter = new org.dmfs.provider.tasks.model.ContentValuesTaskAdapter(new android.content.ContentValues());     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.DTSTART, org.dmfs.rfc5545.DateTime.parse("20170606T121314"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RRULE, new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=10"));     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.TaskInstanceIterable(taskAdapter), iteratesTo(org.dmfs.rfc5545.DateTime.parse("20170606T121314"), org.dmfs.rfc5545.DateTime.parse("20170608T121314"), org.dmfs.rfc5545.DateTime.parse("20170610T121314"), org.dmfs.rfc5545.DateTime.parse("20170612T121314"), org.dmfs.rfc5545.DateTime.parse("20170614T121314"), org.dmfs.rfc5545.DateTime.parse("20170616T121314"), org.dmfs.rfc5545.DateTime.parse("20170618T121314"), org.dmfs.rfc5545.DateTime.parse("20170620T121314"), org.dmfs.rfc5545.DateTime.parse("20170622T121314"), org.dmfs.rfc5545.DateTime.parse("20170624T121314"))); }
https://github.com/dmfs/opentasks.git,TaskInstanceIterableTest,testRDate,{     org.dmfs.provider.tasks.model.TaskAdapter taskAdapter = new org.dmfs.provider.tasks.model.ContentValuesTaskAdapter(new android.content.ContentValues());     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.DTSTART, org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RDATE, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121314")));     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.TaskInstanceIterable(taskAdapter), iteratesTo(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121314"))); }
https://github.com/dmfs/opentasks.git,TaskInstanceIterableTest,testRDateAndRRule,{     org.dmfs.provider.tasks.model.TaskAdapter taskAdapter = new org.dmfs.provider.tasks.model.ContentValuesTaskAdapter(new android.content.ContentValues());     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.DTSTART, org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RRULE, new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=10"));     taskAdapter.set(org.dmfs.provider.tasks.model.TaskAdapter.RDATE, new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121313")));     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.TaskInstanceIterable(taskAdapter), iteratesTo(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170606T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170608T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170610T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170612T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170614T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170616T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170618T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170620T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170622T121314"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121313"), org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20170624T121314"))); }
https://github.com/dmfs/opentasks.git,ZippedTest,testPresent,{     java.lang.Object dummyPresentValue = new java.lang.Object();     java.lang.Object dummySingleValue = new java.lang.Object();     java.lang.Object dummyResult = new java.lang.Object();     org.dmfs.jems.function.BiFunction<java.lang.Object, java.lang.Object, java.lang.Object> mockFunction = failingMock(org.dmfs.jems.function.BiFunction.class);     Mockito.doReturn(dummyResult).when(mockFunction).value(dummyPresentValue, dummySingleValue);     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.Zipped<>(new org.dmfs.jems.optional.elementary.Present<>(dummyPresentValue), new org.dmfs.jems.single.elementary.ValueSingle<>(dummySingleValue), mockFunction), hasValue(org.hamcrest.Matchers.sameInstance(dummyResult))); }
https://github.com/dmfs/opentasks.git,ZippedTest,testAbsent,{     java.lang.Object dummyObject = new java.lang.Object();     org.junit.Assert.assertThat(new org.dmfs.provider.tasks.utils.Zipped<>(absent(), new org.dmfs.jems.single.elementary.ValueSingle<>(dummyObject), dummy(org.dmfs.jems.function.BiFunction.class)), hasValue(org.hamcrest.Matchers.sameInstance(dummyObject))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRule,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))));     queue.flush();     org.junit.Assert.assertThat(// update the first non-closed instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect three tasks:     - the original master with updated RRULE, DTSTART and DUE     - a deleted instance     - a detached task      */     // the original master     // there is one instance referring to the master (the old second instance, now first)     // the detached task instance:     // the deleted task (doesn't have an instance)     // the former 2nd instance (now first)     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day), due.addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=4"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1)))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRuleCompleteAll,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(// complete the first non-closed instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))));     queue.flush();     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);     org.junit.Assert.assertThat(// update the second instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect five tasks:     - the original master with updated RRULE, DTSTART and DUE, deleted     - a completed and deleted overrides for the first and second instance     - a detached first and second instance      */     // the original master     // there is no instance referring to the master because it has been fully completed (and deleted)     // the first detached task instance:     // the second detached task instance:     // two instances total, both completed     // five tasks in total     // three deleted tasks in total     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Assert<>(task, // points to former second instance before being deleted     new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day), due.addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "1"))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(new org.dmfs.rfc5545.Duration(1, 0, 3600)), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, second.getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1))))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRuleRDateCompleteFirstTwo,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(// update the first non-closed instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180103T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))));     queue.flush();     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);     org.junit.Assert.assertThat(// update the second instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect five tasks:     - the original master with updated RRULE, RDATES, DTSTART and DUE, deleted     - completed and deleted overrides for the first and second instance     - a detached first and second instance      */     // the first detached task instance:     // the original master has been updated     // there is one instance referring to the master     // the second detached task instance:     // two completed instances, neither of them referring to the master     // one incomplete instance , the first instance of the new master     // five tasks in total (two deleted overrides, two detached ones and the new master)     // two deleted tasks in total (the old overrides)     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180103T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180103T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180103T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, // points to former third instance before being deleted     new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start.addDuration(day).addDuration(day), due.addDuration(day).addDuration(day)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, java.lang.String.valueOf(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp())))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_NEEDS_ACTION)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1))))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRuleRDateCompleteWithExdates,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(// update the first non-closed instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180104T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"))))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))));     queue.flush();     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);     org.junit.Assert.assertThat(// update the second instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect five tasks:     - the original master deleted     - completed and deleted overrides for the first and second instance     - detached first and second instances      */     // the first detached task instance:     // the original master has been deleted     // there is no instance referring to the master     // the second detached task instance:     // two completed instances, neither of them referring to the master     // five tasks in total (two deleted overrides, two detached ones and the old master)     // three deleted tasks in total (the old overrides and the old master)     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180106T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180106T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180106T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180107T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1))))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRuleRDateCompleteOnlyRRuleInstances,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(/* update the first non-closed instance     new BulkUpdate<>(instancesTable, new StatusData<>(Tasks.STATUS_COMPLETED),     new AllOf<>(new ReferringTo<>(Instances.TASK_ID, task),     new EqArg<>(Instances.DISTANCE_FROM_CURRENT, 0)))      */     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180104T123456Z")))))));     queue.flush();     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);     org.junit.Assert.assertThat(// update the second instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect five tasks:     - the original master deleted     - completed and deleted overrides for the first and second instance     - detached first and second instances      */     // the first detached task instance:     // the original master has been updated     // the second detached task instance:     /* new Counted<>(1, new BulkAssert<>(syncedInstances,     new Composite<>(     new InstanceTestData(DateTime.parse("20180106T123456Z"), DateTime.parse("20180106T133456Z"), absent(), -1),     new CharSequenceRowData<>(Tasks.STATUS, String.valueOf(Tasks.STATUS_COMPLETED))),     new AllOf<>(     new EqArg<>(Instances.INSTANCE_START, DateTime.parse("20180106T123456Z").getTimestamp()),     new Not<>(new ReferringTo<>(Instances.TASK_ID, task))))),      */     // one completed instance, not referring to the master     // three tasks in total (one deleted override, one detached one and the master)     // three deleted tasks in total (the old overrides and the old master)     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T133456Z"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180105T123456Z").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(org.dmfs.rfc5545.DateTime.parse("20180106T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180106T133456Z")), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;INTERVAL=2;COUNT=1"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "0"), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1))))); }
https://github.com/dmfs/opentasks.git,TaskProviderDetachInstancesTest,testRRuleRDateCompleteWithExdatesAllDay,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(// update the first non-closed instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;INTERVAL=2;COUNT=2", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180105"), org.dmfs.rfc5545.DateTime.parse("20180107"))), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("20180104"), org.dmfs.rfc5545.DateTime.parse("20180105"))))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))));     queue.flush();     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.tables.Synced<org.dmfs.tasks.contract.TaskContract.Instances> syncedInstances = new org.dmfs.android.contentpal.tables.Synced<>(mTestAccount, instancesTable);     org.junit.Assert.assertThat(// update the second instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 0)))), /* We expect five tasks:     - the original master deleted     - completed and deleted overrides for the first and second instance     - detached first and second instances      */     // the first detached task instance:     // the original master has been deleted     // there is no instance referring to the master     // the second detached task instance:     // two completed instances, neither of them referring to the master     // five tasks in total (two deleted overrides, two detached ones and the old master)     // three deleted tasks in total (the old overrides and the old master)     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180106"), org.dmfs.rfc5545.DateTime.parse("20180107"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180106").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(org.dmfs.rfc5545.DateTime.parse("20180107"), org.dmfs.rfc5545.DateTime.parse("20180108"), absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, org.dmfs.rfc5545.DateTime.parse("20180107").getTimestamp()), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(syncedInstances, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, -1), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(5, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.AnyOf<>())), new org.dmfs.android.contentpal.operations.Counted<>(3, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.opentaskspal.tasks.TitleData("Test-Task"), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, 1))))); }
https://github.com/dmfs/opentasks.git,TaskProviderInstancesTest,testInsertSingleInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Instances> instance = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority));     org.junit.Assert.assertThat(// create a local list     // insert a new task straight into the instances table     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(instance, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1")))), // the task list contains exactly one task with the title "task1"     // the instances table contains one instance     // the instances table contains the given instance     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority))), new org.dmfs.android.contentpal.operations.Assert<>(instance, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderInstancesTest,testUpdateSingleInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.junit.Assert.assertThat(// create a local list     // insert a new task straight into the instances table     // update the instance     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "Updated"), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))), // the task list contains exactly one task with the title "Updated"     // the instances table contains one instance     // the instances table contains the given instance     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "Updated"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "Updated")), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))); }
https://github.com/dmfs/opentasks.git,TaskProviderInstancesTest,testCompleteSingleInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.junit.Assert.assertThat(// create a local list     // insert a new task straight into the instances table     // update the instance status     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), (transactionContext, builder) -> builder.withValue(Tasks.STATUS, Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))), // the task list contains exactly one task with the title "Updated"     // the instances table contains one instance     // the instances table contains the given instance     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(-1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1")), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))); }
https://github.com/dmfs/opentasks.git,TaskProviderInstancesTest,testDeleteSingleInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.junit.Assert.assertThat(// create a local list     // insert a new task     // delete the instance     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task1"))), new org.dmfs.android.contentpal.operations.BulkDelete<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))), // the list does not contain a single task     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority)))); }
https://github.com/dmfs/opentasks.git,TaskProviderInstancesTest,testInsertSingleInstanceAddAnother,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Instances> instance = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority));     org.dmfs.rfc5545.DateTime dateTimeOriginal = org.dmfs.rfc5545.DateTime.parse("20180110T224500Z");     // override is one day later     org.dmfs.rfc5545.DateTime dateTimeOverride = org.dmfs.rfc5545.DateTime.parse("20180111T224500Z");     java.lang.String startOverride = java.lang.Long.toString(dateTimeOverride.getTimestamp());     org.junit.Assert.assertThat(// create a local list     // insert a new task into the tasks table (we insert a task to get a RowReference to the new row)     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Tasks>(new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList), new org.dmfs.opentaskspal.tasks.TimeData(dateTimeOriginal), new org.dmfs.opentaskspal.tasks.TitleData("task1"))), new org.dmfs.android.contentpal.operations.Put<>(instance, // insert an override instance     new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.DTSTART, "1234"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.IS_ALLDAY, "0"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_TIME, startOverride), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task override")))), // the task list contains exactly two tasks     // check that the original task has RDATES now, one for the original start and one for the new override     // and check there is a task for the override     // TODO: enable tests below once recurrence has been implemented     // the instances table contains two instances as well     // new Counted<>(2, new BulkAssert<>(new InstanceTable(mAuthority))),     // one instance is related to the task     // new AssertRelated<>(new InstanceTable(mAuthority), Instances.TASK_ID, task,     // new Composite<>(     // new InstanceTestData(new Present<>(dateTimeOriginal), new Absent<>(), new Present<>(dateTimeOriginal), 0),     // new CharSequenceRowData<>(Tasks.TITLE, "task1"))),     // the other instance is for the override     // new Assert<>(instance, new Composite<>(     // new InstanceTestData(new Present<>(new DateTime(1234)), new Absent<>(), new Present<>(dateTimeOverride), 0),     // new CharSequenceRowData<>(Tasks.TITLE, "task override")))     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Counted<>(2, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Tasks>(new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList), new org.dmfs.opentaskspal.tasks.TimeData(dateTimeOriginal), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20180110T224500Z,20180111T224500Z"), new org.dmfs.opentaskspal.tasks.TitleData("task1"))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Tasks>(new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskList), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_TIME, startOverride), new org.dmfs.opentaskspal.tasks.TimeData(new org.dmfs.rfc5545.DateTime(1234)), new org.dmfs.opentaskspal.tasks.TitleData("task override"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRule,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWithFloatingMismatch,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;UNTIL=20180106", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;UNTIL=20180106"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testAllDayRRule,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration days = new org.dmfs.rfc5545.Duration(1, 2, 0);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104");     org.dmfs.rfc5545.DateTime due = start.addDuration(days);     org.dmfs.rfc5545.DateTime localStart = start;     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due;     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testAllDayRRuleFloatingMismatch,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration days = new org.dmfs.rfc5545.Duration(1, 2, 0);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104");     org.dmfs.rfc5545.DateTime due = start.addDuration(days);     org.dmfs.rfc5545.DateTime localStart = start;     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.dmfs.rfc5545.DateTime localDue = due;     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;UNTIL=20180106T120000Z", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;UNTIL=20180106T120000Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleNoDtStart,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime due = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localDue.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.DueData<>(due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(absent(), new Present<>(second), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(absent(), new Present<>(third), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(absent(), new Present<>(fourth), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(absent(), new Present<>(fifth), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.DueData<>(due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(Absent.absent(), new org.dmfs.jems.optional.elementary.Present<>(localDue), new org.dmfs.jems.optional.elementary.Present<>(due), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, due.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleNoDue,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(new Present<>(second), absent(), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(new Present<>(third), absent(), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(new Present<>(fourth), absent(), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(new Present<>(fifth), absent(), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(new org.dmfs.jems.optional.elementary.Present<>(localStart), Absent.absent(), new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleRemoveInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// remove the third instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.BulkDelete<>(instancesTable, new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())))), // 1st instance:     // 2nd instance:     // 4th instance (now 3rd):     // 5th instance (now 4th):     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(4, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fourth, fourth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fourth), 2), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fifth, fifth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fifth), 3), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWithOverride,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskOverride = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// the override moves the instance by an hour     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.Put<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(third.addDuration(hour), third.addDuration(hour).addDuration(hour)), new org.dmfs.opentaskspal.tasks.TitleData("override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, third)))), // new Counted<>(1, new AssertRelated<>(instancesTable, Instances.TASK_ID, taskOverride)),     // new Counted<>(4, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3th instance (the overridden one):     new AssertRelated<>(instancesTable, Instances.TASK_ID, taskOverride,     new InstanceTestData(third.addDuration(hour), third.addDuration(hour).addDuration(hour), new Present<>(third),     2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contentpal.operations.Assert<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(third.addDuration(hour), third.addDuration(hour).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, third))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, taskOverride)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWith2ndOverrideAndCompleted1st,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskOverride = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// the override moves the instance by an hour     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.Put<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.opentaskspal.tasks.TitleData("override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), // 1st (completed) instance:     // 2nd instance (now the current one):     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Assert<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp()))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, taskOverride, new org.dmfs.opentaskstestpal.InstanceTestData(second.addDuration(hour), second.addDuration(hour).addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0))))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWith2ndOverrideAndDeleted1st,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskOverride = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// the override moves the instance by an hour     // delete 1st instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.Put<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.opentaskspal.tasks.TitleData("override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.BulkDelete<>(instancesTable, new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, "0")))), // no instances point to the original task     // 2nd instance (now the current one):     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, start.toString()), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_DEFAULT))), new org.dmfs.android.contentpal.operations.Assert<>(taskOverride, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(second.addDuration(hour), second.addDuration(hour).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, second))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, taskOverride, new org.dmfs.opentaskstestpal.InstanceTestData(second.addDuration(hour), second.addDuration(hour).addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0))))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWithOverride2,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.opentaskspal.tables.TasksTable(mAuthority);     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, tasksTable));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// the override just changes the title     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("original"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<org.dmfs.tasks.contract.TaskContract.Instances>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override")), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())))), // 1st instance:     // 2nd instance:     // 3th instance (the overridden one). We don't have a row reference to this row, so we select it by the ORIGINAL_INSTANCE-ID     // 4th instance:     // 5th instance:     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "original"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(tasksTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, // note the task table contains the original time zone, not the default one     new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(third.shiftTimeZone(start.getTimeZone()), third.shiftTimeZone(start.getTimeZone()).addDuration(hour)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "override"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, third))), new org.dmfs.android.contentpal.operations.Counted<>(4, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(third, third.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(third), 2), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fourth, fourth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fourth), 3), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(fifth, fifth.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(fifth), 4), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRRuleWithExDates,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX)), new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third, fifth))))), // new Counted<>(3, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 4th instance (now 3rd):     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=DAILY;COUNT=5"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z,20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRDate,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth))))), // new Counted<>(5, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 4),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRDateAddExDate,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// the third instance becomed an exdate now     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth)))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(third))))), // new Counted<>(4, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     /* ,     // 2nd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(second, second.addDuration(hour), new Present<>(second), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())),     // 3rd instance:     //                new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     //                        new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 2),     //                        new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20180106T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRDateFirstComplete,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> override = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// first insert new task,     // next, insert override     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth)))), new org.dmfs.android.contentpal.operations.Put<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)))), // new Counted<>(4, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance:     // 2nd instance:     /* ,     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRDateFirstCompleteFirstInserted,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> override = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// first insert override     // then insert task     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.jems.iterable.elementary.Seq<>(start, second, third, fourth, fifth))))), // new Counted<>(4, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance, overridden and completed     // 2nd instance:     /* ,     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.SyncIdData("xyz"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, ((("20180104T123456Z," + "20180105T123456Z,") + "20180106T123456Z,") + "20180107T123456Z,") + "20180108T123456Z"))), new org.dmfs.android.contentpal.operations.Assert<>(override, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("xyz", start), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, override, new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, new org.dmfs.jems.optional.elementary.Present<>(start), -1), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp())))); }
https://github.com/dmfs/opentasks.git,TaskProviderRecurrenceTest,testRDateFirstCompleteViaInstances,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.opentaskspal.tables.TasksTable(mAuthority);     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, tasksTable));     org.dmfs.rfc5545.Duration hour = /* 1 hour */     new org.dmfs.rfc5545.Duration(1, 0, 3600);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.parse("20180104T123456Z");     org.dmfs.rfc5545.DateTime due = start.addDuration(hour);     org.dmfs.rfc5545.Duration day = new org.dmfs.rfc5545.Duration(1, 1, 0);     org.dmfs.rfc5545.DateTime localStart = start.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime localDue = due.shiftTimeZone(java.util.TimeZone.getDefault());     org.dmfs.rfc5545.DateTime second = localStart.addDuration(day);     org.dmfs.rfc5545.DateTime third = second.addDuration(day);     org.dmfs.rfc5545.DateTime fourth = third.addDuration(day);     org.dmfs.rfc5545.DateTime fifth = fourth.addDuration(day);     org.junit.Assert.assertThat(// first insert the task     // then complete the first instance     new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.RDatesTaskData(start, second, third, fourth, fifth))), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, start.getTimestamp())))), // we've already closed the first instance which has been detached, the master now points to the second instance     // there must be one task which is not equal to the original task, it's the detached instance     // and one instance which doesn't refer to the original task     // but 4 instances of that original task     // new Counted<>(4, new AssertRelated<>(instancesTable, Instances.TASK_ID, task)),     // 1st instance, detached and completed     // 2nd instance:     /* ,     // 3rd instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(third, third.addDuration(hour), new Present<>(third), 1),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, third.getTimestamp())),     // 4th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fourth, fourth.addDuration(hour), new Present<>(fourth), 2),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fourth.getTimestamp())),     // 5th instance:     new AssertRelated<>(instancesTable, Instances.TASK_ID, task,     new InstanceTestData(fifth, fifth.addDuration(hour), new Present<>(fifth), 3),     new EqArg<>(Instances.INSTANCE_ORIGINAL_TIME, fifth.getTimestamp()))      */     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180105T133456Z")), // "20180104T123456Z"  // the detached instance     new org.dmfs.opentaskspal.tasks.RDatesTaskData(org.dmfs.rfc5545.DateTime.parse("20180105T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180106T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180107T123456Z"), org.dmfs.rfc5545.DateTime.parse("20180108T123456Z"))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(tasksTable, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, null), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_SYNC_ID, null), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_TIME, null)), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks._ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(instancesTable, new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(instancesTable, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskstestpal.InstanceTestData(localStart, localDue, Absent.absent(), -1)), // the detached instance has no INSTANCE_ORIGINAL_TIME     new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.IsNull<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME), new org.dmfs.android.contentpal.predicates.Not<>(new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.opentaskstestpal.InstanceTestData(second, second.addDuration(hour), new org.dmfs.jems.optional.elementary.Present<>(second), 0), new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, second.getTimestamp()))))); }
https://github.com/dmfs/opentasks.git,TaskProviderRelatingTest,testRelateTask,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority))));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._UID, "childUID"))), new org.dmfs.android.contentpal.operations.Insert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.TASK_ID, taskChild), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_UID, "parentUID"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)))), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._UID, "parentUID")))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._UID, "childUID"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._UID, "parentUID"), new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_UID, "parentUID"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskParent)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderReparentingTest,testRelateTask,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.opentaskspal.tasks.TitleData("parent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent)))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskParent)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderReparentingTest,testAdoptTask,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.opentaskspal.tasks.TitleData("child")), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.opentaskspal.tasks.TitleData("parent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskParent)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderReparentingTest,testReparentTask,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskNewParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.opentaskspal.tasks.TitleData("parent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Put<>(taskNewParent, new org.dmfs.opentaskspal.tasks.TitleData("newParent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskNewParent))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskNewParent))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Assert<>(taskNewParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("newParent"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskNewParent)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskNewParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderReparentingTest,testReparentTaskWithSibling,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskNewParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskSibling = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.opentaskspal.tasks.TitleData("parent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Put<>(taskNewParent, new org.dmfs.opentaskspal.tasks.TitleData("newParent")), new org.dmfs.android.contentpal.operations.Put<>(taskSibling, new org.dmfs.opentaskspal.tasks.TitleData("sibling")), new org.dmfs.android.contentpal.operations.Insert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.TASK_ID, taskSibling), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskChild), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_SIBLING)))), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskNewParent))), // yikes the sibling became an orphan because it has no relation to its parent anymore.     // this should be fixed, see https://github.com/dmfs/opentasks/issues/932     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskNewParent))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Assert<>(taskNewParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("newParent"))), new org.dmfs.android.contentpal.operations.Assert<>(taskSibling, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("sibling"))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_TYPE, java.lang.String.valueOf(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELTYPE_PARENT)), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Property.Relation.RELATED_ID, taskNewParent)), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskSibling)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskNewParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderReparentingTest,testOrphanTask,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskChild = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> taskParent = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.jems.iterable.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskParent, new org.dmfs.opentaskspal.tasks.TitleData("parent")), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, taskParent))), new org.dmfs.android.contentpal.operations.Put<>(taskChild, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, null))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskChild, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("child"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.PARENT_ID, null))), new org.dmfs.android.contentpal.operations.Assert<>(taskParent, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("parent"))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskChild)))), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contentpal.operations.BulkAssert<>(new org.dmfs.opentaskspal.tables.PropertiesTable(mAuthority), new org.dmfs.android.contentpal.predicates.AllOf<>(new org.dmfs.android.contentpal.predicates.EqArg<>(org.dmfs.tasks.contract.TaskContract.Properties.MIMETYPE, org.dmfs.tasks.contract.TaskContract.Property.Relation.CONTENT_ITEM_TYPE), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Properties.TASK_ID, taskParent)))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testSingleInsert,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("task1"))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testSingleInsertUpdateInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("task1")), new org.dmfs.android.contentpal.operations.BulkUpdate<>(instancesTable, new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "task updated"), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task updated"), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testMultipleInserts,{     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListsTable = new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList1 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList2 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task1 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList1, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task2 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList1, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task3 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList2, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList1, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskList2, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Put<>(task1, new org.dmfs.opentaskspal.tasks.TitleData("task1")), new org.dmfs.android.contentpal.operations.Put<>(task2, new org.dmfs.opentaskspal.tasks.TitleData("task2")), new org.dmfs.android.contentpal.operations.Put<>(task3, new org.dmfs.opentaskspal.tasks.TitleData("task3"))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList1, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskList2, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Assert<>(task1, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contentpal.operations.Assert<>(task2, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task2"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contentpal.operations.Assert<>(task3, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task3"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task1, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task2, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task3, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testMultipleInsertsAndUpdates,{     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListsTable = new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList1 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList2 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task1 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList1, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task2 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList1, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task3 = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList2, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.junit.Assert.assertThat(// update task 1 and 2     // update task 1 once more     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList1, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskList2, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Put<>(task1, new org.dmfs.opentaskspal.tasks.TitleData("task1a")), new org.dmfs.android.contentpal.operations.Put<>(task2, new org.dmfs.opentaskspal.tasks.TitleData("task2a")), new org.dmfs.android.contentpal.operations.Put<>(task3, new org.dmfs.opentaskspal.tasks.TitleData("task3a")), new org.dmfs.android.contentpal.operations.Put<>(task1, new org.dmfs.opentaskspal.tasks.TitleData("task1b")), new org.dmfs.android.contentpal.operations.Put<>(task2, new org.dmfs.opentaskspal.tasks.TitleData("task2b")), new org.dmfs.android.contentpal.operations.Put<>(task1, new org.dmfs.opentaskspal.tasks.TitleData("task1c"))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(taskList1, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Assert<>(taskList2, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Assert<>(task1, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1c"), new org.dmfs.opentaskspal.tasks.VersionData(2))), new org.dmfs.android.contentpal.operations.Assert<>(task2, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task2b"), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contentpal.operations.Assert<>(task3, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task3a"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task1, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task2, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task3, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDue,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithAlldayStartAndDue,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now().toAllDay();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 2, 0));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDueUpdateStatus,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.junit.Assert.assertThat(// update the status of the new task     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED))), // task has been updated once     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDueUpdateTwice,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.junit.Assert.assertThat(// update the status of the new task     // update the title of the new task     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.StatusData<>(org.dmfs.tasks.contract.TaskContract.Tasks.STATUS_COMPLETED)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("Task Title"))), // task has been updated twice     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.TitleData("Task Title"), new org.dmfs.opentaskspal.tasks.VersionData(2))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), -1), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDueMovedForward,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.dmfs.rfc5545.Duration duration = new org.dmfs.rfc5545.Duration(1, 2, 0);     org.dmfs.rfc5545.DateTime startNew = start.addDuration(duration);     org.dmfs.rfc5545.DateTime dueNew = due.addDuration(duration);     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, dueNew))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, dueNew), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(startNew.shiftTimeZone(java.util.TimeZone.getDefault()), dueNew.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDueMovedBackwards,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.dmfs.rfc5545.Duration duration = new org.dmfs.rfc5545.Duration(-1, 2, 0);     org.dmfs.rfc5545.DateTime startNew = start.addDuration(duration);     org.dmfs.rfc5545.DateTime dueNew = due.addDuration(duration);     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, dueNew))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, dueNew), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(startNew.shiftTimeZone(java.util.TimeZone.getDefault()), dueNew.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithStartAndDueAddedAfterwards,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("Test")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertWithStartAndDuration,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.Duration duration = org.dmfs.rfc5545.Duration.parse("PT1H");     long durationMillis = duration.toMillis();     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, duration))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, duration), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), start.shiftTimeZone(java.util.TimeZone.getDefault()).addDuration(duration), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertWithStartAndDurationChangeTimeZone,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.Duration duration = org.dmfs.rfc5545.Duration.parse("PT1H");     long durationMillis = duration.toMillis();     org.dmfs.rfc5545.DateTime startNew = start.shiftTimeZone(java.util.TimeZone.getTimeZone("America/New_York"));     org.junit.Assert.assertThat(// update the task with a the same start in a different time zone     new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<org.dmfs.tasks.contract.TaskContract.TaskLists>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, duration)), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, duration))), // note that, apart from the time zone, all values stay the same     ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(startNew, duration), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), start.shiftTimeZone(java.util.TimeZone.getDefault()).addDuration(duration), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "America/New_York"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testUpdateDue,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 0, 1));     queue.enqueue(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due))));     queue.flush();     org.dmfs.rfc5545.DateTime due2 = due.addDuration(new org.dmfs.rfc5545.Duration(1, 0, 2));     org.junit.Assert.assertThat(new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TimeData<>(start, due2))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TimeData<>(start, due2), new org.dmfs.opentaskspal.tasks.VersionData(1))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<org.dmfs.tasks.contract.TaskContract.Instances>(new org.dmfs.opentaskstestpal.InstanceTestData(start.shiftTimeZone(java.util.TimeZone.getDefault()), due2.shiftTimeZone(java.util.TimeZone.getDefault()), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInstanceDelete,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> taskTable = new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("task1"))));     queue.flush();     org.junit.Assert.assertThat(new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.Delete<>(task)), ContentMatcher.resultsIn(queue, new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority)))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testDeleteInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> taskTable = new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("task1"))));     queue.flush();     // check that removing the instance removes task and instance     org.junit.Assert.assertThat(new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.BulkDelete<>(instancesTable, new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)), new org.dmfs.android.contenttestpal.operations.AssertEmptyTable<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority)))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testExceptionalInstance_settingSyncId_shouldUpdateRegularId,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> taskTable = new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> exceptionTask = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(new org.dmfs.iterables.elementary.Seq<org.dmfs.android.contentpal.Operation<?>>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1"), new org.dmfs.opentaskspal.tasks.SyncIdData("syncId1")))));     queue.flush();     org.junit.Assert.assertThat(new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.Put<>(exceptionTask, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1exception"), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("syncId1", new org.dmfs.rfc5545.DateTime(0))))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.opentaskspal.tasks.TitleData("task1exception")))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testExceptionalInstance_settingRegularId_shouldUpdateSyncId,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> taskTable = new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> exceptionTask = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskTable);     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     queue.enqueue(new org.dmfs.iterables.elementary.Seq<org.dmfs.android.contentpal.Operation<?>>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1"), new org.dmfs.opentaskspal.tasks.SyncIdData("syncId1")))));     queue.flush();     org.dmfs.rfc5545.DateTime now = org.dmfs.rfc5545.DateTime.now();     org.junit.Assert.assertThat(new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.Put<>(exceptionTask, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1exception"), new org.dmfs.opentaskspal.tasks.OriginalInstanceData(task, now)))), ContentMatcher.resultsIn(queue, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("task1exception"), new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("syncId1", now))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testMoveTaskInstance,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListOld = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListNew = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskListOld, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     // create two lists and a single task in the first list     queue.enqueue(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskListOld, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskListNew, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.opentaskspal.tasks.TitleData("title"))));     queue.flush();     org.junit.Assert.assertThat(// update the sole task instance to the new list     new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld))), // assert the old list is empty     // assert the new list contains a single entry     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld)), new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.TasksTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew, new org.dmfs.opentaskspal.tasks.TitleData("title"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testMoveTaskInstanceAsSyncAdapter,{     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListsTable = new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.TaskListsTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Instances> instancesTable = new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority));     org.dmfs.android.contentpal.Table<org.dmfs.tasks.contract.TaskContract.Tasks> tasksTable = new org.dmfs.android.contentpal.tables.Synced<>(testAccount, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListOld = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskListNew = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(taskListsTable);     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskListOld, tasksTable));     org.dmfs.android.contentpal.OperationsQueue queue = new org.dmfs.android.contentpal.queues.BasicOperationsQueue(mClient);     // create two lists and a single task in the first list     queue.enqueue(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskListOld, new org.dmfs.opentaskspal.tasklists.NameData("list1")), new org.dmfs.android.contentpal.operations.Put<>(taskListNew, new org.dmfs.opentaskspal.tasklists.NameData("list2")), new org.dmfs.android.contentpal.operations.Put<>(task, // give it a sync id, so it counts as synced     new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.SyncIdData("syncid"), new org.dmfs.opentaskspal.tasks.TitleData("title")))));     queue.flush();     org.junit.Assert.assertThat(// update the sole task instance to the new list     new org.dmfs.iterables.SingletonIterable<>(new org.dmfs.android.contentpal.operations.BulkUpdate<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), new org.dmfs.android.contentpal.rowdata.Referring<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew), new org.dmfs.android.contentpal.predicates.ReferringTo<>(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld))), // assert the old list contains a deleted entry for the task     // assert the new list contains a single entry     ContentMatcher.resultsIn(queue, new org.dmfs.android.contentpal.operations.Counted<>(0, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(tasksTable, org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListOld, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("title"), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks._DELETED, "1")))), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(instancesTable, org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew)), new org.dmfs.android.contentpal.operations.Counted<>(1, new org.dmfs.android.contenttestpal.operations.AssertRelated<>(tasksTable, org.dmfs.tasks.contract.TaskContract.Tasks.LIST_ID, taskListNew, new org.dmfs.opentaskspal.tasks.TitleData("title"))))); }
https://github.com/dmfs/opentasks.git,TaskProviderTest,testInsertTaskWithoutStartAndDueButRRULE,{     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.TaskLists> taskList = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.LocalTaskListsTable(mAuthority));     org.dmfs.android.contentpal.RowSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> task = new org.dmfs.android.contentpal.rowsnapshots.VirtualRowSnapshot<>(new org.dmfs.opentaskspal.tables.TaskListScoped(taskList, new org.dmfs.opentaskspal.tables.TasksTable(mAuthority)));     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(new org.dmfs.rfc5545.Duration(1, 1, 0));     org.junit.Assert.assertThat(new org.dmfs.iterables.elementary.Seq<>(new org.dmfs.android.contentpal.operations.Put<>(taskList, new org.dmfs.android.contentpal.rowdata.EmptyRowData<>()), new org.dmfs.android.contentpal.operations.Put<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("test"), new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=DAILY;COUNT=5", RecurrenceRule.RfcMode.RFC2445_LAX))))), ContentMatcher.resultsIn(mClient, new org.dmfs.android.contentpal.operations.Assert<>(task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.opentaskspal.tasks.TitleData("test"), new org.dmfs.opentaskspal.tasks.VersionData(0))), new org.dmfs.android.contenttestpal.operations.AssertRelated<>(new org.dmfs.opentaskspal.tables.InstanceTable(mAuthority), org.dmfs.tasks.contract.TaskContract.Instances.TASK_ID, task, new org.dmfs.android.contentpal.rowdata.Composite<>(new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "test"), new org.dmfs.opentaskstestpal.InstanceTestData(Absent.absent(), Absent.absent(), Absent.absent(), 0), new org.dmfs.android.contentpal.rowdata.CharSequenceRowData<>(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, null))))); }
https://github.com/dmfs/opentasks.git,EffectiveTaskColorTest,test_whenTaskColorIsPresent_shouldReturnThat,{     org.dmfs.android.contentpal.RowDataSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> mockData = failingMock(org.dmfs.android.contentpal.RowDataSnapshot.class);     Mockito.doReturn(new org.dmfs.jems.optional.elementary.Present<>(new org.dmfs.android.bolts.color.elementary.ValueColor(123))).when(mockData).data(ArgumentMatchers.eq(org.dmfs.tasks.contract.TaskContract.Tasks.TASK_COLOR), ArgumentMatchers.any());     Mockito.doReturn(Absent.absent()).when(mockData).data(ArgumentMatchers.eq(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_COLOR), ArgumentMatchers.any());     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.readdata.EffectiveTaskColor(mockData).argb(), org.hamcrest.CoreMatchers.is(123)); }
https://github.com/dmfs/opentasks.git,EffectiveTaskColorTest,test_whenTaskColorIsAbsent_shouldReturnTaskListColor,{     org.dmfs.android.contentpal.RowDataSnapshot<org.dmfs.tasks.contract.TaskContract.Tasks> mockData = failingMock(org.dmfs.android.contentpal.RowDataSnapshot.class);     Mockito.doReturn(Absent.absent()).when(mockData).data(ArgumentMatchers.eq(org.dmfs.tasks.contract.TaskContract.Tasks.TASK_COLOR), ArgumentMatchers.any());     Mockito.doReturn(new org.dmfs.jems.optional.elementary.Present<>(new org.dmfs.android.bolts.color.elementary.ValueColor(567))).when(mockData).data(ArgumentMatchers.eq(org.dmfs.tasks.contract.TaskContract.Tasks.LIST_COLOR), ArgumentMatchers.any());     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.readdata.EffectiveTaskColor(mockData).argb(), org.hamcrest.CoreMatchers.is(567)); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testEmpty,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", EmptyIterable.instance()), builds(withValuesOnly(withNullValue("somefieldname")))); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testSingle,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"))), builds(withValuesOnly(containing("somefieldname", "20171212T113456Z")))); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testSingleFloating,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212T123456"))), builds(withValuesOnly(containing("somefieldname", "20171212T123456")))); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testSingleAllDay,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212"))), builds(withValuesOnly(containing("somefieldname", "20171212")))); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testMulti1,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"))), builds(withValuesOnly(containing("somefieldname", "20171212T113456Z,20171213T123456Z")))); }
https://github.com/dmfs/opentasks.git,DateTimeListDataTest,testMulti2,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.rowdata.DateTimeListData<>("somefieldname", new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"), org.dmfs.rfc5545.DateTime.parse("America/New_York", "20171214T123456"))), builds(withValuesOnly(containing("somefieldname", "20171212T113456Z,20171213T123456Z,20171214T173456Z")))); }
https://github.com/dmfs/opentasks.git,ColorDataTest,test,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasklists.ColorData(new org.dmfs.android.bolts.color.elementary.ValueColor(0x12345678)), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.TaskLists.LIST_COLOR, 0x12345678)))); }
https://github.com/dmfs/opentasks.git,NameDataTest,test_thatNameIsAdded,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasklists.NameData("test"), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.TaskLists.LIST_NAME, "test")))); }
https://github.com/dmfs/opentasks.git,OwnerDataTest,test,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasklists.OwnerData("test"), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.TaskLists.OWNER, "test")))); }
https://github.com/dmfs/opentasks.git,DueDataTest,test_whenNoTimeZoneNotAllDay_setsValuesAccordingly_andNullsOtherTimeRelatedValues,{     org.dmfs.rfc5545.DateTime due = org.dmfs.rfc5545.DateTime.now();     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.DueData<>(due), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"), containing(org.dmfs.tasks.contract.TaskContract.Tasks.IS_ALLDAY, 0), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DTSTART), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DURATION)))); }
https://github.com/dmfs/opentasks.git,DueDataTest,test_whenHasTimeZoneNotAllDay_setsValuesAccordingly_andNullsOtherTimeRelatedValues,{     org.dmfs.rfc5545.DateTime due = org.dmfs.rfc5545.DateTime.now().shiftTimeZone(java.util.TimeZone.getTimeZone("GMT+4"));     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.DueData<>(due), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "GMT+04:00"), containing(org.dmfs.tasks.contract.TaskContract.Tasks.IS_ALLDAY, 0), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DTSTART), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DURATION)))); }
https://github.com/dmfs/opentasks.git,DueDataTest,test_whenNoTimeZoneAndAllDay_setsValuesAccordingly_andNullsOtherTimeRelatedValues,{     org.dmfs.rfc5545.DateTime due = org.dmfs.rfc5545.DateTime.now().toAllDay();     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.DueData<>(due), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Tasks.TZ, "UTC"), containing(org.dmfs.tasks.contract.TaskContract.Tasks.IS_ALLDAY, 1), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DTSTART), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DURATION)))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testEmpty,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(EmptyIterable.instance()), builds(withValuesOnly(withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE)))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testSingle,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20171212T113456Z")))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testSingleFloating,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20171212T123456")))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testSingleAllDay,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20171212")))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testMulti1,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20171212T113456Z,20171213T123456Z")))); }
https://github.com/dmfs/opentasks.git,ExDatesTaskDataTest,testMulti2,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.ExDatesTaskData(new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"), org.dmfs.rfc5545.DateTime.parse("America/New_York", "20171214T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE, "20171212T113456Z,20171213T123456Z,20171214T173456Z")))); }
https://github.com/dmfs/opentasks.git,NoTimeDataTest,test_thatAllTimeRelatedValuesAreNulled,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.NoTimeData(), builds(withValuesOnly(withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DTSTART), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.TZ), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.IS_ALLDAY), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DUE), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.EXDATE)))); }
https://github.com/dmfs/opentasks.git,OriginalInstanceSyncIdDataTest,test_thatOriginalSyncIdIsAdded,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.OriginalInstanceSyncIdData("test", org.dmfs.rfc5545.DateTime.parse("20180103")), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_SYNC_ID, "test"), containing(org.dmfs.tasks.contract.TaskContract.Tasks.ORIGINAL_INSTANCE_TIME, org.dmfs.rfc5545.DateTime.parse("20180103").getTimestamp())))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testEmpty,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(EmptyIterable.instance()), builds(withValuesOnly(withNullValue(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE)))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testSingle,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20171212T113456Z")))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testSingleFloating,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20171212T123456")))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testSingleAllDay,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.iterables.SingletonIterable<>(org.dmfs.rfc5545.DateTime.parse("20171212"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20171212")))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testMulti1,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20171212T113456Z,20171213T123456Z")))); }
https://github.com/dmfs/opentasks.git,RDatesTaskDataTest,testMulti2,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RDatesTaskData(new org.dmfs.iterables.elementary.Seq<>(org.dmfs.rfc5545.DateTime.parse("Europe/Berlin", "20171212T123456"), org.dmfs.rfc5545.DateTime.parse("UTC", "20171213T123456"), org.dmfs.rfc5545.DateTime.parse("America/New_York", "20171214T123456"))), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RDATE, "20171212T113456Z,20171213T123456Z,20171214T173456Z")))); }
https://github.com/dmfs/opentasks.git,RRuleTaskDataTest,test,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.RRuleTaskData(new org.dmfs.rfc5545.recur.RecurrenceRule("FREQ=MONTHLY;BYMONTHDAY=12", RecurrenceRule.RfcMode.RFC2445_LAX)), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.RRULE, "FREQ=MONTHLY;BYMONTHDAY=12")))); }
https://github.com/dmfs/opentasks.git,SyncIdDataTest,test_thatSyncIdIsAdded,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.SyncIdData("test"), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks._SYNC_ID, "test")))); }
https://github.com/dmfs/opentasks.git,TitleDataTest,test_thatTitleIsAdded,{     org.junit.Assert.assertThat(new org.dmfs.opentaskspal.tasks.TitleData("test"), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Tasks.TITLE, "test")))); }
https://github.com/dmfs/opentasks.git,InstanceTestDataTest,testNoDate,{     org.junit.Assert.assertThat(new org.dmfs.opentaskstestpal.InstanceTestData(5), builds(withValuesOnly(withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START_SORTING), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE_SORTING), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME), containing(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 5), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DTSTART), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DUE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_TIME), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.EXDATE)))); }
https://github.com/dmfs/opentasks.git,InstanceTestDataTest,testWithDate,{     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(org.dmfs.rfc5545.Duration.parse("P1DT1H"));     org.junit.Assert.assertThat(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, absent(), 5), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START_SORTING, start.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE_SORTING, due.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DURATION, due.getTimestamp() - start.getTimestamp()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME), containing(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 5), containing(org.dmfs.tasks.contract.TaskContract.Instances.DTSTART, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.DUE, due.getTimestamp()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_TIME), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.EXDATE)))); }
https://github.com/dmfs/opentasks.git,InstanceTestDataTest,testWithDateAndOriginalTime,{     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime due = start.addDuration(org.dmfs.rfc5545.Duration.parse("P1DT1H"));     org.dmfs.rfc5545.DateTime original = start.addDuration(org.dmfs.rfc5545.Duration.parse("P2DT2H"));     org.junit.Assert.assertThat(new org.dmfs.opentaskstestpal.InstanceTestData(start, due, new org.dmfs.jems.optional.elementary.Present<>(original), 5), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START_SORTING, start.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE_SORTING, due.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DURATION, due.getTimestamp() - start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, original.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 5), containing(org.dmfs.tasks.contract.TaskContract.Instances.DTSTART, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_TIME, original.getTimestamp()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.EXDATE)))); }
https://github.com/dmfs/opentasks.git,InstanceTestDataTest,testWithStartDateAndOriginalTime,{     org.dmfs.rfc5545.DateTime start = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime original = start.addDuration(org.dmfs.rfc5545.Duration.parse("P2DT2H"));     org.junit.Assert.assertThat(new org.dmfs.opentaskstestpal.InstanceTestData(new org.dmfs.jems.optional.elementary.Present<>(start), absent(), new org.dmfs.jems.optional.elementary.Present<>(original), 5), builds(withValuesOnly(containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START_SORTING, start.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE_SORTING), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DURATION), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, original.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 5), containing(org.dmfs.tasks.contract.TaskContract.Instances.DTSTART, start.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_TIME, original.getTimestamp()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DUE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.EXDATE)))); }
https://github.com/dmfs/opentasks.git,InstanceTestDataTest,testWithDueDateAndOriginalTime,{     org.dmfs.rfc5545.DateTime due = org.dmfs.rfc5545.DateTime.now();     org.dmfs.rfc5545.DateTime original = due.addDuration(org.dmfs.rfc5545.Duration.parse("P2DT2H"));     org.junit.Assert.assertThat(new org.dmfs.opentaskstestpal.InstanceTestData(absent(), new org.dmfs.jems.optional.elementary.Present<>(due), new org.dmfs.jems.optional.elementary.Present<>(original), 5), builds(withValuesOnly(withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_START_SORTING), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DUE_SORTING, due.shiftTimeZone(java.util.TimeZone.getDefault()).getInstance()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_DURATION), containing(org.dmfs.tasks.contract.TaskContract.Instances.INSTANCE_ORIGINAL_TIME, original.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.DISTANCE_FROM_CURRENT, 5), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DTSTART), containing(org.dmfs.tasks.contract.TaskContract.Instances.DUE, due.getTimestamp()), containing(org.dmfs.tasks.contract.TaskContract.Instances.ORIGINAL_INSTANCE_TIME, original.getTimestamp()), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.DURATION), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RRULE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.RDATE), withNullValue(org.dmfs.tasks.contract.TaskContract.Instances.EXDATE)))); }
https://github.com/ValleZ/Paper-Wallet.git,AddressTest,publicKeyToAddress,{     org.junit.Assert.assertEquals("1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs", ru.valle.btc.Address.publicKeyToAddress(ru.valle.btc.BTCUtils.fromValidHex("0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352"))); }
https://github.com/tengel/AndroidPlanisphere.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().getTargetContext();     org.junit.Assert.assertEquals("org.tengel.planisphere", appContext.getPackageName()); }
https://github.com/tengel/AndroidPlanisphere.git,AstroTest,testPhase,{     double delta = 1.3135;     double r = 1.403;     double R = 0.9852;     double i = org.tengel.planisphere.Astro.calcPhase(delta, r, R);     org.junit.Assert.assertEquals(87, i, 0.1); }
https://github.com/termux/termux-app.git,ExampleInstrumentedTest,useAppContext,{     // Context of the app under test.     android.content.Context appContext = androidx.test.platform.app.InstrumentationRegistry.getInstrumentation().getTargetContext();     org.junit.Assert.assertEquals("com.termux.shared.test", appContext.getPackageName()); }
https://github.com/lordi/tickmate.git,DatabaseTest,tickmateShouldAppearInDescription,{     java.lang.String hello = tickmate.getResources().getString(R.string.about_description);     org.junit.Assert.assertThat(hello, org.hamcrest.CoreMatchers.containsString("Tickmate")); }
https://github.com/andreynovikov/trekarta.git,CoordinatesParserTest,testNumericLexer,{     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("39.095973 -94.573414");     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39.095973", 0, 9), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 11, 1), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94.573414", 12, 9));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/andreynovikov/trekarta.git,CoordinatesParserTest,testDegreesLexer,{     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("39.095973° -94.573414°");     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39.095973", 0, 10), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 12, 1), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94.573414", 13, 10));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/andreynovikov/trekarta.git,CoordinatesParserTest,testMinutesLexer,{     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("39° 05.7584' -94° 34.4048'");     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39", 0, 3), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.MIN, "05.7584", 4, 8), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.MIN, "34.4048", 0, 0));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/andreynovikov/trekarta.git,CoordinatesParserTest,testSecondsLexer,{     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("39° 05' 45.503\" -94° 34' 24.290\"");     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "39", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.MIN, "05", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.SEC, "45.503", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.H_PREFIX, "-", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.DEG, "94", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.MIN, "34", 0, 0), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.SEC, "24.290", 0, 0));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/andreynovikov/trekarta.git,CoordinatesParserTest,testUtmLexer,{     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> actual = mobi.maptrek.util.CoordinatesParser.lex("15N 363936 4328605");     java.util.List<mobi.maptrek.util.CoordinatesParser.Token> expected = java.util.Arrays.asList(new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.UTM_ZONE, "15N", 0, 3), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.UTM_EASTING, "363936", 4, 6), new mobi.maptrek.util.CoordinatesParser.Token(mobi.maptrek.util.CoordinatesParser.Type.UTM_NORTHING, "4328605", 11, 6));     org.junit.Assert.assertEquals(expected, actual); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test30Min,{     org.junit.Assert.assertEquals("<30m", format(addMinutes(this.now, -29))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test2Hours,{     org.junit.Assert.assertEquals("<2h", format(addMinutes(this.now, ((-2) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test3Hours,{     org.junit.Assert.assertEquals("<3h", format(addMinutes(this.now, ((-3) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test4Hours,{     org.junit.Assert.assertEquals("<4h", format(addMinutes(this.now, ((-4) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test5Hours,{     org.junit.Assert.assertEquals("<5h", format(addMinutes(this.now, ((-5) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test6Hours,{     org.junit.Assert.assertEquals("<6h", format(addMinutes(this.now, ((-6) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test12Hours,{     org.junit.Assert.assertEquals("<12h", format(addMinutes(this.now, ((-12) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test1Day,{     org.junit.Assert.assertEquals("<1d", format(addMinutes(this.now, ((-24) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,test2Days,{     org.junit.Assert.assertEquals("<2d", format(addMinutes(this.now, (((-2) * 24) * 60) + 1))); }
https://github.com/gelin/weather-notification.git,UpdateTimeFormatTest,testMore2Days,{     org.junit.Assert.assertEquals(">2d", format(addMinutes(this.now, ((-2) * 24) * 60))); }
https://github.com/gelin/weather-notification.git,WeatherConditionFormatTest,testEmptyCondition,{     ru.gelin.android.weather.SimpleWeatherCondition condition = new ru.gelin.android.weather.SimpleWeatherCondition();     ru.gelin.android.weather.notification.skin.impl.WeatherConditionFormat format = new ru.gelin.android.weather.notification.skin.impl.WeatherConditionFormat(context);     org.junit.Assert.assertEquals("Sky is clear", format.getText(condition)); }
https://github.com/gelin/weather-notification.git,AssetsTest,testAssetsExists,{     android.content.res.AssetManager assets = context.getAssets();     java.lang.String[] files = assets.list("");     java.lang.System.out.println(java.util.Arrays.asList(files));     org.junit.Assert.assertTrue(files.length > 0); }
https://github.com/gelin/weather-notification.git,ParcelableWeather2Test,testWriteRead2,{     ru.gelin.android.weather.Weather weather1 = ru.gelin.android.weather.notification.WeatherUtils.createOpenWeather(context);     android.os.Parcel parcel = android.os.Parcel.obtain();     ru.gelin.android.weather.notification.ParcelableWeather2 weather2 = new ru.gelin.android.weather.notification.ParcelableWeather2(weather1);     // weather2.writeToParcel(parcel, 0);     parcel.writeParcelable(weather2, 0);     int position = parcel.dataPosition();     parcel.setDataPosition(0);     // Weather weather3 = ParcelableWeather2.CREATOR.createFromParcel(parcel);     ru.gelin.android.weather.Weather weather3 = parcel.readParcelable(context.getClassLoader());     org.junit.Assert.assertEquals(position, parcel.dataPosition());// read the same data as wrote      ru.gelin.android.weather.notification.WeatherUtils.checkOpenWeather(weather3); }
https://github.com/gelin/weather-notification.git,ParcelableWeather2Test,testOldVersionRead,{     ru.gelin.android.weather.Weather weather1 = ru.gelin.android.weather.notification.WeatherUtils.createOpenWeather(context);     android.os.Parcel parcel = android.os.Parcel.obtain();     ru.gelin.android.weather.notification.ParcelableWeather weather2 = new ru.gelin.android.weather.notification.ParcelableWeather(weather1);     weather2.writeToParcel(parcel, 0);     parcel.setDataPosition(0);     ru.gelin.android.weather.Weather weather3 = ru.gelin.android.weather.notification.ParcelableWeather2.CREATOR.createFromParcel(parcel);     // WeatherUtils.checkWeather(weather3, WeatherUtils.Version.V_0_2);  //ideal :(     org.junit.Assert.assertTrue(weather3.isEmpty()); }
https://github.com/gelin/weather-notification.git,ParcelableWeather2Test,testParcel,{     android.os.Parcel parcel = android.os.Parcel.obtain();     parcel.writeString("test");     parcel.setDataPosition(0);     org.junit.Assert.assertEquals("test", parcel.readString()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapApiKeyTest,testDefaultKey,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey key = new ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey(context);     // assertEquals(OpenWeatherMapApiKey.DEFAULT_API_KEY, key.getKey());     org.junit.Assert.assertTrue(key.getKey().startsWith("4aba43")); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapApiKeyTest,testKeyFromPreferences,{     android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context);     prefs.edit().putString(ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey.PREFERENCE_KEY, "test_key").commit();     ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey key = new ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey(context);     org.junit.Assert.assertEquals("test_key", key.getKey());     prefs.edit().remove(ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey.PREFERENCE_KEY).commit(); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapApiKeyTest,testEmptyKeyInPreferences,{     android.content.SharedPreferences prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(context);     prefs.edit().putString(ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey.PREFERENCE_KEY, "").commit();     ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey key = new ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey(context);     org.junit.Assert.assertTrue(key.getKey().startsWith("4aba43"));     prefs.edit().remove(ru.gelin.android.weather.openweathermap.OpenWeatherMapApiKey.PREFERENCE_KEY).commit(); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetTemperature,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     ru.gelin.android.weather.WeatherCondition condition = weather.getConditions().get(0);     org.junit.Assert.assertEquals(16, condition.getTemperature(ru.gelin.android.weather.TemperatureUnit.C).getCurrent()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetQueryTime,{     long now = java.lang.System.currentTimeMillis();     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     org.junit.Assert.assertTrue(now <= weather.getQueryTime().getTime()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetConditionText,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     ru.gelin.android.weather.WeatherCondition condition = weather.getConditions().get(0);     java.lang.String text = condition.getConditionText();     org.junit.Assert.assertEquals("Scattered clouds", text); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetLowTemperature,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     ru.gelin.android.weather.WeatherCondition condition = weather.getConditions().get(0);     org.junit.Assert.assertEquals(16, condition.getTemperature(ru.gelin.android.weather.TemperatureUnit.C).getLow()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetHighTemperature,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     ru.gelin.android.weather.WeatherCondition condition = weather.getConditions().get(0);     org.junit.Assert.assertEquals(16, condition.getTemperature(ru.gelin.android.weather.TemperatureUnit.C).getHigh()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetTemperatureUnit,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     ru.gelin.android.weather.WeatherCondition condition = weather.getConditions().get(0);     org.junit.Assert.assertEquals(ru.gelin.android.weather.TemperatureUnit.K, condition.getTemperature().getTemperatureUnit()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetCityID,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     org.junit.Assert.assertEquals(1496153, weather.getCityId()); }
https://github.com/gelin/weather-notification.git,OpenWeatherMapWeatherTest,testGetForecastURL,{     ru.gelin.android.weather.openweathermap.OpenWeatherMapWeather weather = ru.gelin.android.weather.openweathermap.WeatherUtils.createIncompleteOpenWeather(context);     org.junit.Assert.assertEquals(new java.net.URL("https://openweathermap.org/city/1496153"), weather.getForecastURL()); }
https://github.com/gelin/weather-notification.git,PrecipitationPeriodTest,testValueOfInt1,{     ru.gelin.android.weather.PrecipitationPeriod period = ru.gelin.android.weather.PrecipitationPeriod.valueOf(1);     org.junit.Assert.assertEquals(ru.gelin.android.weather.PrecipitationPeriod.PERIOD_1H, period); }
https://github.com/gelin/weather-notification.git,PrecipitationPeriodTest,testValueOfInt3,{     ru.gelin.android.weather.PrecipitationPeriod period = ru.gelin.android.weather.PrecipitationPeriod.valueOf(3);     org.junit.Assert.assertEquals(ru.gelin.android.weather.PrecipitationPeriod.PERIOD_3H, period); }
https://github.com/gelin/weather-notification.git,PrecipitationPeriodTest,testValueOfInt2,{     try {         ru.gelin.android.weather.PrecipitationPeriod.valueOf(2);         org.junit.Assert.fail();     } catch (java.lang.IllegalArgumentException e) {         // pass     } }
https://github.com/gelin/weather-notification.git,SimplePrecipitationTest,testSetGetValue,{     ru.gelin.android.weather.SimplePrecipitation precipitation = new ru.gelin.android.weather.SimplePrecipitation(ru.gelin.android.weather.PrecipitationUnit.MM);     precipitation.setValue(3.0F, ru.gelin.android.weather.PrecipitationPeriod.PERIOD_3H);     org.junit.Assert.assertEquals(1.0F, precipitation.getValue(ru.gelin.android.weather.PrecipitationPeriod.PERIOD_1H), 0.001); }
https://github.com/gelin/weather-notification.git,SimpleWindTest,testConvertText,{     ru.gelin.android.weather.SimpleWind wind = new ru.gelin.android.weather.SimpleWind(ru.gelin.android.weather.WindSpeedUnit.MPH);     wind.setText("text");     ru.gelin.android.weather.SimpleWind wind2 = wind.convert(ru.gelin.android.weather.WindSpeedUnit.MPS);     org.junit.Assert.assertEquals("text", wind2.getText()); }
